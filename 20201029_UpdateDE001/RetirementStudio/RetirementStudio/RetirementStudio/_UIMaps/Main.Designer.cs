// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RetirementStudio._UIMaps.MainClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class Main
    {
        
        #region Properties
        public wRetirementStudio wRetirementStudio
        {
            get
            {
                if ((this.mwRetirementStudio == null))
                {
                    this.mwRetirementStudio = new wRetirementStudio();
                }
                return this.mwRetirementStudio;
            }
        }
        
        public wPMTool_Client wPMTool_Client
        {
            get
            {
                if ((this.mwPMTool_Client == null))
                {
                    this.mwPMTool_Client = new wPMTool_Client();
                }
                return this.mwPMTool_Client;
            }
        }
        
        public wPMTool_DeleteClient1 wPMTool_DeleteClient
        {
            get
            {
                if ((this.mwPMTool_DeleteClient == null))
                {
                    this.mwPMTool_DeleteClient = new wPMTool_DeleteClient1();
                }
                return this.mwPMTool_DeleteClient;
            }
        }
        
        public wPMTool_CountrySelection wPMTool_CountrySelection
        {
            get
            {
                if ((this.mwPMTool_CountrySelection == null))
                {
                    this.mwPMTool_CountrySelection = new wPMTool_CountrySelection();
                }
                return this.mwPMTool_CountrySelection;
            }
        }
        
        public wPMTool_Plan wPMTool_Plan
        {
            get
            {
                if ((this.mwPMTool_Plan == null))
                {
                    this.mwPMTool_Plan = new wPMTool_Plan();
                }
                return this.mwPMTool_Plan;
            }
        }
        
        public wHome_DataServiceProperties wHome_DataServiceProperties
        {
            get
            {
                if ((this.mwHome_DataServiceProperties == null))
                {
                    this.mwHome_DataServiceProperties = new wHome_DataServiceProperties();
                }
                return this.mwHome_DataServiceProperties;
            }
        }
        
        public wHome_Confirm wHome_Confirm
        {
            get
            {
                if ((this.mwHome_Confirm == null))
                {
                    this.mwHome_Confirm = new wHome_Confirm();
                }
                return this.mwHome_Confirm;
            }
        }
        
        public wFileOpen wFileOpen
        {
            get
            {
                if ((this.mwFileOpen == null))
                {
                    this.mwFileOpen = new wFileOpen();
                }
                return this.mwFileOpen;
            }
        }
        
        public wGRSLogin wGRSLogin
        {
            get
            {
                if ((this.mwGRSLogin == null))
                {
                    this.mwGRSLogin = new wGRSLogin();
                }
                return this.mwGRSLogin;
            }
        }
        
        public wGRSDataInput wGRSDataInput
        {
            get
            {
                if ((this.mwGRSDataInput == null))
                {
                    this.mwGRSDataInput = new wGRSDataInput();
                }
                return this.mwGRSDataInput;
            }
        }
        
        public wHome_ServiceProperties wHome_ServiceProperties
        {
            get
            {
                if ((this.mwHome_ServiceProperties == null))
                {
                    this.mwHome_ServiceProperties = new wHome_ServiceProperties();
                }
                return this.mwHome_ServiceProperties;
            }
        }
        
        public wFlowTree_ContextMenu wFlowTree_ContextMenu
        {
            get
            {
                if ((this.mwFlowTree_ContextMenu == null))
                {
                    this.mwFlowTree_ContextMenu = new wFlowTree_ContextMenu();
                }
                return this.mwFlowTree_ContextMenu;
            }
        }
        
        public wRunOptions wRunOptions
        {
            get
            {
                if ((this.mwRunOptions == null))
                {
                    this.mwRunOptions = new wRunOptions();
                }
                return this.mwRunOptions;
            }
        }
        
        public wEnterpriseRunSubmitted wEnterpriseRunSubmitted
        {
            get
            {
                if ((this.mwEnterpriseRunSubmitted == null))
                {
                    this.mwEnterpriseRunSubmitted = new wEnterpriseRunSubmitted();
                }
                return this.mwEnterpriseRunSubmitted;
            }
        }
        
        public wValNodeProperties wValNodeProperties
        {
            get
            {
                if ((this.mwValNodeProperties == null))
                {
                    this.mwValNodeProperties = new wValNodeProperties();
                }
                return this.mwValNodeProperties;
            }
        }
        
        public wFundingCalculationRunCompleted wFundingCalculationRunCompleted
        {
            get
            {
                if ((this.mwFundingCalculationRunCompleted == null))
                {
                    this.mwFundingCalculationRunCompleted = new wFundingCalculationRunCompleted();
                }
                return this.mwFundingCalculationRunCompleted;
            }
        }
        
        public wGenerateNewReport wGenerateNewReport
        {
            get
            {
                if ((this.mwGenerateNewReport == null))
                {
                    this.mwGenerateNewReport = new wGenerateNewReport();
                }
                return this.mwGenerateNewReport;
            }
        }
        
        public wConfirmRedate wConfirmRedate
        {
            get
            {
                if ((this.mwConfirmRedate == null))
                {
                    this.mwConfirmRedate = new wConfirmRedate();
                }
                return this.mwConfirmRedate;
            }
        }
        
        public wWord_Popup wWord_Popup
        {
            get
            {
                if ((this.mwWord_Popup == null))
                {
                    this.mwWord_Popup = new wWord_Popup();
                }
                return this.mwWord_Popup;
            }
        }
        
        public wParameters wParameters
        {
            get
            {
                if ((this.mwParameters == null))
                {
                    this.mwParameters = new wParameters();
                }
                return this.mwParameters;
            }
        }
        
        public wSnapshotRepublished wSnapshotRepublished
        {
            get
            {
                if ((this.mwSnapshotRepublished == null))
                {
                    this.mwSnapshotRepublished = new wSnapshotRepublished();
                }
                return this.mwSnapshotRepublished;
            }
        }
        
        public wParentNodePFVSModified wParentNodePFVSModified
        {
            get
            {
                if ((this.mwParentNodePFVSModified == null))
                {
                    this.mwParentNodePFVSModified = new wParentNodePFVSModified();
                }
                return this.mwParentNodePFVSModified;
            }
        }
        
        public wCascadingUnlock wCascadingUnlock
        {
            get
            {
                if ((this.mwCascadingUnlock == null))
                {
                    this.mwCascadingUnlock = new wCascadingUnlock();
                }
                return this.mwCascadingUnlock;
            }
        }
        
        public wRunSpecialPaymentTool_CA wRunSpecialPaymentTool_CA
        {
            get
            {
                if ((this.mwRunSpecialPaymentTool_CA == null))
                {
                    this.mwRunSpecialPaymentTool_CA = new wRunSpecialPaymentTool_CA();
                }
                return this.mwRunSpecialPaymentTool_CA;
            }
        }
        
        public wCopyProvisionSet wCopyProvisionSet
        {
            get
            {
                if ((this.mwCopyProvisionSet == null))
                {
                    this.mwCopyProvisionSet = new wCopyProvisionSet();
                }
                return this.mwCopyProvisionSet;
            }
        }
        
        public wActuarialReport wActuarialReport
        {
            get
            {
                if ((this.mwActuarialReport == null))
                {
                    this.mwActuarialReport = new wActuarialReport();
                }
                return this.mwActuarialReport;
            }
        }
        
        public wFutureValSubmission wFutureValSubmission
        {
            get
            {
                if ((this.mwFutureValSubmission == null))
                {
                    this.mwFutureValSubmission = new wFutureValSubmission();
                }
                return this.mwFutureValSubmission;
            }
        }
        
        public wWord_NoCurrentProfile wWord_NoCurrentProfile
        {
            get
            {
                if ((this.mwWord_NoCurrentProfile == null))
                {
                    this.mwWord_NoCurrentProfile = new wWord_NoCurrentProfile();
                }
                return this.mwWord_NoCurrentProfile;
            }
        }
        
        public wWord_Profiles wWord_Profiles
        {
            get
            {
                if ((this.mwWord_Profiles == null))
                {
                    this.mwWord_Profiles = new wWord_Profiles();
                }
                return this.mwWord_Profiles;
            }
        }
        
        public wMMCOATemplateFailure wMMCOATemplateFailure
        {
            get
            {
                if ((this.mwMMCOATemplateFailure == null))
                {
                    this.mwMMCOATemplateFailure = new wMMCOATemplateFailure();
                }
                return this.mwMMCOATemplateFailure;
            }
        }
        
        public wWord wWord
        {
            get
            {
                if ((this.mwWord == null))
                {
                    this.mwWord = new wWord();
                }
                return this.mwWord;
            }
        }
        
        public wWord_SaveAs wWord_SaveAs
        {
            get
            {
                if ((this.mwWord_SaveAs == null))
                {
                    this.mwWord_SaveAs = new wWord_SaveAs();
                }
                return this.mwWord_SaveAs;
            }
        }
        
        public wUnlockFundingCalculator wUnlockFundingCalculator
        {
            get
            {
                if ((this.mwUnlockFundingCalculator == null))
                {
                    this.mwUnlockFundingCalculator = new wUnlockFundingCalculator();
                }
                return this.mwUnlockFundingCalculator;
            }
        }
        
        public wPMTool_TeilbereichAlle wPMTool_TeilbereichAlle
        {
            get
            {
                if ((this.mwPMTool_TeilbereichAlle == null))
                {
                    this.mwPMTool_TeilbereichAlle = new wPMTool_TeilbereichAlle();
                }
                return this.mwPMTool_TeilbereichAlle;
            }
        }
        
        public wCreateNewVO wCreateNewVO
        {
            get
            {
                if ((this.mwCreateNewVO == null))
                {
                    this.mwCreateNewVO = new wCreateNewVO();
                }
                return this.mwCreateNewVO;
            }
        }
        
        public wPMTool_Plan_UK wPMTool_Plan_UK
        {
            get
            {
                if ((this.mwPMTool_Plan_UK == null))
                {
                    this.mwPMTool_Plan_UK = new wPMTool_Plan_UK();
                }
                return this.mwPMTool_Plan_UK;
            }
        }
        
        public wCreateNewBenefitSet wCreateNewBenefitSet
        {
            get
            {
                if ((this.mwCreateNewBenefitSet == null))
                {
                    this.mwCreateNewBenefitSet = new wCreateNewBenefitSet();
                }
                return this.mwCreateNewBenefitSet;
            }
        }
        
        public wDependencyManager wDependencyManager
        {
            get
            {
                if ((this.mwDependencyManager == null))
                {
                    this.mwDependencyManager = new wDependencyManager();
                }
                return this.mwDependencyManager;
            }
        }
        
        public wDependencyManager_Popup wDependencyManager_Popup
        {
            get
            {
                if ((this.mwDependencyManager_Popup == null))
                {
                    this.mwDependencyManager_Popup = new wDependencyManager_Popup();
                }
                return this.mwDependencyManager_Popup;
            }
        }
        
        public wCopyParticipantDataSet wCopyParticipantDataSet
        {
            get
            {
                if ((this.mwCopyParticipantDataSet == null))
                {
                    this.mwCopyParticipantDataSet = new wCopyParticipantDataSet();
                }
                return this.mwCopyParticipantDataSet;
            }
        }
        
        public wRegionAndLanguage wRegionAndLanguage
        {
            get
            {
                if ((this.mwRegionAndLanguage == null))
                {
                    this.mwRegionAndLanguage = new wRegionAndLanguage();
                }
                return this.mwRegionAndLanguage;
            }
        }
        
        public wCopyServiceSchemaAndProperties wCopyServiceSchemaAndProperties
        {
            get
            {
                if ((this.mwCopyServiceSchemaAndProperties == null))
                {
                    this.mwCopyServiceSchemaAndProperties = new wCopyServiceSchemaAndProperties();
                }
                return this.mwCopyServiceSchemaAndProperties;
            }
        }
        
        public wAddSensitivityValuationNode wAddSensitivityValuationNode
        {
            get
            {
                if ((this.mwAddSensitivityValuationNode == null))
                {
                    this.mwAddSensitivityValuationNode = new wAddSensitivityValuationNode();
                }
                return this.mwAddSensitivityValuationNode;
            }
        }
        
        public wDeleteValuationNode wDeleteValuationNode
        {
            get
            {
                if ((this.mwDeleteValuationNode == null))
                {
                    this.mwDeleteValuationNode = new wDeleteValuationNode();
                }
                return this.mwDeleteValuationNode;
            }
        }
        
        public wIndividualOutputFieldDefinition wIndividualOutputFieldDefinition
        {
            get
            {
                if ((this.mwIndividualOutputFieldDefinition == null))
                {
                    this.mwIndividualOutputFieldDefinition = new wIndividualOutputFieldDefinition();
                }
                return this.mwIndividualOutputFieldDefinition;
            }
        }
        
        public wParameterPrintComparison wParameterPrintComparison
        {
            get
            {
                if ((this.mwParameterPrintComparison == null))
                {
                    this.mwParameterPrintComparison = new wParameterPrintComparison();
                }
                return this.mwParameterPrintComparison;
            }
        }
        
        public wPDFMustBeCreated wPDFMustBeCreated
        {
            get
            {
                if ((this.mwPDFMustBeCreated == null))
                {
                    this.mwPDFMustBeCreated = new wPDFMustBeCreated();
                }
                return this.mwPDFMustBeCreated;
            }
        }
        
        public wBeyondCompare wBeyondCompare
        {
            get
            {
                if ((this.mwBeyondCompare == null))
                {
                    this.mwBeyondCompare = new wBeyondCompare();
                }
                return this.mwBeyondCompare;
            }
        }
        
        public wPMTool_PlanCanada wPMTool_PlanCanada
        {
            get
            {
                if ((this.mwPMTool_PlanCanada == null))
                {
                    this.mwPMTool_PlanCanada = new wPMTool_PlanCanada();
                }
                return this.mwPMTool_PlanCanada;
            }
        }
        
        public wCopyParticipantDataWarning wCopyParticipantDataWarning
        {
            get
            {
                if ((this.mwCopyParticipantDataWarning == null))
                {
                    this.mwCopyParticipantDataWarning = new wCopyParticipantDataWarning();
                }
                return this.mwCopyParticipantDataWarning;
            }
        }
        
        public wProvisionsProperties wProvisionsProperties
        {
            get
            {
                if ((this.mwProvisionsProperties == null))
                {
                    this.mwProvisionsProperties = new wProvisionsProperties();
                }
                return this.mwProvisionsProperties;
            }
        }
        
        public wMultipleNodeSelectio wMultipleNodeSelectio
        {
            get
            {
                if ((this.mwMultipleNodeSelectio == null))
                {
                    this.mwMultipleNodeSelectio = new wMultipleNodeSelectio();
                }
                return this.mwMultipleNodeSelectio;
            }
        }
        
        public wFutureValuationRunOptions wFutureValuationRunOptions
        {
            get
            {
                if ((this.mwFutureValuationRunOptions == null))
                {
                    this.mwFutureValuationRunOptions = new wFutureValuationRunOptions();
                }
                return this.mwFutureValuationRunOptions;
            }
        }
        
        public wFundingCalculationRun wFundingCalculationRun
        {
            get
            {
                if ((this.mwFundingCalculationRun == null))
                {
                    this.mwFundingCalculationRun = new wFundingCalculationRun();
                }
                return this.mwFundingCalculationRun;
            }
        }
        
        public wHome_ServiceNotes wHome_ServiceNotes
        {
            get
            {
                if ((this.mwHome_ServiceNotes == null))
                {
                    this.mwHome_ServiceNotes = new wHome_ServiceNotes();
                }
                return this.mwHome_ServiceNotes;
            }
        }
        
        public wFuturevaluationRun wFuturevaluationRun
        {
            get
            {
                if ((this.mwFuturevaluationRun == null))
                {
                    this.mwFuturevaluationRun = new wFuturevaluationRun();
                }
                return this.mwFuturevaluationRun;
            }
        }
        
        public wMicrosoftExcelCompatibility wMicrosoftExcelCompatibility
        {
            get
            {
                if ((this.mwMicrosoftExcelCompatibility == null))
                {
                    this.mwMicrosoftExcelCompatibility = new wMicrosoftExcelCompatibility();
                }
                return this.mwMicrosoftExcelCompatibility;
            }
        }
        
        public wRetirementStudioHelp wRetirementStudioHelp
        {
            get
            {
                if ((this.mwRetirementStudioHelp == null))
                {
                    this.mwRetirementStudioHelp = new wRetirementStudioHelp();
                }
                return this.mwRetirementStudioHelp;
            }
        }
        
        public wReportBuilderDataSource wReportBuilderDataSource
        {
            get
            {
                if ((this.mwReportBuilderDataSource == null))
                {
                    this.mwReportBuilderDataSource = new wReportBuilderDataSource();
                }
                return this.mwReportBuilderDataSource;
            }
        }
        
        public wIE wIE
        {
            get
            {
                if ((this.mwIE == null))
                {
                    this.mwIE = new wIE();
                }
                return this.mwIE;
            }
        }
        
        public wSQLReportBuilder wSQLReportBuilder
        {
            get
            {
                if ((this.mwSQLReportBuilder == null))
                {
                    this.mwSQLReportBuilder = new wSQLReportBuilder();
                }
                return this.mwSQLReportBuilder;
            }
        }
        
        public wRetirementStudio_ERComplete wRetirementStudio_ERComplete
        {
            get
            {
                if ((this.mwRetirementStudio_ERComplete == null))
                {
                    this.mwRetirementStudio_ERComplete = new wRetirementStudio_ERComplete();
                }
                return this.mwRetirementStudio_ERComplete;
            }
        }
        
        public wRegionAndLanguage_Win10 wRegionAndLanguage_Win10
        {
            get
            {
                if ((this.mwRegionAndLanguage_Win10 == null))
                {
                    this.mwRegionAndLanguage_Win10 = new wRegionAndLanguage_Win10();
                }
                return this.mwRegionAndLanguage_Win10;
            }
        }
        
        public wServiceInstanceLocked wServiceInstanceLocked
        {
            get
            {
                if ((this.mwServiceInstanceLocked == null))
                {
                    this.mwServiceInstanceLocked = new wServiceInstanceLocked();
                }
                return this.mwServiceInstanceLocked;
            }
        }
        
        public wValidationConfirm wValidationConfirm
        {
            get
            {
                if ((this.mwValidationConfirm == null))
                {
                    this.mwValidationConfirm = new wValidationConfirm();
                }
                return this.mwValidationConfirm;
            }
        }
        
        public wValidationResultsSummary wValidationResultsSummary
        {
            get
            {
                if ((this.mwValidationResultsSummary == null))
                {
                    this.mwValidationResultsSummary = new wValidationResultsSummary();
                }
                return this.mwValidationResultsSummary;
            }
        }
        
        public wFVPopulationProjectRunOption wFVPopulationProjectRunOption
        {
            get
            {
                if ((this.mwFVPopulationProjectRunOption == null))
                {
                    this.mwFVPopulationProjectRunOption = new wFVPopulationProjectRunOption();
                }
                return this.mwFVPopulationProjectRunOption;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public wMicrosoftWord wMicrosoftWord
        {
            get
            {
                if ((this.mwMicrosoftWord == null))
                {
                    this.mwMicrosoftWord = new wMicrosoftWord();
                }
                return this.mwMicrosoftWord;
            }
        }
        
        public w2DCashflows w2DCashflows
        {
            get
            {
                if ((this.mw2DCashflows == null))
                {
                    this.mw2DCashflows = new w2DCashflows();
                }
                return this.mw2DCashflows;
            }
        }
        
        public wPayoutProjectionbyPa wPayoutProjectionbyPa
        {
            get
            {
                if ((this.mwPayoutProjectionbyPa == null))
                {
                    this.mwPayoutProjectionbyPa = new wPayoutProjectionbyPa();
                }
                return this.mwPayoutProjectionbyPa;
            }
        }
        #endregion
        
        #region Fields
        private wRetirementStudio mwRetirementStudio;
        
        private wPMTool_Client mwPMTool_Client;
        
        private wPMTool_DeleteClient1 mwPMTool_DeleteClient;
        
        private wPMTool_CountrySelection mwPMTool_CountrySelection;
        
        private wPMTool_Plan mwPMTool_Plan;
        
        private wHome_DataServiceProperties mwHome_DataServiceProperties;
        
        private wHome_Confirm mwHome_Confirm;
        
        private wFileOpen mwFileOpen;
        
        private wGRSLogin mwGRSLogin;
        
        private wGRSDataInput mwGRSDataInput;
        
        private wHome_ServiceProperties mwHome_ServiceProperties;
        
        private wFlowTree_ContextMenu mwFlowTree_ContextMenu;
        
        private wRunOptions mwRunOptions;
        
        private wEnterpriseRunSubmitted mwEnterpriseRunSubmitted;
        
        private wValNodeProperties mwValNodeProperties;
        
        private wFundingCalculationRunCompleted mwFundingCalculationRunCompleted;
        
        private wGenerateNewReport mwGenerateNewReport;
        
        private wConfirmRedate mwConfirmRedate;
        
        private wWord_Popup mwWord_Popup;
        
        private wParameters mwParameters;
        
        private wSnapshotRepublished mwSnapshotRepublished;
        
        private wParentNodePFVSModified mwParentNodePFVSModified;
        
        private wCascadingUnlock mwCascadingUnlock;
        
        private wRunSpecialPaymentTool_CA mwRunSpecialPaymentTool_CA;
        
        private wCopyProvisionSet mwCopyProvisionSet;
        
        private wActuarialReport mwActuarialReport;
        
        private wFutureValSubmission mwFutureValSubmission;
        
        private wWord_NoCurrentProfile mwWord_NoCurrentProfile;
        
        private wWord_Profiles mwWord_Profiles;
        
        private wMMCOATemplateFailure mwMMCOATemplateFailure;
        
        private wWord mwWord;
        
        private wWord_SaveAs mwWord_SaveAs;
        
        private wUnlockFundingCalculator mwUnlockFundingCalculator;
        
        private wPMTool_TeilbereichAlle mwPMTool_TeilbereichAlle;
        
        private wCreateNewVO mwCreateNewVO;
        
        private wPMTool_Plan_UK mwPMTool_Plan_UK;
        
        private wCreateNewBenefitSet mwCreateNewBenefitSet;
        
        private wDependencyManager mwDependencyManager;
        
        private wDependencyManager_Popup mwDependencyManager_Popup;
        
        private wCopyParticipantDataSet mwCopyParticipantDataSet;
        
        private wRegionAndLanguage mwRegionAndLanguage;
        
        private wCopyServiceSchemaAndProperties mwCopyServiceSchemaAndProperties;
        
        private wAddSensitivityValuationNode mwAddSensitivityValuationNode;
        
        private wDeleteValuationNode mwDeleteValuationNode;
        
        private wIndividualOutputFieldDefinition mwIndividualOutputFieldDefinition;
        
        private wParameterPrintComparison mwParameterPrintComparison;
        
        private wPDFMustBeCreated mwPDFMustBeCreated;
        
        private wBeyondCompare mwBeyondCompare;
        
        private wPMTool_PlanCanada mwPMTool_PlanCanada;
        
        private wCopyParticipantDataWarning mwCopyParticipantDataWarning;
        
        private wProvisionsProperties mwProvisionsProperties;
        
        private wMultipleNodeSelectio mwMultipleNodeSelectio;
        
        private wFutureValuationRunOptions mwFutureValuationRunOptions;
        
        private wFundingCalculationRun mwFundingCalculationRun;
        
        private wHome_ServiceNotes mwHome_ServiceNotes;
        
        private wFuturevaluationRun mwFuturevaluationRun;
        
        private wMicrosoftExcelCompatibility mwMicrosoftExcelCompatibility;
        
        private wRetirementStudioHelp mwRetirementStudioHelp;
        
        private wReportBuilderDataSource mwReportBuilderDataSource;
        
        private wIE mwIE;
        
        private wSQLReportBuilder mwSQLReportBuilder;
        
        private wRetirementStudio_ERComplete mwRetirementStudio_ERComplete;
        
        private wRegionAndLanguage_Win10 mwRegionAndLanguage_Win10;
        
        private wServiceInstanceLocked mwServiceInstanceLocked;
        
        private wValidationConfirm mwValidationConfirm;
        
        private wValidationResultsSummary mwValidationResultsSummary;
        
        private wFVPopulationProjectRunOption mwFVPopulationProjectRunOption;
        
        private UIItemWindow mUIItemWindow;
        
        private wMicrosoftWord mwMicrosoftWord;
        
        private w2DCashflows mw2DCashflows;
        
        private wPayoutProjectionbyPa mwPayoutProjectionbyPa;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudio : WinWindow
    {
        
        public wRetirementStudio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wHome_ServiceTab wHome_ServiceTab
        {
            get
            {
                if ((this.mwHome_ServiceTab == null))
                {
                    this.mwHome_ServiceTab = new wHome_ServiceTab(this);
                }
                return this.mwHome_ServiceTab;
            }
        }
        
        public wHome_Tab wHome_Tab
        {
            get
            {
                if ((this.mwHome_Tab == null))
                {
                    this.mwHome_Tab = new wHome_Tab(this);
                }
                return this.mwHome_Tab;
            }
        }
        
        public tbHome_TitleBar tbHome_TitleBar
        {
            get
            {
                if ((this.mtbHome_TitleBar == null))
                {
                    this.mtbHome_TitleBar = new tbHome_TitleBar(this);
                }
                return this.mtbHome_TitleBar;
            }
        }
        
        public wHome_AllServices wHome_AllServices
        {
            get
            {
                if ((this.mwHome_AllServices == null))
                {
                    this.mwHome_AllServices = new wHome_AllServices(this);
                }
                return this.mwHome_AllServices;
            }
        }
        
        public wHome_TypeClientName wHome_TypeClientName
        {
            get
            {
                if ((this.mwHome_TypeClientName == null))
                {
                    this.mwHome_TypeClientName = new wHome_TypeClientName(this);
                }
                return this.mwHome_TypeClientName;
            }
        }
        
        public wHome_RightPane wHome_RightPane
        {
            get
            {
                if ((this.mwHome_RightPane == null))
                {
                    this.mwHome_RightPane = new wHome_RightPane(this);
                }
                return this.mwHome_RightPane;
            }
        }
        
        public wPMTool_AddClient wPMTool_AddClient
        {
            get
            {
                if ((this.mwPMTool_AddClient == null))
                {
                    this.mwPMTool_AddClient = new wPMTool_AddClient(this);
                }
                return this.mwPMTool_AddClient;
            }
        }
        
        public wPMTool_TypeClientName wPMTool_TypeClientName
        {
            get
            {
                if ((this.mwPMTool_TypeClientName == null))
                {
                    this.mwPMTool_TypeClientName = new wPMTool_TypeClientName(this);
                }
                return this.mwPMTool_TypeClientName;
            }
        }
        
        public wPMTool_AddPlan wPMTool_AddPlan
        {
            get
            {
                if ((this.mwPMTool_AddPlan == null))
                {
                    this.mwPMTool_AddPlan = new wPMTool_AddPlan(this);
                }
                return this.mwPMTool_AddPlan;
            }
        }
        
        public wPMTool_DeleteClient wPMTool_DeleteClient
        {
            get
            {
                if ((this.mwPMTool_DeleteClient == null))
                {
                    this.mwPMTool_DeleteClient = new wPMTool_DeleteClient(this);
                }
                return this.mwPMTool_DeleteClient;
            }
        }
        
        public wPMTool_RightPane wPMTool_RightPane
        {
            get
            {
                if ((this.mwPMTool_RightPane == null))
                {
                    this.mwPMTool_RightPane = new wPMTool_RightPane(this);
                }
                return this.mwPMTool_RightPane;
            }
        }
        
        public wPMTool_TreeView wPMTool_TreeView
        {
            get
            {
                if ((this.mwPMTool_TreeView == null))
                {
                    this.mwPMTool_TreeView = new wPMTool_TreeView(this);
                }
                return this.mwPMTool_TreeView;
            }
        }
        
        public wHome_LeftPane wHome_LeftPane
        {
            get
            {
                if ((this.mwHome_LeftPane == null))
                {
                    this.mwHome_LeftPane = new wHome_LeftPane(this);
                }
                return this.mwHome_LeftPane;
            }
        }
        
        public wHome_AddServiceInstance wHome_AddServiceInstance
        {
            get
            {
                if ((this.mwHome_AddServiceInstance == null))
                {
                    this.mwHome_AddServiceInstance = new wHome_AddServiceInstance(this);
                }
                return this.mwHome_AddServiceInstance;
            }
        }
        
        public wHome_TableView wHome_TableView
        {
            get
            {
                if ((this.mwHome_TableView == null))
                {
                    this.mwHome_TableView = new wHome_TableView(this);
                }
                return this.mwHome_TableView;
            }
        }
        
        public wHome_ToolBar_Top wHome_ToolBar_Top
        {
            get
            {
                if ((this.mwHome_ToolBar_Top == null))
                {
                    this.mwHome_ToolBar_Top = new wHome_ToolBar_Top(this);
                }
                return this.mwHome_ToolBar_Top;
            }
        }
        
        public wFlowTree wFlowTree
        {
            get
            {
                if ((this.mwFlowTree == null))
                {
                    this.mwFlowTree = new wFlowTree(this);
                }
                return this.mwFlowTree;
            }
        }
        
        public wRunStatus_Refresh wRunStatus_Refresh
        {
            get
            {
                if ((this.mwRunStatus_Refresh == null))
                {
                    this.mwRunStatus_Refresh = new wRunStatus_Refresh(this);
                }
                return this.mwRunStatus_Refresh;
            }
        }
        
        public wRunStatus_FPGrid wRunStatus_FPGrid
        {
            get
            {
                if ((this.mwRunStatus_FPGrid == null))
                {
                    this.mwRunStatus_FPGrid = new wRunStatus_FPGrid(this);
                }
                return this.mwRunStatus_FPGrid;
            }
        }
        
        public wAsset_NewWorkSpace wAsset_NewWorkSpace
        {
            get
            {
                if ((this.mwAsset_NewWorkSpace == null))
                {
                    this.mwAsset_NewWorkSpace = new wAsset_NewWorkSpace(this);
                }
                return this.mwAsset_NewWorkSpace;
            }
        }
        
        public wAsset_WorkSapce_FPGrid wAsset_WorkSapce_FPGrid
        {
            get
            {
                if ((this.mwAsset_WorkSapce_FPGrid == null))
                {
                    this.mwAsset_WorkSapce_FPGrid = new wAsset_WorkSapce_FPGrid(this);
                }
                return this.mwAsset_WorkSapce_FPGrid;
            }
        }
        
        public wMenuBar wMenuBar
        {
            get
            {
                if ((this.mwMenuBar == null))
                {
                    this.mwMenuBar = new wMenuBar(this);
                }
                return this.mwMenuBar;
            }
        }
        
        public wTableSetup_FPGrid wTableSetup_FPGrid
        {
            get
            {
                if ((this.mwTableSetup_FPGrid == null))
                {
                    this.mwTableSetup_FPGrid = new wTableSetup_FPGrid(this);
                }
                return this.mwTableSetup_FPGrid;
            }
        }
        
        public wEntrySetup_FPGrid wEntrySetup_FPGrid
        {
            get
            {
                if ((this.mwEntrySetup_FPGrid == null))
                {
                    this.mwEntrySetup_FPGrid = new wEntrySetup_FPGrid(this);
                }
                return this.mwEntrySetup_FPGrid;
            }
        }
        
        public wEntrySetup_Tab wEntrySetup_Tab
        {
            get
            {
                if ((this.mwEntrySetup_Tab == null))
                {
                    this.mwEntrySetup_Tab = new wEntrySetup_Tab(this);
                }
                return this.mwEntrySetup_Tab;
            }
        }
        
        public wEntrySetup_Rates wEntrySetup_Rates
        {
            get
            {
                if ((this.mwEntrySetup_Rates == null))
                {
                    this.mwEntrySetup_Rates = new wEntrySetup_Rates(this);
                }
                return this.mwEntrySetup_Rates;
            }
        }
        
        public wFlowTreeWin wFlowTreeWin
        {
            get
            {
                if ((this.mwFlowTreeWin == null))
                {
                    this.mwFlowTreeWin = new wFlowTreeWin(this);
                }
                return this.mwFlowTreeWin;
            }
        }
        
        public wRunStatus_Tab wRunStatus_Tab
        {
            get
            {
                if ((this.mwRunStatus_Tab == null))
                {
                    this.mwRunStatus_Tab = new wRunStatus_Tab(this);
                }
                return this.mwRunStatus_Tab;
            }
        }
        
        public wRunStatus_FPGrid_Bottom wRunStatus_FPGrid_Bottom
        {
            get
            {
                if ((this.mwRunStatus_FPGrid_Bottom == null))
                {
                    this.mwRunStatus_FPGrid_Bottom = new wRunStatus_FPGrid_Bottom(this);
                }
                return this.mwRunStatus_FPGrid_Bottom;
            }
        }
        
        public wAddVOtoRegistry wAddVOtoRegistry
        {
            get
            {
                if ((this.mwAddVOtoRegistry == null))
                {
                    this.mwAddVOtoRegistry = new wAddVOtoRegistry(this);
                }
                return this.mwAddVOtoRegistry;
            }
        }
        
        public wHome_Favorites wHome_Favorites
        {
            get
            {
                if ((this.mwHome_Favorites == null))
                {
                    this.mwHome_Favorites = new wHome_Favorites(this);
                }
                return this.mwHome_Favorites;
            }
        }
        
        public wCancelRun wCancelRun
        {
            get
            {
                if ((this.mwCancelRun == null))
                {
                    this.mwCancelRun = new wCancelRun(this);
                }
                return this.mwCancelRun;
            }
        }
        
        public wClientExplorer wClientExplorer
        {
            get
            {
                if ((this.mwClientExplorer == null))
                {
                    this.mwClientExplorer = new wClientExplorer(this);
                }
                return this.mwClientExplorer;
            }
        }
        
        public wClientExplorer_Favorites wClientExplorer_Favorites
        {
            get
            {
                if ((this.mwClientExplorer_Favorites == null))
                {
                    this.mwClientExplorer_Favorites = new wClientExplorer_Favorites(this);
                }
                return this.mwClientExplorer_Favorites;
            }
        }
        
        public wHome_TableView_ScrollDwn wHome_TableView_ScrollDwn
        {
            get
            {
                if ((this.mwHome_TableView_ScrollDwn == null))
                {
                    this.mwHome_TableView_ScrollDwn = new wHome_TableView_ScrollDwn(this);
                }
                return this.mwHome_TableView_ScrollDwn;
            }
        }
        #endregion
        
        #region Fields
        private wHome_ServiceTab mwHome_ServiceTab;
        
        private wHome_Tab mwHome_Tab;
        
        private tbHome_TitleBar mtbHome_TitleBar;
        
        private wHome_AllServices mwHome_AllServices;
        
        private wHome_TypeClientName mwHome_TypeClientName;
        
        private wHome_RightPane mwHome_RightPane;
        
        private wPMTool_AddClient mwPMTool_AddClient;
        
        private wPMTool_TypeClientName mwPMTool_TypeClientName;
        
        private wPMTool_AddPlan mwPMTool_AddPlan;
        
        private wPMTool_DeleteClient mwPMTool_DeleteClient;
        
        private wPMTool_RightPane mwPMTool_RightPane;
        
        private wPMTool_TreeView mwPMTool_TreeView;
        
        private wHome_LeftPane mwHome_LeftPane;
        
        private wHome_AddServiceInstance mwHome_AddServiceInstance;
        
        private wHome_TableView mwHome_TableView;
        
        private wHome_ToolBar_Top mwHome_ToolBar_Top;
        
        private wFlowTree mwFlowTree;
        
        private wRunStatus_Refresh mwRunStatus_Refresh;
        
        private wRunStatus_FPGrid mwRunStatus_FPGrid;
        
        private wAsset_NewWorkSpace mwAsset_NewWorkSpace;
        
        private wAsset_WorkSapce_FPGrid mwAsset_WorkSapce_FPGrid;
        
        private wMenuBar mwMenuBar;
        
        private wTableSetup_FPGrid mwTableSetup_FPGrid;
        
        private wEntrySetup_FPGrid mwEntrySetup_FPGrid;
        
        private wEntrySetup_Tab mwEntrySetup_Tab;
        
        private wEntrySetup_Rates mwEntrySetup_Rates;
        
        private wFlowTreeWin mwFlowTreeWin;
        
        private wRunStatus_Tab mwRunStatus_Tab;
        
        private wRunStatus_FPGrid_Bottom mwRunStatus_FPGrid_Bottom;
        
        private wAddVOtoRegistry mwAddVOtoRegistry;
        
        private wHome_Favorites mwHome_Favorites;
        
        private wCancelRun mwCancelRun;
        
        private wClientExplorer mwClientExplorer;
        
        private wClientExplorer_Favorites mwClientExplorer_Favorites;
        
        private wHome_TableView_ScrollDwn mwHome_TableView_ScrollDwn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_ServiceTab : WinWindow
    {
        
        public wHome_ServiceTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "toolStrip1";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tlbToolBar tlbToolBar
        {
            get
            {
                if ((this.mtlbToolBar == null))
                {
                    this.mtlbToolBar = new tlbToolBar(this);
                }
                return this.mtlbToolBar;
            }
        }
        #endregion
        
        #region Fields
        private tlbToolBar mtlbToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tlbToolBar : WinToolBar
    {
        
        public tlbToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnPMTools
        {
            get
            {
                if ((this.mbtnPMTools == null))
                {
                    this.mbtnPMTools = new WinButton(this);
                    #region Search Criteria
                    this.mbtnPMTools.SearchProperties[WinButton.PropertyNames.Name] = "PM Tools";
                    this.mbtnPMTools.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnPMTools;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnPMTools;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_Tab : WinWindow
    {
        
        public wHome_Tab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MainWorkspace";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage tabHome
        {
            get
            {
                if ((this.mtabHome == null))
                {
                    this.mtabHome = new WinTabPage(this);
                    #region Search Criteria
                    this.mtabHome.SearchProperties[WinTabPage.PropertyNames.Name] = "Home";
                    this.mtabHome.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtabHome;
            }
        }
        
        public WinTabPage tabPMTools
        {
            get
            {
                if ((this.mtabPMTools == null))
                {
                    this.mtabPMTools = new WinTabPage(this);
                    #region Search Criteria
                    this.mtabPMTools.SearchProperties[WinTabPage.PropertyNames.Name] = "PM Tools";
                    this.mtabPMTools.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtabPMTools;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mtabHome;
        
        private WinTabPage mtabPMTools;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tbHome_TitleBar : WinTitleBar
    {
        
        public tbHome_TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnClose
        {
            get
            {
                if ((this.mbtnClose == null))
                {
                    this.mbtnClose = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClose.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtnClose.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnClose.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnClose;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_AllServices : WinWindow
    {
        
        public wHome_AllServices(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trvClientExplorer";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tvTreeItem tvTreeItem
        {
            get
            {
                if ((this.mtvTreeItem == null))
                {
                    this.mtvTreeItem = new tvTreeItem(this);
                }
                return this.mtvTreeItem;
            }
        }
        
        public WinTree tvTree
        {
            get
            {
                if ((this.mtvTree == null))
                {
                    this.mtvTree = new WinTree(this);
                    #region Search Criteria
                    this.mtvTree.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtvTree.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtvTree;
            }
        }
        #endregion
        
        #region Fields
        private tvTreeItem mtvTreeItem;
        
        private WinTree mtvTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvTreeItem : WinTreeItem
    {
        
        public tvTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tvTreeItemSub1 tvTreeItemSub1
        {
            get
            {
                if ((this.mtvTreeItemSub1 == null))
                {
                    this.mtvTreeItemSub1 = new tvTreeItemSub1(this);
                }
                return this.mtvTreeItemSub1;
            }
        }
        #endregion
        
        #region Fields
        private tvTreeItemSub1 mtvTreeItemSub1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvTreeItemSub1 : WinTreeItem
    {
        
        public tvTreeItemSub1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTreeItem tvTreeItemSub2
        {
            get
            {
                if ((this.mtvTreeItemSub2 == null))
                {
                    this.mtvTreeItemSub2 = new WinTreeItem(this);
                    #region Search Criteria
                    this.mtvTreeItemSub2.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mtvTreeItemSub2.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mtvTreeItemSub2.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtvTreeItemSub2.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtvTreeItemSub2;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mtvTreeItemSub2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_TypeClientName : WinWindow
    {
        
        public wHome_TypeClientName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtClientName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtClientName
        {
            get
            {
                if ((this.mtxtClientName == null))
                {
                    this.mtxtClientName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtClientName.SearchProperties[WinEdit.PropertyNames.Name] = "Type Name or Select from List:";
                    this.mtxtClientName.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtClientName.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtClientName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtClientName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_RightPane : WinWindow
    {
        
        public wHome_RightPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dockableWindow5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient wRightPane
        {
            get
            {
                if ((this.mwRightPane == null))
                {
                    this.mwRightPane = new WinClient(this);
                    #region Search Criteria
                    this.mwRightPane.SearchProperties[WinControl.PropertyNames.Name] = "Select a service type in left explorer to load pane";
                    this.mwRightPane.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mwRightPane.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mwRightPane;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mwRightPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_AddClient : WinWindow
    {
        
        public wPMTool_AddClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddClient";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddClient
        {
            get
            {
                if ((this.mbtnAddClient == null))
                {
                    this.mbtnAddClient = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddClient.SearchProperties[WinButton.PropertyNames.Name] = "Add Client";
                    this.mbtnAddClient.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnAddClient.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddClient;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_TypeClientName : WinWindow
    {
        
        public wPMTool_TypeClientName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtUserName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtTypeClientName
        {
            get
            {
                if ((this.mtxtTypeClientName == null))
                {
                    this.mtxtTypeClientName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtTypeClientName.SearchProperties[WinEdit.PropertyNames.Name] = "Type Name or Select from List:";
                    this.mtxtTypeClientName.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtTypeClientName.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtTypeClientName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtTypeClientName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_AddPlan : WinWindow
    {
        
        public wPMTool_AddPlan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddPlan";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddPlan
        {
            get
            {
                if ((this.mbtnAddPlan == null))
                {
                    this.mbtnAddPlan = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddPlan.SearchProperties[WinButton.PropertyNames.Name] = "Add Plan";
                    this.mbtnAddPlan.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnAddPlan.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddPlan;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddPlan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_DeleteClient : WinWindow
    {
        
        public wPMTool_DeleteClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDeleteClient";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnDeleteClient
        {
            get
            {
                if ((this.mbtnDeleteClient == null))
                {
                    this.mbtnDeleteClient = new WinButton(this);
                    #region Search Criteria
                    this.mbtnDeleteClient.SearchProperties[WinButton.PropertyNames.Name] = "Delete Client";
                    this.mbtnDeleteClient.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnDeleteClient;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnDeleteClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_RightPane : WinWindow
    {
        
        public wPMTool_RightPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblClientName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtTitle
        {
            get
            {
                if ((this.mtxtTitle == null))
                {
                    this.mtxtTitle = new WinText(this);
                    #region Search Criteria
                    this.mtxtTitle.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtTitle.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtTitle;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtTitle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_TreeView : WinWindow
    {
        
        public wPMTool_TreeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trvClientExplorer";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTreeItem tvTreeViewitem
        {
            get
            {
                if ((this.mtvTreeViewitem == null))
                {
                    this.mtvTreeViewitem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mtvTreeViewitem.SearchProperties["Value"] = "0";
                    this.mtvTreeViewitem.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtvTreeViewitem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mtvTreeViewitem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_LeftPane : WinWindow
    {
        
        public wHome_LeftPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dockableWindow4";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient wLeftPane
        {
            get
            {
                if ((this.mwLeftPane == null))
                {
                    this.mwLeftPane = new WinClient(this);
                    #region Search Criteria
                    this.mwLeftPane.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mwLeftPane;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mwLeftPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_AddServiceInstance : WinWindow
    {
        
        public wHome_AddServiceInstance(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAdd";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddServiceInstance
        {
            get
            {
                if ((this.mbtnAddServiceInstance == null))
                {
                    this.mbtnAddServiceInstance = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddServiceInstance.SearchProperties[WinButton.PropertyNames.Name] = "Add Service Instance";
                    this.mbtnAddServiceInstance.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnAddServiceInstance.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddServiceInstance;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddServiceInstance;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_TableView : WinWindow
    {
        
        public wHome_TableView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprServiceManager";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient cHome_TableView
        {
            get
            {
                if ((this.mcHome_TableView == null))
                {
                    this.mcHome_TableView = new WinClient(this);
                    #region Search Criteria
                    this.mcHome_TableView.SearchProperties[WinControl.PropertyNames.Name] = "Select a service type in left explorer to load pane";
                    this.mcHome_TableView.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcHome_TableView.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcHome_TableView;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mcHome_TableView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_ToolBar_Top : WinToolBar
    {
        
        public wHome_ToolBar_Top(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnSave
        {
            get
            {
                if ((this.mbtnSave == null))
                {
                    this.mbtnSave = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSave.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mbtnSave.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnSave.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnSave;
            }
        }
        
        public WinButton btnClose
        {
            get
            {
                if ((this.mbtnClose == null))
                {
                    this.mbtnClose = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClose.SearchProperties[WinButton.PropertyNames.Name] = "toolStripButton1";
                    this.mbtnClose.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnClose.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnClose;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSave;
        
        private WinButton mbtnClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFlowTree : WinWindow
    {
        
        public wFlowTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "flowTree";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient flowTree
        {
            get
            {
                if ((this.mflowTree == null))
                {
                    this.mflowTree = new WinClient(this);
                    #region Search Criteria
                    this.mflowTree.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mflowTree.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mflowTree;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mflowTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunStatus_Refresh : WinWindow
    {
        
        public wRunStatus_Refresh(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRefresh";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnRefresh
        {
            get
            {
                if ((this.mbtnRefresh == null))
                {
                    this.mbtnRefresh = new WinButton(this);
                    #region Search Criteria
                    this.mbtnRefresh.SearchProperties[WinButton.PropertyNames.Name] = "Refresh";
                    this.mbtnRefresh.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnRefresh.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnRefresh;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnRefresh;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunStatus_FPGrid : WinWindow
    {
        
        public wRunStatus_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprJobState";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAsset_NewWorkSpace : WinWindow
    {
        
        public wAsset_NewWorkSpace(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnNewWorkspace";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnNewWorkSpace
        {
            get
            {
                if ((this.mbtnNewWorkSpace == null))
                {
                    this.mbtnNewWorkSpace = new WinButton(this);
                    #region Search Criteria
                    this.mbtnNewWorkSpace.SearchProperties[WinButton.PropertyNames.Name] = "New Workspace";
                    this.mbtnNewWorkSpace.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnNewWorkSpace.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnNewWorkSpace;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnNewWorkSpace;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAsset_WorkSapce_FPGrid : WinWindow
    {
        
        public wAsset_WorkSapce_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprWorkspace";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMenuBar : WinMenuBar
    {
        
        public wMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIActuarialReportMenuItem UIActuarialReportMenuItem
        {
            get
            {
                if ((this.mUIActuarialReportMenuItem == null))
                {
                    this.mUIActuarialReportMenuItem = new UIActuarialReportMenuItem(this);
                }
                return this.mUIActuarialReportMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIActuarialReportMenuItem mUIActuarialReportMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIActuarialReportMenuItem : WinMenuItem
    {
        
        public UIActuarialReportMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Actuarial Report";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UINewMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new UINewMenuItem(this);
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UINewMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UINewMenuItem : WinMenuItem
    {
        
        public UINewMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIPPAFundingValuationRMenuItem
        {
            get
            {
                if ((this.mUIPPAFundingValuationRMenuItem == null))
                {
                    this.mUIPPAFundingValuationRMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIPPAFundingValuationRMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "PPA Funding Valuation Report";
                    this.mUIPPAFundingValuationRMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPPAFundingValuationRMenuItem.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIPPAFundingValuationRMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIPPAFundingValuationRMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTableSetup_FPGrid : WinWindow
    {
        
        public wTableSetup_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprTableSetup";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEntrySetup_FPGrid : WinWindow
    {
        
        public wEntrySetup_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_fpRates";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties.Add(new PropertyExpression(WinControl.PropertyNames.Name, "Entry Setup", PropertyExpressionOperator.Contains));
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEntrySetup_Tab : WinWindow
    {
        
        public wEntrySetup_Tab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ratesTabWorkspace";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIFemaleRatesTabPage
        {
            get
            {
                if ((this.mUIFemaleRatesTabPage == null))
                {
                    this.mUIFemaleRatesTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIFemaleRatesTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Female Rates";
                    this.mUIFemaleRatesTabPage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIFemaleRatesTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIFemaleRatesTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEntrySetup_Rates : WinWindow
    {
        
        public wEntrySetup_Rates(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtRates
        {
            get
            {
                if ((this.mtxtRates == null))
                {
                    this.mtxtRates = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtRates.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtRates.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtRates;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtRates;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFlowTreeWin : WinWindow
    {
        
        public wFlowTreeWin(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "splWorkEffort";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinWindow wWin
        {
            get
            {
                if ((this.mwWin == null))
                {
                    this.mwWin = new WinWindow(this);
                    #region Search Criteria
                    this.mwWin.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mwWin.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
                    this.mwWin.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mwWin.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mwWin;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mwWin;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunStatus_Tab : WinWindow
    {
        
        public wRunStatus_Tab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabControl1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage wJobStateHistory
        {
            get
            {
                if ((this.mwJobStateHistory == null))
                {
                    this.mwJobStateHistory = new WinTabPage(this);
                    #region Search Criteria
                    this.mwJobStateHistory.SearchProperties[WinTabPage.PropertyNames.Name] = "Job State History";
                    this.mwJobStateHistory.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mwJobStateHistory.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mwJobStateHistory;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mwJobStateHistory;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunStatus_FPGrid_Bottom : WinWindow
    {
        
        public wRunStatus_FPGrid_Bottom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ControlName, "sprJob", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddVOtoRegistry : WinWindow
    {
        
        public wAddVOtoRegistry(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAdd";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Add VO to Registry";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        
        public WinButton btn_UK
        {
            get
            {
                if ((this.mbtn_UK == null))
                {
                    this.mbtn_UK = new WinButton(this);
                    #region Search Criteria
                    this.mbtn_UK.SearchProperties[WinButton.PropertyNames.Name] = "Add to Registry";
                    this.mbtn_UK.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn_UK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        
        private WinButton mbtn_UK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_Favorites : WinWindow
    {
        
        public wHome_Favorites(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trvClientExplorer";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTreeItem wTV
        {
            get
            {
                if ((this.mwTV == null))
                {
                    this.mwTV = new WinTreeItem(this);
                    #region Search Criteria
                    this.mwTV.SearchProperties[WinTreeItem.PropertyNames.Name] = "QA DE Benchmark 001 Existing DNT";
                    this.mwTV.SearchProperties["Value"] = "0";
                    this.mwTV.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mwTV.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mwTV.SearchConfigurations.Add(SearchConfiguration.VisibleOnly);
                    this.mwTV.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mwTV;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mwTV;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancelRun : WinWindow
    {
        
        public wCancelRun(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancelRun";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Cancel Run";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClientExplorer : WinWindow
    {
        
        public wClientExplorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trvClientExplorer";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tviClient tviClient
        {
            get
            {
                if ((this.mtviClient == null))
                {
                    this.mtviClient = new tviClient(this);
                }
                return this.mtviClient;
            }
        }
        #endregion
        
        #region Fields
        private tviClient mtviClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tviClient : WinTreeItem
    {
        
        public tviClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "QA US Benchmark 017 Create New";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tviPlan tviPlan
        {
            get
            {
                if ((this.mtviPlan == null))
                {
                    this.mtviPlan = new tviPlan(this);
                }
                return this.mtviPlan;
            }
        }
        #endregion
        
        #region Fields
        private tviPlan mtviPlan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tviPlan : WinTreeItem
    {
        
        public tviPlan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "QA US Benchmark 017 Create New Plan";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTreeItem tviParticipantData
        {
            get
            {
                if ((this.mtviParticipantData == null))
                {
                    this.mtviParticipantData = new WinTreeItem(this);
                    #region Search Criteria
                    this.mtviParticipantData.SearchProperties[WinTreeItem.PropertyNames.Name] = "ParticipantData";
                    this.mtviParticipantData.SearchProperties["Value"] = "2";
                    this.mtviParticipantData.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mtviParticipantData.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mtviParticipantData.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtviParticipantData;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mtviParticipantData;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClientExplorer_Favorites : WinWindow
    {
        
        public wClientExplorer_Favorites(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trvClientExplorer";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tviClient1 tviClient
        {
            get
            {
                if ((this.mtviClient == null))
                {
                    this.mtviClient = new tviClient1(this);
                }
                return this.mtviClient;
            }
        }
        #endregion
        
        #region Fields
        private tviClient1 mtviClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tviClient1 : WinTreeItem
    {
        
        public tviClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "QA US Benchmark 017 Existing DNT";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tviPlan1 tviPlan
        {
            get
            {
                if ((this.mtviPlan == null))
                {
                    this.mtviPlan = new tviPlan1(this);
                }
                return this.mtviPlan;
            }
        }
        #endregion
        
        #region Fields
        private tviPlan1 mtviPlan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tviPlan1 : WinTreeItem
    {
        
        public tviPlan1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTreeItem tviParticipantData
        {
            get
            {
                if ((this.mtviParticipantData == null))
                {
                    this.mtviParticipantData = new WinTreeItem(this);
                    #region Search Criteria
                    this.mtviParticipantData.SearchProperties[WinTreeItem.PropertyNames.Name] = "ParticipantData";
                    this.mtviParticipantData.SearchProperties["Value"] = "2";
                    this.mtviParticipantData.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mtviParticipantData.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mtviParticipantData.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtviParticipantData;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mtviParticipantData;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_TableView_ScrollDwn : WinWindow
    {
        
        public wHome_TableView_ScrollDwn(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "12";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient fp
        {
            get
            {
                if ((this.mfp == null))
                {
                    this.mfp = new WinClient(this);
                    #region Search Criteria
                    this.mfp.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mfp.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mfp;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mfp;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_Client : WinWindow
    {
        
        public wPMTool_Client()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Client ";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public wCustomClient wCustomClient
        {
            get
            {
                if ((this.mwCustomClient == null))
                {
                    this.mwCustomClient = new wCustomClient(this);
                }
                return this.mwCustomClient;
            }
        }
        
        public wMetrixClient wMetrixClient
        {
            get
            {
                if ((this.mwMetrixClient == null))
                {
                    this.mwMetrixClient = new wMetrixClient(this);
                }
                return this.mwMetrixClient;
            }
        }
        
        public wFiscalYearEnd wFiscalYearEnd
        {
            get
            {
                if ((this.mwFiscalYearEnd == null))
                {
                    this.mwFiscalYearEnd = new wFiscalYearEnd(this);
                }
                return this.mwFiscalYearEnd;
            }
        }
        
        public wMeasurementDate wMeasurementDate
        {
            get
            {
                if ((this.mwMeasurementDate == null))
                {
                    this.mwMeasurementDate = new wMeasurementDate(this);
                }
                return this.mwMeasurementDate;
            }
        }
        
        public wNotes wNotes
        {
            get
            {
                if ((this.mwNotes == null))
                {
                    this.mwNotes = new wNotes(this);
                }
                return this.mwNotes;
            }
        }
        
        public wDataCenter wDataCenter
        {
            get
            {
                if ((this.mwDataCenter == null))
                {
                    this.mwDataCenter = new wDataCenter(this);
                }
                return this.mwDataCenter;
            }
        }
        
        public wOK wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel(this);
                }
                return this.mwCancel;
            }
        }
        
        public wClientCode wClientCode
        {
            get
            {
                if ((this.mwClientCode == null))
                {
                    this.mwClientCode = new wClientCode(this);
                }
                return this.mwClientCode;
            }
        }
        
        public wClientName wClientName
        {
            get
            {
                if ((this.mwClientName == null))
                {
                    this.mwClientName = new wClientName(this);
                }
                return this.mwClientName;
            }
        }
        #endregion
        
        #region Fields
        private wCustomClient mwCustomClient;
        
        private wMetrixClient mwMetrixClient;
        
        private wFiscalYearEnd mwFiscalYearEnd;
        
        private wMeasurementDate mwMeasurementDate;
        
        private wNotes mwNotes;
        
        private wDataCenter mwDataCenter;
        
        private wOK mwOK;
        
        private wCancel mwCancel;
        
        private wClientCode mwClientCode;
        
        private wClientName mwClientName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomClient : WinWindow
    {
        
        public wCustomClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radCustomClient";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdCustomClient
        {
            get
            {
                if ((this.mrdCustomClient == null))
                {
                    this.mrdCustomClient = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdCustomClient.SearchProperties[WinRadioButton.PropertyNames.Name] = "Custom Client";
                    this.mrdCustomClient.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mrdCustomClient;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdCustomClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMetrixClient : WinWindow
    {
        
        public wMetrixClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radMetrixClient";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdMetrixClient
        {
            get
            {
                if ((this.mrdMetrixClient == null))
                {
                    this.mrdMetrixClient = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdMetrixClient.SearchProperties[WinRadioButton.PropertyNames.Name] = "Metrix Client";
                    this.mrdMetrixClient.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mrdMetrixClient;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdMetrixClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFiscalYearEnd : WinWindow
    {
        
        public wFiscalYearEnd(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtFiscalYearEnd";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFiscalYearEnd
        {
            get
            {
                if ((this.mtxtFiscalYearEnd == null))
                {
                    this.mtxtFiscalYearEnd = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFiscalYearEnd.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mtxtFiscalYearEnd;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFiscalYearEnd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMeasurementDate : WinWindow
    {
        
        public wMeasurementDate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtMeasurementDate";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinEdit txtMeasurementDate
        {
            get
            {
                if ((this.mtxtMeasurementDate == null))
                {
                    this.mtxtMeasurementDate = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtMeasurementDate.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mtxtMeasurementDate;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtMeasurementDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNotes : WinWindow
    {
        
        public wNotes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNotes";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinEdit txtNotes
        {
            get
            {
                if ((this.mtxtNotes == null))
                {
                    this.mtxtNotes = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtNotes.SearchProperties[WinEdit.PropertyNames.Name] = "Measurement Date";
                    this.mtxtNotes.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mtxtNotes;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtNotes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataCenter : WinWindow
    {
        
        public wDataCenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbDataCenter";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboDataCenter
        {
            get
            {
                if ((this.mcboDataCenter == null))
                {
                    this.mcboDataCenter = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboDataCenter.SearchProperties[WinComboBox.PropertyNames.Name] = "Notes";
                    this.mcboDataCenter.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mcboDataCenter;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboDataCenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK : WinWindow
    {
        
        public wOK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOK";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel : WinWindow
    {
        
        public wCancel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdCancel";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClientCode : WinWindow
    {
        
        public wClientCode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtClientCode";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinEdit txtClientCode
        {
            get
            {
                if ((this.mtxtClientCode == null))
                {
                    this.mtxtClientCode = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtClientCode.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mtxtClientCode;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtClientCode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClientName : WinWindow
    {
        
        public wClientName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtClientName";
            this.WindowTitles.Add("Client ");
            #endregion
        }
        
        #region Properties
        public WinEdit txtClientName
        {
            get
            {
                if ((this.mtxtClientName == null))
                {
                    this.mtxtClientName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtClientName.WindowTitles.Add("Client ");
                    #endregion
                }
                return this.mtxtClientName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtClientName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_DeleteClient1 : WinWindow
    {
        
        public wPMTool_DeleteClient1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Delete QA US Benchmark 008 Create New 76321 Confirmation");
            #endregion
        }
        
        #region Properties
        public wYes wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes(this);
                }
                return this.mwYes;
            }
        }
        
        public wNo wNo
        {
            get
            {
                if ((this.mwNo == null))
                {
                    this.mwNo = new wNo(this);
                }
                return this.mwNo;
            }
        }
        #endregion
        
        #region Fields
        private wYes mwYes;
        
        private wNo mwNo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes : WinWindow
    {
        
        public wYes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Delete QA US Benchmark 008 Create New 76321 Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.WindowTitles.Add("Delete QA US Benchmark 008 Create New 76321 Confirmation");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNo : WinWindow
    {
        
        public wNo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Delete QA US Benchmark 008 Create New 76321 Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton btnNo
        {
            get
            {
                if ((this.mbtnNo == null))
                {
                    this.mbtnNo = new WinButton(this);
                    #region Search Criteria
                    this.mbtnNo.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mbtnNo.WindowTitles.Add("Delete QA US Benchmark 008 Create New 76321 Confirmation");
                    #endregion
                }
                return this.mbtnNo;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnNo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_CountrySelection : WinWindow
    {
        
        public wPMTool_CountrySelection()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Country Selection";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Country Selection");
            #endregion
        }
        
        #region Properties
        public wCancel1 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel1(this);
                }
                return this.mwCancel;
            }
        }
        
        public wOK1 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK1(this);
                }
                return this.mwOK;
            }
        }
        
        public wCountry wCountry
        {
            get
            {
                if ((this.mwCountry == null))
                {
                    this.mwCountry = new wCountry(this);
                }
                return this.mwCountry;
            }
        }
        #endregion
        
        #region Fields
        private wCancel1 mwCancel;
        
        private wOK1 mwOK;
        
        private wCountry mwCountry;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel1 : WinWindow
    {
        
        public wCancel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdCancel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Country Selection");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("Country Selection");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK1 : WinWindow
    {
        
        public wOK1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Country Selection");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Country Selection");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCountry : WinWindow
    {
        
        public wCountry(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboCountry";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Country Selection");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboCountry
        {
            get
            {
                if ((this.mcboCountry == null))
                {
                    this.mcboCountry = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboCountry.SearchProperties[WinComboBox.PropertyNames.Name] = "Select the Country";
                    this.mcboCountry.WindowTitles.Add("Country Selection");
                    #endregion
                }
                return this.mcboCountry;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboCountry;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_Plan : WinWindow
    {
        
        public wPMTool_Plan()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Plan ", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan ");
            #endregion
        }
        
        #region Properties
        public wPlanName wPlanName
        {
            get
            {
                if ((this.mwPlanName == null))
                {
                    this.mwPlanName = new wPlanName(this);
                }
                return this.mwPlanName;
            }
        }
        
        public wPlanYearBegin wPlanYearBegin
        {
            get
            {
                if ((this.mwPlanYearBegin == null))
                {
                    this.mwPlanYearBegin = new wPlanYearBegin(this);
                }
                return this.mwPlanYearBegin;
            }
        }
        
        public wOK2 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK2(this);
                }
                return this.mwOK;
            }
        }
        
        public wJurisdiction wJurisdiction
        {
            get
            {
                if ((this.mwJurisdiction == null))
                {
                    this.mwJurisdiction = new wJurisdiction(this);
                }
                return this.mwJurisdiction;
            }
        }
        
        public wRevCanadaRegistrationNum wRevCanadaRegistrationNum
        {
            get
            {
                if ((this.mwRevCanadaRegistrationNum == null))
                {
                    this.mwRevCanadaRegistrationNum = new wRevCanadaRegistrationNum(this);
                }
                return this.mwRevCanadaRegistrationNum;
            }
        }
        
        public wProvincialRegistrationNum wProvincialRegistrationNum
        {
            get
            {
                if ((this.mwProvincialRegistrationNum == null))
                {
                    this.mwProvincialRegistrationNum = new wProvincialRegistrationNum(this);
                }
                return this.mwProvincialRegistrationNum;
            }
        }
        
        public wGroupsCovered wGroupsCovered
        {
            get
            {
                if ((this.mwGroupsCovered == null))
                {
                    this.mwGroupsCovered = new wGroupsCovered(this);
                }
                return this.mwGroupsCovered;
            }
        }
        
        public wPublicScetorProjection wPublicScetorProjection
        {
            get
            {
                if ((this.mwPublicScetorProjection == null))
                {
                    this.mwPublicScetorProjection = new wPublicScetorProjection(this);
                }
                return this.mwPublicScetorProjection;
            }
        }
        #endregion
        
        #region Fields
        private wPlanName mwPlanName;
        
        private wPlanYearBegin mwPlanYearBegin;
        
        private wOK2 mwOK;
        
        private wJurisdiction mwJurisdiction;
        
        private wRevCanadaRegistrationNum mwRevCanadaRegistrationNum;
        
        private wProvincialRegistrationNum mwProvincialRegistrationNum;
        
        private wGroupsCovered mwGroupsCovered;
        
        private wPublicScetorProjection mwPublicScetorProjection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlanName : WinWindow
    {
        
        public wPlanName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPlanName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan ");
            #endregion
        }
        
        #region Properties
        public WinEdit txtPlanName
        {
            get
            {
                if ((this.mtxtPlanName == null))
                {
                    this.mtxtPlanName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPlanName.SearchProperties[WinEdit.PropertyNames.Name] = "Plan Name";
                    this.mtxtPlanName.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mtxtPlanName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtPlanName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlanYearBegin : WinWindow
    {
        
        public wPlanYearBegin(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPlanYearBegin";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan ");
            #endregion
        }
        
        #region Properties
        public WinEdit txtPlanYearBegin
        {
            get
            {
                if ((this.mtxtPlanYearBegin == null))
                {
                    this.mtxtPlanYearBegin = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPlanYearBegin.SearchProperties[WinEdit.PropertyNames.Name] = "Plan Year Begin";
                    this.mtxtPlanYearBegin.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mtxtPlanYearBegin;
            }
        }
        
        public WinEdit txtPlanYearBegin_UK
        {
            get
            {
                if ((this.mtxtPlanYearBegin_UK == null))
                {
                    this.mtxtPlanYearBegin_UK = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPlanYearBegin_UK.SearchProperties[WinEdit.PropertyNames.Name] = "Plan Year Begin(MM/DD)";
                    this.mtxtPlanYearBegin_UK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtPlanYearBegin_UK.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mtxtPlanYearBegin_UK;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtPlanYearBegin;
        
        private WinEdit mtxtPlanYearBegin_UK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK2 : WinWindow
    {
        
        public wOK2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan ");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wJurisdiction : WinWindow
    {
        
        public wJurisdiction(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboJurisdiction";
            this.WindowTitles.Add("Plan ");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Groups Covered";
                    this.mcbo.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRevCanadaRegistrationNum : WinWindow
    {
        
        public wRevCanadaRegistrationNum(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtRegistrationNumber";
            this.WindowTitles.Add("Plan ");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProvincialRegistrationNum : WinWindow
    {
        
        public wProvincialRegistrationNum(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtProvincialRegistrationNumber";
            this.WindowTitles.Add("Plan ");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGroupsCovered : WinWindow
    {
        
        public wGroupsCovered(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lstGroups";
            this.WindowTitles.Add("Plan ");
            #endregion
        }
        
        #region Properties
        public WinListItem liUnion
        {
            get
            {
                if ((this.mliUnion == null))
                {
                    this.mliUnion = new WinListItem(this);
                    #region Search Criteria
                    this.mliUnion.SearchProperties[WinListItem.PropertyNames.Name] = "Union";
                    this.mliUnion.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mliUnion;
            }
        }
        
        public WinListItem liNonUnion
        {
            get
            {
                if ((this.mliNonUnion == null))
                {
                    this.mliNonUnion = new WinListItem(this);
                    #region Search Criteria
                    this.mliNonUnion.SearchProperties[WinListItem.PropertyNames.Name] = "Non-Union";
                    this.mliNonUnion.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mliNonUnion;
            }
        }
        
        public WinListItem liSalaried
        {
            get
            {
                if ((this.mliSalaried == null))
                {
                    this.mliSalaried = new WinListItem(this);
                    #region Search Criteria
                    this.mliSalaried.SearchProperties[WinListItem.PropertyNames.Name] = "Salaried";
                    this.mliSalaried.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mliSalaried;
            }
        }
        
        public WinListItem liHourly
        {
            get
            {
                if ((this.mliHourly == null))
                {
                    this.mliHourly = new WinListItem(this);
                    #region Search Criteria
                    this.mliHourly.SearchProperties[WinListItem.PropertyNames.Name] = "Hourly";
                    this.mliHourly.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mliHourly;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mliUnion;
        
        private WinListItem mliNonUnion;
        
        private WinListItem mliSalaried;
        
        private WinListItem mliHourly;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPublicScetorProjection : WinWindow
    {
        
        public wPublicScetorProjection(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPublicSectorProjection";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan ");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Public Sector Projection";
                    this.mchk.WindowTitles.Add("Plan ");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_DataServiceProperties : WinWindow
    {
        
        public wHome_DataServiceProperties()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Service Properties";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public wName wName
        {
            get
            {
                if ((this.mwName == null))
                {
                    this.mwName = new wName(this);
                }
                return this.mwName;
            }
        }
        
        public wEffectiveDate wEffectiveDate
        {
            get
            {
                if ((this.mwEffectiveDate == null))
                {
                    this.mwEffectiveDate = new wEffectiveDate(this);
                }
                return this.mwEffectiveDate;
            }
        }
        
        public wParent wParent
        {
            get
            {
                if ((this.mwParent == null))
                {
                    this.mwParent = new wParent(this);
                }
                return this.mwParent;
            }
        }
        
        public wRSC wRSC
        {
            get
            {
                if ((this.mwRSC == null))
                {
                    this.mwRSC = new wRSC(this);
                }
                return this.mwRSC;
            }
        }
        
        public wConversion wConversion
        {
            get
            {
                if ((this.mwConversion == null))
                {
                    this.mwConversion = new wConversion(this);
                }
                return this.mwConversion;
            }
        }
        
        public wGeneralUse wGeneralUse
        {
            get
            {
                if ((this.mwGeneralUse == null))
                {
                    this.mwGeneralUse = new wGeneralUse(this);
                }
                return this.mwGeneralUse;
            }
        }
        
        public wCopyDataService wCopyDataService
        {
            get
            {
                if ((this.mwCopyDataService == null))
                {
                    this.mwCopyDataService = new wCopyDataService(this);
                }
                return this.mwCopyDataService;
            }
        }
        
        public wShared wShared
        {
            get
            {
                if ((this.mwShared == null))
                {
                    this.mwShared = new wShared(this);
                }
                return this.mwShared;
            }
        }
        
        public wOK3 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK3(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel2 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel2(this);
                }
                return this.mwCancel;
            }
        }
        
        public wLocalMarket wLocalMarket
        {
            get
            {
                if ((this.mwLocalMarket == null))
                {
                    this.mwLocalMarket = new wLocalMarket(this);
                }
                return this.mwLocalMarket;
            }
        }
        #endregion
        
        #region Fields
        private wName mwName;
        
        private wEffectiveDate mwEffectiveDate;
        
        private wParent mwParent;
        
        private wRSC mwRSC;
        
        private wConversion mwConversion;
        
        private wGeneralUse mwGeneralUse;
        
        private wCopyDataService mwCopyDataService;
        
        private wShared mwShared;
        
        private wOK3 mwOK;
        
        private wCancel2 mwCancel;
        
        private wLocalMarket mwLocalMarket;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wName : WinWindow
    {
        
        public wName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtName";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtName
        {
            get
            {
                if ((this.mtxtName == null))
                {
                    this.mtxtName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtName.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mtxtName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEffectiveDate : WinWindow
    {
        
        public wEffectiveDate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtEffectiveDate";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtEffectiveDate
        {
            get
            {
                if ((this.mtxtEffectiveDate == null))
                {
                    this.mtxtEffectiveDate = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtEffectiveDate.SearchProperties[WinEdit.PropertyNames.Name] = "Effective Date";
                    this.mtxtEffectiveDate.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mtxtEffectiveDate;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtEffectiveDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wParent : WinWindow
    {
        
        public wParent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbParent";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboParent
        {
            get
            {
                if ((this.mcboParent == null))
                {
                    this.mcboParent = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboParent.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mcboParent;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboParent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRSC : WinWindow
    {
        
        public wRSC(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbRSC";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdRSC
        {
            get
            {
                if ((this.mrdRSC == null))
                {
                    this.mrdRSC = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdRSC.SearchProperties[WinRadioButton.PropertyNames.Name] = "RSC";
                    this.mrdRSC.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mrdRSC;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdRSC;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wConversion : WinWindow
    {
        
        public wConversion(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbConversion";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdConversion
        {
            get
            {
                if ((this.mrdConversion == null))
                {
                    this.mrdConversion = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdConversion.SearchProperties[WinRadioButton.PropertyNames.Name] = "Conversion";
                    this.mrdConversion.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mrdConversion;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdConversion;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGeneralUse : WinWindow
    {
        
        public wGeneralUse(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbGeneral";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdGeneralUse
        {
            get
            {
                if ((this.mrdGeneralUse == null))
                {
                    this.mrdGeneralUse = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdGeneralUse.SearchProperties[WinRadioButton.PropertyNames.Name] = "General Use";
                    this.mrdGeneralUse.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mrdGeneralUse;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdGeneralUse;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopyDataService : WinWindow
    {
        
        public wCopyDataService(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "copyDataServiceButton";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnCopyDataService
        {
            get
            {
                if ((this.mbtnCopyDataService == null))
                {
                    this.mbtnCopyDataService = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCopyDataService.SearchProperties[WinButton.PropertyNames.Name] = "Copy Data Service";
                    this.mbtnCopyDataService.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mbtnCopyDataService;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCopyDataService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wShared : WinWindow
    {
        
        public wShared(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbShared";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdShared
        {
            get
            {
                if ((this.mrdShared == null))
                {
                    this.mrdShared = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdShared.SearchProperties[WinRadioButton.PropertyNames.Name] = "Shared";
                    this.mrdShared.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mrdShared;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdShared;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK3 : WinWindow
    {
        
        public wOK3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOK";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel2 : WinWindow
    {
        
        public wCancel2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdCancel";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLocalMarket : WinWindow
    {
        
        public wLocalMarket(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbLocalMarket";
            this.WindowTitles.Add("Data Service Properties");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Local Market";
                    this.mrd.WindowTitles.Add("Data Service Properties");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_Confirm : WinWindow
    {
        
        public wHome_Confirm()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public wYes1 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes1(this);
                }
                return this.mwYes;
            }
        }
        
        public wNo1 wNo
        {
            get
            {
                if ((this.mwNo == null))
                {
                    this.mwNo = new wNo1(this);
                }
                return this.mwNo;
            }
        }
        
        public wOK4 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK4(this);
                }
                return this.mwOK;
            }
        }
        
        public wMessage wMessage
        {
            get
            {
                if ((this.mwMessage == null))
                {
                    this.mwMessage = new wMessage(this);
                }
                return this.mwMessage;
            }
        }
        #endregion
        
        #region Fields
        private wYes1 mwYes;
        
        private wNo1 mwNo;
        
        private wOK4 mwOK;
        
        private wMessage mwMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes1 : WinWindow
    {
        
        public wYes1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Yes";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnYes.WindowTitles.Add("Confirm");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNo1 : WinWindow
    {
        
        public wNo1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "No";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton btnNo
        {
            get
            {
                if ((this.mbtnNo == null))
                {
                    this.mbtnNo = new WinButton(this);
                    #region Search Criteria
                    this.mbtnNo.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mbtnNo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnNo.WindowTitles.Add("Confirm");
                    #endregion
                }
                return this.mbtnNo;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnNo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK4 : WinWindow
    {
        
        public wOK4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Confirm");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMessage : WinWindow
    {
        
        public wMessage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public WinText txtMessage
        {
            get
            {
                if ((this.mtxtMessage == null))
                {
                    this.mtxtMessage = new WinText(this);
                    #region Search Criteria
                    this.mtxtMessage.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtMessage.WindowTitles.Add("Confirm");
                    #endregion
                }
                return this.mtxtMessage;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFileOpen : WinWindow
    {
        
        public wFileOpen()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public wFileName wFileName
        {
            get
            {
                if ((this.mwFileName == null))
                {
                    this.mwFileName = new wFileName(this);
                }
                return this.mwFileName;
            }
        }
        
        public wOpen wOpen
        {
            get
            {
                if ((this.mwOpen == null))
                {
                    this.mwOpen = new wOpen(this);
                }
                return this.mwOpen;
            }
        }
        
        public wCancel3 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel3(this);
                }
                return this.mwCancel;
            }
        }
        #endregion
        
        #region Fields
        private wFileName mwFileName;
        
        private wOpen mwOpen;
        
        private wCancel3 mwCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFileName : WinWindow
    {
        
        public wFileName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFileName
        {
            get
            {
                if ((this.mtxtFileName == null))
                {
                    this.mtxtFileName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFileName.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mtxtFileName.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mtxtFileName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFileName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOpen : WinWindow
    {
        
        public wOpen(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton btnOpen
        {
            get
            {
                if ((this.mbtnOpen == null))
                {
                    this.mbtnOpen = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOpen.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mbtnOpen.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mbtnOpen;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOpen;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel3 : WinWindow
    {
        
        public wCancel3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGRSLogin : WinWindow
    {
        
        public wGRSLogin()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GRS Login";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public wGRSServer wGRSServer
        {
            get
            {
                if ((this.mwGRSServer == null))
                {
                    this.mwGRSServer = new wGRSServer(this);
                }
                return this.mwGRSServer;
            }
        }
        
        public wLoginID wLoginID
        {
            get
            {
                if ((this.mwLoginID == null))
                {
                    this.mwLoginID = new wLoginID(this);
                }
                return this.mwLoginID;
            }
        }
        
        public wPassword wPassword
        {
            get
            {
                if ((this.mwPassword == null))
                {
                    this.mwPassword = new wPassword(this);
                }
                return this.mwPassword;
            }
        }
        
        public wOK5 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK5(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel4 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel4(this);
                }
                return this.mwCancel;
            }
        }
        #endregion
        
        #region Fields
        private wGRSServer mwGRSServer;
        
        private wLoginID mwLoginID;
        
        private wPassword mwPassword;
        
        private wOK5 mwOK;
        
        private wCancel4 mwCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGRSServer : WinWindow
    {
        
        public wGRSServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "grsServerComboBox";
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboGRSServer
        {
            get
            {
                if ((this.mcboGRSServer == null))
                {
                    this.mcboGRSServer = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboGRSServer.WindowTitles.Add("GRS Login");
                    #endregion
                }
                return this.mcboGRSServer;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboGRSServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLoginID : WinWindow
    {
        
        public wLoginID(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "loginTextBox";
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public WinEdit txtLoginID
        {
            get
            {
                if ((this.mtxtLoginID == null))
                {
                    this.mtxtLoginID = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtLoginID.SearchProperties.Add(new PropertyExpression(WinEdit.PropertyNames.Name, "Login", PropertyExpressionOperator.Contains));
                    this.mtxtLoginID.WindowTitles.Add("GRS Login");
                    #endregion
                }
                return this.mtxtLoginID;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtLoginID;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPassword : WinWindow
    {
        
        public wPassword(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "passwordTextBox";
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public WinEdit txtPassword
        {
            get
            {
                if ((this.mtxtPassword == null))
                {
                    this.mtxtPassword = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPassword.SearchProperties.Add(new PropertyExpression(WinEdit.PropertyNames.Name, "Password", PropertyExpressionOperator.Contains));
                    this.mtxtPassword.WindowTitles.Add("GRS Login");
                    #endregion
                }
                return this.mtxtPassword;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtPassword;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK5 : WinWindow
    {
        
        public wOK5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "OKButton";
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("GRS Login");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel4 : WinWindow
    {
        
        public wCancel4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cancelButton";
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("GRS Login");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGRSDataInput : WinWindow
    {
        
        public wGRSDataInput()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Input";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Input");
            #endregion
        }
        
        #region Properties
        public wOK6 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK6(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel5 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel5(this);
                }
                return this.mwCancel;
            }
        }
        
        public tvGRSClient tvGRSClient
        {
            get
            {
                if ((this.mtvGRSClient == null))
                {
                    this.mtvGRSClient = new tvGRSClient(this);
                }
                return this.mtvGRSClient;
            }
        }
        #endregion
        
        #region Fields
        private wOK6 mwOK;
        
        private wCancel5 mwCancel;
        
        private tvGRSClient mtvGRSClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK6 : WinWindow
    {
        
        public wOK6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.WindowTitles.Add("Data Input");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Data Input");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel5 : WinWindow
    {
        
        public wCancel5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cancelButton";
            this.WindowTitles.Add("Data Input");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("Data Input");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvGRSClient : WinWindow
    {
        
        public tvGRSClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "grsSourceDataExplorerTreeView";
            this.WindowTitles.Add("Data Input");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIGRSClientsTreeItem
        {
            get
            {
                if ((this.mUIGRSClientsTreeItem == null))
                {
                    this.mUIGRSClientsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIGRSClientsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "GRS Clients";
                    this.mUIGRSClientsTreeItem.SearchProperties["Value"] = "0";
                    this.mUIGRSClientsTreeItem.WindowTitles.Add("Data Input");
                    #endregion
                }
                return this.mUIGRSClientsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIGRSClientsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_ServiceProperties : WinWindow
    {
        
        public wHome_ServiceProperties()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Service Properties";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public wOK7 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK7(this);
                }
                return this.mwOK;
            }
        }
        
        public wConversionService wConversionService
        {
            get
            {
                if ((this.mwConversionService == null))
                {
                    this.mwConversionService = new wConversionService(this);
                }
                return this.mwConversionService;
            }
        }
        
        public wName1 wName
        {
            get
            {
                if ((this.mwName == null))
                {
                    this.mwName = new wName1(this);
                }
                return this.mwName;
            }
        }
        
        public wParent1 wParent
        {
            get
            {
                if ((this.mwParent == null))
                {
                    this.mwParent = new wParent1(this);
                }
                return this.mwParent;
            }
        }
        
        public wPlanYearBeginingIn wPlanYearBeginingIn
        {
            get
            {
                if ((this.mwPlanYearBeginingIn == null))
                {
                    this.mwPlanYearBeginingIn = new wPlanYearBeginingIn(this);
                }
                return this.mwPlanYearBeginingIn;
            }
        }
        
        public wFirstPlanYearUnderPPA wFirstPlanYearUnderPPA
        {
            get
            {
                if ((this.mwFirstPlanYearUnderPPA == null))
                {
                    this.mwFirstPlanYearUnderPPA = new wFirstPlanYearUnderPPA(this);
                }
                return this.mwFirstPlanYearUnderPPA;
            }
        }
        
        public wRSC1 wRSC
        {
            get
            {
                if ((this.mwRSC == null))
                {
                    this.mwRSC = new wRSC1(this);
                }
                return this.mwRSC;
            }
        }
        
        public wLocalMarket1 wLocalMarket
        {
            get
            {
                if ((this.mwLocalMarket == null))
                {
                    this.mwLocalMarket = new wLocalMarket1(this);
                }
                return this.mwLocalMarket;
            }
        }
        
        public wShared1 wShared
        {
            get
            {
                if ((this.mwShared == null))
                {
                    this.mwShared = new wShared1(this);
                }
                return this.mwShared;
            }
        }
        
        public wParentFinalValuationSet wParentFinalValuationSet
        {
            get
            {
                if ((this.mwParentFinalValuationSet == null))
                {
                    this.mwParentFinalValuationSet = new wParentFinalValuationSet(this);
                }
                return this.mwParentFinalValuationSet;
            }
        }
        
        public wSelectAllVO wSelectAllVO
        {
            get
            {
                if ((this.mwSelectAllVO == null))
                {
                    this.mwSelectAllVO = new wSelectAllVO(this);
                }
                return this.mwSelectAllVO;
            }
        }
        
        public wDeselectAll wDeselectAll
        {
            get
            {
                if ((this.mwDeselectAll == null))
                {
                    this.mwDeselectAll = new wDeselectAll(this);
                }
                return this.mwDeselectAll;
            }
        }
        #endregion
        
        #region Fields
        private wOK7 mwOK;
        
        private wConversionService mwConversionService;
        
        private wName1 mwName;
        
        private wParent1 mwParent;
        
        private wPlanYearBeginingIn mwPlanYearBeginingIn;
        
        private wFirstPlanYearUnderPPA mwFirstPlanYearUnderPPA;
        
        private wRSC1 mwRSC;
        
        private wLocalMarket1 mwLocalMarket;
        
        private wShared1 mwShared;
        
        private wParentFinalValuationSet mwParentFinalValuationSet;
        
        private wSelectAllVO mwSelectAllVO;
        
        private wDeselectAll mwDeselectAll;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK7 : WinWindow
    {
        
        public wOK7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOK";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wConversionService : WinWindow
    {
        
        public wConversionService(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbConversionService";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkConversionService
        {
            get
            {
                if ((this.mchkConversionService == null))
                {
                    this.mchkConversionService = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkConversionService.SearchProperties[WinCheckBox.PropertyNames.Name] = "Conversion Service";
                    this.mchkConversionService.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mchkConversionService;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkConversionService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wName1 : WinWindow
    {
        
        public wName1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtName";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtName
        {
            get
            {
                if ((this.mtxtName == null))
                {
                    this.mtxtName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtName.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mtxtName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wParent1 : WinWindow
    {
        
        public wParent1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbParent";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboParent
        {
            get
            {
                if ((this.mcboParent == null))
                {
                    this.mcboParent = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboParent.SearchProperties[WinComboBox.PropertyNames.Name] = "Name";
                    this.mcboParent.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mcboParent;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboParent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlanYearBeginingIn : WinWindow
    {
        
        public wPlanYearBeginingIn(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbPlanYear";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPlanYearBeginningIn
        {
            get
            {
                if ((this.mcboPlanYearBeginningIn == null))
                {
                    this.mcboPlanYearBeginningIn = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPlanYearBeginningIn.SearchProperties[WinComboBox.PropertyNames.Name] = "Plan Year Beginning In";
                    this.mcboPlanYearBeginningIn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboPlanYearBeginningIn.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mcboPlanYearBeginningIn;
            }
        }
        
        public WinComboBox cboFiscalYearEndingIn_Accounting
        {
            get
            {
                if ((this.mcboFiscalYearEndingIn_Accounting == null))
                {
                    this.mcboFiscalYearEndingIn_Accounting = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboFiscalYearEndingIn_Accounting.SearchProperties[WinComboBox.PropertyNames.Name] = "Fiscal Year Ending In";
                    this.mcboFiscalYearEndingIn_Accounting.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboFiscalYearEndingIn_Accounting.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mcboFiscalYearEndingIn_Accounting;
            }
        }
        
        public WinComboBox cboPlanYearEndingIn_DE_Jubi
        {
            get
            {
                if ((this.mcboPlanYearEndingIn_DE_Jubi == null))
                {
                    this.mcboPlanYearEndingIn_DE_Jubi = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPlanYearEndingIn_DE_Jubi.SearchProperties[WinComboBox.PropertyNames.Name] = "Plan Year Ending In";
                    this.mcboPlanYearEndingIn_DE_Jubi.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboPlanYearEndingIn_DE_Jubi.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mcboPlanYearEndingIn_DE_Jubi;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPlanYearBeginningIn;
        
        private WinComboBox mcboFiscalYearEndingIn_Accounting;
        
        private WinComboBox mcboPlanYearEndingIn_DE_Jubi;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFirstPlanYearUnderPPA : WinWindow
    {
        
        public wFirstPlanYearUnderPPA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboFirstYearUnderPPA";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboFirstYearPlanUnderPPA
        {
            get
            {
                if ((this.mcboFirstYearPlanUnderPPA == null))
                {
                    this.mcboFirstYearPlanUnderPPA = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboFirstYearPlanUnderPPA.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mcboFirstYearPlanUnderPPA;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboFirstYearPlanUnderPPA;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRSC1 : WinWindow
    {
        
        public wRSC1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbRSC";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdRSC
        {
            get
            {
                if ((this.mrdRSC == null))
                {
                    this.mrdRSC = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdRSC.SearchProperties[WinRadioButton.PropertyNames.Name] = "RSC";
                    this.mrdRSC.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mrdRSC;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdRSC;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLocalMarket1 : WinWindow
    {
        
        public wLocalMarket1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbLocalMarket";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdLocalMarket
        {
            get
            {
                if ((this.mrdLocalMarket == null))
                {
                    this.mrdLocalMarket = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdLocalMarket.SearchProperties[WinRadioButton.PropertyNames.Name] = "Local Market";
                    this.mrdLocalMarket.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mrdLocalMarket;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdLocalMarket;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wShared1 : WinWindow
    {
        
        public wShared1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbShared";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdShared
        {
            get
            {
                if ((this.mrdShared == null))
                {
                    this.mrdShared = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdShared.SearchProperties[WinRadioButton.PropertyNames.Name] = "Shared";
                    this.mrdShared.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mrdShared;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdShared;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wParentFinalValuationSet : WinWindow
    {
        
        public wParentFinalValuationSet(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbParentValSet";
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboParentFinalValuationSet
        {
            get
            {
                if ((this.mcboParentFinalValuationSet == null))
                {
                    this.mcboParentFinalValuationSet = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboParentFinalValuationSet.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mcboParentFinalValuationSet;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboParentFinalValuationSet;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectAllVO : WinWindow
    {
        
        public wSelectAllVO(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSelectAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties.Add(new PropertyExpression(WinButton.PropertyNames.Name, "Select all", PropertyExpressionOperator.Contains));
                    this.mbtn.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeselectAll : WinWindow
    {
        
        public wDeselectAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDeSelectAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Service Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "De-select All Val Groups";
                    this.mbtn.WindowTitles.Add("Service Properties");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFlowTree_ContextMenu : WinWindow
    {
        
        public wFlowTree_ContextMenu()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDataMenuItem UIDataMenuItem
        {
            get
            {
                if ((this.mUIDataMenuItem == null))
                {
                    this.mUIDataMenuItem = new UIDataMenuItem(this);
                }
                return this.mUIDataMenuItem;
            }
        }
        
        public UIDropDownMenu UIDropDownMenu
        {
            get
            {
                if ((this.mUIDropDownMenu == null))
                {
                    this.mUIDropDownMenu = new UIDropDownMenu(this);
                }
                return this.mUIDropDownMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIDataMenuItem mUIDataMenuItem;
        
        private UIDropDownMenu mUIDropDownMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDataMenuItem : WinMenuItem
    {
        
        public UIDataMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Data";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIEditParametersMenuItem
        {
            get
            {
                if ((this.mUIEditParametersMenuItem == null))
                {
                    this.mUIEditParametersMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIEditParametersMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit Parameters";
                    this.mUIEditParametersMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIEditParametersMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIEditParametersMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDropDownMenu : WinMenu
    {
        
        public UIDropDownMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "DropDown";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIDeleteMenuItem
        {
            get
            {
                if ((this.mUIDeleteMenuItem == null))
                {
                    this.mUIDeleteMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDeleteMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Delete";
                    #endregion
                }
                return this.mUIDeleteMenuItem;
            }
        }
        
        public WinMenuItem UIRenameMenuItem
        {
            get
            {
                if ((this.mUIRenameMenuItem == null))
                {
                    this.mUIRenameMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRenameMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Rename";
                    #endregion
                }
                return this.mUIRenameMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIDeleteMenuItem;
        
        private WinMenuItem mUIRenameMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunOptions : WinWindow
    {
        
        public wRunOptions()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Run Options", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public wRunValuation wRunValuation
        {
            get
            {
                if ((this.mwRunValuation == null))
                {
                    this.mwRunValuation = new wRunValuation(this);
                }
                return this.mwRunValuation;
            }
        }
        
        public wGL_PPANAR_Min wGL_PPANAR_Min
        {
            get
            {
                if ((this.mwGL_PPANAR_Min == null))
                {
                    this.mwGL_PPANAR_Min = new wGL_PPANAR_Min(this);
                }
                return this.mwGL_PPANAR_Min;
            }
        }
        
        public wGL_PPANAR_Max wGL_PPANAR_Max
        {
            get
            {
                if ((this.mwGL_PPANAR_Max == null))
                {
                    this.mwGL_PPANAR_Max = new wGL_PPANAR_Max(this);
                }
                return this.mwGL_PPANAR_Max;
            }
        }
        
        public wGL_EAN wGL_EAN
        {
            get
            {
                if ((this.mwGL_EAN == null))
                {
                    this.mwGL_EAN = new wGL_EAN(this);
                }
                return this.mwGL_EAN;
            }
        }
        
        public wEstimateNextYearLiabilityForAFTAP wEstimateNextYearLiabilityForAFTAP
        {
            get
            {
                if ((this.mwEstimateNextYearLiabilityForAFTAP == null))
                {
                    this.mwEstimateNextYearLiabilityForAFTAP = new wEstimateNextYearLiabilityForAFTAP(this);
                }
                return this.mwEstimateNextYearLiabilityForAFTAP;
            }
        }
        
        public wPayoutProjection wPayoutProjection
        {
            get
            {
                if ((this.mwPayoutProjection == null))
                {
                    this.mwPayoutProjection = new wPayoutProjection(this);
                }
                return this.mwPayoutProjection;
            }
        }
        
        public wIncludeIOE wIncludeIOE
        {
            get
            {
                if ((this.mwIncludeIOE == null))
                {
                    this.mwIncludeIOE = new wIncludeIOE(this);
                }
                return this.mwIncludeIOE;
            }
        }
        
        public wGenerateParameterPrint wGenerateParameterPrint
        {
            get
            {
                if ((this.mwGenerateParameterPrint == null))
                {
                    this.mwGenerateParameterPrint = new wGenerateParameterPrint(this);
                }
                return this.mwGenerateParameterPrint;
            }
        }
        
        public wGenerateTestCaseOutput wGenerateTestCaseOutput
        {
            get
            {
                if ((this.mwGenerateTestCaseOutput == null))
                {
                    this.mwGenerateTestCaseOutput = new wGenerateTestCaseOutput(this);
                }
                return this.mwGenerateTestCaseOutput;
            }
        }
        
        public wIncludeGainLossResult wIncludeGainLossResult
        {
            get
            {
                if ((this.mwIncludeGainLossResult == null))
                {
                    this.mwIncludeGainLossResult = new wIncludeGainLossResult(this);
                }
                return this.mwIncludeGainLossResult;
            }
        }
        
        public wSkipLiabilityValidation wSkipLiabilityValidation
        {
            get
            {
                if ((this.mwSkipLiabilityValidation == null))
                {
                    this.mwSkipLiabilityValidation = new wSkipLiabilityValidation(this);
                }
                return this.mwSkipLiabilityValidation;
            }
        }
        
        public wService wService
        {
            get
            {
                if ((this.mwService == null))
                {
                    this.mwService = new wService(this);
                }
                return this.mwService;
            }
        }
        
        public wPay wPay
        {
            get
            {
                if ((this.mwPay == null))
                {
                    this.mwPay = new wPay(this);
                }
                return this.mwPay;
            }
        }
        
        public wCurrentYear wCurrentYear
        {
            get
            {
                if ((this.mwCurrentYear == null))
                {
                    this.mwCurrentYear = new wCurrentYear(this);
                }
                return this.mwCurrentYear;
            }
        }
        
        public wPriorYear wPriorYear
        {
            get
            {
                if ((this.mwPriorYear == null))
                {
                    this.mwPriorYear = new wPriorYear(this);
                }
                return this.mwPriorYear;
            }
        }
        
        public wCashBanlance wCashBanlance
        {
            get
            {
                if ((this.mwCashBanlance == null))
                {
                    this.mwCashBanlance = new wCashBanlance(this);
                }
                return this.mwCashBanlance;
            }
        }
        
        public wPension wPension
        {
            get
            {
                if ((this.mwPension == null))
                {
                    this.mwPension = new wPension(this);
                }
                return this.mwPension;
            }
        }
        
        public wLiabilityTypes wLiabilityTypes
        {
            get
            {
                if ((this.mwLiabilityTypes == null))
                {
                    this.mwLiabilityTypes = new wLiabilityTypes(this);
                }
                return this.mwLiabilityTypes;
            }
        }
        
        public wPayoutProjectionCustomGroup wPayoutProjectionCustomGroup
        {
            get
            {
                if ((this.mwPayoutProjectionCustomGroup == null))
                {
                    this.mwPayoutProjectionCustomGroup = new wPayoutProjectionCustomGroup(this);
                }
                return this.mwPayoutProjectionCustomGroup;
            }
        }
        
        public wGL_PBO wGL_PBO
        {
            get
            {
                if ((this.mwGL_PBO == null))
                {
                    this.mwGL_PBO = new wGL_PBO(this);
                }
                return this.mwGL_PBO;
            }
        }
        
        public wGL_ABO wGL_ABO
        {
            get
            {
                if ((this.mwGL_ABO == null))
                {
                    this.mwGL_ABO = new wGL_ABO(this);
                }
                return this.mwGL_ABO;
            }
        }
        
        public wGL_GoingConcern wGL_GoingConcern
        {
            get
            {
                if ((this.mwGL_GoingConcern == null))
                {
                    this.mwGL_GoingConcern = new wGL_GoingConcern(this);
                }
                return this.mwGL_GoingConcern;
            }
        }
        
        public wApplyWithdrawalAdjustment wApplyWithdrawalAdjustment
        {
            get
            {
                if ((this.mwApplyWithdrawalAdjustment == null))
                {
                    this.mwApplyWithdrawalAdjustment = new wApplyWithdrawalAdjustment(this);
                }
                return this.mwApplyWithdrawalAdjustment;
            }
        }
        
        public wSaveResultsforAuditReport wSaveResultsforAuditReport
        {
            get
            {
                if ((this.mwSaveResultsforAuditReport == null))
                {
                    this.mwSaveResultsforAuditReport = new wSaveResultsforAuditReport(this);
                }
                return this.mwSaveResultsforAuditReport;
            }
        }
        
        public wApplyOverrides wApplyOverrides
        {
            get
            {
                if ((this.mwApplyOverrides == null))
                {
                    this.mwApplyOverrides = new wApplyOverrides(this);
                }
                return this.mwApplyOverrides;
            }
        }
        
        public wRunLocally wRunLocally
        {
            get
            {
                if ((this.mwRunLocally == null))
                {
                    this.mwRunLocally = new wRunLocally(this);
                }
                return this.mwRunLocally;
            }
        }
        
        public wBreakByFundingVehicle wBreakByFundingVehicle
        {
            get
            {
                if ((this.mwBreakByFundingVehicle == null))
                {
                    this.mwBreakByFundingVehicle = new wBreakByFundingVehicle(this);
                }
                return this.mwBreakByFundingVehicle;
            }
        }
        
        public wUseReportBreaks wUseReportBreaks
        {
            get
            {
                if ((this.mwUseReportBreaks == null))
                {
                    this.mwUseReportBreaks = new wUseReportBreaks(this);
                }
                return this.mwUseReportBreaks;
            }
        }
        
        public wSelectVOs wSelectVOs
        {
            get
            {
                if ((this.mwSelectVOs == null))
                {
                    this.mwSelectVOs = new wSelectVOs(this);
                }
                return this.mwSelectVOs;
            }
        }
        
        public wMajor wMajor
        {
            get
            {
                if ((this.mwMajor == null))
                {
                    this.mwMajor = new wMajor(this);
                }
                return this.mwMajor;
            }
        }
        
        public wIntermediate wIntermediate
        {
            get
            {
                if ((this.mwIntermediate == null))
                {
                    this.mwIntermediate = new wIntermediate(this);
                }
                return this.mwIntermediate;
            }
        }
        
        public wMinor wMinor
        {
            get
            {
                if ((this.mwMinor == null))
                {
                    this.mwMinor = new wMinor(this);
                }
                return this.mwMinor;
            }
        }
        
        public wSelectRecords wSelectRecords
        {
            get
            {
                if ((this.mwSelectRecords == null))
                {
                    this.mwSelectRecords = new wSelectRecords(this);
                }
                return this.mwSelectRecords;
            }
        }
        
        public wValidate wValidate
        {
            get
            {
                if ((this.mwValidate == null))
                {
                    this.mwValidate = new wValidate(this);
                }
                return this.mwValidate;
            }
        }
        
        public wCalcIncreCostSolvencyWindup wCalcIncreCostSolvencyWindup
        {
            get
            {
                if ((this.mwCalcIncreCostSolvencyWindup == null))
                {
                    this.mwCalcIncreCostSolvencyWindup = new wCalcIncreCostSolvencyWindup(this);
                }
                return this.mwCalcIncreCostSolvencyWindup;
            }
        }
        
        public wGL_WindUp wGL_WindUp
        {
            get
            {
                if ((this.mwGL_WindUp == null))
                {
                    this.mwGL_WindUp = new wGL_WindUp(this);
                }
                return this.mwGL_WindUp;
            }
        }
        
        public wGL_Solvency wGL_Solvency
        {
            get
            {
                if ((this.mwGL_Solvency == null))
                {
                    this.mwGL_Solvency = new wGL_Solvency(this);
                }
                return this.mwGL_Solvency;
            }
        }
        
        public wIncludeGainLossAgeGroupReportField wIncludeGainLossAgeGroupReportField
        {
            get
            {
                if ((this.mwIncludeGainLossAgeGroupReportField == null))
                {
                    this.mwIncludeGainLossAgeGroupReportField = new wIncludeGainLossAgeGroupReportField(this);
                }
                return this.mwIncludeGainLossAgeGroupReportField;
            }
        }
        
        public wSelectNodes wSelectNodes
        {
            get
            {
                if ((this.mwSelectNodes == null))
                {
                    this.mwSelectNodes = new wSelectNodes(this);
                }
                return this.mwSelectNodes;
            }
        }
        
        public w2DPayoutProjection w2DPayoutProjection
        {
            get
            {
                if ((this.mw2DPayoutProjection == null))
                {
                    this.mw2DPayoutProjection = new w2DPayoutProjection(this);
                }
                return this.mw2DPayoutProjection;
            }
        }
        
        public wGL_FundingLiabilities wGL_FundingLiabilities
        {
            get
            {
                if ((this.mwGL_FundingLiabilities == null))
                {
                    this.mwGL_FundingLiabilities = new wGL_FundingLiabilities(this);
                }
                return this.mwGL_FundingLiabilities;
            }
        }
        
        public wIncludeSpecialPayment wIncludeSpecialPayment
        {
            get
            {
                if ((this.mwIncludeSpecialPayment == null))
                {
                    this.mwIncludeSpecialPayment = new wIncludeSpecialPayment(this);
                }
                return this.mwIncludeSpecialPayment;
            }
        }
        
        public w2DCashflowProjection w2DCashflowProjection
        {
            get
            {
                if ((this.mw2DCashflowProjection == null))
                {
                    this.mw2DCashflowProjection = new w2DCashflowProjection(this);
                }
                return this.mw2DCashflowProjection;
            }
        }
        
        public wPayoutProjectionbyParticipant wPayoutProjectionbyParticipant
        {
            get
            {
                if ((this.mwPayoutProjectionbyParticipant == null))
                {
                    this.mwPayoutProjectionbyParticipant = new wPayoutProjectionbyParticipant(this);
                }
                return this.mwPayoutProjectionbyParticipant;
            }
        }
        
        public wGainLossLiabilities_pension wGainLossLiabilities_pension
        {
            get
            {
                if ((this.mwGainLossLiabilities_pension == null))
                {
                    this.mwGainLossLiabilities_pension = new wGainLossLiabilities_pension(this);
                }
                return this.mwGainLossLiabilities_pension;
            }
        }
        #endregion
        
        #region Fields
        private wRunValuation mwRunValuation;
        
        private wGL_PPANAR_Min mwGL_PPANAR_Min;
        
        private wGL_PPANAR_Max mwGL_PPANAR_Max;
        
        private wGL_EAN mwGL_EAN;
        
        private wEstimateNextYearLiabilityForAFTAP mwEstimateNextYearLiabilityForAFTAP;
        
        private wPayoutProjection mwPayoutProjection;
        
        private wIncludeIOE mwIncludeIOE;
        
        private wGenerateParameterPrint mwGenerateParameterPrint;
        
        private wGenerateTestCaseOutput mwGenerateTestCaseOutput;
        
        private wIncludeGainLossResult mwIncludeGainLossResult;
        
        private wSkipLiabilityValidation mwSkipLiabilityValidation;
        
        private wService mwService;
        
        private wPay mwPay;
        
        private wCurrentYear mwCurrentYear;
        
        private wPriorYear mwPriorYear;
        
        private wCashBanlance mwCashBanlance;
        
        private wPension mwPension;
        
        private wLiabilityTypes mwLiabilityTypes;
        
        private wPayoutProjectionCustomGroup mwPayoutProjectionCustomGroup;
        
        private wGL_PBO mwGL_PBO;
        
        private wGL_ABO mwGL_ABO;
        
        private wGL_GoingConcern mwGL_GoingConcern;
        
        private wApplyWithdrawalAdjustment mwApplyWithdrawalAdjustment;
        
        private wSaveResultsforAuditReport mwSaveResultsforAuditReport;
        
        private wApplyOverrides mwApplyOverrides;
        
        private wRunLocally mwRunLocally;
        
        private wBreakByFundingVehicle mwBreakByFundingVehicle;
        
        private wUseReportBreaks mwUseReportBreaks;
        
        private wSelectVOs mwSelectVOs;
        
        private wMajor mwMajor;
        
        private wIntermediate mwIntermediate;
        
        private wMinor mwMinor;
        
        private wSelectRecords mwSelectRecords;
        
        private wValidate mwValidate;
        
        private wCalcIncreCostSolvencyWindup mwCalcIncreCostSolvencyWindup;
        
        private wGL_WindUp mwGL_WindUp;
        
        private wGL_Solvency mwGL_Solvency;
        
        private wIncludeGainLossAgeGroupReportField mwIncludeGainLossAgeGroupReportField;
        
        private wSelectNodes mwSelectNodes;
        
        private w2DPayoutProjection mw2DPayoutProjection;
        
        private wGL_FundingLiabilities mwGL_FundingLiabilities;
        
        private wIncludeSpecialPayment mwIncludeSpecialPayment;
        
        private w2DCashflowProjection mw2DCashflowProjection;
        
        private wPayoutProjectionbyParticipant mwPayoutProjectionbyParticipant;
        
        private wGainLossLiabilities_pension mwGainLossLiabilities_pension;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunValuation : WinWindow
    {
        
        public wRunValuation(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinButton btnRunValuation
        {
            get
            {
                if ((this.mbtnRunValuation == null))
                {
                    this.mbtnRunValuation = new WinButton(this);
                    #region Search Criteria
                    this.mbtnRunValuation.SearchProperties.Add(new PropertyExpression(WinButton.PropertyNames.Name, "Run", PropertyExpressionOperator.Contains));
                    this.mbtnRunValuation.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnRunValuation.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mbtnRunValuation;
            }
        }
        
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnRunValuation;
        
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGL_PPANAR_Min : WinWindow
    {
        
        public wGL_PPANAR_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPPANARMin";
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkGL_PPANAR_Min
        {
            get
            {
                if ((this.mchkGL_PPANAR_Min == null))
                {
                    this.mchkGL_PPANAR_Min = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGL_PPANAR_Min.SearchProperties[WinCheckBox.PropertyNames.Name] = "G/L PPA Not-At-Risk Liability for Minimum";
                    this.mchkGL_PPANAR_Min.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkGL_PPANAR_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkGL_PPANAR_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGL_PPANAR_Max : WinWindow
    {
        
        public wGL_PPANAR_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPPANARMax";
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkGL_PPANAR_Max
        {
            get
            {
                if ((this.mchkGL_PPANAR_Max == null))
                {
                    this.mchkGL_PPANAR_Max = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGL_PPANAR_Max.SearchProperties[WinCheckBox.PropertyNames.Name] = "G/L PPA Not-At-Risk Liability for Maximum";
                    this.mchkGL_PPANAR_Max.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkGL_PPANAR_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkGL_PPANAR_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGL_EAN : WinWindow
    {
        
        public wGL_EAN(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGLEntryAgeNormal";
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkGL_EAN
        {
            get
            {
                if ((this.mchkGL_EAN == null))
                {
                    this.mchkGL_EAN = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGL_EAN.SearchProperties[WinCheckBox.PropertyNames.Name] = "G/L Entry Age Normal";
                    this.mchkGL_EAN.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkGL_EAN;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkGL_EAN;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEstimateNextYearLiabilityForAFTAP : WinWindow
    {
        
        public wEstimateNextYearLiabilityForAFTAP(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkEstNextYearLiabs";
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkEstimateNextYearLiabilityForAFTAP
        {
            get
            {
                if ((this.mchkEstimateNextYearLiabilityForAFTAP == null))
                {
                    this.mchkEstimateNextYearLiabilityForAFTAP = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkEstimateNextYearLiabilityForAFTAP.SearchProperties[WinCheckBox.PropertyNames.Name] = "Estimate Next Year Liability for AFTAP Range Certification";
                    this.mchkEstimateNextYearLiabilityForAFTAP.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkEstimateNextYearLiabilityForAFTAP;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkEstimateNextYearLiabilityForAFTAP;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayoutProjection : WinWindow
    {
        
        public wPayoutProjection(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPayoutProjection";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkPayoutProjection
        {
            get
            {
                if ((this.mchkPayoutProjection == null))
                {
                    this.mchkPayoutProjection = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPayoutProjection.SearchProperties[WinCheckBox.PropertyNames.Name] = "Payout projection";
                    this.mchkPayoutProjection.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPayoutProjection.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPayoutProjection;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkPayoutProjection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludeIOE : WinWindow
    {
        
        public wIncludeIOE(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIndividualOutput";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkIncludeIOE
        {
            get
            {
                if ((this.mchkIncludeIOE == null))
                {
                    this.mchkIncludeIOE = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkIncludeIOE.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include Individual Output Export Fields";
                    this.mchkIncludeIOE.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkIncludeIOE.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkIncludeIOE;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkIncludeIOE;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGenerateParameterPrint : WinWindow
    {
        
        public wGenerateParameterPrint(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGenerateParameterPrintSnapshot";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkGenerateParameterPrint
        {
            get
            {
                if ((this.mchkGenerateParameterPrint == null))
                {
                    this.mchkGenerateParameterPrint = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGenerateParameterPrint.SearchProperties[WinCheckBox.PropertyNames.Name] = "Generate Parameter Print Snapshot";
                    this.mchkGenerateParameterPrint.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkGenerateParameterPrint.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkGenerateParameterPrint;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkGenerateParameterPrint;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGenerateTestCaseOutput : WinWindow
    {
        
        public wGenerateTestCaseOutput(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGenerateTestCaseLifeOutput";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkGenerateTestCaseOutput
        {
            get
            {
                if ((this.mchkGenerateTestCaseOutput == null))
                {
                    this.mchkGenerateTestCaseOutput = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGenerateTestCaseOutput.SearchProperties[WinCheckBox.PropertyNames.Name] = "Generate Test Case Output";
                    this.mchkGenerateTestCaseOutput.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkGenerateTestCaseOutput.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkGenerateTestCaseOutput;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkGenerateTestCaseOutput;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludeGainLossResult : WinWindow
    {
        
        public wIncludeGainLossResult(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIncludeGLInTCLO";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkIncludeGainLossResult
        {
            get
            {
                if ((this.mchkIncludeGainLossResult == null))
                {
                    this.mchkIncludeGainLossResult = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkIncludeGainLossResult.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include Gain Loss Results";
                    this.mchkIncludeGainLossResult.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkIncludeGainLossResult.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkIncludeGainLossResult;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkIncludeGainLossResult;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSkipLiabilityValidation : WinWindow
    {
        
        public wSkipLiabilityValidation(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkSkipValidation";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkSkipLiabilityValidation
        {
            get
            {
                if ((this.mchkSkipLiabilityValidation == null))
                {
                    this.mchkSkipLiabilityValidation = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkSkipLiabilityValidation.SearchProperties[WinCheckBox.PropertyNames.Name] = "Skip Liability Validation before Run (not recommended)";
                    this.mchkSkipLiabilityValidation.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkSkipLiabilityValidation.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkSkipLiabilityValidation;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkSkipLiabilityValidation;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wService : WinWindow
    {
        
        public wService(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboService";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboService
        {
            get
            {
                if ((this.mcboService == null))
                {
                    this.mcboService = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboService.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboService.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mcboService;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPay : WinWindow
    {
        
        public wPay(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboPay";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPay
        {
            get
            {
                if ((this.mcboPay == null))
                {
                    this.mcboPay = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPay.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboPay.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mcboPay;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPay;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCurrentYear : WinWindow
    {
        
        public wCurrentYear(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbCurrentYear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdCurrentYear
        {
            get
            {
                if ((this.mrdCurrentYear == null))
                {
                    this.mrdCurrentYear = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdCurrentYear.SearchProperties[WinRadioButton.PropertyNames.Name] = "Current Year";
                    this.mrdCurrentYear.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdCurrentYear.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mrdCurrentYear;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdCurrentYear;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPriorYear : WinWindow
    {
        
        public wPriorYear(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbPriorYear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdPriorYear
        {
            get
            {
                if ((this.mrdPriorYear == null))
                {
                    this.mrdPriorYear = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdPriorYear.SearchProperties[WinRadioButton.PropertyNames.Name] = "Prior Year";
                    this.mrdPriorYear.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdPriorYear.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mrdPriorYear;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdPriorYear;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBanlance : WinWindow
    {
        
        public wCashBanlance(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboCashBanlance";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboCashBanlance
        {
            get
            {
                if ((this.mcboCashBanlance == null))
                {
                    this.mcboCashBanlance = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboCashBanlance.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboCashBanlance.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mcboCashBanlance;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboCashBanlance;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPension : WinWindow
    {
        
        public wPension(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboAnnualPension";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPension
        {
            get
            {
                if ((this.mcboPension == null))
                {
                    this.mcboPension = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPension.SearchProperties[WinComboBox.PropertyNames.Name] = "Pension";
                    this.mcboPension.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboPension.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mcboPension;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPension;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLiabilityTypes : WinWindow
    {
        
        public wLiabilityTypes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "clbLiabilityType";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAllLiabilityTypes
        {
            get
            {
                if ((this.mchkAllLiabilityTypes == null))
                {
                    this.mchkAllLiabilityTypes = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAllLiabilityTypes.SearchProperties[WinCheckBox.PropertyNames.Name] = "All Liability Types";
                    this.mchkAllLiabilityTypes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAllLiabilityTypes.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkAllLiabilityTypes;
            }
        }
        
        public WinCheckBox chkPPANotAtRiskLiabilityForMinimum
        {
            get
            {
                if ((this.mchkPPANotAtRiskLiabilityForMinimum == null))
                {
                    this.mchkPPANotAtRiskLiabilityForMinimum = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPANotAtRiskLiabilityForMinimum.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPA Not-At-Risk Liability for Minimum";
                    this.mchkPPANotAtRiskLiabilityForMinimum.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPANotAtRiskLiabilityForMinimum.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPPANotAtRiskLiabilityForMinimum;
            }
        }
        
        public WinCheckBox chkPPANotAtRiskLiabilityForMaximum
        {
            get
            {
                if ((this.mchkPPANotAtRiskLiabilityForMaximum == null))
                {
                    this.mchkPPANotAtRiskLiabilityForMaximum = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPANotAtRiskLiabilityForMaximum.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPA Not-At-Risk Liability for Maximum";
                    this.mchkPPANotAtRiskLiabilityForMaximum.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPANotAtRiskLiabilityForMaximum.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPPANotAtRiskLiabilityForMaximum;
            }
        }
        
        public WinCheckBox chkPPANotAtRishPresentValueOfVestedBenefits
        {
            get
            {
                if ((this.mchkPPANotAtRishPresentValueOfVestedBenefits == null))
                {
                    this.mchkPPANotAtRishPresentValueOfVestedBenefits = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPANotAtRishPresentValueOfVestedBenefits.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPA Not-At-Risk Present Value of Vested Benefits";
                    this.mchkPPANotAtRishPresentValueOfVestedBenefits.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPANotAtRishPresentValueOfVestedBenefits.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPPANotAtRishPresentValueOfVestedBenefits;
            }
        }
        
        public WinCheckBox chkPBGCNotAtRiskPresentValueOfVestedBenefits
        {
            get
            {
                if ((this.mchkPBGCNotAtRiskPresentValueOfVestedBenefits == null))
                {
                    this.mchkPBGCNotAtRiskPresentValueOfVestedBenefits = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPBGCNotAtRiskPresentValueOfVestedBenefits.SearchProperties[WinCheckBox.PropertyNames.Name] = "PBGC Not-At-Risk Present Value of Vested Benefits";
                    this.mchkPBGCNotAtRiskPresentValueOfVestedBenefits.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPBGCNotAtRiskPresentValueOfVestedBenefits.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPBGCNotAtRiskPresentValueOfVestedBenefits;
            }
        }
        
        public WinCheckBox chkFAS35PresentValueOfAccumulatedBenefits
        {
            get
            {
                if ((this.mchkFAS35PresentValueOfAccumulatedBenefits == null))
                {
                    this.mchkFAS35PresentValueOfAccumulatedBenefits = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkFAS35PresentValueOfAccumulatedBenefits.SearchProperties[WinCheckBox.PropertyNames.Name] = "FAS 35 Present Value of Accumulated Benefits";
                    this.mchkFAS35PresentValueOfAccumulatedBenefits.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkFAS35PresentValueOfAccumulatedBenefits.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkFAS35PresentValueOfAccumulatedBenefits;
            }
        }
        
        public WinCheckBox chkFAS35PresentValueOfVestedBenefits
        {
            get
            {
                if ((this.mchkFAS35PresentValueOfVestedBenefits == null))
                {
                    this.mchkFAS35PresentValueOfVestedBenefits = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkFAS35PresentValueOfVestedBenefits.SearchProperties[WinCheckBox.PropertyNames.Name] = "FAS 35 Present Value of Vested Benefits";
                    this.mchkFAS35PresentValueOfVestedBenefits.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkFAS35PresentValueOfVestedBenefits.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkFAS35PresentValueOfVestedBenefits;
            }
        }
        
        public WinCheckBox chkPPAAtRiskLiabilityForMinimum
        {
            get
            {
                if ((this.mchkPPAAtRiskLiabilityForMinimum == null))
                {
                    this.mchkPPAAtRiskLiabilityForMinimum = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPAAtRiskLiabilityForMinimum.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPA At-Risk Liability for Minimum";
                    this.mchkPPAAtRiskLiabilityForMinimum.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPAAtRiskLiabilityForMinimum.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPPAAtRiskLiabilityForMinimum;
            }
        }
        
        public WinCheckBox chkPPAAtRiskLiabilityForMaximum
        {
            get
            {
                if ((this.mchkPPAAtRiskLiabilityForMaximum == null))
                {
                    this.mchkPPAAtRiskLiabilityForMaximum = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPAAtRiskLiabilityForMaximum.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPA At-Risk Liability for Maximum";
                    this.mchkPPAAtRiskLiabilityForMaximum.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPAAtRiskLiabilityForMaximum.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPPAAtRiskLiabilityForMaximum;
            }
        }
        
        public WinCheckBox chkPPAAtRiskPresentValueOfVestedBenefits
        {
            get
            {
                if ((this.mchkPPAAtRiskPresentValueOfVestedBenefits == null))
                {
                    this.mchkPPAAtRiskPresentValueOfVestedBenefits = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPAAtRiskPresentValueOfVestedBenefits.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPA At-Risk Present Value of Vested Benefits";
                    this.mchkPPAAtRiskPresentValueOfVestedBenefits.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPAAtRiskPresentValueOfVestedBenefits.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPPAAtRiskPresentValueOfVestedBenefits;
            }
        }
        
        public WinCheckBox chkPBGCAtRiskPresentValueOfVestedBenefits
        {
            get
            {
                if ((this.mchkPBGCAtRiskPresentValueOfVestedBenefits == null))
                {
                    this.mchkPBGCAtRiskPresentValueOfVestedBenefits = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPBGCAtRiskPresentValueOfVestedBenefits.SearchProperties[WinCheckBox.PropertyNames.Name] = "PBGC At-Risk Present Value of Vested Benefits";
                    this.mchkPBGCAtRiskPresentValueOfVestedBenefits.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPBGCAtRiskPresentValueOfVestedBenefits.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPBGCAtRiskPresentValueOfVestedBenefits;
            }
        }
        
        public WinCheckBox chkEntryAgeNormal
        {
            get
            {
                if ((this.mchkEntryAgeNormal == null))
                {
                    this.mchkEntryAgeNormal = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkEntryAgeNormal.SearchProperties[WinCheckBox.PropertyNames.Name] = "Entry Age Normal";
                    this.mchkEntryAgeNormal.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkEntryAgeNormal.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkEntryAgeNormal;
            }
        }
        
        public WinCheckBox chkProjectedBenefitObligation
        {
            get
            {
                if ((this.mchkProjectedBenefitObligation == null))
                {
                    this.mchkProjectedBenefitObligation = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkProjectedBenefitObligation.SearchProperties[WinCheckBox.PropertyNames.Name] = "Projected Benefit Obligation";
                    this.mchkProjectedBenefitObligation.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkProjectedBenefitObligation.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkProjectedBenefitObligation;
            }
        }
        
        public WinCheckBox chkAccumulatedBenefitObligation
        {
            get
            {
                if ((this.mchkAccumulatedBenefitObligation == null))
                {
                    this.mchkAccumulatedBenefitObligation = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAccumulatedBenefitObligation.SearchProperties[WinCheckBox.PropertyNames.Name] = "Accumulated Benefit Obligation";
                    this.mchkAccumulatedBenefitObligation.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAccumulatedBenefitObligation.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkAccumulatedBenefitObligation;
            }
        }
        
        public WinCheckBox chkPBGCPlanTermination
        {
            get
            {
                if ((this.mchkPBGCPlanTermination == null))
                {
                    this.mchkPBGCPlanTermination = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPBGCPlanTermination.SearchProperties[WinCheckBox.PropertyNames.Name] = "PBGC Plan Termination";
                    this.mchkPBGCPlanTermination.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPBGCPlanTermination.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPBGCPlanTermination;
            }
        }
        
        public WinCheckBox chkNondiscrimination
        {
            get
            {
                if ((this.mchkNondiscrimination == null))
                {
                    this.mchkNondiscrimination = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkNondiscrimination.SearchProperties[WinCheckBox.PropertyNames.Name] = "Nondiscrimination";
                    this.mchkNondiscrimination.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkNondiscrimination.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkNondiscrimination;
            }
        }
        
        public WinCheckBox chkGoingConcernLiability
        {
            get
            {
                if ((this.mchkGoingConcernLiability == null))
                {
                    this.mchkGoingConcernLiability = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGoingConcernLiability.SearchProperties[WinCheckBox.PropertyNames.Name] = "Going Concern Liability";
                    this.mchkGoingConcernLiability.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkGoingConcernLiability.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkGoingConcernLiability;
            }
        }
        
        public WinCheckBox chkSolvencyLiability
        {
            get
            {
                if ((this.mchkSolvencyLiability == null))
                {
                    this.mchkSolvencyLiability = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkSolvencyLiability.SearchProperties[WinCheckBox.PropertyNames.Name] = "Solvency Liability";
                    this.mchkSolvencyLiability.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkSolvencyLiability.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkSolvencyLiability;
            }
        }
        
        public WinCheckBox chkWindUpLiability
        {
            get
            {
                if ((this.mchkWindUpLiability == null))
                {
                    this.mchkWindUpLiability = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkWindUpLiability.SearchProperties[WinCheckBox.PropertyNames.Name] = "Wind-Up Liability";
                    this.mchkWindUpLiability.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkWindUpLiability.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkWindUpLiability;
            }
        }
        
        public WinCheckBox chkTax
        {
            get
            {
                if ((this.mchkTax == null))
                {
                    this.mchkTax = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkTax.SearchProperties[WinCheckBox.PropertyNames.Name] = "Tax";
                    this.mchkTax.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkTax.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkTax;
            }
        }
        
        public WinCheckBox chkTrade
        {
            get
            {
                if ((this.mchkTrade == null))
                {
                    this.mchkTrade = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkTrade.SearchProperties[WinCheckBox.PropertyNames.Name] = "Trade";
                    this.mchkTrade.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkTrade.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkTrade;
            }
        }
        
        public WinCheckBox chkInternationalAccountingABO
        {
            get
            {
                if ((this.mchkInternationalAccountingABO == null))
                {
                    this.mchkInternationalAccountingABO = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkInternationalAccountingABO.SearchProperties[WinCheckBox.PropertyNames.Name] = "International Accounting ABO";
                    this.mchkInternationalAccountingABO.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkInternationalAccountingABO.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkInternationalAccountingABO;
            }
        }
        
        public WinCheckBox chkInternationalAccountingPBO
        {
            get
            {
                if ((this.mchkInternationalAccountingPBO == null))
                {
                    this.mchkInternationalAccountingPBO = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkInternationalAccountingPBO.SearchProperties[WinCheckBox.PropertyNames.Name] = "International Accounting PBO";
                    this.mchkInternationalAccountingPBO.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkInternationalAccountingPBO.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkInternationalAccountingPBO;
            }
        }
        
        public WinCheckBox chkFunding
        {
            get
            {
                if ((this.mchkFunding == null))
                {
                    this.mchkFunding = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkFunding.SearchProperties[WinCheckBox.PropertyNames.Name] = "Funding";
                    this.mchkFunding.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkFunding.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkFunding;
            }
        }
        
        public WinCheckBox chkAltFunding1
        {
            get
            {
                if ((this.mchkAltFunding1 == null))
                {
                    this.mchkAltFunding1 = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAltFunding1.SearchProperties[WinCheckBox.PropertyNames.Name] = "Alt Funding 1";
                    this.mchkAltFunding1.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAltFunding1.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkAltFunding1;
            }
        }
        
        public WinCheckBox chkAltFunding2
        {
            get
            {
                if ((this.mchkAltFunding2 == null))
                {
                    this.mchkAltFunding2 = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAltFunding2.SearchProperties[WinCheckBox.PropertyNames.Name] = "Alt Funding 2";
                    this.mchkAltFunding2.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAltFunding2.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkAltFunding2;
            }
        }
        
        public WinCheckBox chkAltFunding3
        {
            get
            {
                if ((this.mchkAltFunding3 == null))
                {
                    this.mchkAltFunding3 = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAltFunding3.SearchProperties[WinCheckBox.PropertyNames.Name] = "Alt Funding 3";
                    this.mchkAltFunding3.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAltFunding3.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkAltFunding3;
            }
        }
        
        public WinCheckBox chkSolvency
        {
            get
            {
                if ((this.mchkSolvency == null))
                {
                    this.mchkSolvency = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkSolvency.SearchProperties[WinCheckBox.PropertyNames.Name] = "Solvency";
                    this.mchkSolvency.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkSolvency.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkSolvency;
            }
        }
        
        public WinCheckBox chkPPFS179
        {
            get
            {
                if ((this.mchkPPFS179 == null))
                {
                    this.mchkPPFS179 = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPFS179.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPF S179";
                    this.mchkPPFS179.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPFS179.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkPPFS179;
            }
        }
        
        public WinCheckBox chkAltTradeProjIntCheck
        {
            get
            {
                if ((this.mchkAltTradeProjIntCheck == null))
                {
                    this.mchkAltTradeProjIntCheck = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAltTradeProjIntCheck.SearchProperties[WinCheckBox.PropertyNames.Name] = "Alt Trade Proj Int";
                    this.mchkAltTradeProjIntCheck.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAltTradeProjIntCheck.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkAltTradeProjIntCheck;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAllLiabilityTypes;
        
        private WinCheckBox mchkPPANotAtRiskLiabilityForMinimum;
        
        private WinCheckBox mchkPPANotAtRiskLiabilityForMaximum;
        
        private WinCheckBox mchkPPANotAtRishPresentValueOfVestedBenefits;
        
        private WinCheckBox mchkPBGCNotAtRiskPresentValueOfVestedBenefits;
        
        private WinCheckBox mchkFAS35PresentValueOfAccumulatedBenefits;
        
        private WinCheckBox mchkFAS35PresentValueOfVestedBenefits;
        
        private WinCheckBox mchkPPAAtRiskLiabilityForMinimum;
        
        private WinCheckBox mchkPPAAtRiskLiabilityForMaximum;
        
        private WinCheckBox mchkPPAAtRiskPresentValueOfVestedBenefits;
        
        private WinCheckBox mchkPBGCAtRiskPresentValueOfVestedBenefits;
        
        private WinCheckBox mchkEntryAgeNormal;
        
        private WinCheckBox mchkProjectedBenefitObligation;
        
        private WinCheckBox mchkAccumulatedBenefitObligation;
        
        private WinCheckBox mchkPBGCPlanTermination;
        
        private WinCheckBox mchkNondiscrimination;
        
        private WinCheckBox mchkGoingConcernLiability;
        
        private WinCheckBox mchkSolvencyLiability;
        
        private WinCheckBox mchkWindUpLiability;
        
        private WinCheckBox mchkTax;
        
        private WinCheckBox mchkTrade;
        
        private WinCheckBox mchkInternationalAccountingABO;
        
        private WinCheckBox mchkInternationalAccountingPBO;
        
        private WinCheckBox mchkFunding;
        
        private WinCheckBox mchkAltFunding1;
        
        private WinCheckBox mchkAltFunding2;
        
        private WinCheckBox mchkAltFunding3;
        
        private WinCheckBox mchkSolvency;
        
        private WinCheckBox mchkPPFS179;
        
        private WinCheckBox mchkAltTradeProjIntCheck;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayoutProjectionCustomGroup : WinWindow
    {
        
        public wPayoutProjectionCustomGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboPayoutProjectionCustomGroup";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPayoutProjectionCustomGroup
        {
            get
            {
                if ((this.mcboPayoutProjectionCustomGroup == null))
                {
                    this.mcboPayoutProjectionCustomGroup = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPayoutProjectionCustomGroup.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboPayoutProjectionCustomGroup.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mcboPayoutProjectionCustomGroup;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPayoutProjectionCustomGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGL_PBO : WinWindow
    {
        
        public wGL_PBO(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPBOGLRun";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkGL_PBO
        {
            get
            {
                if ((this.mchkGL_PBO == null))
                {
                    this.mchkGL_PBO = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGL_PBO.SearchProperties[WinCheckBox.PropertyNames.Name] = "G/L Projected Benefit Obligation";
                    this.mchkGL_PBO.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkGL_PBO.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkGL_PBO;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkGL_PBO;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGL_ABO : WinWindow
    {
        
        public wGL_ABO(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkABOGLRun";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkGL_ABO
        {
            get
            {
                if ((this.mchkGL_ABO == null))
                {
                    this.mchkGL_ABO = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGL_ABO.SearchProperties[WinCheckBox.PropertyNames.Name] = "G/L Accumulated Benefit Obligation";
                    this.mchkGL_ABO.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkGL_ABO.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkGL_ABO;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkGL_ABO;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGL_GoingConcern : WinWindow
    {
        
        public wGL_GoingConcern(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGoingConcernGLRun";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkGL_GoingConcern
        {
            get
            {
                if ((this.mchkGL_GoingConcern == null))
                {
                    this.mchkGL_GoingConcern = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGL_GoingConcern.SearchProperties[WinCheckBox.PropertyNames.Name] = "G/L Going Concern Liability";
                    this.mchkGL_GoingConcern.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkGL_GoingConcern.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkGL_GoingConcern;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkGL_GoingConcern;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyWithdrawalAdjustment : WinWindow
    {
        
        public wApplyWithdrawalAdjustment(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkApplyWithdrawalAdjustment";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply Withdrawal Adjustment to Payout Projection";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSaveResultsforAuditReport : WinWindow
    {
        
        public wSaveResultsforAuditReport(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkSaveResultsForAuditReport";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Save Results for Audit Report";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyOverrides : WinWindow
    {
        
        public wApplyOverrides(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkApplyOverrides";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply Overrides";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunLocally : WinWindow
    {
        
        public wRunLocally(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkRunLocally";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Run Locally";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBreakByFundingVehicle : WinWindow
    {
        
        public wBreakByFundingVehicle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkBreakByFundingVehicle";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Break by Funding Vehicle type in reports with Tax results";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUseReportBreaks : WinWindow
    {
        
        public wUseReportBreaks(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkUseReportBreaks";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use report breaks";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectVOs : WinWindow
    {
        
        public wSelectVOs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "clbSelectValGroups";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAllVOs
        {
            get
            {
                if ((this.mchkAllVOs == null))
                {
                    this.mchkAllVOs = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAllVOs.SearchProperties[WinCheckBox.PropertyNames.Name] = "All VOs";
                    this.mchkAllVOs.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAllVOs.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchkAllVOs;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAllVOs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMajor : WinWindow
    {
        
        public wMajor(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbMajor";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIntermediate : WinWindow
    {
        
        public wIntermediate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbMedia";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMinor : WinWindow
    {
        
        public wMinor(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbMinor";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectRecords : WinWindow
    {
        
        public wSelectRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_acTextBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValidate : WinWindow
    {
        
        public wValidate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnValidate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Validate";
                    this.mbtn.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCalcIncreCostSolvencyWindup : WinWindow
    {
        
        public wCalcIncreCostSolvencyWindup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkSolvencyIncrementalCost";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Calculate Incremental Cost for Solvency/Wind-up";
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGL_WindUp : WinWindow
    {
        
        public wGL_WindUp(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkWindupGLRun";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "G/L Wind-Up Liability";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGL_Solvency : WinWindow
    {
        
        public wGL_Solvency(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkSolvencyGLRun";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chx
        {
            get
            {
                if ((this.mchx == null))
                {
                    this.mchx = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchx.SearchProperties[WinCheckBox.PropertyNames.Name] = "G/L Solvency Liability";
                    this.mchx.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchx;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchx;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludeGainLossAgeGroupReportField : WinWindow
    {
        
        public wIncludeGainLossAgeGroupReportField(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIncludeGLAgeGroupReportFields";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chx
        {
            get
            {
                if ((this.mchx == null))
                {
                    this.mchx = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchx.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include Gain Loss Age Group Report Fields";
                    this.mchx.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchx;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchx;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectNodes : WinWindow
    {
        
        public wSelectNodes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSelectNodes";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Select Nodes";
                    this.mbtn.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class w2DPayoutProjection : WinWindow
    {
        
        public w2DPayoutProjection(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkTwoDPayoutProjections";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "2D Payout Projections";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGL_FundingLiabilities : WinWindow
    {
        
        public wGL_FundingLiabilities(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGainLossFundingLiabilites";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Gain/Loss Funding Liabilities";
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludeSpecialPayment : WinWindow
    {
        
        public wIncludeSpecialPayment(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ChkSPT";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include special payment calculations";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class w2DCashflowProjection : WinWindow
    {
        
        public w2DCashflowProjection(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chk2DCashflowProjection";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "2D Cashflow Projection";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayoutProjectionbyParticipant : WinWindow
    {
        
        public wPayoutProjectionbyParticipant(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPayoutProjectionByParticipant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Payout Projection by Participant";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGainLossLiabilities_pension : WinWindow
    {
        
        public wGainLossLiabilities_pension(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGainLossLiabilities";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Gain/Loss Liabilities";
                    this.mchk.WindowTitles.Add("Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEnterpriseRunSubmitted : WinWindow
    {
        
        public wEnterpriseRunSubmitted()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Enterprise Run Submitted";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Enterprise Run Submitted");
            #endregion
        }
        
        #region Properties
        public wMessage1 wMessage
        {
            get
            {
                if ((this.mwMessage == null))
                {
                    this.mwMessage = new wMessage1(this);
                }
                return this.mwMessage;
            }
        }
        
        public wOK8 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK8(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wMessage1 mwMessage;
        
        private wOK8 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMessage1 : WinWindow
    {
        
        public wMessage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Enterprise Run Submitted");
            #endregion
        }
        
        #region Properties
        public WinText txtMessage
        {
            get
            {
                if ((this.mtxtMessage == null))
                {
                    this.mtxtMessage = new WinText(this);
                    #region Search Criteria
                    this.mtxtMessage.WindowTitles.Add("Enterprise Run Submitted");
                    #endregion
                }
                return this.mtxtMessage;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK8 : WinWindow
    {
        
        public wOK8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Enterprise Run Submitted");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Enterprise Run Submitted");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValNodeProperties : WinWindow
    {
        
        public wValNodeProperties()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Properties";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public wValNodeName wValNodeName
        {
            get
            {
                if ((this.mwValNodeName == null))
                {
                    this.mwValNodeName = new wValNodeName(this);
                }
                return this.mwValNodeName;
            }
        }
        
        public wLiabilityValuationDate wLiabilityValuationDate
        {
            get
            {
                if ((this.mwLiabilityValuationDate == null))
                {
                    this.mwLiabilityValuationDate = new wLiabilityValuationDate(this);
                }
                return this.mwLiabilityValuationDate;
            }
        }
        
        public wData_AddNew wData_AddNew
        {
            get
            {
                if ((this.mwData_AddNew == null))
                {
                    this.mwData_AddNew = new wData_AddNew(this);
                }
                return this.mwData_AddNew;
            }
        }
        
        public wData_Edit wData_Edit
        {
            get
            {
                if ((this.mwData_Edit == null))
                {
                    this.mwData_Edit = new wData_Edit(this);
                }
                return this.mwData_Edit;
            }
        }
        
        public wData_Name wData_Name
        {
            get
            {
                if ((this.mwData_Name == null))
                {
                    this.mwData_Name = new wData_Name(this);
                }
                return this.mwData_Name;
            }
        }
        
        public wAssumptions_AddNew wAssumptions_AddNew
        {
            get
            {
                if ((this.mwAssumptions_AddNew == null))
                {
                    this.mwAssumptions_AddNew = new wAssumptions_AddNew(this);
                }
                return this.mwAssumptions_AddNew;
            }
        }
        
        public wAssumptions_Edit wAssumptions_Edit
        {
            get
            {
                if ((this.mwAssumptions_Edit == null))
                {
                    this.mwAssumptions_Edit = new wAssumptions_Edit(this);
                }
                return this.mwAssumptions_Edit;
            }
        }
        
        public wAssumptions_Name wAssumptions_Name
        {
            get
            {
                if ((this.mwAssumptions_Name == null))
                {
                    this.mwAssumptions_Name = new wAssumptions_Name(this);
                }
                return this.mwAssumptions_Name;
            }
        }
        
        public wMethodsLiabilities_AddNew wMethodsLiabilities_AddNew
        {
            get
            {
                if ((this.mwMethodsLiabilities_AddNew == null))
                {
                    this.mwMethodsLiabilities_AddNew = new wMethodsLiabilities_AddNew(this);
                }
                return this.mwMethodsLiabilities_AddNew;
            }
        }
        
        public wMethodsLiabilities_Edit wMethodsLiabilities_Edit
        {
            get
            {
                if ((this.mwMethodsLiabilities_Edit == null))
                {
                    this.mwMethodsLiabilities_Edit = new wMethodsLiabilities_Edit(this);
                }
                return this.mwMethodsLiabilities_Edit;
            }
        }
        
        public wMethodsLiabilities_Name wMethodsLiabilities_Name
        {
            get
            {
                if ((this.mwMethodsLiabilities_Name == null))
                {
                    this.mwMethodsLiabilities_Name = new wMethodsLiabilities_Name(this);
                }
                return this.mwMethodsLiabilities_Name;
            }
        }
        
        public wProvisions_AddNew wProvisions_AddNew
        {
            get
            {
                if ((this.mwProvisions_AddNew == null))
                {
                    this.mwProvisions_AddNew = new wProvisions_AddNew(this);
                }
                return this.mwProvisions_AddNew;
            }
        }
        
        public wProvisions_Edit wProvisions_Edit
        {
            get
            {
                if ((this.mwProvisions_Edit == null))
                {
                    this.mwProvisions_Edit = new wProvisions_Edit(this);
                }
                return this.mwProvisions_Edit;
            }
        }
        
        public wProvisions_Name wProvisions_Name
        {
            get
            {
                if ((this.mwProvisions_Name == null))
                {
                    this.mwProvisions_Name = new wProvisions_Name(this);
                }
                return this.mwProvisions_Name;
            }
        }
        
        public wFundingInformation_AddNew wFundingInformation_AddNew
        {
            get
            {
                if ((this.mwFundingInformation_AddNew == null))
                {
                    this.mwFundingInformation_AddNew = new wFundingInformation_AddNew(this);
                }
                return this.mwFundingInformation_AddNew;
            }
        }
        
        public wFundingInformation_Edit wFundingInformation_Edit
        {
            get
            {
                if ((this.mwFundingInformation_Edit == null))
                {
                    this.mwFundingInformation_Edit = new wFundingInformation_Edit(this);
                }
                return this.mwFundingInformation_Edit;
            }
        }
        
        public wFundingInformation_Name wFundingInformation_Name
        {
            get
            {
                if ((this.mwFundingInformation_Name == null))
                {
                    this.mwFundingInformation_Name = new wFundingInformation_Name(this);
                }
                return this.mwFundingInformation_Name;
            }
        }
        
        public wOK9 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK9(this);
                }
                return this.mwOK;
            }
        }
        
        public wChangeReason_FPGrid wChangeReason_FPGrid
        {
            get
            {
                if ((this.mwChangeReason_FPGrid == null))
                {
                    this.mwChangeReason_FPGrid = new wChangeReason_FPGrid(this);
                }
                return this.mwChangeReason_FPGrid;
            }
        }
        
        public UINodecreatedtoprovideGroup UINodecreatedtoprovideGroup
        {
            get
            {
                if ((this.mUINodecreatedtoprovideGroup == null))
                {
                    this.mUINodecreatedtoprovideGroup = new UINodecreatedtoprovideGroup(this);
                }
                return this.mUINodecreatedtoprovideGroup;
            }
        }
        #endregion
        
        #region Fields
        private wValNodeName mwValNodeName;
        
        private wLiabilityValuationDate mwLiabilityValuationDate;
        
        private wData_AddNew mwData_AddNew;
        
        private wData_Edit mwData_Edit;
        
        private wData_Name mwData_Name;
        
        private wAssumptions_AddNew mwAssumptions_AddNew;
        
        private wAssumptions_Edit mwAssumptions_Edit;
        
        private wAssumptions_Name mwAssumptions_Name;
        
        private wMethodsLiabilities_AddNew mwMethodsLiabilities_AddNew;
        
        private wMethodsLiabilities_Edit mwMethodsLiabilities_Edit;
        
        private wMethodsLiabilities_Name mwMethodsLiabilities_Name;
        
        private wProvisions_AddNew mwProvisions_AddNew;
        
        private wProvisions_Edit mwProvisions_Edit;
        
        private wProvisions_Name mwProvisions_Name;
        
        private wFundingInformation_AddNew mwFundingInformation_AddNew;
        
        private wFundingInformation_Edit mwFundingInformation_Edit;
        
        private wFundingInformation_Name mwFundingInformation_Name;
        
        private wOK9 mwOK;
        
        private wChangeReason_FPGrid mwChangeReason_FPGrid;
        
        private UINodecreatedtoprovideGroup mUINodecreatedtoprovideGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValNodeName : WinWindow
    {
        
        public wValNodeName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtBoxName";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtValNodeName
        {
            get
            {
                if ((this.mtxtValNodeName == null))
                {
                    this.mtxtValNodeName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtValNodeName.SearchProperties[WinEdit.PropertyNames.Name] = "Val Node Name";
                    this.mtxtValNodeName.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mtxtValNodeName;
            }
        }
        
        public WinEdit BoxNodeName
        {
            get
            {
                if ((this.mBoxNodeName == null))
                {
                    this.mBoxNodeName = new WinEdit(this);
                    #region Search Criteria
                    this.mBoxNodeName.SearchProperties[WinEdit.PropertyNames.Name] = "Node Name";
                    this.mBoxNodeName.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mBoxNodeName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtValNodeName;
        
        private WinEdit mBoxNodeName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLiabilityValuationDate : WinComboBox
    {
        
        public wLiabilityValuationDate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtLiabilityValuationDate
        {
            get
            {
                if ((this.mtxtLiabilityValuationDate == null))
                {
                    this.mtxtLiabilityValuationDate = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtLiabilityValuationDate.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxtLiabilityValuationDate.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mtxtLiabilityValuationDate;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtLiabilityValuationDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wData_AddNew : WinWindow
    {
        
        public wData_AddNew(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAddData";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkData_AddNew
        {
            get
            {
                if ((this.mchkData_AddNew == null))
                {
                    this.mchkData_AddNew = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkData_AddNew.SearchProperties[WinCheckBox.PropertyNames.Name] = "Add New";
                    this.mchkData_AddNew.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mchkData_AddNew;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkData_AddNew;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wData_Edit : WinWindow
    {
        
        public wData_Edit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnEditData";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnData_Edit
        {
            get
            {
                if ((this.mbtnData_Edit == null))
                {
                    this.mbtnData_Edit = new WinButton(this);
                    #region Search Criteria
                    this.mbtnData_Edit.SearchProperties[WinButton.PropertyNames.Name] = "Edit";
                    this.mbtnData_Edit.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mbtnData_Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnData_Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wData_Name : WinWindow
    {
        
        public wData_Name(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtDataName";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtData_Name
        {
            get
            {
                if ((this.mtxtData_Name == null))
                {
                    this.mtxtData_Name = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtData_Name.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mtxtData_Name;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtData_Name;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAssumptions_AddNew : WinWindow
    {
        
        public wAssumptions_AddNew(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAddAssumptions";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAssumptions_AddNew
        {
            get
            {
                if ((this.mchkAssumptions_AddNew == null))
                {
                    this.mchkAssumptions_AddNew = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAssumptions_AddNew.SearchProperties[WinCheckBox.PropertyNames.Name] = "Add New";
                    this.mchkAssumptions_AddNew.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mchkAssumptions_AddNew;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAssumptions_AddNew;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAssumptions_Edit : WinWindow
    {
        
        public wAssumptions_Edit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnEditAssumption";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnAssumptions_Edit
        {
            get
            {
                if ((this.mbtnAssumptions_Edit == null))
                {
                    this.mbtnAssumptions_Edit = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAssumptions_Edit.SearchProperties[WinButton.PropertyNames.Name] = "Edit";
                    this.mbtnAssumptions_Edit.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mbtnAssumptions_Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAssumptions_Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAssumptions_Name : WinWindow
    {
        
        public wAssumptions_Name(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtAssumptionName";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtAssumptions_Name
        {
            get
            {
                if ((this.mtxtAssumptions_Name == null))
                {
                    this.mtxtAssumptions_Name = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtAssumptions_Name.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mtxtAssumptions_Name;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtAssumptions_Name;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMethodsLiabilities_AddNew : WinWindow
    {
        
        public wMethodsLiabilities_AddNew(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAddMethods";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkMethodsLiabilities_AddNew
        {
            get
            {
                if ((this.mchkMethodsLiabilities_AddNew == null))
                {
                    this.mchkMethodsLiabilities_AddNew = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkMethodsLiabilities_AddNew.SearchProperties[WinCheckBox.PropertyNames.Name] = "Add New";
                    this.mchkMethodsLiabilities_AddNew.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mchkMethodsLiabilities_AddNew;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkMethodsLiabilities_AddNew;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMethodsLiabilities_Edit : WinWindow
    {
        
        public wMethodsLiabilities_Edit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnEditLiability";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnMethodsLiabilities_Edit
        {
            get
            {
                if ((this.mbtnMethodsLiabilities_Edit == null))
                {
                    this.mbtnMethodsLiabilities_Edit = new WinButton(this);
                    #region Search Criteria
                    this.mbtnMethodsLiabilities_Edit.SearchProperties[WinButton.PropertyNames.Name] = "Edit";
                    this.mbtnMethodsLiabilities_Edit.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mbtnMethodsLiabilities_Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnMethodsLiabilities_Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMethodsLiabilities_Name : WinWindow
    {
        
        public wMethodsLiabilities_Name(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtMethodsName";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtMethodsLiabilities_Name
        {
            get
            {
                if ((this.mtxtMethodsLiabilities_Name == null))
                {
                    this.mtxtMethodsLiabilities_Name = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtMethodsLiabilities_Name.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mtxtMethodsLiabilities_Name;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtMethodsLiabilities_Name;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProvisions_AddNew : WinWindow
    {
        
        public wProvisions_AddNew(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAddProvisions";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkProvisions_AddNew
        {
            get
            {
                if ((this.mchkProvisions_AddNew == null))
                {
                    this.mchkProvisions_AddNew = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkProvisions_AddNew.SearchProperties[WinCheckBox.PropertyNames.Name] = "Add New";
                    this.mchkProvisions_AddNew.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mchkProvisions_AddNew;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkProvisions_AddNew;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProvisions_Edit : WinWindow
    {
        
        public wProvisions_Edit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnEditProvision";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnProvisions_Edit
        {
            get
            {
                if ((this.mbtnProvisions_Edit == null))
                {
                    this.mbtnProvisions_Edit = new WinButton(this);
                    #region Search Criteria
                    this.mbtnProvisions_Edit.SearchProperties[WinButton.PropertyNames.Name] = "Edit";
                    this.mbtnProvisions_Edit.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mbtnProvisions_Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnProvisions_Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProvisions_Name : WinWindow
    {
        
        public wProvisions_Name(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtProvisionName";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtProvisions_Name
        {
            get
            {
                if ((this.mtxtProvisions_Name == null))
                {
                    this.mtxtProvisions_Name = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtProvisions_Name.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mtxtProvisions_Name;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtProvisions_Name;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFundingInformation_AddNew : WinWindow
    {
        
        public wFundingInformation_AddNew(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAddFifthSet";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkFundingInformation_AddNew
        {
            get
            {
                if ((this.mchkFundingInformation_AddNew == null))
                {
                    this.mchkFundingInformation_AddNew = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkFundingInformation_AddNew.SearchProperties[WinCheckBox.PropertyNames.Name] = "Add New";
                    this.mchkFundingInformation_AddNew.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mchkFundingInformation_AddNew;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkFundingInformation_AddNew;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFundingInformation_Edit : WinWindow
    {
        
        public wFundingInformation_Edit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnEditFundingInformation";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnFundingInformation_Edit
        {
            get
            {
                if ((this.mbtnFundingInformation_Edit == null))
                {
                    this.mbtnFundingInformation_Edit = new WinButton(this);
                    #region Search Criteria
                    this.mbtnFundingInformation_Edit.SearchProperties[WinButton.PropertyNames.Name] = "Edit";
                    this.mbtnFundingInformation_Edit.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mbtnFundingInformation_Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnFundingInformation_Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFundingInformation_Name : WinWindow
    {
        
        public wFundingInformation_Name(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtFifthName";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFundingInformation_Name
        {
            get
            {
                if ((this.mtxtFundingInformation_Name == null))
                {
                    this.mtxtFundingInformation_Name = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFundingInformation_Name.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mtxtFundingInformation_Name;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFundingInformation_Name;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK9 : WinWindow
    {
        
        public wOK9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOK";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wChangeReason_FPGrid : WinWindow
    {
        
        public wChangeReason_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprEventChangeReason";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mgrid;
            }
        }
        
        public WinClient UIBaselineClient
        {
            get
            {
                if ((this.mUIBaselineClient == null))
                {
                    this.mUIBaselineClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIBaselineClient.SearchProperties[WinControl.PropertyNames.Name] = "Baseline";
                    this.mUIBaselineClient.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mUIBaselineClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        
        private WinClient mUIBaselineClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UINodecreatedtoprovideGroup : WinGroup
    {
        
        public UINodecreatedtoprovideGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Node created to provide changes...";
            this.WindowTitles.Add("Properties");
            #endregion
        }
        
        #region Properties
        public WinWindow UISprEventChangeReasonWindow
        {
            get
            {
                if ((this.mUISprEventChangeReasonWindow == null))
                {
                    this.mUISprEventChangeReasonWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUISprEventChangeReasonWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUISprEventChangeReasonWindow.WindowTitles.Add("Properties");
                    #endregion
                }
                return this.mUISprEventChangeReasonWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUISprEventChangeReasonWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFundingCalculationRunCompleted : WinWindow
    {
        
        public wFundingCalculationRunCompleted()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Funding Calculation Run Completed";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Funding Calculation Run Completed");
            #endregion
        }
        
        #region Properties
        public wOK10 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK10(this);
                }
                return this.mwOK;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private wOK10 mwOK;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK10 : WinWindow
    {
        
        public wOK10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Funding Calculation Run Completed");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Funding Calculation Run Completed");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Funding Calculation Run Completed");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Funding Calculation Run Completed");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGenerateNewReport : WinWindow
    {
        
        public wGenerateNewReport()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Generate New Report";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Generate New Report");
            #endregion
        }
        
        #region Properties
        public wFlowTree1 wFlowTree
        {
            get
            {
                if ((this.mwFlowTree == null))
                {
                    this.mwFlowTree = new wFlowTree1(this);
                }
                return this.mwFlowTree;
            }
        }
        
        public wReportName wReportName
        {
            get
            {
                if ((this.mwReportName == null))
                {
                    this.mwReportName = new wReportName(this);
                }
                return this.mwReportName;
            }
        }
        
        public wOK11 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK11(this);
                }
                return this.mwOK;
            }
        }
        
        public wReportStandard wReportStandard
        {
            get
            {
                if ((this.mwReportStandard == null))
                {
                    this.mwReportStandard = new wReportStandard(this);
                }
                return this.mwReportStandard;
            }
        }
        
        public wReportFormat wReportFormat
        {
            get
            {
                if ((this.mwReportFormat == null))
                {
                    this.mwReportFormat = new wReportFormat(this);
                }
                return this.mwReportFormat;
            }
        }
        #endregion
        
        #region Fields
        private wFlowTree1 mwFlowTree;
        
        private wReportName mwReportName;
        
        private wOK11 mwOK;
        
        private wReportStandard mwReportStandard;
        
        private wReportFormat mwReportFormat;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFlowTree1 : WinWindow
    {
        
        public wFlowTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "flowTree";
            this.WindowTitles.Add("Generate New Report");
            #endregion
        }
        
        #region Properties
        public WinClient flowTree
        {
            get
            {
                if ((this.mflowTree == null))
                {
                    this.mflowTree = new WinClient(this);
                    #region Search Criteria
                    this.mflowTree.WindowTitles.Add("Generate New Report");
                    #endregion
                }
                return this.mflowTree;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mflowTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wReportName : WinWindow
    {
        
        public wReportName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtReportName";
            this.WindowTitles.Add("Generate New Report");
            #endregion
        }
        
        #region Properties
        public WinEdit txtReportName
        {
            get
            {
                if ((this.mtxtReportName == null))
                {
                    this.mtxtReportName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtReportName.WindowTitles.Add("Generate New Report");
                    #endregion
                }
                return this.mtxtReportName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtReportName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK11 : WinWindow
    {
        
        public wOK11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Generate New Report");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Generate New Report");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wReportStandard : WinWindow
    {
        
        public wReportStandard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboReportStandard";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Generate New Report");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Report Format";
                    this.mcbo.WindowTitles.Add("Generate New Report");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wReportFormat : WinWindow
    {
        
        public wReportFormat(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboReportFormat";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Generate New Report");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Generate New Report");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wConfirmRedate : WinWindow
    {
        
        public wConfirmRedate()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Redate";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm Redate");
            #endregion
        }
        
        #region Properties
        public wYes2 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes2(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes2 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes2 : WinWindow
    {
        
        public wYes2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm Redate");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.WindowTitles.Add("Confirm Redate");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWord_Popup : WinWindow
    {
        
        public wWord_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wOK12 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK12(this);
                }
                return this.mwOK;
            }
        }
        
        public wYes3 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes3(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wOK12 mwOK;
        
        private wYes3 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK12 : WinWindow
    {
        
        public wOK12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes3 : WinWindow
    {
        
        public wYes3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wParameters : WinWindow
    {
        
        public wParameters()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Parameters";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public wName2 wName
        {
            get
            {
                if ((this.mwName == null))
                {
                    this.mwName = new wName2(this);
                }
                return this.mwName;
            }
        }
        
        public wType wType
        {
            get
            {
                if ((this.mwType == null))
                {
                    this.mwType = new wType(this);
                }
                return this.mwType;
            }
        }
        
        public wDescription wDescription
        {
            get
            {
                if ((this.mwDescription == null))
                {
                    this.mwDescription = new wDescription(this);
                }
                return this.mwDescription;
            }
        }
        
        public wUltimate wUltimate
        {
            get
            {
                if ((this.mwUltimate == null))
                {
                    this.mwUltimate = new wUltimate(this);
                }
                return this.mwUltimate;
            }
        }
        
        public wGenerational wGenerational
        {
            get
            {
                if ((this.mwGenerational == null))
                {
                    this.mwGenerational = new wGenerational(this);
                }
                return this.mwGenerational;
            }
        }
        
        public wTwoDimensional wTwoDimensional
        {
            get
            {
                if ((this.mwTwoDimensional == null))
                {
                    this.mwTwoDimensional = new wTwoDimensional(this);
                }
                return this.mwTwoDimensional;
            }
        }
        
        public wIndex1_Index wIndex1_Index
        {
            get
            {
                if ((this.mwIndex1_Index == null))
                {
                    this.mwIndex1_Index = new wIndex1_Index(this);
                }
                return this.mwIndex1_Index;
            }
        }
        
        public wIndex1_From wIndex1_From
        {
            get
            {
                if ((this.mwIndex1_From == null))
                {
                    this.mwIndex1_From = new wIndex1_From(this);
                }
                return this.mwIndex1_From;
            }
        }
        
        public wIndex1_To wIndex1_To
        {
            get
            {
                if ((this.mwIndex1_To == null))
                {
                    this.mwIndex1_To = new wIndex1_To(this);
                }
                return this.mwIndex1_To;
            }
        }
        
        public wExtend wExtend
        {
            get
            {
                if ((this.mwExtend == null))
                {
                    this.mwExtend = new wExtend(this);
                }
                return this.mwExtend;
            }
        }
        
        public wZero wZero
        {
            get
            {
                if ((this.mwZero == null))
                {
                    this.mwZero = new wZero(this);
                }
                return this.mwZero;
            }
        }
        
        public wSameRatesUsed wSameRatesUsed
        {
            get
            {
                if ((this.mwSameRatesUsed == null))
                {
                    this.mwSameRatesUsed = new wSameRatesUsed(this);
                }
                return this.mwSameRatesUsed;
            }
        }
        
        public wFormat wFormat
        {
            get
            {
                if ((this.mwFormat == null))
                {
                    this.mwFormat = new wFormat(this);
                }
                return this.mwFormat;
            }
        }
        
        public wDecimalPlaces wDecimalPlaces
        {
            get
            {
                if ((this.mwDecimalPlaces == null))
                {
                    this.mwDecimalPlaces = new wDecimalPlaces(this);
                }
                return this.mwDecimalPlaces;
            }
        }
        
        public wUse1000Separator wUse1000Separator
        {
            get
            {
                if ((this.mwUse1000Separator == null))
                {
                    this.mwUse1000Separator = new wUse1000Separator(this);
                }
                return this.mwUse1000Separator;
            }
        }
        
        public wOK13 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK13(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wName2 mwName;
        
        private wType mwType;
        
        private wDescription mwDescription;
        
        private wUltimate mwUltimate;
        
        private wGenerational mwGenerational;
        
        private wTwoDimensional mwTwoDimensional;
        
        private wIndex1_Index mwIndex1_Index;
        
        private wIndex1_From mwIndex1_From;
        
        private wIndex1_To mwIndex1_To;
        
        private wExtend mwExtend;
        
        private wZero mwZero;
        
        private wSameRatesUsed mwSameRatesUsed;
        
        private wFormat mwFormat;
        
        private wDecimalPlaces mwDecimalPlaces;
        
        private wUse1000Separator mwUse1000Separator;
        
        private wOK13 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wName2 : WinWindow
    {
        
        public wName2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinEdit txtName
        {
            get
            {
                if ((this.mtxtName == null))
                {
                    this.mtxtName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtName.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtName.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mtxtName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wType : WinWindow
    {
        
        public wType(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbType";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboType
        {
            get
            {
                if ((this.mcboType == null))
                {
                    this.mcboType = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboType.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboType.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mcboType;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboType;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDescription : WinWindow
    {
        
        public wDescription(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinEdit txtDescription
        {
            get
            {
                if ((this.mtxtDescription == null))
                {
                    this.mtxtDescription = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtDescription.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtDescription.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mtxtDescription;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtDescription;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUltimate : WinWindow
    {
        
        public wUltimate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radUltimate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdUltimate
        {
            get
            {
                if ((this.mrdUltimate == null))
                {
                    this.mrdUltimate = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdUltimate.SearchProperties[WinRadioButton.PropertyNames.Name] = "Ultimate";
                    this.mrdUltimate.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdUltimate.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mrdUltimate;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdUltimate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGenerational : WinWindow
    {
        
        public wGenerational(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radGenerational";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdGenerational
        {
            get
            {
                if ((this.mrdGenerational == null))
                {
                    this.mrdGenerational = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdGenerational.SearchProperties[WinRadioButton.PropertyNames.Name] = "Generational";
                    this.mrdGenerational.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdGenerational.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mrdGenerational;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdGenerational;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTwoDimensional : WinWindow
    {
        
        public wTwoDimensional(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radTwoDimenIndex";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdTwoDimensional
        {
            get
            {
                if ((this.mrdTwoDimensional == null))
                {
                    this.mrdTwoDimensional = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdTwoDimensional.SearchProperties[WinRadioButton.PropertyNames.Name] = "Two-dimensional with Two Index Fields";
                    this.mrdTwoDimensional.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdTwoDimensional.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mrdTwoDimensional;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdTwoDimensional;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIndex1_Index : WinWindow
    {
        
        public wIndex1_Index(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbIndex1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Columns";
                    this.mcbo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcbo.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIndex1_From : WinEdit
    {
        
        public wIndex1_From(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Instance] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIndex1_To : WinEdit
    {
        
        public wIndex1_To(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Instance] = "7";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExtend : WinWindow
    {
        
        public wExtend(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbExtend";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdExtend
        {
            get
            {
                if ((this.mrdExtend == null))
                {
                    this.mrdExtend = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdExtend.SearchProperties[WinRadioButton.PropertyNames.Name] = "Extend";
                    this.mrdExtend.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdExtend.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mrdExtend;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdExtend;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wZero : WinWindow
    {
        
        public wZero(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbZero";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdZero
        {
            get
            {
                if ((this.mrdZero == null))
                {
                    this.mrdZero = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdZero.SearchProperties[WinRadioButton.PropertyNames.Name] = "Zero";
                    this.mrdZero.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdZero.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mrdZero;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdZero;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSameRatesUsed : WinWindow
    {
        
        public wSameRatesUsed(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkUnisexRates";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkSameRatesUsed
        {
            get
            {
                if ((this.mchkSameRatesUsed == null))
                {
                    this.mchkSameRatesUsed = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkSameRatesUsed.SearchProperties[WinCheckBox.PropertyNames.Name] = "Same Rates Used for Males and Females";
                    this.mchkSameRatesUsed.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkSameRatesUsed.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mchkSameRatesUsed;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkSameRatesUsed;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFormat : WinWindow
    {
        
        public wFormat(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbFormat";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboFormat
        {
            get
            {
                if ((this.mcboFormat == null))
                {
                    this.mcboFormat = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboFormat.SearchProperties[WinComboBox.PropertyNames.Name] = "Description";
                    this.mcboFormat.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboFormat.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mcboFormat;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboFormat;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDecimalPlaces : WinEdit
    {
        
        public wDecimalPlaces(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUse1000Separator : WinWindow
    {
        
        public wUse1000Separator(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbSeparator";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use 1000 Separator";
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK13 : WinWindow
    {
        
        public wOK13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameters");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Parameters");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSnapshotRepublished : WinWindow
    {
        
        public wSnapshotRepublished()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Snapshot Republished";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Snapshot Republished");
            #endregion
        }
        
        #region Properties
        public wOK14 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK14(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK14 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK14 : WinWindow
    {
        
        public wOK14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Snapshot Republished");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Snapshot Republished");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wParentNodePFVSModified : WinWindow
    {
        
        public wParentNodePFVSModified()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Parent node (PFVS) has been modified";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parent node (PFVS) has been modified");
            #endregion
        }
        
        #region Properties
        public wOK15 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK15(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK15 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK15 : WinWindow
    {
        
        public wOK15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parent node (PFVS) has been modified");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Parent node (PFVS) has been modified");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCascadingUnlock : WinWindow
    {
        
        public wCascadingUnlock()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Unlock", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Cascading Unlock");
            #endregion
        }
        
        #region Properties
        public wIAgreeToUnlock wIAgreeToUnlock
        {
            get
            {
                if ((this.mwIAgreeToUnlock == null))
                {
                    this.mwIAgreeToUnlock = new wIAgreeToUnlock(this);
                }
                return this.mwIAgreeToUnlock;
            }
        }
        
        public wOK16 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK16(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wIAgreeToUnlock mwIAgreeToUnlock;
        
        private wOK16 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIAgreeToUnlock : WinWindow
    {
        
        public wIAgreeToUnlock(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkUnlock";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Cascading Unlock");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkIAgreeToUnlock
        {
            get
            {
                if ((this.mchkIAgreeToUnlock == null))
                {
                    this.mchkIAgreeToUnlock = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkIAgreeToUnlock.SearchProperties[WinCheckBox.PropertyNames.Name] = "I agree to unlock the items listed above.";
                    this.mchkIAgreeToUnlock.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkIAgreeToUnlock.WindowTitles.Add("Cascading Unlock");
                    #endregion
                }
                return this.mchkIAgreeToUnlock;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkIAgreeToUnlock;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK16 : WinWindow
    {
        
        public wOK16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOk";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Cascading Unlock");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Cascading Unlock");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunSpecialPaymentTool_CA : WinWindow
    {
        
        public wRunSpecialPaymentTool_CA()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run Special Payment Tool";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Run Special Payment Tool");
            #endregion
        }
        
        #region Properties
        public wOK17 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK17(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK17 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK17 : WinWindow
    {
        
        public wOK17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Run Special Payment Tool");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Run Special Payment Tool");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopyProvisionSet : WinWindow
    {
        
        public wCopyProvisionSet()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Copy", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public wClient wClient
        {
            get
            {
                if ((this.mwClient == null))
                {
                    this.mwClient = new wClient(this);
                }
                return this.mwClient;
            }
        }
        
        public wPlan wPlan
        {
            get
            {
                if ((this.mwPlan == null))
                {
                    this.mwPlan = new wPlan(this);
                }
                return this.mwPlan;
            }
        }
        
        public wServiceType wServiceType
        {
            get
            {
                if ((this.mwServiceType == null))
                {
                    this.mwServiceType = new wServiceType(this);
                }
                return this.mwServiceType;
            }
        }
        
        public wServiceInstance wServiceInstance
        {
            get
            {
                if ((this.mwServiceInstance == null))
                {
                    this.mwServiceInstance = new wServiceInstance(this);
                }
                return this.mwServiceInstance;
            }
        }
        
        public wCopyAllParameters wCopyAllParameters
        {
            get
            {
                if ((this.mwCopyAllParameters == null))
                {
                    this.mwCopyAllParameters = new wCopyAllParameters(this);
                }
                return this.mwCopyAllParameters;
            }
        }
        
        public wCopyParameterChanges wCopyParameterChanges
        {
            get
            {
                if ((this.mwCopyParameterChanges == null))
                {
                    this.mwCopyParameterChanges = new wCopyParameterChanges(this);
                }
                return this.mwCopyParameterChanges;
            }
        }
        
        public wOK18 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK18(this);
                }
                return this.mwOK;
            }
        }
        
        public wService_FPGrid wService_FPGrid
        {
            get
            {
                if ((this.mwService_FPGrid == null))
                {
                    this.mwService_FPGrid = new wService_FPGrid(this);
                }
                return this.mwService_FPGrid;
            }
        }
        
        public wClient_DE wClient_DE
        {
            get
            {
                if ((this.mwClient_DE == null))
                {
                    this.mwClient_DE = new wClient_DE(this);
                }
                return this.mwClient_DE;
            }
        }
        
        public wPlan_DE wPlan_DE
        {
            get
            {
                if ((this.mwPlan_DE == null))
                {
                    this.mwPlan_DE = new wPlan_DE(this);
                }
                return this.mwPlan_DE;
            }
        }
        
        public wServiceInstance_DE wServiceInstance_DE
        {
            get
            {
                if ((this.mwServiceInstance_DE == null))
                {
                    this.mwServiceInstance_DE = new wServiceInstance_DE(this);
                }
                return this.mwServiceInstance_DE;
            }
        }
        
        public wValuationNode_DE wValuationNode_DE
        {
            get
            {
                if ((this.mwValuationNode_DE == null))
                {
                    this.mwValuationNode_DE = new wValuationNode_DE(this);
                }
                return this.mwValuationNode_DE;
            }
        }
        
        public wVOShortName_DE wVOShortName_DE
        {
            get
            {
                if ((this.mwVOShortName_DE == null))
                {
                    this.mwVOShortName_DE = new wVOShortName_DE(this);
                }
                return this.mwVOShortName_DE;
            }
        }
        
        public wClient_UK wClient_UK
        {
            get
            {
                if ((this.mwClient_UK == null))
                {
                    this.mwClient_UK = new wClient_UK(this);
                }
                return this.mwClient_UK;
            }
        }
        
        public wPlan_UK wPlan_UK
        {
            get
            {
                if ((this.mwPlan_UK == null))
                {
                    this.mwPlan_UK = new wPlan_UK(this);
                }
                return this.mwPlan_UK;
            }
        }
        
        public wServiceType_UK wServiceType_UK
        {
            get
            {
                if ((this.mwServiceType_UK == null))
                {
                    this.mwServiceType_UK = new wServiceType_UK(this);
                }
                return this.mwServiceType_UK;
            }
        }
        
        public wServiceInstance_UK wServiceInstance_UK
        {
            get
            {
                if ((this.mwServiceInstance_UK == null))
                {
                    this.mwServiceInstance_UK = new wServiceInstance_UK(this);
                }
                return this.mwServiceInstance_UK;
            }
        }
        
        public wValuationNode_UK wValuationNode_UK
        {
            get
            {
                if ((this.mwValuationNode_UK == null))
                {
                    this.mwValuationNode_UK = new wValuationNode_UK(this);
                }
                return this.mwValuationNode_UK;
            }
        }
        
        public wBenefitSet_UK wBenefitSet_UK
        {
            get
            {
                if ((this.mwBenefitSet_UK == null))
                {
                    this.mwBenefitSet_UK = new wBenefitSet_UK(this);
                }
                return this.mwBenefitSet_UK;
            }
        }
        #endregion
        
        #region Fields
        private wClient mwClient;
        
        private wPlan mwPlan;
        
        private wServiceType mwServiceType;
        
        private wServiceInstance mwServiceInstance;
        
        private wCopyAllParameters mwCopyAllParameters;
        
        private wCopyParameterChanges mwCopyParameterChanges;
        
        private wOK18 mwOK;
        
        private wService_FPGrid mwService_FPGrid;
        
        private wClient_DE mwClient_DE;
        
        private wPlan_DE mwPlan_DE;
        
        private wServiceInstance_DE mwServiceInstance_DE;
        
        private wValuationNode_DE mwValuationNode_DE;
        
        private wVOShortName_DE mwVOShortName_DE;
        
        private wClient_UK mwClient_UK;
        
        private wPlan_UK mwPlan_UK;
        
        private wServiceType_UK mwServiceType_UK;
        
        private wServiceInstance_UK mwServiceInstance_UK;
        
        private wValuationNode_UK mwValuationNode_UK;
        
        private wBenefitSet_UK mwBenefitSet_UK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClient : WinWindow
    {
        
        public wClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboClient";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Service Type";
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlan : WinWindow
    {
        
        public wPlan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboPlan";
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceType : WinWindow
    {
        
        public wServiceType(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboServiceType";
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Service Instance";
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceInstance : WinWindow
    {
        
        public wServiceInstance(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboServiceInstance";
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopyAllParameters : WinWindow
    {
        
        public wCopyAllParameters(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radCopyAll";
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Copy all parameters from the source set, replacing all provisions in the current " +
                        "set";
                    this.mrd.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopyParameterChanges : WinWindow
    {
        
        public wCopyParameterChanges(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radCopyChanges";
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Copy parameter changes from the source set, replacing all provision changes in th" +
                        "e current set";
                    this.mrd.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK18 : WinWindow
    {
        
        public wOK18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wService_FPGrid : WinWindow
    {
        
        public wService_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprParametersToCopy";
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClient_DE : WinWindow
    {
        
        public wClient_DE(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbClient";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Teilbereich";
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlan_DE : WinWindow
    {
        
        public wPlan_DE(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbPlan";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceInstance_DE : WinWindow
    {
        
        public wServiceInstance_DE(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbService";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValuationNode_DE : WinWindow
    {
        
        public wValuationNode_DE(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbValuationNode";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVOShortName_DE : WinWindow
    {
        
        public wVOShortName_DE(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbValGroup";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClient_UK : WinWindow
    {
        
        public wClient_UK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbClient";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Service Type";
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlan_UK : WinWindow
    {
        
        public wPlan_UK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbPlan";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceType_UK : WinWindow
    {
        
        public wServiceType_UK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbService";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceInstance_UK : WinWindow
    {
        
        public wServiceInstance_UK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbService";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValuationNode_UK : WinWindow
    {
        
        public wValuationNode_UK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbValuationNode";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitSet_UK : WinWindow
    {
        
        public wBenefitSet_UK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbValGroup";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Provision Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Provision Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wActuarialReport : WinWindow
    {
        
        public wActuarialReport()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Actuarial Report";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Report");
            #endregion
        }
        
        #region Properties
        public wYes4 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes4(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes4 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes4 : WinWindow
    {
        
        public wYes4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnYes";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Report");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.WindowTitles.Add("Actuarial Report");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFutureValSubmission : WinWindow
    {
        
        public wFutureValSubmission()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio Future Valuation Population Projection Run Submission";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio Future Valuation Population Projection Run Submission");
            #endregion
        }
        
        #region Properties
        public wOK19 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK19(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK19 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK19 : WinWindow
    {
        
        public wOK19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio Future Valuation Population Projection Run Submission");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio Future Valuation Population Projection Run Submission");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWord_NoCurrentProfile : WinWindow
    {
        
        public wWord_NoCurrentProfile()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "No Current Profile";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("No Current Profile");
            #endregion
        }
        
        #region Properties
        public wOK20 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK20(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK20 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK20 : WinWindow
    {
        
        public wOK20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("No Current Profile");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("No Current Profile");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWord_Profiles : WinWindow
    {
        
        public wWord_Profiles()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Profiles";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Profiles");
            #endregion
        }
        
        #region Properties
        public wClose wClose
        {
            get
            {
                if ((this.mwClose == null))
                {
                    this.mwClose = new wClose(this);
                }
                return this.mwClose;
            }
        }
        #endregion
        
        #region Fields
        private wClose mwClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClose : WinWindow
    {
        
        public wClose(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Profiles");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Profiles");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMMCOATemplateFailure : WinWindow
    {
        
        public wMMCOATemplateFailure()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MMCOA Template Failure";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MMCOA Template Failure");
            #endregion
        }
        
        #region Properties
        public wOK21 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK21(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK21 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK21 : WinWindow
    {
        
        public wOK21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MMCOA Template Failure");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("MMCOA Template Failure");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWord : WinWindow
    {
        
        public wWord()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Word", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "OpusApp";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Document1 - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public wFileMenuBar wFileMenuBar
        {
            get
            {
                if ((this.mwFileMenuBar == null))
                {
                    this.mwFileMenuBar = new wFileMenuBar(this);
                }
                return this.mwFileMenuBar;
            }
        }
        
        public wTitleBar wTitleBar
        {
            get
            {
                if ((this.mwTitleBar == null))
                {
                    this.mwTitleBar = new wTitleBar(this);
                }
                return this.mwTitleBar;
            }
        }
        
        public wMenuBar1 wMenuBar
        {
            get
            {
                if ((this.mwMenuBar == null))
                {
                    this.mwMenuBar = new wMenuBar1(this);
                }
                return this.mwMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private wFileMenuBar mwFileMenuBar;
        
        private wTitleBar mwTitleBar;
        
        private wMenuBar1 mwMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFileMenuBar : WinMenuBar
    {
        
        public wFileMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "File";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Document1 - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public WinMenuItem miSaveAs
        {
            get
            {
                if ((this.mmiSaveAs == null))
                {
                    this.mmiSaveAs = new WinMenuItem(this);
                    #region Search Criteria
                    this.mmiSaveAs.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mmiSaveAs.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mmiSaveAs.WindowTitles.Add("Document1 - Microsoft Word");
                    #endregion
                }
                return this.mmiSaveAs;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mmiSaveAs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTitleBar : WinControl
    {
        
        public wTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Document1 - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public WinButton btnClose
        {
            get
            {
                if ((this.mbtnClose == null))
                {
                    this.mbtnClose = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClose.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtnClose.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnClose.WindowTitles.Add("Document1 - Microsoft Word");
                    #endregion
                }
                return this.mbtnClose;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMenuBar1 : WinWindow
    {
        
        public wMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Document1 - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public wFileTab wFileTab
        {
            get
            {
                if ((this.mwFileTab == null))
                {
                    this.mwFileTab = new wFileTab(this);
                }
                return this.mwFileTab;
            }
        }
        #endregion
        
        #region Fields
        private wFileTab mwFileTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFileTab : WinControl
    {
        
        public wFileTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Document1 - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public WinButton btnFile
        {
            get
            {
                if ((this.mbtnFile == null))
                {
                    this.mbtnFile = new WinButton(this);
                    #region Search Criteria
                    this.mbtnFile.SearchProperties[WinButton.PropertyNames.Name] = "File Tab";
                    this.mbtnFile.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnFile.WindowTitles.Add("Document1 - Microsoft Word");
                    #endregion
                }
                return this.mbtnFile;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWord_SaveAs : WinWindow
    {
        
        public wWord_SaveAs()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public wFileName1 wFileName
        {
            get
            {
                if ((this.mwFileName == null))
                {
                    this.mwFileName = new wFileName1(this);
                }
                return this.mwFileName;
            }
        }
        
        public wSaveAsType wSaveAsType
        {
            get
            {
                if ((this.mwSaveAsType == null))
                {
                    this.mwSaveAsType = new wSaveAsType(this);
                }
                return this.mwSaveAsType;
            }
        }
        
        public wSave wSave
        {
            get
            {
                if ((this.mwSave == null))
                {
                    this.mwSave = new wSave(this);
                }
                return this.mwSave;
            }
        }
        #endregion
        
        #region Fields
        private wFileName1 mwFileName;
        
        private wSaveAsType mwSaveAsType;
        
        private wSave mwSave;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFileName1 : WinWindow
    {
        
        public wFileName1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSaveAsType : WinPane
    {
        
        public wSaveAsType(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Save as type:";
                    this.mcbo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcbo.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSave : WinWindow
    {
        
        public wSave(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUnlockFundingCalculator : WinWindow
    {
        
        public wUnlockFundingCalculator()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Unlock", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Unlock Funding Calculator");
            #endregion
        }
        
        #region Properties
        public wOK22 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK22(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK22 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK22 : WinWindow
    {
        
        public wOK22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Unlock Funding Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Unlock Funding Calculator");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_TeilbereichAlle : WinWindow
    {
        
        public wPMTool_TeilbereichAlle()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Teilbereich Alle";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Teilbereich Alle");
            #endregion
        }
        
        #region Properties
        public wOK23 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK23(this);
                }
                return this.mwOK;
            }
        }
        
        public wTeilbereichName wTeilbereichName
        {
            get
            {
                if ((this.mwTeilbereichName == null))
                {
                    this.mwTeilbereichName = new wTeilbereichName(this);
                }
                return this.mwTeilbereichName;
            }
        }
        
        public wDefaultValuationDate wDefaultValuationDate
        {
            get
            {
                if ((this.mwDefaultValuationDate == null))
                {
                    this.mwDefaultValuationDate = new wDefaultValuationDate(this);
                }
                return this.mwDefaultValuationDate;
            }
        }
        
        public wMemo wMemo
        {
            get
            {
                if ((this.mwMemo == null))
                {
                    this.mwMemo = new wMemo(this);
                }
                return this.mwMemo;
            }
        }
        
        public wConfidential wConfidential
        {
            get
            {
                if ((this.mwConfidential == null))
                {
                    this.mwConfidential = new wConfidential(this);
                }
                return this.mwConfidential;
            }
        }
        
        public wPublicSectorProjection wPublicSectorProjection
        {
            get
            {
                if ((this.mwPublicSectorProjection == null))
                {
                    this.mwPublicSectorProjection = new wPublicSectorProjection(this);
                }
                return this.mwPublicSectorProjection;
            }
        }
        #endregion
        
        #region Fields
        private wOK23 mwOK;
        
        private wTeilbereichName mwTeilbereichName;
        
        private wDefaultValuationDate mwDefaultValuationDate;
        
        private wMemo mwMemo;
        
        private wConfidential mwConfidential;
        
        private wPublicSectorProjection mwPublicSectorProjection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK23 : WinWindow
    {
        
        public wOK23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOK";
            this.WindowTitles.Add("Teilbereich Alle");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Teilbereich Alle");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTeilbereichName : WinWindow
    {
        
        public wTeilbereichName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPlanName";
            this.WindowTitles.Add("Teilbereich Alle");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Teilbereich Name";
                    this.mtxt.WindowTitles.Add("Teilbereich Alle");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDefaultValuationDate : WinWindow
    {
        
        public wDefaultValuationDate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPlanYearBegin";
            this.WindowTitles.Add("Teilbereich Alle");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Default Valuation Date";
                    this.mtxt.WindowTitles.Add("Teilbereich Alle");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMemo : WinWindow
    {
        
        public wMemo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtMemo";
            this.WindowTitles.Add("Teilbereich Alle");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Memo";
                    this.mtxt.WindowTitles.Add("Teilbereich Alle");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wConfidential : WinWindow
    {
        
        public wConfidential(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkConfidential";
            this.WindowTitles.Add("Teilbereich Alle");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Confidential";
                    this.mchk.WindowTitles.Add("Teilbereich Alle");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPublicSectorProjection : WinWindow
    {
        
        public wPublicSectorProjection(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPublicSectorProjection";
            this.WindowTitles.Add("Teilbereich Alle");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Public Sector Projection";
                    this.mchk.WindowTitles.Add("Teilbereich Alle");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCreateNewVO : WinWindow
    {
        
        public wCreateNewVO()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Create New VO";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public wEnterVOShortName wEnterVOShortName
        {
            get
            {
                if ((this.mwEnterVOShortName == null))
                {
                    this.mwEnterVOShortName = new wEnterVOShortName(this);
                }
                return this.mwEnterVOShortName;
            }
        }
        
        public wConfirmVOShortName wConfirmVOShortName
        {
            get
            {
                if ((this.mwConfirmVOShortName == null))
                {
                    this.mwConfirmVOShortName = new wConfirmVOShortName(this);
                }
                return this.mwConfirmVOShortName;
            }
        }
        
        public wVOLongName wVOLongName
        {
            get
            {
                if ((this.mwVOLongName == null))
                {
                    this.mwVOLongName = new wVOLongName(this);
                }
                return this.mwVOLongName;
            }
        }
        
        public wVOClass wVOClass
        {
            get
            {
                if ((this.mwVOClass == null))
                {
                    this.mwVOClass = new wVOClass(this);
                }
                return this.mwVOClass;
            }
        }
        
        public wFundingVehicle wFundingVehicle
        {
            get
            {
                if ((this.mwFundingVehicle == null))
                {
                    this.mwFundingVehicle = new wFundingVehicle(this);
                }
                return this.mwFundingVehicle;
            }
        }
        
        public wTypeOfPromise wTypeOfPromise
        {
            get
            {
                if ((this.mwTypeOfPromise == null))
                {
                    this.mwTypeOfPromise = new wTypeOfPromise(this);
                }
                return this.mwTypeOfPromise;
            }
        }
        
        public wSponsor wSponsor
        {
            get
            {
                if ((this.mwSponsor == null))
                {
                    this.mwSponsor = new wSponsor(this);
                }
                return this.mwSponsor;
            }
        }
        
        public wPSVCoverage wPSVCoverage
        {
            get
            {
                if ((this.mwPSVCoverage == null))
                {
                    this.mwPSVCoverage = new wPSVCoverage(this);
                }
                return this.mwPSVCoverage;
            }
        }
        
        public wExculdeWidowers wExculdeWidowers
        {
            get
            {
                if ((this.mwExculdeWidowers == null))
                {
                    this.mwExculdeWidowers = new wExculdeWidowers(this);
                }
                return this.mwExculdeWidowers;
            }
        }
        
        public wTax wTax
        {
            get
            {
                if ((this.mwTax == null))
                {
                    this.mwTax = new wTax(this);
                }
                return this.mwTax;
            }
        }
        
        public wTrade wTrade
        {
            get
            {
                if ((this.mwTrade == null))
                {
                    this.mwTrade = new wTrade(this);
                }
                return this.mwTrade;
            }
        }
        
        public wInternationalAccounting wInternationalAccounting
        {
            get
            {
                if ((this.mwInternationalAccounting == null))
                {
                    this.mwInternationalAccounting = new wInternationalAccounting(this);
                }
                return this.mwInternationalAccounting;
            }
        }
        
        public wApply30g wApply30g
        {
            get
            {
                if ((this.mwApply30g == null))
                {
                    this.mwApply30g = new wApply30g(this);
                }
                return this.mwApply30g;
            }
        }
        
        public wOK24 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK24(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wEnterVOShortName mwEnterVOShortName;
        
        private wConfirmVOShortName mwConfirmVOShortName;
        
        private wVOLongName mwVOLongName;
        
        private wVOClass mwVOClass;
        
        private wFundingVehicle mwFundingVehicle;
        
        private wTypeOfPromise mwTypeOfPromise;
        
        private wSponsor mwSponsor;
        
        private wPSVCoverage mwPSVCoverage;
        
        private wExculdeWidowers mwExculdeWidowers;
        
        private wTax mwTax;
        
        private wTrade mwTrade;
        
        private wInternationalAccounting mwInternationalAccounting;
        
        private wApply30g mwApply30g;
        
        private wOK24 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEnterVOShortName : WinWindow
    {
        
        public wEnterVOShortName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtShortName";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wConfirmVOShortName : WinWindow
    {
        
        public wConfirmVOShortName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtConfirmation";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Enter VO Short Name";
                    this.mtxt.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVOLongName : WinWindow
    {
        
        public wVOLongName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtLongName";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Confirm VO Short Name";
                    this.mtxt.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVOClass : WinWindow
    {
        
        public wVOClass(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboClass";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFundingVehicle : WinWindow
    {
        
        public wFundingVehicle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboFundingVehicle";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTypeOfPromise : WinWindow
    {
        
        public wTypeOfPromise(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboTypeOfPromise";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Funding Vehicle";
                    this.mcbo.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSponsor : WinWindow
    {
        
        public wSponsor(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboSponsor";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Type of Promise";
                    this.mcbo.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPSVCoverage : WinWindow
    {
        
        public wPSVCoverage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chxPSVCoverage";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Sponsor";
                    this.mchk.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExculdeWidowers : WinWindow
    {
        
        public wExculdeWidowers(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chxExculdeWidowers";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "PSV Coverage";
                    this.mchk.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTax : WinWindow
    {
        
        public wTax(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chxTax";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Tax";
                    this.mchk.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTrade : WinWindow
    {
        
        public wTrade(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chxTrade";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Trade";
                    this.mchk.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInternationalAccounting : WinWindow
    {
        
        public wInternationalAccounting(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chxInternationalAccounting";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "International Accounting";
                    this.mchk.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApply30g : WinWindow
    {
        
        public wApply30g(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chxApply30g";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply 30g";
                    this.mchk.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK24 : WinWindow
    {
        
        public wOK24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Create New VO");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Create New VO");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_Plan_UK : WinWindow
    {
        
        public wPMTool_Plan_UK()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Plan", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public wPSOReferenceNumber wPSOReferenceNumber
        {
            get
            {
                if ((this.mwPSOReferenceNumber == null))
                {
                    this.mwPSOReferenceNumber = new wPSOReferenceNumber(this);
                }
                return this.mwPSOReferenceNumber;
            }
        }
        
        public wSCON wSCON
        {
            get
            {
                if ((this.mwSCON == null))
                {
                    this.mwSCON = new wSCON(this);
                }
                return this.mwSCON;
            }
        }
        
        public wTaxRegistrationStatus wTaxRegistrationStatus
        {
            get
            {
                if ((this.mwTaxRegistrationStatus == null))
                {
                    this.mwTaxRegistrationStatus = new wTaxRegistrationStatus(this);
                }
                return this.mwTaxRegistrationStatus;
            }
        }
        
        public wFRS17 wFRS17
        {
            get
            {
                if ((this.mwFRS17 == null))
                {
                    this.mwFRS17 = new wFRS17(this);
                }
                return this.mwFRS17;
            }
        }
        
        public wFAS87 wFAS87
        {
            get
            {
                if ((this.mwFAS87 == null))
                {
                    this.mwFAS87 = new wFAS87(this);
                }
                return this.mwFAS87;
            }
        }
        
        public wIAS19 wIAS19
        {
            get
            {
                if ((this.mwIAS19 == null))
                {
                    this.mwIAS19 = new wIAS19(this);
                }
                return this.mwIAS19;
            }
        }
        
        public wWorks wWorks
        {
            get
            {
                if ((this.mwWorks == null))
                {
                    this.mwWorks = new wWorks(this);
                }
                return this.mwWorks;
            }
        }
        
        public wStaff wStaff
        {
            get
            {
                if ((this.mwStaff == null))
                {
                    this.mwStaff = new wStaff(this);
                }
                return this.mwStaff;
            }
        }
        
        public wExecs wExecs
        {
            get
            {
                if ((this.mwExecs == null))
                {
                    this.mwExecs = new wExecs(this);
                }
                return this.mwExecs;
            }
        }
        
        public wPublicSectorProjection1 wPublicSectorProjection
        {
            get
            {
                if ((this.mwPublicSectorProjection == null))
                {
                    this.mwPublicSectorProjection = new wPublicSectorProjection1(this);
                }
                return this.mwPublicSectorProjection;
            }
        }
        #endregion
        
        #region Fields
        private wPSOReferenceNumber mwPSOReferenceNumber;
        
        private wSCON mwSCON;
        
        private wTaxRegistrationStatus mwTaxRegistrationStatus;
        
        private wFRS17 mwFRS17;
        
        private wFAS87 mwFAS87;
        
        private wIAS19 mwIAS19;
        
        private wWorks mwWorks;
        
        private wStaff mwStaff;
        
        private wExecs mwExecs;
        
        private wPublicSectorProjection1 mwPublicSectorProjection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPSOReferenceNumber : WinWindow
    {
        
        public wPSOReferenceNumber(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPSOReferenceNumber";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Groups Covered";
                    this.mtxt.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSCON : WinWindow
    {
        
        public wSCON(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtSCON";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTaxRegistrationStatus : WinWindow
    {
        
        public wTaxRegistrationStatus(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboTaxRegistrationStatus";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFRS17 : WinWindow
    {
        
        public wFRS17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkComplianceFRS17";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "FRS 17";
                    this.mchk.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFAS87 : WinWindow
    {
        
        public wFAS87(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkComplianceFAS87";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "FAS 87";
                    this.mchk.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIAS19 : WinWindow
    {
        
        public wIAS19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkComplianceIAS19";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "IAS 19";
                    this.mchk.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWorks : WinWindow
    {
        
        public wWorks(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGroupsCoveredWorks";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Works";
                    this.mchk.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStaff : WinWindow
    {
        
        public wStaff(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGroupsCoveredStaff";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Staff";
                    this.mchk.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExecs : WinWindow
    {
        
        public wExecs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGroupsCoveredExecs";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Execs";
                    this.mchk.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPublicSectorProjection1 : WinWindow
    {
        
        public wPublicSectorProjection1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPublicSectorProjection";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Public Sector Projection";
                    this.mchk.WindowTitles.Add("Plan QA UK Benchmark 006 Create New Plan D");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCreateNewBenefitSet : WinWindow
    {
        
        public wCreateNewBenefitSet()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Create New Benefit Set";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Create New Benefit Set");
            #endregion
        }
        
        #region Properties
        public wEnterShortName wEnterShortName
        {
            get
            {
                if ((this.mwEnterShortName == null))
                {
                    this.mwEnterShortName = new wEnterShortName(this);
                }
                return this.mwEnterShortName;
            }
        }
        
        public wConfirmShortName wConfirmShortName
        {
            get
            {
                if ((this.mwConfirmShortName == null))
                {
                    this.mwConfirmShortName = new wConfirmShortName(this);
                }
                return this.mwConfirmShortName;
            }
        }
        
        public wLongName wLongName
        {
            get
            {
                if ((this.mwLongName == null))
                {
                    this.mwLongName = new wLongName(this);
                }
                return this.mwLongName;
            }
        }
        
        public wOK25 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK25(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wEnterShortName mwEnterShortName;
        
        private wConfirmShortName mwConfirmShortName;
        
        private wLongName mwLongName;
        
        private wOK25 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEnterShortName : WinWindow
    {
        
        public wEnterShortName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtShortName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Create New Benefit Set");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Create New Benefit Set");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wConfirmShortName : WinWindow
    {
        
        public wConfirmShortName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtConfirmation";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Create New Benefit Set");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Enter Benefit Set Short Name";
                    this.mtxt.WindowTitles.Add("Create New Benefit Set");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLongName : WinWindow
    {
        
        public wLongName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtLongName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Create New Benefit Set");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Confirm Benefit Set Short Name";
                    this.mtxt.WindowTitles.Add("Create New Benefit Set");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK25 : WinWindow
    {
        
        public wOK25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Create New Benefit Set");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Create New Benefit Set");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDependencyManager : WinWindow
    {
        
        public wDependencyManager()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Dependency Manager";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Dependency Manager");
            #endregion
        }
        
        #region Properties
        public wOK26 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK26(this);
                }
                return this.mwOK;
            }
        }
        
        public wClearAll wClearAll
        {
            get
            {
                if ((this.mwClearAll == null))
                {
                    this.mwClearAll = new wClearAll(this);
                }
                return this.mwClearAll;
            }
        }
        #endregion
        
        #region Fields
        private wOK26 mwOK;
        
        private wClearAll mwClearAll;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK26 : WinWindow
    {
        
        public wOK26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOk";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Dependency Manager");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Dependency Manager");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClearAll : WinWindow
    {
        
        public wClearAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnClearAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Dependency Manager");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Clear All";
                    this.mbtn.WindowTitles.Add("Dependency Manager");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDependencyManager_Popup : WinWindow
    {
        
        public wDependencyManager_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Dependency Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Dependency Manager");
            #endregion
        }
        
        #region Properties
        public wOK27 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK27(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK27 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK27 : WinWindow
    {
        
        public wOK27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Dependency Manager");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Dependency Manager");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopyParticipantDataSet : WinWindow
    {
        
        public wCopyParticipantDataSet()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Copy ParticipantData Set";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy ParticipantData Set");
            #endregion
        }
        
        #region Properties
        public wServiceType1 wServiceType
        {
            get
            {
                if ((this.mwServiceType == null))
                {
                    this.mwServiceType = new wServiceType1(this);
                }
                return this.mwServiceType;
            }
        }
        
        public wServiceInstance1 wServiceInstance
        {
            get
            {
                if ((this.mwServiceInstance == null))
                {
                    this.mwServiceInstance = new wServiceInstance1(this);
                }
                return this.mwServiceInstance;
            }
        }
        
        public wFPGrid wFPGrid
        {
            get
            {
                if ((this.mwFPGrid == null))
                {
                    this.mwFPGrid = new wFPGrid(this);
                }
                return this.mwFPGrid;
            }
        }
        
        public wOK28 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK28(this);
                }
                return this.mwOK;
            }
        }
        
        public wCopyParticipantData wCopyParticipantData
        {
            get
            {
                if ((this.mwCopyParticipantData == null))
                {
                    this.mwCopyParticipantData = new wCopyParticipantData(this);
                }
                return this.mwCopyParticipantData;
            }
        }
        #endregion
        
        #region Fields
        private wServiceType1 mwServiceType;
        
        private wServiceInstance1 mwServiceInstance;
        
        private wFPGrid mwFPGrid;
        
        private wOK28 mwOK;
        
        private wCopyParticipantData mwCopyParticipantData;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceType1 : WinWindow
    {
        
        public wServiceType1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboServiceType";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy ParticipantData Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Service Instance";
                    this.mcbo.WindowTitles.Add("Copy ParticipantData Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceInstance1 : WinWindow
    {
        
        public wServiceInstance1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboServiceInstance";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy ParticipantData Set");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy ParticipantData Set");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid : WinWindow
    {
        
        public wFPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprParametersToCopy";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy ParticipantData Set");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Copy ParticipantData Set");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK28 : WinWindow
    {
        
        public wOK28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy ParticipantData Set");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Copy ParticipantData Set");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopyParticipantData : WinWindow
    {
        
        public wCopyParticipantData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBox1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy ParticipantData Set");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Copy participant data";
                    this.mchk.WindowTitles.Add("Copy ParticipantData Set");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRegionAndLanguage : WinWindow
    {
        
        public wRegionAndLanguage()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Region and Language";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Region and Language");
            #endregion
        }
        
        #region Properties
        public wFormat1 wFormat
        {
            get
            {
                if ((this.mwFormat == null))
                {
                    this.mwFormat = new wFormat1(this);
                }
                return this.mwFormat;
            }
        }
        
        public wOK29 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK29(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wFormat1 mwFormat;
        
        private wOK29 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFormat1 : WinWindow
    {
        
        public wFormat1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1021";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Region and Language");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Format:";
                    this.mcbo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcbo.WindowTitles.Add("Region and Language");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK29 : WinWindow
    {
        
        public wOK29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Region and Language");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Region and Language");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopyServiceSchemaAndProperties : WinWindow
    {
        
        public wCopyServiceSchemaAndProperties()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Copy service schema and properties";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public wClients wClients
        {
            get
            {
                if ((this.mwClients == null))
                {
                    this.mwClients = new wClients(this);
                }
                return this.mwClients;
            }
        }
        
        public wPlans wPlans
        {
            get
            {
                if ((this.mwPlans == null))
                {
                    this.mwPlans = new wPlans(this);
                }
                return this.mwPlans;
            }
        }
        
        public wService_Grid wService_Grid
        {
            get
            {
                if ((this.mwService_Grid == null))
                {
                    this.mwService_Grid = new wService_Grid(this);
                }
                return this.mwService_Grid;
            }
        }
        
        public wOK30 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK30(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wClients mwClients;
        
        private wPlans mwPlans;
        
        private wService_Grid mwService_Grid;
        
        private wOK30 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClients : WinWindow
    {
        
        public wClients(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "clientsComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy service schema and properties");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlans : WinWindow
    {
        
        public wPlans(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "plansComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Client:";
                    this.mcbo.WindowTitles.Add("Copy service schema and properties");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wService_Grid : WinWindow
    {
        
        public wService_Grid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "planServicesDataGridView";
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public tbl tbl
        {
            get
            {
                if ((this.mtbl == null))
                {
                    this.mtbl = new tbl(this);
                }
                return this.mtbl;
            }
        }
        #endregion
        
        #region Fields
        private tbl mtbl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tbl : WinTable
    {
        
        public tbl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public row1 row1
        {
            get
            {
                if ((this.mrow1 == null))
                {
                    this.mrow1 = new row1(this);
                }
                return this.mrow1;
            }
        }
        
        public row2 row2
        {
            get
            {
                if ((this.mrow2 == null))
                {
                    this.mrow2 = new row2(this);
                }
                return this.mrow2;
            }
        }
        
        public row3 row3
        {
            get
            {
                if ((this.mrow3 == null))
                {
                    this.mrow3 = new row3(this);
                }
                return this.mrow3;
            }
        }
        
        public row4 row4
        {
            get
            {
                if ((this.mrow4 == null))
                {
                    this.mrow4 = new row4(this);
                }
                return this.mrow4;
            }
        }
        #endregion
        
        #region Fields
        private row1 mrow1;
        
        private row2 mrow2;
        
        private row3 mrow3;
        
        private row4 mrow4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class row1 : WinRow
    {
        
        public row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Jubilee 2009;03.06.2015 15:50;MERCER\\Cindy-Geske";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public WinCell cellJubilee2009
        {
            get
            {
                if ((this.mcellJubilee2009 == null))
                {
                    this.mcellJubilee2009 = new WinCell(this);
                    #region Search Criteria
                    this.mcellJubilee2009.SearchProperties[WinCell.PropertyNames.Value] = "Jubilee 2009";
                    this.mcellJubilee2009.WindowTitles.Add("Copy service schema and properties");
                    #endregion
                }
                return this.mcellJubilee2009;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcellJubilee2009;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class row2 : WinRow
    {
        
        public row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Jubilee 2008;03.06.2015 15:39;MERCER\\Cindy-Geske";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public WinCell cellJubilee2008
        {
            get
            {
                if ((this.mcellJubilee2008 == null))
                {
                    this.mcellJubilee2008 = new WinCell(this);
                    #region Search Criteria
                    this.mcellJubilee2008.SearchProperties[WinCell.PropertyNames.Value] = "Jubilee 2008";
                    this.mcellJubilee2008.WindowTitles.Add("Copy service schema and properties");
                    #endregion
                }
                return this.mcellJubilee2008;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcellJubilee2008;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class row3 : WinRow
    {
        
        public row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Pension 2009;02.06.2015 12:23;Mercer\\yang-li";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public WinCell cellPension2009
        {
            get
            {
                if ((this.mcellPension2009 == null))
                {
                    this.mcellPension2009 = new WinCell(this);
                    #region Search Criteria
                    this.mcellPension2009.SearchProperties[WinCell.PropertyNames.Value] = "Pension 2009";
                    this.mcellPension2009.WindowTitles.Add("Copy service schema and properties");
                    #endregion
                }
                return this.mcellPension2009;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcellPension2009;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class row4 : WinRow
    {
        
        public row4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Conversion 2008;12.04.2013 03:02;Mercer\\huiqing-zhu";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public WinCell cellConversion2008
        {
            get
            {
                if ((this.mcellConversion2008 == null))
                {
                    this.mcellConversion2008 = new WinCell(this);
                    #region Search Criteria
                    this.mcellConversion2008.SearchProperties[WinCell.PropertyNames.Value] = "Conversion 2008";
                    this.mcellConversion2008.WindowTitles.Add("Copy service schema and properties");
                    #endregion
                }
                return this.mcellConversion2008;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcellConversion2008;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK30 : WinWindow
    {
        
        public wOK30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy service schema and properties");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Copy service schema and properties");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddSensitivityValuationNode : WinWindow
    {
        
        public wAddSensitivityValuationNode()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add Sensitivity Valuation Nodes";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Sensitivity Valuation Nodes");
            #endregion
        }
        
        #region Properties
        public wAddSensitivityNodes wAddSensitivityNodes
        {
            get
            {
                if ((this.mwAddSensitivityNodes == null))
                {
                    this.mwAddSensitivityNodes = new wAddSensitivityNodes(this);
                }
                return this.mwAddSensitivityNodes;
            }
        }
        
        public wCommon_txt wCommon_txt
        {
            get
            {
                if ((this.mwCommon_txt == null))
                {
                    this.mwCommon_txt = new wCommon_txt(this);
                }
                return this.mwCommon_txt;
            }
        }
        
        public wInterest_FPGrid wInterest_FPGrid
        {
            get
            {
                if ((this.mwInterest_FPGrid == null))
                {
                    this.mwInterest_FPGrid = new wInterest_FPGrid(this);
                }
                return this.mwInterest_FPGrid;
            }
        }
        
        public wPay_FPGrid wPay_FPGrid
        {
            get
            {
                if ((this.mwPay_FPGrid == null))
                {
                    this.mwPay_FPGrid = new wPay_FPGrid(this);
                }
                return this.mwPay_FPGrid;
            }
        }
        
        public wPension_FPGrid wPension_FPGrid
        {
            get
            {
                if ((this.mwPension_FPGrid == null))
                {
                    this.mwPension_FPGrid = new wPension_FPGrid(this);
                }
                return this.mwPension_FPGrid;
            }
        }
        
        public wMortality_FPGrid wMortality_FPGrid
        {
            get
            {
                if ((this.mwMortality_FPGrid == null))
                {
                    this.mwMortality_FPGrid = new wMortality_FPGrid(this);
                }
                return this.mwMortality_FPGrid;
            }
        }
        
        public wCommon_cbo wCommon_cbo
        {
            get
            {
                if ((this.mwCommon_cbo == null))
                {
                    this.mwCommon_cbo = new wCommon_cbo(this);
                }
                return this.mwCommon_cbo;
            }
        }
        #endregion
        
        #region Fields
        private wAddSensitivityNodes mwAddSensitivityNodes;
        
        private wCommon_txt mwCommon_txt;
        
        private wInterest_FPGrid mwInterest_FPGrid;
        
        private wPay_FPGrid mwPay_FPGrid;
        
        private wPension_FPGrid mwPension_FPGrid;
        
        private wMortality_FPGrid mwMortality_FPGrid;
        
        private wCommon_cbo mwCommon_cbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddSensitivityNodes : WinWindow
    {
        
        public wAddSensitivityNodes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddNodes";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Sensitivity Valuation Nodes");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Add Sensitivity Nodes";
                    this.mbtn.WindowTitles.Add("Add Sensitivity Valuation Nodes");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommon_txt : WinEdit
    {
        
        public wCommon_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Instance] = "10";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Sensitivity Valuation Nodes");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.WindowTitles.Add("Add Sensitivity Valuation Nodes");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInterest_FPGrid : WinWindow
    {
        
        public wInterest_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadInterestRateSensitivity";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Sensitivity Valuation Nodes");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Add Sensitivity Valuation Nodes");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPay_FPGrid : WinWindow
    {
        
        public wPay_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadPaySensitivity";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Sensitivity Valuation Nodes");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Add Sensitivity Valuation Nodes");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPension_FPGrid : WinWindow
    {
        
        public wPension_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadPensionSensitivity";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Sensitivity Valuation Nodes");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Add Sensitivity Valuation Nodes");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMortality_FPGrid : WinWindow
    {
        
        public wMortality_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadMortalitySensitivity";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Sensitivity Valuation Nodes");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Add Sensitivity Valuation Nodes");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommon_cbo : WinWindow
    {
        
        public wCommon_cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Sensitivity Valuation Nodes");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Add Sensitivity Valuation Nodes");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeleteValuationNode : WinWindow
    {
        
        public wDeleteValuationNode()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Delete Valuation Node";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Delete Valuation Node");
            #endregion
        }
        
        #region Properties
        public wOK31 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK31(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK31 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK31 : WinWindow
    {
        
        public wOK31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Delete Valuation Node");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Delete Valuation Node");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIndividualOutputFieldDefinition : WinWindow
    {
        
        public wIndividualOutputFieldDefinition()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Individual Output Field Definition";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Individual Output Field Definition");
            #endregion
        }
        
        #region Properties
        public wOK32 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK32(this);
                }
                return this.mwOK;
            }
        }
        
        public wAddRow wAddRow
        {
            get
            {
                if ((this.mwAddRow == null))
                {
                    this.mwAddRow = new wAddRow(this);
                }
                return this.mwAddRow;
            }
        }
        
        public wLiabilityTypes1 wLiabilityTypes
        {
            get
            {
                if ((this.mwLiabilityTypes == null))
                {
                    this.mwLiabilityTypes = new wLiabilityTypes1(this);
                }
                return this.mwLiabilityTypes;
            }
        }
        
        public wFPGrid_OutputFields wFPGrid_OutputFields
        {
            get
            {
                if ((this.mwFPGrid_OutputFields == null))
                {
                    this.mwFPGrid_OutputFields = new wFPGrid_OutputFields(this);
                }
                return this.mwFPGrid_OutputFields;
            }
        }
        
        public wCommon_cbo1 wCommon_cbo
        {
            get
            {
                if ((this.mwCommon_cbo == null))
                {
                    this.mwCommon_cbo = new wCommon_cbo1(this);
                }
                return this.mwCommon_cbo;
            }
        }
        #endregion
        
        #region Fields
        private wOK32 mwOK;
        
        private wAddRow mwAddRow;
        
        private wLiabilityTypes1 mwLiabilityTypes;
        
        private wFPGrid_OutputFields mwFPGrid_OutputFields;
        
        private wCommon_cbo1 mwCommon_cbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK32 : WinWindow
    {
        
        public wOK32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Individual Output Field Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Individual Output Field Definition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddRow : WinWindow
    {
        
        public wAddRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAdd";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Individual Output Field Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Add Row";
                    this.mbtn.WindowTitles.Add("Individual Output Field Definition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLiabilityTypes1 : WinWindow
    {
        
        public wLiabilityTypes1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysListView32", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Individual Output Field Definition");
            #endregion
        }
        
        #region Properties
        public list list
        {
            get
            {
                if ((this.mlist == null))
                {
                    this.mlist = new list(this);
                }
                return this.mlist;
            }
        }
        #endregion
        
        #region Fields
        private list mlist;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class list : WinList
    {
        
        public list(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Individual Output Field Definition");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAllLiabilityTypes
        {
            get
            {
                if ((this.mchkAllLiabilityTypes == null))
                {
                    this.mchkAllLiabilityTypes = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAllLiabilityTypes.SearchProperties[WinCheckBox.PropertyNames.Name] = "All Liability Types";
                    this.mchkAllLiabilityTypes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAllLiabilityTypes.WindowTitles.Add("Individual Output Field Definition");
                    #endregion
                }
                return this.mchkAllLiabilityTypes;
            }
        }
        
        public WinCheckBox chkFunding
        {
            get
            {
                if ((this.mchkFunding == null))
                {
                    this.mchkFunding = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkFunding.SearchProperties[WinCheckBox.PropertyNames.Name] = "Funding";
                    this.mchkFunding.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkFunding.WindowTitles.Add("Individual Output Field Definition");
                    #endregion
                }
                return this.mchkFunding;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAllLiabilityTypes;
        
        private WinCheckBox mchkFunding;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid_OutputFields : WinWindow
    {
        
        public wFPGrid_OutputFields(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprOutputFields";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Individual Output Field Definition");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "Define Output Fields";
                    this.mgrid.WindowTitles.Add("Individual Output Field Definition");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommon_cbo1 : WinWindow
    {
        
        public wCommon_cbo1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Individual Output Field Definition");
            #endregion
        }
        
        #region Properties
        public cbo cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new cbo(this);
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private cbo mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cbo : WinComboBox
    {
        
        public cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Individual Output Field Definition");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Individual Output Field Definition");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wParameterPrintComparison : WinWindow
    {
        
        public wParameterPrintComparison()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Parameter Print Comparison";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public wProcess wProcess
        {
            get
            {
                if ((this.mwProcess == null))
                {
                    this.mwProcess = new wProcess(this);
                }
                return this.mwProcess;
            }
        }
        
        public wOK33 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK33(this);
                }
                return this.mwOK;
            }
        }
        
        public wTreeNode1 wTreeNode1
        {
            get
            {
                if ((this.mwTreeNode1 == null))
                {
                    this.mwTreeNode1 = new wTreeNode1(this);
                }
                return this.mwTreeNode1;
            }
        }
        
        public wTreeNode2_ wTreeNode2_
        {
            get
            {
                if ((this.mwTreeNode2_ == null))
                {
                    this.mwTreeNode2_ = new wTreeNode2_(this);
                }
                return this.mwTreeNode2_;
            }
        }
        #endregion
        
        #region Fields
        private wProcess mwProcess;
        
        private wOK33 mwOK;
        
        private wTreeNode1 mwTreeNode1;
        
        private wTreeNode2_ mwTreeNode2_;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProcess : WinWindow
    {
        
        public wProcess(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnProcess";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Process";
                    this.mbtn.WindowTitles.Add("Parameter Print Comparison");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK33 : WinWindow
    {
        
        public wOK33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Parameter Print Comparison");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTreeNode1 : WinTree
    {
        
        public wTreeNode1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinTree.PropertyNames.Name, "Perf", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public tv tv
        {
            get
            {
                if ((this.mtv == null))
                {
                    this.mtv = new tv(this);
                }
                return this.mtv;
            }
        }
        #endregion
        
        #region Fields
        private tv mtv;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tv : WinTreeItem
    {
        
        public tv(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinTreeItem.PropertyNames.Name, "Plan", PropertyExpressionOperator.Contains));
            this.SearchProperties["Value"] = "0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public UIFundingValuationsTreeItem UIFundingValuationsTreeItem
        {
            get
            {
                if ((this.mUIFundingValuationsTreeItem == null))
                {
                    this.mUIFundingValuationsTreeItem = new UIFundingValuationsTreeItem(this);
                }
                return this.mUIFundingValuationsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFundingValuationsTreeItem mUIFundingValuationsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFundingValuationsTreeItem : WinTreeItem
    {
        
        public UIFundingValuationsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "FundingValuations";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public UIValuation2012TreeItem UIValuation2012TreeItem
        {
            get
            {
                if ((this.mUIValuation2012TreeItem == null))
                {
                    this.mUIValuation2012TreeItem = new UIValuation2012TreeItem(this);
                }
                return this.mUIValuation2012TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIValuation2012TreeItem mUIValuation2012TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIValuation2012TreeItem : WinTreeItem
    {
        
        public UIValuation2012TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Valuation2012";
            this.SearchProperties["Value"] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIFixSolvagediffTreeItem
        {
            get
            {
                if ((this.mUIFixSolvagediffTreeItem == null))
                {
                    this.mUIFixSolvagediffTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIFixSolvagediffTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Fix Solv age diff";
                    this.mUIFixSolvagediffTreeItem.SearchProperties["Value"] = "3";
                    this.mUIFixSolvagediffTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIFixSolvagediffTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIFixSolvagediffTreeItem.WindowTitles.Add("Parameter Print Comparison");
                    #endregion
                }
                return this.mUIFixSolvagediffTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIFixSolvagediffTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTreeNode2_ : WinWindow
    {
        
        public wTreeNode2_(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tvSelectedClient";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public wTreeNode2 wTreeNode2
        {
            get
            {
                if ((this.mwTreeNode2 == null))
                {
                    this.mwTreeNode2 = new wTreeNode2(this);
                }
                return this.mwTreeNode2;
            }
        }
        #endregion
        
        #region Fields
        private wTreeNode2 mwTreeNode2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTreeNode2 : WinTreeItem
    {
        
        public wTreeNode2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinTreeItem.PropertyNames.Name, "Plan", PropertyExpressionOperator.Contains));
            this.SearchProperties["Value"] = "0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public tv1 tv
        {
            get
            {
                if ((this.mtv == null))
                {
                    this.mtv = new tv1(this);
                }
                return this.mtv;
            }
        }
        #endregion
        
        #region Fields
        private tv1 mtv;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tv1 : WinTreeItem
    {
        
        public tv1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "FundingValuations";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Parameter Print Comparison");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIValuation2012TreeItem
        {
            get
            {
                if ((this.mUIValuation2012TreeItem == null))
                {
                    this.mUIValuation2012TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIValuation2012TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Valuation2012";
                    this.mUIValuation2012TreeItem.SearchProperties["Value"] = "2";
                    this.mUIValuation2012TreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIValuation2012TreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIValuation2012TreeItem.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIValuation2012TreeItem.WindowTitles.Add("Parameter Print Comparison");
                    #endregion
                }
                return this.mUIValuation2012TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIValuation2012TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPDFMustBeCreated : WinWindow
    {
        
        public wPDFMustBeCreated()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "PDF must be created";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("PDF must be created");
            #endregion
        }
        
        #region Properties
        public wOK34 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK34(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel6 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel6(this);
                }
                return this.mwCancel;
            }
        }
        #endregion
        
        #region Fields
        private wOK34 mwOK;
        
        private wCancel6 mwCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK34 : WinWindow
    {
        
        public wOK34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("PDF must be created");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("PDF must be created");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel6 : WinWindow
    {
        
        public wCancel6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("PDF must be created");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtn.WindowTitles.Add("PDF must be created");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBeyondCompare : WinWindow
    {
        
        public wBeyondCompare()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Beyond Compare", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TViewForm.UnicodeClass";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("BeyondComparePPSession - Text Compare - Beyond Compare");
            #endregion
        }
        
        #region Properties
        public wTitleBar1 wTitleBar
        {
            get
            {
                if ((this.mwTitleBar == null))
                {
                    this.mwTitleBar = new wTitleBar1(this);
                }
                return this.mwTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private wTitleBar1 mwTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTitleBar1 : WinTitleBar
    {
        
        public wTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("BeyondComparePPSession - Text Compare - Beyond Compare");
            #endregion
        }
        
        #region Properties
        public WinButton btnClose
        {
            get
            {
                if ((this.mbtnClose == null))
                {
                    this.mbtnClose = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClose.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtnClose.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnClose.WindowTitles.Add("BeyondComparePPSession - Text Compare - Beyond Compare");
                    #endregion
                }
                return this.mbtnClose;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPMTool_PlanCanada : WinWindow
    {
        
        public wPMTool_PlanCanada()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Plan ", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan Canada1FAdmin");
            #endregion
        }
        
        #region Properties
        public wAdministrationPlan wAdministrationPlan
        {
            get
            {
                if ((this.mwAdministrationPlan == null))
                {
                    this.mwAdministrationPlan = new wAdministrationPlan(this);
                }
                return this.mwAdministrationPlan;
            }
        }
        
        public wAllowDerivationVersion wAllowDerivationVersion
        {
            get
            {
                if ((this.mwAllowDerivationVersion == null))
                {
                    this.mwAllowDerivationVersion = new wAllowDerivationVersion(this);
                }
                return this.mwAllowDerivationVersion;
            }
        }
        #endregion
        
        #region Fields
        private wAdministrationPlan mwAdministrationPlan;
        
        private wAllowDerivationVersion mwAllowDerivationVersion;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdministrationPlan : WinWindow
    {
        
        public wAdministrationPlan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAdminPlan";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan Canada1FAdmin");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Administration Plan";
                    this.mchk.WindowTitles.Add("Plan Canada1FAdmin");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAllowDerivationVersion : WinWindow
    {
        
        public wAllowDerivationVersion(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAllowDerivationVer";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Plan Canada1FAdmin");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Allow Derivation versioning";
                    this.mchk.WindowTitles.Add("Plan Canada1FAdmin");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopyParticipantDataWarning : WinWindow
    {
        
        public wCopyParticipantDataWarning()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Copy Participant Data Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Participant Data Warning");
            #endregion
        }
        
        #region Properties
        public wOK35 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK35(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK35 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK35 : WinWindow
    {
        
        public wOK35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Participant Data Warning");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Copy Participant Data Warning");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProvisionsProperties : WinWindow
    {
        
        public wProvisionsProperties()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Provisions Properties";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Provisions Properties");
            #endregion
        }
        
        #region Properties
        public wFlowTree2 wFlowTree
        {
            get
            {
                if ((this.mwFlowTree == null))
                {
                    this.mwFlowTree = new wFlowTree2(this);
                }
                return this.mwFlowTree;
            }
        }
        
        public wOK36 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK36(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wFlowTree2 mwFlowTree;
        
        private wOK36 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFlowTree2 : WinWindow
    {
        
        public wFlowTree2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "flowTree";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Provisions Properties");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "flowTree";
                    this.mgrid.WindowTitles.Add("Provisions Properties");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK36 : WinWindow
    {
        
        public wOK36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Provisions Properties");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Provisions Properties");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMultipleNodeSelectio : WinWindow
    {
        
        public wMultipleNodeSelectio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Multiple Node Selection";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Multiple Node Selection");
            #endregion
        }
        
        #region Properties
        public wFlowTree3 wFlowTree
        {
            get
            {
                if ((this.mwFlowTree == null))
                {
                    this.mwFlowTree = new wFlowTree3(this);
                }
                return this.mwFlowTree;
            }
        }
        
        public wMultipleNodeSelectioTitleBar wMultipleNodeSelectioTitleBar
        {
            get
            {
                if ((this.mwMultipleNodeSelectioTitleBar == null))
                {
                    this.mwMultipleNodeSelectioTitleBar = new wMultipleNodeSelectioTitleBar(this);
                }
                return this.mwMultipleNodeSelectioTitleBar;
            }
        }
        
        public wOK37 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK37(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wFlowTree3 mwFlowTree;
        
        private wMultipleNodeSelectioTitleBar mwMultipleNodeSelectioTitleBar;
        
        private wOK37 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFlowTree3 : WinWindow
    {
        
        public wFlowTree3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "flowTree";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Multiple Node Selection");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "flowTree";
                    this.mgrid.WindowTitles.Add("Multiple Node Selection");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMultipleNodeSelectioTitleBar : WinTitleBar
    {
        
        public wMultipleNodeSelectioTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Multiple Node Selection");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Maximize";
                    this.mbtn.WindowTitles.Add("Multiple Node Selection");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK37 : WinWindow
    {
        
        public wOK37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdOk";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Multiple Node Selection");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Multiple Node Selection");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFutureValuationRunOptions : WinWindow
    {
        
        public wFutureValuationRunOptions()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Future Valuation Run Options";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Future Valuation Run Options");
            #endregion
        }
        
        #region Properties
        public wBreaksType wBreaksType
        {
            get
            {
                if ((this.mwBreaksType == null))
                {
                    this.mwBreaksType = new wBreaksType(this);
                }
                return this.mwBreaksType;
            }
        }
        #endregion
        
        #region Fields
        private wBreaksType mwBreaksType;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBreaksType : WinWindow
    {
        
        public wBreaksType(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboBreaksType";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Run Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Breaks based on data field values";
                    this.mcbo.WindowTitles.Add("Future Valuation Run Options");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFundingCalculationRun : WinWindow
    {
        
        public wFundingCalculationRun()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Funding Calculation Run Completed";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Funding Calculation Run Completed");
            #endregion
        }
        
        #region Properties
        public wOK38 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK38(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK38 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK38 : WinWindow
    {
        
        public wOK38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Funding Calculation Run Completed");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Funding Calculation Run Completed");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_ServiceNotes : WinWindow
    {
        
        public wHome_ServiceNotes()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Service Notes";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Service Notes");
            #endregion
        }
        
        #region Properties
        public wServiceInfo wServiceInfo
        {
            get
            {
                if ((this.mwServiceInfo == null))
                {
                    this.mwServiceInfo = new wServiceInfo(this);
                }
                return this.mwServiceInfo;
            }
        }
        
        public wOK39 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK39(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel7 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel7(this);
                }
                return this.mwCancel;
            }
        }
        #endregion
        
        #region Fields
        private wServiceInfo mwServiceInfo;
        
        private wOK39 mwOK;
        
        private wCancel7 mwCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceInfo : WinWindow
    {
        
        public wServiceInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblNavigate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Service Notes");
            #endregion
        }
        
        #region Properties
        public WinText txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinText(this);
                    #region Search Criteria
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Service Notes");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK39 : WinWindow
    {
        
        public wOK39(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Service Notes");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Service Notes");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel7 : WinWindow
    {
        
        public wCancel7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Service Notes");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtn.WindowTitles.Add("Service Notes");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFuturevaluationRun : WinWindow
    {
        
        public wFuturevaluationRun()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Future valuation run time";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Future valuation run time");
            #endregion
        }
        
        #region Properties
        public wOK40 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK40(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK40 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK40 : WinWindow
    {
        
        public wOK40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future valuation run time");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Future valuation run time");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMicrosoftExcelCompatibility : WinWindow
    {
        
        public wMicrosoftExcelCompatibility()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft Excel - Compatibility Checker";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NUIDialog";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Microsoft Excel - Compatibility Checker");
            #endregion
        }
        
        #region Properties
        public w w
        {
            get
            {
                if ((this.mw == null))
                {
                    this.mw = new w(this);
                }
                return this.mw;
            }
        }
        #endregion
        
        #region Fields
        private w mw;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class w : WinControl
    {
        
        public w(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Microsoft Excel - Compatibility Checker";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Microsoft Excel - Compatibility Checker");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkCheckCompatibility
        {
            get
            {
                if ((this.mchkCheckCompatibility == null))
                {
                    this.mchkCheckCompatibility = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkCheckCompatibility.SearchProperties[WinCheckBox.PropertyNames.Name] = "Check compatibility when saving this workbook.";
                    this.mchkCheckCompatibility.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkCheckCompatibility.WindowTitles.Add("Microsoft Excel - Compatibility Checker");
                    #endregion
                }
                return this.mchkCheckCompatibility;
            }
        }
        
        public WinButton btnConinue
        {
            get
            {
                if ((this.mbtnConinue == null))
                {
                    this.mbtnConinue = new WinButton(this);
                    #region Search Criteria
                    this.mbtnConinue.SearchProperties[WinButton.PropertyNames.Name] = "Continue";
                    this.mbtnConinue.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnConinue.WindowTitles.Add("Microsoft Excel - Compatibility Checker");
                    #endregion
                }
                return this.mbtnConinue;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkCheckCompatibility;
        
        private WinButton mbtnConinue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudioHelp : WinWindow
    {
        
        public wRetirementStudioHelp()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio Help";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public wTitleBar2 wTitleBar
        {
            get
            {
                if ((this.mwTitleBar == null))
                {
                    this.mwTitleBar = new wTitleBar2(this);
                }
                return this.mwTitleBar;
            }
        }
        
        public wCountry1 wCountry
        {
            get
            {
                if ((this.mwCountry == null))
                {
                    this.mwCountry = new wCountry1(this);
                }
                return this.mwCountry;
            }
        }
        
        public wTreeView wTreeView
        {
            get
            {
                if ((this.mwTreeView == null))
                {
                    this.mwTreeView = new wTreeView(this);
                }
                return this.mwTreeView;
            }
        }
        
        public wSearch_txt wSearch_txt
        {
            get
            {
                if ((this.mwSearch_txt == null))
                {
                    this.mwSearch_txt = new wSearch_txt(this);
                }
                return this.mwSearch_txt;
            }
        }
        
        public wSearch_btn wSearch_btn
        {
            get
            {
                if ((this.mwSearch_btn == null))
                {
                    this.mwSearch_btn = new wSearch_btn(this);
                }
                return this.mwSearch_btn;
            }
        }
        
        public wHelpContents wHelpContents
        {
            get
            {
                if ((this.mwHelpContents == null))
                {
                    this.mwHelpContents = new wHelpContents(this);
                }
                return this.mwHelpContents;
            }
        }
        
        public wStatusBar wStatusBar
        {
            get
            {
                if ((this.mwStatusBar == null))
                {
                    this.mwStatusBar = new wStatusBar(this);
                }
                return this.mwStatusBar;
            }
        }
        #endregion
        
        #region Fields
        private wTitleBar2 mwTitleBar;
        
        private wCountry1 mwCountry;
        
        private wTreeView mwTreeView;
        
        private wSearch_txt mwSearch_txt;
        
        private wSearch_btn mwSearch_btn;
        
        private wHelpContents mwHelpContents;
        
        private wStatusBar mwStatusBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTitleBar2 : WinTitleBar
    {
        
        public wTitleBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public WinButton btnClose
        {
            get
            {
                if ((this.mbtnClose == null))
                {
                    this.mbtnClose = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClose.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtnClose.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mbtnClose;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCountry1 : WinWindow
    {
        
        public wCountry1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public cboCountry cboCountry
        {
            get
            {
                if ((this.mcboCountry == null))
                {
                    this.mcboCountry = new cboCountry(this);
                }
                return this.mcboCountry;
            }
        }
        #endregion
        
        #region Fields
        private cboCountry mcboCountry;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cboCountry : WinComboBox
    {
        
        public cboCountry(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "Edit";
                    this.mUIItemWindow.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinButton btnDropDown
        {
            get
            {
                if ((this.mbtnDropDown == null))
                {
                    this.mbtnDropDown = new WinButton(this);
                    #region Search Criteria
                    this.mbtnDropDown.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mbtnDropDown.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mbtnDropDown;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        
        private WinButton mbtnDropDown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTreeView : WinWindow
    {
        
        public wTreeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tvHelpSections";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public tree tree
        {
            get
            {
                if ((this.mtree == null))
                {
                    this.mtree = new tree(this);
                }
                return this.mtree;
            }
        }
        #endregion
        
        #region Fields
        private tree mtree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tree : WinTree
    {
        
        public tree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Retirement Studio Help";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public tvUS tvUS
        {
            get
            {
                if ((this.mtvUS == null))
                {
                    this.mtvUS = new tvUS(this);
                }
                return this.mtvUS;
            }
        }
        #endregion
        
        #region Fields
        private tvUS mtvUS;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvUS : WinTreeItem
    {
        
        public tvUS(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "US";
            this.SearchProperties["Value"] = "0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public tvFAQs tvFAQs
        {
            get
            {
                if ((this.mtvFAQs == null))
                {
                    this.mtvFAQs = new tvFAQs(this);
                }
                return this.mtvFAQs;
            }
        }
        #endregion
        
        #region Fields
        private tvFAQs mtvFAQs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvFAQs : WinTreeItem
    {
        
        public tvFAQs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "FAQs";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIItem2009_RSC_Studio_TreeItem
        {
            get
            {
                if ((this.mUIItem2009_RSC_Studio_TreeItem == null))
                {
                    this.mUIItem2009_RSC_Studio_TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIItem2009_RSC_Studio_TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "2009_RSC_Studio_Valuation_Process_FAQ.doc";
                    this.mUIItem2009_RSC_Studio_TreeItem.SearchProperties["Value"] = "2";
                    this.mUIItem2009_RSC_Studio_TreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItem2009_RSC_Studio_TreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItem2009_RSC_Studio_TreeItem.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mUIItem2009_RSC_Studio_TreeItem;
            }
        }
        
        public WinTreeItem tvAccessRetirementStudioFAQ
        {
            get
            {
                if ((this.mtvAccessRetirementStudioFAQ == null))
                {
                    this.mtvAccessRetirementStudioFAQ = new WinTreeItem(this);
                    #region Search Criteria
                    this.mtvAccessRetirementStudioFAQ.SearchProperties[WinTreeItem.PropertyNames.Name] = "Accessing_Retirement_Studio_FAQ.doc";
                    this.mtvAccessRetirementStudioFAQ.SearchProperties["Value"] = "2";
                    this.mtvAccessRetirementStudioFAQ.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mtvAccessRetirementStudioFAQ.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mtvAccessRetirementStudioFAQ.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mtvAccessRetirementStudioFAQ;
            }
        }
        
        public WinTreeItem UIFAQ_WorkbookxlsTreeItem
        {
            get
            {
                if ((this.mUIFAQ_WorkbookxlsTreeItem == null))
                {
                    this.mUIFAQ_WorkbookxlsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIFAQ_WorkbookxlsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "FAQ_Workbook.xls";
                    this.mUIFAQ_WorkbookxlsTreeItem.SearchProperties["Value"] = "2";
                    this.mUIFAQ_WorkbookxlsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIFAQ_WorkbookxlsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIFAQ_WorkbookxlsTreeItem.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mUIFAQ_WorkbookxlsTreeItem;
            }
        }
        
        public WinTreeItem UIRTRdecrementtablesxlTreeItem
        {
            get
            {
                if ((this.mUIRTRdecrementtablesxlTreeItem == null))
                {
                    this.mUIRTRdecrementtablesxlTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIRTRdecrementtablesxlTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "RTR decrement tables.xlsx";
                    this.mUIRTRdecrementtablesxlTreeItem.SearchProperties["Value"] = "2";
                    this.mUIRTRdecrementtablesxlTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRTRdecrementtablesxlTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIRTRdecrementtablesxlTreeItem.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mUIRTRdecrementtablesxlTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIItem2009_RSC_Studio_TreeItem;
        
        private WinTreeItem mtvAccessRetirementStudioFAQ;
        
        private WinTreeItem mUIFAQ_WorkbookxlsTreeItem;
        
        private WinTreeItem mUIRTRdecrementtablesxlTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSearch_txt : WinWindow
    {
        
        public wSearch_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSearch_btn : WinToolBar
    {
        
        public wSearch_btn(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip2";
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Search Help Files";
                    this.mbtn.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHelpContents : WinToolBar
    {
        
        public wHelpContents(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public WinHyperlink link
        {
            get
            {
                if ((this.mlink == null))
                {
                    this.mlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Help Contents";
                    this.mlink.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStatusBar : WinStatusBar
    {
        
        public wStatusBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinStatusBar.PropertyNames.Name] = "statusStrip1";
            this.WindowTitles.Add("Retirement Studio Help");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkMercerWiki
        {
            get
            {
                if ((this.mlinkMercerWiki == null))
                {
                    this.mlinkMercerWiki = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkMercerWiki.SearchProperties[WinHyperlink.PropertyNames.Name] = "Mercer Wiki";
                    this.mlinkMercerWiki.WindowTitles.Add("Retirement Studio Help");
                    #endregion
                }
                return this.mlinkMercerWiki;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkMercerWiki;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wReportBuilderDataSource : WinWindow
    {
        
        public wReportBuilderDataSource()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Report Builder Data Source";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Report Builder Data Source");
            #endregion
        }
        
        #region Properties
        public wDataforSelected wDataforSelected
        {
            get
            {
                if ((this.mwDataforSelected == null))
                {
                    this.mwDataforSelected = new wDataforSelected(this);
                }
                return this.mwDataforSelected;
            }
        }
        
        public wBlankData wBlankData
        {
            get
            {
                if ((this.mwBlankData == null))
                {
                    this.mwBlankData = new wBlankData(this);
                }
                return this.mwBlankData;
            }
        }
        
        public wOK41 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK41(this);
                }
                return this.mwOK;
            }
        }
        
        public cboDataforSelected cboDataforSelected
        {
            get
            {
                if ((this.mcboDataforSelected == null))
                {
                    this.mcboDataforSelected = new cboDataforSelected(this);
                }
                return this.mcboDataforSelected;
            }
        }
        #endregion
        
        #region Fields
        private wDataforSelected mwDataforSelected;
        
        private wBlankData mwBlankData;
        
        private wOK41 mwOK;
        
        private cboDataforSelected mcboDataforSelected;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataforSelected : WinWindow
    {
        
        public wDataforSelected(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbMajorBreakDataSource";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Report Builder Data Source");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Data for the selected report break from the liability run";
                    this.mrd.WindowTitles.Add("Report Builder Data Source");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBlankData : WinWindow
    {
        
        public wBlankData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbEmptyDataSource";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Report Builder Data Source");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Blank data source";
                    this.mrd.WindowTitles.Add("Report Builder Data Source");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK41 : WinWindow
    {
        
        public wOK41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Report Builder Data Source");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Report Builder Data Source");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cboDataforSelected : WinWindow
    {
        
        public cboDataforSelected(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbxMajorBreak";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Report Builder Data Source");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Report Builder Data Source");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIE : WinWindow
    {
        
        public wIE()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Internet Explorer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Internet Explorer");
            #endregion
        }
        
        #region Properties
        public wAllow wAllow
        {
            get
            {
                if ((this.mwAllow == null))
                {
                    this.mwAllow = new wAllow(this);
                }
                return this.mwAllow;
            }
        }
        
        public WinTitleBar wIE_Title
        {
            get
            {
                if ((this.mwIE_Title == null))
                {
                    this.mwIE_Title = new WinTitleBar(this);
                    #region Search Criteria
                    this.mwIE_Title.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mwIE_Title.WindowTitles.Add("Internet Explorer");
                    #endregion
                }
                return this.mwIE_Title;
            }
        }
        #endregion
        
        #region Fields
        private wAllow mwAllow;
        
        private WinTitleBar mwIE_Title;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAllow : WinWindow
    {
        
        public wAllow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Internet Explorer");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Allow";
                    this.mbtn.WindowTitles.Add("Internet Explorer");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSQLReportBuilder : WinWindow
    {
        
        public wSQLReportBuilder()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, " - Microsoft SQL Server Report Builder", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("51903a1d-b4bb-4fb2-9894-87f254fc99d3 - Microsoft SQL Server Report Builder");
            #endregion
        }
        
        #region Properties
        public wTitle wTitle
        {
            get
            {
                if ((this.mwTitle == null))
                {
                    this.mwTitle = new wTitle(this);
                }
                return this.mwTitle;
            }
        }
        
        public wClose1 wClose
        {
            get
            {
                if ((this.mwClose == null))
                {
                    this.mwClose = new wClose1(this);
                }
                return this.mwClose;
            }
        }
        #endregion
        
        #region Fields
        private wTitle mwTitle;
        
        private wClose1 mwClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTitle : WinWindow
    {
        
        public wTitle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "officeWindowMoveControl";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("51903a1d-b4bb-4fb2-9894-87f254fc99d3 - Microsoft SQL Server Report Builder");
            #endregion
        }
        
        #region Properties
        public WinToolBar toolbar
        {
            get
            {
                if ((this.mtoolbar == null))
                {
                    this.mtoolbar = new WinToolBar(this);
                    #region Search Criteria
                    this.mtoolbar.SearchProperties[WinToolBar.PropertyNames.Name] = "officeWindowMoveControl";
                    this.mtoolbar.WindowTitles.Add("51903a1d-b4bb-4fb2-9894-87f254fc99d3 - Microsoft SQL Server Report Builder");
                    #endregion
                }
                return this.mtoolbar;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mtoolbar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClose1 : WinToolBar
    {
        
        public wClose1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "officeWindowControls";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("51903a1d-b4bb-4fb2-9894-87f254fc99d3 - Microsoft SQL Server Report Builder");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtn.WindowTitles.Add("51903a1d-b4bb-4fb2-9894-87f254fc99d3 - Microsoft SQL Server Report Builder");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudio_ERComplete : WinWindow
    {
        
        public wRetirementStudio_ERComplete()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Retirement Studio", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio      Prod-US      11/19/2018 12:43 AM");
            #endregion
        }
        
        #region Properties
        public WinTitleBar wTitle
        {
            get
            {
                if ((this.mwTitle == null))
                {
                    this.mwTitle = new WinTitleBar(this);
                    #region Search Criteria
                    this.mwTitle.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mwTitle.WindowTitles.Add("Retirement Studio      Prod-US      11/19/2018 12:43 AM");
                    #endregion
                }
                return this.mwTitle;
            }
        }
        
        public WinControl wDialog
        {
            get
            {
                if ((this.mwDialog == null))
                {
                    this.mwDialog = new WinControl(this);
                    #region Search Criteria
                    this.mwDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mwDialog.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Retirement Studio", PropertyExpressionOperator.Contains));
                    this.mwDialog.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mwDialog.WindowTitles.Add("Retirement Studio      Prod-US      11/19/2018 12:43 AM");
                    #endregion
                }
                return this.mwDialog;
            }
        }
        
        public wMessage2 wMessage
        {
            get
            {
                if ((this.mwMessage == null))
                {
                    this.mwMessage = new wMessage2(this);
                }
                return this.mwMessage;
            }
        }
        
        public wOK42 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK42(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mwTitle;
        
        private WinControl mwDialog;
        
        private wMessage2 mwMessage;
        
        private wOK42 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMessage2 : WinWindow
    {
        
        public wMessage2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio      Prod-US      11/19/2018 12:43 AM");
            #endregion
        }
        
        #region Properties
        public WinText txtMessage
        {
            get
            {
                if ((this.mtxtMessage == null))
                {
                    this.mtxtMessage = new WinText(this);
                    #region Search Criteria
                    this.mtxtMessage.SearchProperties.Add(new PropertyExpression(WinText.PropertyNames.Name, "Group Job Successfully Complete", PropertyExpressionOperator.Contains));
                    this.mtxtMessage.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtMessage.WindowTitles.Add("Retirement Studio      Prod-US      11/19/2018 12:43 AM");
                    #endregion
                }
                return this.mtxtMessage;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK42 : WinWindow
    {
        
        public wOK42(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio      Prod-US      11/19/2018 12:43 AM");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio      Prod-US      11/19/2018 12:43 AM");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRegionAndLanguage_Win10 : WinWindow
    {
        
        public wRegionAndLanguage_Win10()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Region";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Region");
            #endregion
        }
        
        #region Properties
        public wFormat2 wFormat
        {
            get
            {
                if ((this.mwFormat == null))
                {
                    this.mwFormat = new wFormat2(this);
                }
                return this.mwFormat;
            }
        }
        
        public wOK43 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK43(this);
                }
                return this.mwOK;
            }
        }
        
        public wShortDate wShortDate
        {
            get
            {
                if ((this.mwShortDate == null))
                {
                    this.mwShortDate = new wShortDate(this);
                }
                return this.mwShortDate;
            }
        }
        #endregion
        
        #region Fields
        private wFormat2 mwFormat;
        
        private wOK43 mwOK;
        
        private wShortDate mwShortDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFormat2 : WinWindow
    {
        
        public wFormat2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1021";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Region");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Format:";
                    this.mcbo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcbo.WindowTitles.Add("Region");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK43 : WinWindow
    {
        
        public wOK43(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Region");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Region");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wShortDate : WinWindow
    {
        
        public wShortDate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1028";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Region");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Short date:";
                    this.mcbo.WindowTitles.Add("Region");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceInstanceLocked : WinWindow
    {
        
        public wServiceInstanceLocked()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Service Instance is Locked";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Service Instance is Locked");
            #endregion
        }
        
        #region Properties
        public wCancel8 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel8(this);
                }
                return this.mwCancel;
            }
        }
        
        public WinTitleBar wTitle
        {
            get
            {
                if ((this.mwTitle == null))
                {
                    this.mwTitle = new WinTitleBar(this);
                    #region Search Criteria
                    this.mwTitle.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mwTitle.WindowTitles.Add("Service Instance is Locked");
                    #endregion
                }
                return this.mwTitle;
            }
        }
        #endregion
        
        #region Fields
        private wCancel8 mwCancel;
        
        private WinTitleBar mwTitle;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel8 : WinWindow
    {
        
        public wCancel8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Service Instance is Locked");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Service Instance is Locked");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValidationConfirm : WinWindow
    {
        
        public wValidationConfirm()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Validation Confirmation";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Validation Confirmation");
            #endregion
        }
        
        #region Properties
        public wValidate1 wValidate
        {
            get
            {
                if ((this.mwValidate == null))
                {
                    this.mwValidate = new wValidate1(this);
                }
                return this.mwValidate;
            }
        }
        #endregion
        
        #region Fields
        private wValidate1 mwValidate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValidate1 : WinWindow
    {
        
        public wValidate1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnValidate";
            this.WindowTitles.Add("Validation Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Validate";
                    this.mbtn.WindowTitles.Add("Validation Confirmation");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValidationResultsSummary : WinWindow
    {
        
        public wValidationResultsSummary()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Validation Results Summary";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Validation Results Summary");
            #endregion
        }
        
        #region Properties
        public wClose2 wClose
        {
            get
            {
                if ((this.mwClose == null))
                {
                    this.mwClose = new wClose2(this);
                }
                return this.mwClose;
            }
        }
        
        public wOverallValidateStatus wOverallValidateStatus
        {
            get
            {
                if ((this.mwOverallValidateStatus == null))
                {
                    this.mwOverallValidateStatus = new wOverallValidateStatus(this);
                }
                return this.mwOverallValidateStatus;
            }
        }
        
        public wDataValidateStatus wDataValidateStatus
        {
            get
            {
                if ((this.mwDataValidateStatus == null))
                {
                    this.mwDataValidateStatus = new wDataValidateStatus(this);
                }
                return this.mwDataValidateStatus;
            }
        }
        
        public wMethodValidateStatus wMethodValidateStatus
        {
            get
            {
                if ((this.mwMethodValidateStatus == null))
                {
                    this.mwMethodValidateStatus = new wMethodValidateStatus(this);
                }
                return this.mwMethodValidateStatus;
            }
        }
        
        public wAssumptionValidateStatus wAssumptionValidateStatus
        {
            get
            {
                if ((this.mwAssumptionValidateStatus == null))
                {
                    this.mwAssumptionValidateStatus = new wAssumptionValidateStatus(this);
                }
                return this.mwAssumptionValidateStatus;
            }
        }
        
        public wProvisionValidateStatus wProvisionValidateStatus
        {
            get
            {
                if ((this.mwProvisionValidateStatus == null))
                {
                    this.mwProvisionValidateStatus = new wProvisionValidateStatus(this);
                }
                return this.mwProvisionValidateStatus;
            }
        }
        
        public wParamValidateStatus wParamValidateStatus
        {
            get
            {
                if ((this.mwParamValidateStatus == null))
                {
                    this.mwParamValidateStatus = new wParamValidateStatus(this);
                }
                return this.mwParamValidateStatus;
            }
        }
        
        public wNodeName wNodeName
        {
            get
            {
                if ((this.mwNodeName == null))
                {
                    this.mwNodeName = new wNodeName(this);
                }
                return this.mwNodeName;
            }
        }
        #endregion
        
        #region Fields
        private wClose2 mwClose;
        
        private wOverallValidateStatus mwOverallValidateStatus;
        
        private wDataValidateStatus mwDataValidateStatus;
        
        private wMethodValidateStatus mwMethodValidateStatus;
        
        private wAssumptionValidateStatus mwAssumptionValidateStatus;
        
        private wProvisionValidateStatus mwProvisionValidateStatus;
        
        private wParamValidateStatus mwParamValidateStatus;
        
        private wNodeName mwNodeName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClose2 : WinWindow
    {
        
        public wClose2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnClose";
            this.WindowTitles.Add("Validation Results Summary");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Close Window";
                    this.mbtn.WindowTitles.Add("Validation Results Summary");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOverallValidateStatus : WinWindow
    {
        
        public wOverallValidateStatus(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblStatus";
            this.WindowTitles.Add("Validation Results Summary");
            #endregion
        }
        
        #region Properties
        public WinText txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinText(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinText.PropertyNames.Name] = "PASSED";
                    this.mtxt.WindowTitles.Add("Validation Results Summary");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataValidateStatus : WinWindow
    {
        
        public wDataValidateStatus(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblDataNoErrors";
            this.WindowTitles.Add("Validation Results Summary");
            #endregion
        }
        
        #region Properties
        public WinText txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinText(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinText.PropertyNames.Name] = "No Errors Found";
                    this.mtxt.WindowTitles.Add("Validation Results Summary");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMethodValidateStatus : WinWindow
    {
        
        public wMethodValidateStatus(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblMethodsNoErrors";
            this.WindowTitles.Add("Validation Results Summary");
            #endregion
        }
        
        #region Properties
        public WinText txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinText(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinText.PropertyNames.Name] = "No Errors Found";
                    this.mtxt.WindowTitles.Add("Validation Results Summary");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAssumptionValidateStatus : WinWindow
    {
        
        public wAssumptionValidateStatus(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblAssumptionsNoErrors";
            this.WindowTitles.Add("Validation Results Summary");
            #endregion
        }
        
        #region Properties
        public WinText txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinText(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinText.PropertyNames.Name] = "No Errors Found";
                    this.mtxt.WindowTitles.Add("Validation Results Summary");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProvisionValidateStatus : WinWindow
    {
        
        public wProvisionValidateStatus(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblProvisionsNoErrors";
            this.WindowTitles.Add("Validation Results Summary");
            #endregion
        }
        
        #region Properties
        public WinText txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinText(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinText.PropertyNames.Name] = "No Errors Found";
                    this.mtxt.WindowTitles.Add("Validation Results Summary");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wParamValidateStatus : WinWindow
    {
        
        public wParamValidateStatus(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblCrossReferenceNoErrors";
            this.WindowTitles.Add("Validation Results Summary");
            #endregion
        }
        
        #region Properties
        public WinText txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinText(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinText.PropertyNames.Name] = "No Errors Found";
                    this.mtxt.WindowTitles.Add("Validation Results Summary");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNodeName : WinWindow
    {
        
        public wNodeName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblNodeName";
            this.WindowTitles.Add("Validation Results Summary");
            #endregion
        }
        
        #region Properties
        public WinText txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinText(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinText.PropertyNames.Name] = "Baseline";
                    this.mtxt.WindowTitles.Add("Validation Results Summary");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFVPopulationProjectRunOption : WinWindow
    {
        
        public wFVPopulationProjectRunOption()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Future Valuation Population Projection Run Options";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Future Valuation Population Projection Run Options");
            #endregion
        }
        
        #region Properties
        public runFVPP runFVPP
        {
            get
            {
                if ((this.mrunFVPP == null))
                {
                    this.mrunFVPP = new runFVPP(this);
                }
                return this.mrunFVPP;
            }
        }
        
        public standard standard
        {
            get
            {
                if ((this.mstandard == null))
                {
                    this.mstandard = new standard(this);
                }
                return this.mstandard;
            }
        }
        
        public custom custom
        {
            get
            {
                if ((this.mcustom == null))
                {
                    this.mcustom = new custom(this);
                }
                return this.mcustom;
            }
        }
        #endregion
        
        #region Fields
        private runFVPP mrunFVPP;
        
        private standard mstandard;
        
        private custom mcustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class runFVPP : WinWindow
    {
        
        public runFVPP(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Future Valuation Population Projection Run Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Run FV Population Projection";
                    this.mbtn.WindowTitles.Add("Future Valuation Population Projection Run Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class standard : WinWindow
    {
        
        public standard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radStandardised";
            this.WindowTitles.Add("Future Valuation Population Projection Run Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Standardised method";
                    this.mrd.WindowTitles.Add("Future Valuation Population Projection Run Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class custom : WinWindow
    {
        
        public custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radCustomised";
            this.WindowTitles.Add("Future Valuation Population Projection Run Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Customised approach";
                    this.mrd.WindowTitles.Add("Future Valuation Population Projection Run Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.LISTBOX", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new UIItemList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemList : WinList
    {
        
        public UIItemList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinListItem UIOtherassumptionchangListItem
        {
            get
            {
                if ((this.mUIOtherassumptionchangListItem == null))
                {
                    this.mUIOtherassumptionchangListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIOtherassumptionchangListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Other assumption changes";
                    #endregion
                }
                return this.mUIOtherassumptionchangListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIOtherassumptionchangListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMicrosoftWord : WinWindow
    {
        
        public wMicrosoftWord()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft Word";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NUIDialog";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Microsoft Word");
            #endregion
        }
        
        #region Properties
        public wDialog wDialog
        {
            get
            {
                if ((this.mwDialog == null))
                {
                    this.mwDialog = new wDialog(this);
                }
                return this.mwDialog;
            }
        }
        #endregion
        
        #region Fields
        private wDialog mwDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDialog : WinControl
    {
        
        public wDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Microsoft Word";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Microsoft Word");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Microsoft Word");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class w2DCashflows : WinWindow
    {
        
        public w2DCashflows()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "2D Cashflows";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("2D Cashflows");
            #endregion
        }
        
        #region Properties
        public wOK44 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK44(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK44 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK44 : WinWindow
    {
        
        public wOK44(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("2D Cashflows");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("2D Cashflows");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayoutProjectionbyPa : WinWindow
    {
        
        public wPayoutProjectionbyPa()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Payout Projection by Participant";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Payout Projection by Participant");
            #endregion
        }
        
        #region Properties
        public wOK45 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK45(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK45 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK45 : WinWindow
    {
        
        public wOK45(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Payout Projection by Participant");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Payout Projection by Participant");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
}
