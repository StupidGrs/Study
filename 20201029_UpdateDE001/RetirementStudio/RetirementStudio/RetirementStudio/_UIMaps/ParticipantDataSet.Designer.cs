// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RetirementStudio._UIMaps.ParticipantDataSetClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class ParticipantDataSet
    {
        
        #region Properties
        public wRetirementStudio wRetirementStudio
        {
            get
            {
                if ((this.mwRetirementStudio == null))
                {
                    this.mwRetirementStudio = new wRetirementStudio();
                }
                return this.mwRetirementStudio;
            }
        }
        
        public wGRSLogin wGRSLogin
        {
            get
            {
                if ((this.mwGRSLogin == null))
                {
                    this.mwGRSLogin = new wGRSLogin();
                }
                return this.mwGRSLogin;
            }
        }
        
        public wDataInput wDataInput
        {
            get
            {
                if ((this.mwDataInput == null))
                {
                    this.mwDataInput = new wDataInput();
                }
                return this.mwDataInput;
            }
        }
        
        public wAddField1 wAddField
        {
            get
            {
                if ((this.mwAddField == null))
                {
                    this.mwAddField = new wAddField1();
                }
                return this.mwAddField;
            }
        }
        
        public wAddHistory wAddHistory
        {
            get
            {
                if ((this.mwAddHistory == null))
                {
                    this.mwAddHistory = new wAddHistory();
                }
                return this.mwAddHistory;
            }
        }
        
        public wGRSClientforTableImport wGRSClientforTableImport
        {
            get
            {
                if ((this.mwGRSClientforTableImport == null))
                {
                    this.mwGRSClientforTableImport = new wGRSClientforTableImport();
                }
                return this.mwGRSClientforTableImport;
            }
        }
        
        public wSourceTable wSourceTable
        {
            get
            {
                if ((this.mwSourceTable == null))
                {
                    this.mwSourceTable = new wSourceTable();
                }
                return this.mwSourceTable;
            }
        }
        
        public wSourceTable_Popup_OK wSourceTable_Popup_OK
        {
            get
            {
                if ((this.mwSourceTable_Popup_OK == null))
                {
                    this.mwSourceTable_Popup_OK = new wSourceTable_Popup_OK();
                }
                return this.mwSourceTable_Popup_OK;
            }
        }
        
        public wSourceTable_Popup_Msg wSourceTable_Popup_Msg
        {
            get
            {
                if ((this.mwSourceTable_Popup_Msg == null))
                {
                    this.mwSourceTable_Popup_Msg = new wSourceTable_Popup_Msg();
                }
                return this.mwSourceTable_Popup_Msg;
            }
        }
        
        public wSelectSnapshotDefinition wSelectSnapshotDefinition
        {
            get
            {
                if ((this.mwSelectSnapshotDefinition == null))
                {
                    this.mwSelectSnapshotDefinition = new wSelectSnapshotDefinition();
                }
                return this.mwSelectSnapshotDefinition;
            }
        }
        
        public wAssetSnapshot wAssetSnapshot
        {
            get
            {
                if ((this.mwAssetSnapshot == null))
                {
                    this.mwAssetSnapshot = new wAssetSnapshot();
                }
                return this.mwAssetSnapshot;
            }
        }
        
        public wDataImport wDataImport
        {
            get
            {
                if ((this.mwDataImport == null))
                {
                    this.mwDataImport = new wDataImport();
                }
                return this.mwDataImport;
            }
        }
        
        public wGRSInformation1 wGRSInformation
        {
            get
            {
                if ((this.mwGRSInformation == null))
                {
                    this.mwGRSInformation = new wGRSInformation1();
                }
                return this.mwGRSInformation;
            }
        }
        
        public wImportSnapshot wImportSnapshot
        {
            get
            {
                if ((this.mwImportSnapshot == null))
                {
                    this.mwImportSnapshot = new wImportSnapshot();
                }
                return this.mwImportSnapshot;
            }
        }
        
        public wImportGRSUnload wImportGRSUnload
        {
            get
            {
                if ((this.mwImportGRSUnload == null))
                {
                    this.mwImportGRSUnload = new wImportGRSUnload();
                }
                return this.mwImportGRSUnload;
            }
        }
        
        public wViewDataParameters wViewDataParameters
        {
            get
            {
                if ((this.mwViewDataParameters == null))
                {
                    this.mwViewDataParameters = new wViewDataParameters();
                }
                return this.mwViewDataParameters;
            }
        }
        
        public wViewData wViewData
        {
            get
            {
                if ((this.mwViewData == null))
                {
                    this.mwViewData = new wViewData();
                }
                return this.mwViewData;
            }
        }
        
        public wImportDataFile wImportDataFile
        {
            get
            {
                if ((this.mwImportDataFile == null))
                {
                    this.mwImportDataFile = new wImportDataFile();
                }
                return this.mwImportDataFile;
            }
        }
        #endregion
        
        #region Fields
        private wRetirementStudio mwRetirementStudio;
        
        private wGRSLogin mwGRSLogin;
        
        private wDataInput mwDataInput;
        
        private wAddField1 mwAddField;
        
        private wAddHistory mwAddHistory;
        
        private wGRSClientforTableImport mwGRSClientforTableImport;
        
        private wSourceTable mwSourceTable;
        
        private wSourceTable_Popup_OK mwSourceTable_Popup_OK;
        
        private wSourceTable_Popup_Msg mwSourceTable_Popup_Msg;
        
        private wSelectSnapshotDefinition mwSelectSnapshotDefinition;
        
        private wAssetSnapshot mwAssetSnapshot;
        
        private wDataImport mwDataImport;
        
        private wGRSInformation1 mwGRSInformation;
        
        private wImportSnapshot mwImportSnapshot;
        
        private wImportGRSUnload mwImportGRSUnload;
        
        private wViewDataParameters mwViewDataParameters;
        
        private wViewData mwViewData;
        
        private wImportDataFile mwImportDataFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudio : WinWindow
    {
        
        public wRetirementStudio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wSnapshot wSnapshot
        {
            get
            {
                if ((this.mwSnapshot == null))
                {
                    this.mwSnapshot = new wSnapshot(this);
                }
                return this.mwSnapshot;
            }
        }
        
        public wGRSUnload wGRSUnload
        {
            get
            {
                if ((this.mwGRSUnload == null))
                {
                    this.mwGRSUnload = new wGRSUnload(this);
                }
                return this.mwGRSUnload;
            }
        }
        
        public wGotoDataSystem wGotoDataSystem
        {
            get
            {
                if ((this.mwGotoDataSystem == null))
                {
                    this.mwGotoDataSystem = new wGotoDataSystem(this);
                }
                return this.mwGotoDataSystem;
            }
        }
        
        public wImportDataandApplyMappings wImportDataandApplyMappings
        {
            get
            {
                if ((this.mwImportDataandApplyMappings == null))
                {
                    this.mwImportDataandApplyMappings = new wImportDataandApplyMappings(this);
                }
                return this.mwImportDataandApplyMappings;
            }
        }
        
        public wAddField wAddField
        {
            get
            {
                if ((this.mwAddField == null))
                {
                    this.mwAddField = new wAddField(this);
                }
                return this.mwAddField;
            }
        }
        
        public wGRSInformation wGRSInformation
        {
            get
            {
                if ((this.mwGRSInformation == null))
                {
                    this.mwGRSInformation = new wGRSInformation(this);
                }
                return this.mwGRSInformation;
            }
        }
        
        public wDataEffectiveDate wDataEffectiveDate
        {
            get
            {
                if ((this.mwDataEffectiveDate == null))
                {
                    this.mwDataEffectiveDate = new wDataEffectiveDate(this);
                }
                return this.mwDataEffectiveDate;
            }
        }
        
        public wFPGrid wFPGrid
        {
            get
            {
                if ((this.mwFPGrid == null))
                {
                    this.mwFPGrid = new wFPGrid(this);
                }
                return this.mwFPGrid;
            }
        }
        
        public wMapComboBox wMapComboBox
        {
            get
            {
                if ((this.mwMapComboBox == null))
                {
                    this.mwMapComboBox = new wMapComboBox(this);
                }
                return this.mwMapComboBox;
            }
        }
        
        public WinTitleBar UIRetirementStudioTitleBar
        {
            get
            {
                if ((this.mUIRetirementStudioTitleBar == null))
                {
                    this.mUIRetirementStudioTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIRetirementStudioTitleBar.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIRetirementStudioTitleBar;
            }
        }
        
        public wMenuBar wMenuBar
        {
            get
            {
                if ((this.mwMenuBar == null))
                {
                    this.mwMenuBar = new wMenuBar(this);
                }
                return this.mwMenuBar;
            }
        }
        
        public wCompareData wCompareData
        {
            get
            {
                if ((this.mwCompareData == null))
                {
                    this.mwCompareData = new wCompareData(this);
                }
                return this.mwCompareData;
            }
        }
        
        public wViewMappedData wViewMappedData
        {
            get
            {
                if ((this.mwViewMappedData == null))
                {
                    this.mwViewMappedData = new wViewMappedData(this);
                }
                return this.mwViewMappedData;
            }
        }
        
        public wExportMappingstoExcel wExportMappingstoExcel
        {
            get
            {
                if ((this.mwExportMappingstoExcel == null))
                {
                    this.mwExportMappingstoExcel = new wExportMappingstoExcel(this);
                }
                return this.mwExportMappingstoExcel;
            }
        }
        
        public wDataFile wDataFile
        {
            get
            {
                if ((this.mwDataFile == null))
                {
                    this.mwDataFile = new wDataFile(this);
                }
                return this.mwDataFile;
            }
        }
        #endregion
        
        #region Fields
        private wSnapshot mwSnapshot;
        
        private wGRSUnload mwGRSUnload;
        
        private wGotoDataSystem mwGotoDataSystem;
        
        private wImportDataandApplyMappings mwImportDataandApplyMappings;
        
        private wAddField mwAddField;
        
        private wGRSInformation mwGRSInformation;
        
        private wDataEffectiveDate mwDataEffectiveDate;
        
        private wFPGrid mwFPGrid;
        
        private wMapComboBox mwMapComboBox;
        
        private WinTitleBar mUIRetirementStudioTitleBar;
        
        private wMenuBar mwMenuBar;
        
        private wCompareData mwCompareData;
        
        private wViewMappedData mwViewMappedData;
        
        private wExportMappingstoExcel mwExportMappingstoExcel;
        
        private wDataFile mwDataFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSnapshot : WinWindow
    {
        
        public wSnapshot(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbSnapshot";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdSnapshot
        {
            get
            {
                if ((this.mrdSnapshot == null))
                {
                    this.mrdSnapshot = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdSnapshot.SearchProperties[WinRadioButton.PropertyNames.Name] = "Snapshot";
                    this.mrdSnapshot.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdSnapshot;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdSnapshot;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGRSUnload : WinWindow
    {
        
        public wGRSUnload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbGRSUnload";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdGRSUnload
        {
            get
            {
                if ((this.mrdGRSUnload == null))
                {
                    this.mrdGRSUnload = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdGRSUnload.SearchProperties[WinRadioButton.PropertyNames.Name] = "GRS Unload";
                    this.mrdGRSUnload.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdGRSUnload;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdGRSUnload;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGotoDataSystem : WinWindow
    {
        
        public wGotoDataSystem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOpenDataInputExplorer";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnGotoDataSystem
        {
            get
            {
                if ((this.mbtnGotoDataSystem == null))
                {
                    this.mbtnGotoDataSystem = new WinButton(this);
                    #region Search Criteria
                    this.mbtnGotoDataSystem.SearchProperties[WinButton.PropertyNames.Name] = "Go to Data System";
                    this.mbtnGotoDataSystem.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnGotoDataSystem;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnGotoDataSystem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wImportDataandApplyMappings : WinWindow
    {
        
        public wImportDataandApplyMappings(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnImportData";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnImportDataandApplyMapping
        {
            get
            {
                if ((this.mbtnImportDataandApplyMapping == null))
                {
                    this.mbtnImportDataandApplyMapping = new WinButton(this);
                    #region Search Criteria
                    this.mbtnImportDataandApplyMapping.SearchProperties[WinButton.PropertyNames.Name] = "Import Data and Apply Mappings";
                    this.mbtnImportDataandApplyMapping.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnImportDataandApplyMapping;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnImportDataandApplyMapping;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddField : WinWindow
    {
        
        public wAddField(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddFields";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddField
        {
            get
            {
                if ((this.mbtnAddField == null))
                {
                    this.mbtnAddField = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddField.SearchProperties[WinButton.PropertyNames.Name] = "Add Field";
                    this.mbtnAddField.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddField;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddField;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGRSInformation : WinWindow
    {
        
        public wGRSInformation(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnTotalDecrement";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnGRSInformation
        {
            get
            {
                if ((this.mbtnGRSInformation == null))
                {
                    this.mbtnGRSInformation = new WinButton(this);
                    #region Search Criteria
                    this.mbtnGRSInformation.SearchProperties[WinButton.PropertyNames.Name] = "GRS Information";
                    this.mbtnGRSInformation.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnGRSInformation;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnGRSInformation;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataEffectiveDate : WinWindow
    {
        
        public wDataEffectiveDate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dteEffectiveDate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public cboDataEffectiveDate cboDataEffectiveDate
        {
            get
            {
                if ((this.mcboDataEffectiveDate == null))
                {
                    this.mcboDataEffectiveDate = new cboDataEffectiveDate(this);
                }
                return this.mcboDataEffectiveDate;
            }
        }
        #endregion
        
        #region Fields
        private cboDataEffectiveDate mcboDataEffectiveDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cboDataEffectiveDate : WinComboBox
    {
        
        public cboDataEffectiveDate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtDataEffectiveDate
        {
            get
            {
                if ((this.mtxtDataEffectiveDate == null))
                {
                    this.mtxtDataEffectiveDate = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtDataEffectiveDate.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxtDataEffectiveDate.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtDataEffectiveDate;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtDataEffectiveDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid : WinWindow
    {
        
        public wFPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadDataDictionary";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMapComboBox : WinWindow
    {
        
        public wMapComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMenuBar : WinMenuBar
    {
        
        public wMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIImportTablesMenuItem
        {
            get
            {
                if ((this.mUIImportTablesMenuItem == null))
                {
                    this.mUIImportTablesMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIImportTablesMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Import Tables";
                    this.mUIImportTablesMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIImportTablesMenuItem.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIImportTablesMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIImportTablesMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCompareData : WinWindow
    {
        
        public wCompareData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkCompareData";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkCompareData
        {
            get
            {
                if ((this.mchkCompareData == null))
                {
                    this.mchkCompareData = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkCompareData.SearchProperties[WinCheckBox.PropertyNames.Name] = "Compare data";
                    this.mchkCompareData.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkCompareData;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkCompareData;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wViewMappedData : WinWindow
    {
        
        public wViewMappedData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnViewData";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "View Mapped Data";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExportMappingstoExcel : WinWindow
    {
        
        public wExportMappingstoExcel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnExportToExcel";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Export Mappings to Excel";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataFile : WinWindow
    {
        
        public wDataFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbDataFile";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Data File";
                    this.mrd.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGRSLogin : WinWindow
    {
        
        public wGRSLogin()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GRS Login";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public wLoginID wLoginID
        {
            get
            {
                if ((this.mwLoginID == null))
                {
                    this.mwLoginID = new wLoginID(this);
                }
                return this.mwLoginID;
            }
        }
        
        public wGRSServer wGRSServer
        {
            get
            {
                if ((this.mwGRSServer == null))
                {
                    this.mwGRSServer = new wGRSServer(this);
                }
                return this.mwGRSServer;
            }
        }
        
        public wPassword wPassword
        {
            get
            {
                if ((this.mwPassword == null))
                {
                    this.mwPassword = new wPassword(this);
                }
                return this.mwPassword;
            }
        }
        
        public wOK wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wLoginID mwLoginID;
        
        private wGRSServer mwGRSServer;
        
        private wPassword mwPassword;
        
        private wOK mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLoginID : WinWindow
    {
        
        public wLoginID(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtUserId";
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public WinEdit txtLoginID
        {
            get
            {
                if ((this.mtxtLoginID == null))
                {
                    this.mtxtLoginID = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtLoginID.SearchProperties[WinEdit.PropertyNames.Name] = "Password";
                    this.mtxtLoginID.WindowTitles.Add("GRS Login");
                    #endregion
                }
                return this.mtxtLoginID;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtLoginID;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGRSServer : WinWindow
    {
        
        public wGRSServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboServer";
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboGRSServer
        {
            get
            {
                if ((this.mcboGRSServer == null))
                {
                    this.mcboGRSServer = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboGRSServer.SearchProperties[WinComboBox.PropertyNames.Name] = "Login Id";
                    this.mcboGRSServer.WindowTitles.Add("GRS Login");
                    #endregion
                }
                return this.mcboGRSServer;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboGRSServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPassword : WinWindow
    {
        
        public wPassword(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPassword";
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public WinEdit txtPassword
        {
            get
            {
                if ((this.mtxtPassword == null))
                {
                    this.mtxtPassword = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPassword.WindowTitles.Add("GRS Login");
                    #endregion
                }
                return this.mtxtPassword;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtPassword;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK : WinWindow
    {
        
        public wOK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("GRS Login");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("GRS Login");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataInput : WinWindow
    {
        
        public wDataInput()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Input";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Input");
            #endregion
        }
        
        #region Properties
        public wOK1 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK1(this);
                }
                return this.mwOK;
            }
        }
        
        public tvGRSClient tvGRSClient
        {
            get
            {
                if ((this.mtvGRSClient == null))
                {
                    this.mtvGRSClient = new tvGRSClient(this);
                }
                return this.mtvGRSClient;
            }
        }
        #endregion
        
        #region Fields
        private wOK1 mwOK;
        
        private tvGRSClient mtvGRSClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK1 : WinWindow
    {
        
        public wOK1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOk";
            this.WindowTitles.Add("Data Input");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Data Input");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvGRSClient : WinWindow
    {
        
        public tvGRSClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trvDataInputExplorer";
            this.WindowTitles.Add("Data Input");
            #endregion
        }
        
        #region Properties
        public UIGRSClientsTreeItem UIGRSClientsTreeItem
        {
            get
            {
                if ((this.mUIGRSClientsTreeItem == null))
                {
                    this.mUIGRSClientsTreeItem = new UIGRSClientsTreeItem(this);
                }
                return this.mUIGRSClientsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIGRSClientsTreeItem mUIGRSClientsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIGRSClientsTreeItem : WinTreeItem
    {
        
        public UIGRSClientsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "GRS Clients";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Data Input");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIL052NebraskaMedicalTreeItem
        {
            get
            {
                if ((this.mUIL052NebraskaMedicalTreeItem == null))
                {
                    this.mUIL052NebraskaMedicalTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIL052NebraskaMedicalTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "L052 - Nebraska Medical";
                    this.mUIL052NebraskaMedicalTreeItem.SearchProperties["Value"] = "1";
                    this.mUIL052NebraskaMedicalTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIL052NebraskaMedicalTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIL052NebraskaMedicalTreeItem.WindowTitles.Add("Data Input");
                    #endregion
                }
                return this.mUIL052NebraskaMedicalTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIL052NebraskaMedicalTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddField1 : WinWindow
    {
        
        public wAddField1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add Field";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Field");
            #endregion
        }
        
        #region Properties
        public wOK2 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK2(this);
                }
                return this.mwOK;
            }
        }
        
        public wFieldName wFieldName
        {
            get
            {
                if ((this.mwFieldName == null))
                {
                    this.mwFieldName = new wFieldName(this);
                }
                return this.mwFieldName;
            }
        }
        #endregion
        
        #region Fields
        private wOK2 mwOK;
        
        private wFieldName mwFieldName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK2 : WinWindow
    {
        
        public wOK2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Add Field");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Add Field");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFieldName : WinWindow
    {
        
        public wFieldName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtFieldName";
            this.WindowTitles.Add("Add Field");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFieldName
        {
            get
            {
                if ((this.mtxtFieldName == null))
                {
                    this.mtxtFieldName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFieldName.SearchProperties[WinEdit.PropertyNames.Name] = "Field Name";
                    this.mtxtFieldName.WindowTitles.Add("Add Field");
                    #endregion
                }
                return this.mtxtFieldName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFieldName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddHistory : WinWindow
    {
        
        public wAddHistory()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add History";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add History");
            #endregion
        }
        
        #region Properties
        public wOK3 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK3(this);
                }
                return this.mwOK;
            }
        }
        
        public wHistoryFields_ wHistoryFields_
        {
            get
            {
                if ((this.mwHistoryFields_ == null))
                {
                    this.mwHistoryFields_ = new wHistoryFields_(this);
                }
                return this.mwHistoryFields_;
            }
        }
        
        public wHistoryFields wHistoryFields
        {
            get
            {
                if ((this.mwHistoryFields == null))
                {
                    this.mwHistoryFields = new wHistoryFields(this);
                }
                return this.mwHistoryFields;
            }
        }
        #endregion
        
        #region Fields
        private wOK3 mwOK;
        
        private wHistoryFields_ mwHistoryFields_;
        
        private wHistoryFields mwHistoryFields;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK3 : WinWindow
    {
        
        public wOK3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Add History");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Add History");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistoryFields_ : WinEdit
    {
        
        public wHistoryFields_(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
            this.WindowTitles.Add("Add History");
            #endregion
        }
        
        #region Properties
        public WinEdit txtHistoryFields
        {
            get
            {
                if ((this.mtxtHistoryFields == null))
                {
                    this.mtxtHistoryFields = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtHistoryFields.SearchProperties[WinEdit.PropertyNames.Name] = "A single text character";
                    this.mtxtHistoryFields.SearchProperties[WinEdit.PropertyNames.Instance] = "2";
                    this.mtxtHistoryFields.WindowTitles.Add("Add History");
                    #endregion
                }
                return this.mtxtHistoryFields;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtHistoryFields;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistoryFields : WinEdit
    {
        
        public wHistoryFields(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Add History");
            #endregion
        }
        
        #region Properties
        public WinEdit txtHistoryFields
        {
            get
            {
                if ((this.mtxtHistoryFields == null))
                {
                    this.mtxtHistoryFields = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtHistoryFields.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxtHistoryFields.WindowTitles.Add("Add History");
                    #endregion
                }
                return this.mtxtHistoryFields;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtHistoryFields;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGRSClientforTableImport : WinWindow
    {
        
        public wGRSClientforTableImport()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GRS Client for Table Import";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("GRS Client for Table Import");
            #endregion
        }
        
        #region Properties
        public wOK4 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK4(this);
                }
                return this.mwOK;
            }
        }
        
        public wClients wClients
        {
            get
            {
                if ((this.mwClients == null))
                {
                    this.mwClients = new wClients(this);
                }
                return this.mwClients;
            }
        }
        #endregion
        
        #region Fields
        private wOK4 mwOK;
        
        private wClients mwClients;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK4 : WinWindow
    {
        
        public wOK4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("GRS Client for Table Import");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("GRS Client for Table Import");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClients : WinList
    {
        
        public wClients(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Clients";
            this.WindowTitles.Add("GRS Client for Table Import");
            #endregion
        }
        
        #region Properties
        public WinListItem UIL052NebraskaMedicalListItem
        {
            get
            {
                if ((this.mUIL052NebraskaMedicalListItem == null))
                {
                    this.mUIL052NebraskaMedicalListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIL052NebraskaMedicalListItem.SearchProperties[WinListItem.PropertyNames.Name] = "L052 - Nebraska Medical";
                    this.mUIL052NebraskaMedicalListItem.WindowTitles.Add("GRS Client for Table Import");
                    #endregion
                }
                return this.mUIL052NebraskaMedicalListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIL052NebraskaMedicalListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSourceTable : WinWindow
    {
        
        public wSourceTable()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Tables for Import", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("L281 - QA US Benchmark 008 Data Source Tables for Import");
            #endregion
        }
        
        #region Properties
        public wSelectAll wSelectAll
        {
            get
            {
                if ((this.mwSelectAll == null))
                {
                    this.mwSelectAll = new wSelectAll(this);
                }
                return this.mwSelectAll;
            }
        }
        
        public wImport wImport
        {
            get
            {
                if ((this.mwImport == null))
                {
                    this.mwImport = new wImport(this);
                }
                return this.mwImport;
            }
        }
        #endregion
        
        #region Fields
        private wSelectAll mwSelectAll;
        
        private wImport mwImport;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectAll : WinWindow
    {
        
        public wSelectAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSelectAll";
            this.WindowTitles.Add("L281 - QA US Benchmark 008 Data Source Tables for Import");
            #endregion
        }
        
        #region Properties
        public WinButton btnSelectAll
        {
            get
            {
                if ((this.mbtnSelectAll == null))
                {
                    this.mbtnSelectAll = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSelectAll.SearchProperties[WinButton.PropertyNames.Name] = "Select All";
                    this.mbtnSelectAll.WindowTitles.Add("L281 - QA US Benchmark 008 Data Source Tables for Import");
                    #endregion
                }
                return this.mbtnSelectAll;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSelectAll;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wImport : WinWindow
    {
        
        public wImport(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnImport";
            this.WindowTitles.Add("L281 - QA US Benchmark 008 Data Source Tables for Import");
            #endregion
        }
        
        #region Properties
        public WinButton btnImport
        {
            get
            {
                if ((this.mbtnImport == null))
                {
                    this.mbtnImport = new WinButton(this);
                    #region Search Criteria
                    this.mbtnImport.SearchProperties[WinButton.PropertyNames.Name] = "Import";
                    this.mbtnImport.WindowTitles.Add("L281 - QA US Benchmark 008 Data Source Tables for Import");
                    #endregion
                }
                return this.mbtnImport;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnImport;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSourceTable_Popup_OK : WinWindow
    {
        
        public wSourceTable_Popup_OK()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSourceTable_Popup_Msg : WinWindow
    {
        
        public wSourceTable_Popup_Msg()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "table(s) have been imported.", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("6 table(s) have been imported.");
            #endregion
        }
        
        #region Properties
        public WinText txtMsg
        {
            get
            {
                if ((this.mtxtMsg == null))
                {
                    this.mtxtMsg = new WinText(this);
                    #region Search Criteria
                    this.mtxtMsg.SearchProperties.Add(new PropertyExpression(WinText.PropertyNames.Name, "table(s) have been imported.", PropertyExpressionOperator.Contains));
                    this.mtxtMsg.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtMsg.WindowTitles.Add("6 table(s) have been imported.");
                    #endregion
                }
                return this.mtxtMsg;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMsg;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectSnapshotDefinition : WinWindow
    {
        
        public wSelectSnapshotDefinition()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Snapshot Definition";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Select Snapshot Definition");
            #endregion
        }
        
        #region Properties
        public wOK5 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK5(this);
                }
                return this.mwOK;
            }
        }
        
        public wSnapshotList wSnapshotList
        {
            get
            {
                if ((this.mwSnapshotList == null))
                {
                    this.mwSnapshotList = new wSnapshotList(this);
                }
                return this.mwSnapshotList;
            }
        }
        
        public wRetainThePreviousUnload wRetainThePreviousUnload
        {
            get
            {
                if ((this.mwRetainThePreviousUnload == null))
                {
                    this.mwRetainThePreviousUnload = new wRetainThePreviousUnload(this);
                }
                return this.mwRetainThePreviousUnload;
            }
        }
        
        public wSpecifyANewSnapshotRetainingPrevious wSpecifyANewSnapshotRetainingPrevious
        {
            get
            {
                if ((this.mwSpecifyANewSnapshotRetainingPrevious == null))
                {
                    this.mwSpecifyANewSnapshotRetainingPrevious = new wSpecifyANewSnapshotRetainingPrevious(this);
                }
                return this.mwSpecifyANewSnapshotRetainingPrevious;
            }
        }
        
        public wSpecifyANewSnapshotRevertingAllFields wSpecifyANewSnapshotRevertingAllFields
        {
            get
            {
                if ((this.mwSpecifyANewSnapshotRevertingAllFields == null))
                {
                    this.mwSpecifyANewSnapshotRevertingAllFields = new wSpecifyANewSnapshotRevertingAllFields(this);
                }
                return this.mwSpecifyANewSnapshotRevertingAllFields;
            }
        }
        
        public wSpecifyANewUnload wSpecifyANewUnload
        {
            get
            {
                if ((this.mwSpecifyANewUnload == null))
                {
                    this.mwSpecifyANewUnload = new wSpecifyANewUnload(this);
                }
                return this.mwSpecifyANewUnload;
            }
        }
        
        public wSelectSnapshotOption_OK wSelectSnapshotOption_OK
        {
            get
            {
                if ((this.mwSelectSnapshotOption_OK == null))
                {
                    this.mwSelectSnapshotOption_OK = new wSelectSnapshotOption_OK(this);
                }
                return this.mwSelectSnapshotOption_OK;
            }
        }
        #endregion
        
        #region Fields
        private wOK5 mwOK;
        
        private wSnapshotList mwSnapshotList;
        
        private wRetainThePreviousUnload mwRetainThePreviousUnload;
        
        private wSpecifyANewSnapshotRetainingPrevious mwSpecifyANewSnapshotRetainingPrevious;
        
        private wSpecifyANewSnapshotRevertingAllFields mwSpecifyANewSnapshotRevertingAllFields;
        
        private wSpecifyANewUnload mwSpecifyANewUnload;
        
        private wSelectSnapshotOption_OK mwSelectSnapshotOption_OK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK5 : WinWindow
    {
        
        public wOK5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOk";
            this.WindowTitles.Add("Select Snapshot Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Select Snapshot Definition");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSnapshotList : WinWindow
    {
        
        public wSnapshotList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listView1";
            this.WindowTitles.Add("Select Snapshot Definition");
            #endregion
        }
        
        #region Properties
        public WinListItem UINewSnapshotListItem
        {
            get
            {
                if ((this.mUINewSnapshotListItem == null))
                {
                    this.mUINewSnapshotListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUINewSnapshotListItem.SearchProperties[WinListItem.PropertyNames.Name] = "{NewSnapshot}";
                    this.mUINewSnapshotListItem.WindowTitles.Add("Select Snapshot Definition");
                    #endregion
                }
                return this.mUINewSnapshotListItem;
            }
        }
        
        public WinList listSnapshot
        {
            get
            {
                if ((this.mlistSnapshot == null))
                {
                    this.mlistSnapshot = new WinList(this);
                    #region Search Criteria
                    this.mlistSnapshot.WindowTitles.Add("Select Snapshot Definition");
                    #endregion
                }
                return this.mlistSnapshot;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUINewSnapshotListItem;
        
        private WinList mlistSnapshot;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetainThePreviousUnload : WinWindow
    {
        
        public wRetainThePreviousUnload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radKeepAll";
            this.WindowTitles.Add("Select Snapshot Definition");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdRetainThePreviousUnload
        {
            get
            {
                if ((this.mrdRetainThePreviousUnload == null))
                {
                    this.mrdRetainThePreviousUnload = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdRetainThePreviousUnload.SearchProperties[WinRadioButton.PropertyNames.Name] = "Retain the previous Unload event and any defined field mappings based on it";
                    this.mrdRetainThePreviousUnload.WindowTitles.Add("Select Snapshot Definition");
                    #endregion
                }
                return this.mrdRetainThePreviousUnload;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdRetainThePreviousUnload;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSpecifyANewSnapshotRetainingPrevious : WinWindow
    {
        
        public wSpecifyANewSnapshotRetainingPrevious(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radKeepMapping";
            this.WindowTitles.Add("Select Snapshot Definition");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdSpecifyANewSnapshotRetainingPrevious
        {
            get
            {
                if ((this.mrdSpecifyANewSnapshotRetainingPrevious == null))
                {
                    this.mrdSpecifyANewSnapshotRetainingPrevious = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdSpecifyANewSnapshotRetainingPrevious.SearchProperties[WinRadioButton.PropertyNames.Name] = "Specify a new Snapshot Definition, while retaining any previously defined field m" +
                        "appings but discarding the actual field values based on the former data";
                    this.mrdSpecifyANewSnapshotRetainingPrevious.WindowTitles.Add("Select Snapshot Definition");
                    #endregion
                }
                return this.mrdSpecifyANewSnapshotRetainingPrevious;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdSpecifyANewSnapshotRetainingPrevious;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSpecifyANewSnapshotRevertingAllFields : WinWindow
    {
        
        public wSpecifyANewSnapshotRevertingAllFields(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radDiscardAll";
            this.WindowTitles.Add("Select Snapshot Definition");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdSpecifyANewSnapshotRevertingAllFields
        {
            get
            {
                if ((this.mrdSpecifyANewSnapshotRevertingAllFields == null))
                {
                    this.mrdSpecifyANewSnapshotRevertingAllFields = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdSpecifyANewSnapshotRevertingAllFields.SearchProperties[WinRadioButton.PropertyNames.Name] = "Specify a new Snapshot Definition while reverting all field mappings to their def" +
                        "aults and discarding the actual field values based on the former data.";
                    this.mrdSpecifyANewSnapshotRevertingAllFields.WindowTitles.Add("Select Snapshot Definition");
                    #endregion
                }
                return this.mrdSpecifyANewSnapshotRevertingAllFields;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdSpecifyANewSnapshotRevertingAllFields;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSpecifyANewUnload : WinWindow
    {
        
        public wSpecifyANewUnload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radAppend";
            this.WindowTitles.Add("Select Snapshot Definition");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdSpecifyANewUnload
        {
            get
            {
                if ((this.mrdSpecifyANewUnload == null))
                {
                    this.mrdSpecifyANewUnload = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdSpecifyANewUnload.SearchProperties[WinRadioButton.PropertyNames.Name] = "Specify a new Unload event to append to the existing data using the existing mapp" +
                        "ings";
                    this.mrdSpecifyANewUnload.WindowTitles.Add("Select Snapshot Definition");
                    #endregion
                }
                return this.mrdSpecifyANewUnload;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdSpecifyANewUnload;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectSnapshotOption_OK : WinWindow
    {
        
        public wSelectSnapshotOption_OK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Select Snapshot Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnSelectSnapshotOption_OK
        {
            get
            {
                if ((this.mbtnSelectSnapshotOption_OK == null))
                {
                    this.mbtnSelectSnapshotOption_OK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSelectSnapshotOption_OK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnSelectSnapshotOption_OK.WindowTitles.Add("Select Snapshot Definition");
                    #endregion
                }
                return this.mbtnSelectSnapshotOption_OK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSelectSnapshotOption_OK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAssetSnapshot : WinWindow
    {
        
        public wAssetSnapshot()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Asset Snapshot";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Asset Snapshot");
            #endregion
        }
        
        #region Properties
        public wOK6 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK6(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK6 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK6 : WinWindow
    {
        
        public wOK6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Asset Snapshot");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Asset Snapshot");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataImport : WinWindow
    {
        
        public wDataImport()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Import";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Import");
            #endregion
        }
        
        #region Properties
        public wYes wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes(this);
                }
                return this.mwYes;
            }
        }
        
        public wOK7 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK7(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wYes mwYes;
        
        private wOK7 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes : WinWindow
    {
        
        public wYes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Import");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnYes.WindowTitles.Add("Data Import");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK7 : WinWindow
    {
        
        public wOK7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Import");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Data Import");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGRSInformation1 : WinWindow
    {
        
        public wGRSInformation1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GRS Information";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("GRS Information");
            #endregion
        }
        
        #region Properties
        public wOK8 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK8(this);
                }
                return this.mwOK;
            }
        }
        
        public wTotalByDecrement wTotalByDecrement
        {
            get
            {
                if ((this.mwTotalByDecrement == null))
                {
                    this.mwTotalByDecrement = new wTotalByDecrement(this);
                }
                return this.mwTotalByDecrement;
            }
        }
        
        public wAdditionalLiabilityTotals wAdditionalLiabilityTotals
        {
            get
            {
                if ((this.mwAdditionalLiabilityTotals == null))
                {
                    this.mwAdditionalLiabilityTotals = new wAdditionalLiabilityTotals(this);
                }
                return this.mwAdditionalLiabilityTotals;
            }
        }
        
        public wMemberStatisticsTotals wMemberStatisticsTotals
        {
            get
            {
                if ((this.mwMemberStatisticsTotals == null))
                {
                    this.mwMemberStatisticsTotals = new wMemberStatisticsTotals(this);
                }
                return this.mwMemberStatisticsTotals;
            }
        }
        #endregion
        
        #region Fields
        private wOK8 mwOK;
        
        private wTotalByDecrement mwTotalByDecrement;
        
        private wAdditionalLiabilityTotals mwAdditionalLiabilityTotals;
        
        private wMemberStatisticsTotals mwMemberStatisticsTotals;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK8 : WinWindow
    {
        
        public wOK8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSave";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("GRS Information");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("GRS Information");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTotalByDecrement : WinWindow
    {
        
        public wTotalByDecrement(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spTotals";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("GRS Information");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("GRS Information");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdditionalLiabilityTotals : WinWindow
    {
        
        public wAdditionalLiabilityTotals(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spTotals";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("GRS Information");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("GRS Information");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMemberStatisticsTotals : WinWindow
    {
        
        public wMemberStatisticsTotals(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spTotals";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("GRS Information");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("GRS Information");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wImportSnapshot : WinWindow
    {
        
        public wImportSnapshot()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Import Snapshot";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import Snapshot");
            #endregion
        }
        
        #region Properties
        public wKeepFieldMappings wKeepFieldMappings
        {
            get
            {
                if ((this.mwKeepFieldMappings == null))
                {
                    this.mwKeepFieldMappings = new wKeepFieldMappings(this);
                }
                return this.mwKeepFieldMappings;
            }
        }
        
        public wDiscardFieldMappingsRevertDefaults wDiscardFieldMappingsRevertDefaults
        {
            get
            {
                if ((this.mwDiscardFieldMappingsRevertDefaults == null))
                {
                    this.mwDiscardFieldMappingsRevertDefaults = new wDiscardFieldMappingsRevertDefaults(this);
                }
                return this.mwDiscardFieldMappingsRevertDefaults;
            }
        }
        
        public wOK9 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK9(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wKeepFieldMappings mwKeepFieldMappings;
        
        private wDiscardFieldMappingsRevertDefaults mwDiscardFieldMappingsRevertDefaults;
        
        private wOK9 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wKeepFieldMappings : WinWindow
    {
        
        public wKeepFieldMappings(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbKeepMappings";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import Snapshot");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Keep field mappings";
                    this.mrd.WindowTitles.Add("Import Snapshot");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDiscardFieldMappingsRevertDefaults : WinWindow
    {
        
        public wDiscardFieldMappingsRevertDefaults(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbDiscardMappings";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import Snapshot");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Discard field mappings and revert to defaults";
                    this.mrd.WindowTitles.Add("Import Snapshot");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK9 : WinWindow
    {
        
        public wOK9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import Snapshot");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Import Snapshot");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wImportGRSUnload : WinWindow
    {
        
        public wImportGRSUnload()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Import GRS Unload";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import GRS Unload");
            #endregion
        }
        
        #region Properties
        public wKeepFieldMappingsDefinedButDiscardExistingData wKeepFieldMappingsDefinedButDiscardExistingData
        {
            get
            {
                if ((this.mwKeepFieldMappingsDefinedButDiscardExistingData == null))
                {
                    this.mwKeepFieldMappingsDefinedButDiscardExistingData = new wKeepFieldMappingsDefinedButDiscardExistingData(this);
                }
                return this.mwKeepFieldMappingsDefinedButDiscardExistingData;
            }
        }
        
        public wDiscardFieldMappingsAndDiscardExistingData wDiscardFieldMappingsAndDiscardExistingData
        {
            get
            {
                if ((this.mwDiscardFieldMappingsAndDiscardExistingData == null))
                {
                    this.mwDiscardFieldMappingsAndDiscardExistingData = new wDiscardFieldMappingsAndDiscardExistingData(this);
                }
                return this.mwDiscardFieldMappingsAndDiscardExistingData;
            }
        }
        
        public wKeepFieldMappingsAndAppendToExistingData wKeepFieldMappingsAndAppendToExistingData
        {
            get
            {
                if ((this.mwKeepFieldMappingsAndAppendToExistingData == null))
                {
                    this.mwKeepFieldMappingsAndAppendToExistingData = new wKeepFieldMappingsAndAppendToExistingData(this);
                }
                return this.mwKeepFieldMappingsAndAppendToExistingData;
            }
        }
        
        public wOK10 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK10(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel(this);
                }
                return this.mwCancel;
            }
        }
        #endregion
        
        #region Fields
        private wKeepFieldMappingsDefinedButDiscardExistingData mwKeepFieldMappingsDefinedButDiscardExistingData;
        
        private wDiscardFieldMappingsAndDiscardExistingData mwDiscardFieldMappingsAndDiscardExistingData;
        
        private wKeepFieldMappingsAndAppendToExistingData mwKeepFieldMappingsAndAppendToExistingData;
        
        private wOK10 mwOK;
        
        private wCancel mwCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wKeepFieldMappingsDefinedButDiscardExistingData : WinWindow
    {
        
        public wKeepFieldMappingsDefinedButDiscardExistingData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbKeepMappings";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import GRS Unload");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Keep field mappings defined but discard existing data";
                    this.mrd.WindowTitles.Add("Import GRS Unload");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDiscardFieldMappingsAndDiscardExistingData : WinWindow
    {
        
        public wDiscardFieldMappingsAndDiscardExistingData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbDiscardMappings";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import GRS Unload");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Discard field mappings and discard existing data";
                    this.mrd.WindowTitles.Add("Import GRS Unload");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wKeepFieldMappingsAndAppendToExistingData : WinWindow
    {
        
        public wKeepFieldMappingsAndAppendToExistingData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbAppendData";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import GRS Unload");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Keep field mappings and append to existing data";
                    this.mrd.WindowTitles.Add("Import GRS Unload");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK10 : WinWindow
    {
        
        public wOK10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import GRS Unload");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Import GRS Unload");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel : WinWindow
    {
        
        public wCancel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Import GRS Unload");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtn.WindowTitles.Add("Import GRS Unload");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wViewDataParameters : WinWindow
    {
        
        public wViewDataParameters()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "View Data Parameters";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("View Data Parameters");
            #endregion
        }
        
        #region Properties
        public btnView btnView
        {
            get
            {
                if ((this.mbtnView == null))
                {
                    this.mbtnView = new btnView(this);
                }
                return this.mbtnView;
            }
        }
        
        public btnCancel btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new btnCancel(this);
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private btnView mbtnView;
        
        private btnCancel mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class btnView : WinWindow
    {
        
        public btnView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("View Data Parameters");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "View";
                    this.mbtn.WindowTitles.Add("View Data Parameters");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class btnCancel : WinWindow
    {
        
        public btnCancel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("View Data Parameters");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtn.WindowTitles.Add("View Data Parameters");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wViewData : WinWindow
    {
        
        public wViewData()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "View Data";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("View Data");
            #endregion
        }
        
        #region Properties
        public btnReturntoParameters btnReturntoParameters
        {
            get
            {
                if ((this.mbtnReturntoParameters == null))
                {
                    this.mbtnReturntoParameters = new btnReturntoParameters(this);
                }
                return this.mbtnReturntoParameters;
            }
        }
        #endregion
        
        #region Fields
        private btnReturntoParameters mbtnReturntoParameters;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class btnReturntoParameters : WinWindow
    {
        
        public btnReturntoParameters(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnReturnToParameters";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("View Data");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Return to Parameters";
                    this.mbtn.WindowTitles.Add("View Data");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wImportDataFile : WinWindow
    {
        
        public wImportDataFile()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Import Data File";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Import Data File");
            #endregion
        }
        
        #region Properties
        public wOK11 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK11(this);
                }
                return this.mwOK;
            }
        }
        
        public wKeepfieldmappings1 wKeepfieldmappings
        {
            get
            {
                if ((this.mwKeepfieldmappings == null))
                {
                    this.mwKeepfieldmappings = new wKeepfieldmappings1(this);
                }
                return this.mwKeepfieldmappings;
            }
        }
        #endregion
        
        #region Fields
        private wOK11 mwOK;
        
        private wKeepfieldmappings1 mwKeepfieldmappings;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK11 : WinWindow
    {
        
        public wOK11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Import Data File");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Import Data File");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wKeepfieldmappings1 : WinWindow
    {
        
        public wKeepfieldmappings1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbKeepMappings";
            this.WindowTitles.Add("Import Data File");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Keep field mappings";
                    this.mrd.WindowTitles.Add("Import Data File");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
}
