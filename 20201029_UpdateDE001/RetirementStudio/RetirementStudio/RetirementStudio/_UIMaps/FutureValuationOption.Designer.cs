// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RetirementStudio._UIMaps.FutureValuationOptionClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class FutureValuationOption
    {
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinComboBox uIFindColumnComboBox = this.wFutureValuationOption.UITestCaseLibraryFindCWindow.UIFindColumnComboBox;
            #endregion

            // Verify that the 'Name' property of 'FindColumn' combo box equals 'FindColumn'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIFindColumnComboBoxName, uIFindColumnComboBox.Name);
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public wFutureValuationOption wFutureValuationOption
        {
            get
            {
                if ((this.mwFutureValuationOption == null))
                {
                    this.mwFutureValuationOption = new wFutureValuationOption();
                }
                return this.mwFutureValuationOption;
            }
        }
        
        public wAnnuityBenefitGroup wAnnuityBenefitGroup
        {
            get
            {
                if ((this.mwAnnuityBenefitGroup == null))
                {
                    this.mwAnnuityBenefitGroup = new wAnnuityBenefitGroup();
                }
                return this.mwAnnuityBenefitGroup;
            }
        }
        
        public wConfirmRecordDeletio wConfirmRecordDeletio
        {
            get
            {
                if ((this.mwConfirmRecordDeletio == null))
                {
                    this.mwConfirmRecordDeletio = new wConfirmRecordDeletio();
                }
                return this.mwConfirmRecordDeletio;
            }
        }
        
        public wCommmonWindow wCommmonWindow
        {
            get
            {
                if ((this.mwCommmonWindow == null))
                {
                    this.mwCommmonWindow = new wCommmonWindow();
                }
                return this.mwCommmonWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private wFutureValuationOption mwFutureValuationOption;
        
        private wAnnuityBenefitGroup mwAnnuityBenefitGroup;
        
        private wConfirmRecordDeletio mwConfirmRecordDeletio;
        
        private wCommmonWindow mwCommmonWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'FindColumn' combo box equals 'FindColumn'
        /// </summary>
        public string UIFindColumnComboBoxName = "FindColumn";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFutureValuationOption : WinWindow
    {
        
        public wFutureValuationOption()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Future Valuation Options";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public wTab wTab
        {
            get
            {
                if ((this.mwTab == null))
                {
                    this.mwTab = new wTab(this);
                }
                return this.mwTab;
            }
        }
        
        public wPopulationSizeGrid wPopulationSizeGrid
        {
            get
            {
                if ((this.mwPopulationSizeGrid == null))
                {
                    this.mwPopulationSizeGrid = new wPopulationSizeGrid(this);
                }
                return this.mwPopulationSizeGrid;
            }
        }
        
        public wPopulationSizeEdit wPopulationSizeEdit
        {
            get
            {
                if ((this.mwPopulationSizeEdit == null))
                {
                    this.mwPopulationSizeEdit = new wPopulationSizeEdit(this);
                }
                return this.mwPopulationSizeEdit;
            }
        }
        
        public wTestCaseLibrary wTestCaseLibrary
        {
            get
            {
                if ((this.mwTestCaseLibrary == null))
                {
                    this.mwTestCaseLibrary = new wTestCaseLibrary(this);
                }
                return this.mwTestCaseLibrary;
            }
        }
        
        public wRestoredefault wRestoredefault
        {
            get
            {
                if ((this.mwRestoredefault == null))
                {
                    this.mwRestoredefault = new wRestoredefault(this);
                }
                return this.mwRestoredefault;
            }
        }
        
        public wApply wApply
        {
            get
            {
                if ((this.mwApply == null))
                {
                    this.mwApply = new wApply(this);
                }
                return this.mwApply;
            }
        }
        
        public wSelectionCriteria wSelectionCriteria
        {
            get
            {
                if ((this.mwSelectionCriteria == null))
                {
                    this.mwSelectionCriteria = new wSelectionCriteria(this);
                }
                return this.mwSelectionCriteria;
            }
        }
        
        public wSelectionResults wSelectionResults
        {
            get
            {
                if ((this.mwSelectionResults == null))
                {
                    this.mwSelectionResults = new wSelectionResults(this);
                }
                return this.mwSelectionResults;
            }
        }
        
        public wOK wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK(this);
                }
                return this.mwOK;
            }
        }
        
        public wAddSelectedToLibrary wAddSelectedToLibrary
        {
            get
            {
                if ((this.mwAddSelectedToLibrary == null))
                {
                    this.mwAddSelectedToLibrary = new wAddSelectedToLibrary(this);
                }
                return this.mwAddSelectedToLibrary;
            }
        }
        
        public wByDecrement wByDecrement
        {
            get
            {
                if ((this.mwByDecrement == null))
                {
                    this.mwByDecrement = new wByDecrement(this);
                }
                return this.mwByDecrement;
            }
        }
        
        public wAllBenefitDefinition wAllBenefitDefinition
        {
            get
            {
                if ((this.mwAllBenefitDefinition == null))
                {
                    this.mwAllBenefitDefinition = new wAllBenefitDefinition(this);
                }
                return this.mwAllBenefitDefinition;
            }
        }
        
        public wCustomGroupingByBenefit wCustomGroupingByBenefit
        {
            get
            {
                if ((this.mwCustomGroupingByBenefit == null))
                {
                    this.mwCustomGroupingByBenefit = new wCustomGroupingByBenefit(this);
                }
                return this.mwCustomGroupingByBenefit;
            }
        }
        
        public wEveryYearForTheFirst wEveryYearForTheFirst
        {
            get
            {
                if ((this.mwEveryYearForTheFirst == null))
                {
                    this.mwEveryYearForTheFirst = new wEveryYearForTheFirst(this);
                }
                return this.mwEveryYearForTheFirst;
            }
        }
        
        public wAndEvery wAndEvery
        {
            get
            {
                if ((this.mwAndEvery == null))
                {
                    this.mwAndEvery = new wAndEvery(this);
                }
                return this.mwAndEvery;
            }
        }
        
        public wUpToIncluding wUpToIncluding
        {
            get
            {
                if ((this.mwUpToIncluding == null))
                {
                    this.mwUpToIncluding = new wUpToIncluding(this);
                }
                return this.mwUpToIncluding;
            }
        }
        
        public wProjectYears wProjectYears
        {
            get
            {
                if ((this.mwProjectYears == null))
                {
                    this.mwProjectYears = new wProjectYears(this);
                }
                return this.mwProjectYears;
            }
        }
        
        public wUsingRates_txt wUsingRates_txt
        {
            get
            {
                if ((this.mwUsingRates_txt == null))
                {
                    this.mwUsingRates_txt = new wUsingRates_txt(this);
                }
                return this.mwUsingRates_txt;
            }
        }
        
        public wUsingRates_P wUsingRates_P
        {
            get
            {
                if ((this.mwUsingRates_P == null))
                {
                    this.mwUsingRates_P = new wUsingRates_P(this);
                }
                return this.mwUsingRates_P;
            }
        }
        
        public wUsingRates_T wUsingRates_T
        {
            get
            {
                if ((this.mwUsingRates_T == null))
                {
                    this.mwUsingRates_T = new wUsingRates_T(this);
                }
                return this.mwUsingRates_T;
            }
        }
        
        public wUsingRates_cbo wUsingRates_cbo
        {
            get
            {
                if ((this.mwUsingRates_cbo == null))
                {
                    this.mwUsingRates_cbo = new wUsingRates_cbo(this);
                }
                return this.mwUsingRates_cbo;
            }
        }
        
        public wAddRow wAddRow
        {
            get
            {
                if ((this.mwAddRow == null))
                {
                    this.mwAddRow = new wAddRow(this);
                }
                return this.mwAddRow;
            }
        }
        
        public wGroupByStatusCodes wGroupByStatusCodes
        {
            get
            {
                if ((this.mwGroupByStatusCodes == null))
                {
                    this.mwGroupByStatusCodes = new wGroupByStatusCodes(this);
                }
                return this.mwGroupByStatusCodes;
            }
        }
        
        public wCustomGroupingByBreakField wCustomGroupingByBreakField
        {
            get
            {
                if ((this.mwCustomGroupingByBreakField == null))
                {
                    this.mwCustomGroupingByBreakField = new wCustomGroupingByBreakField(this);
                }
                return this.mwCustomGroupingByBreakField;
            }
        }
        
        public wCustomGroupingBySelectionCriteria wCustomGroupingBySelectionCriteria
        {
            get
            {
                if ((this.mwCustomGroupingBySelectionCriteria == null))
                {
                    this.mwCustomGroupingBySelectionCriteria = new wCustomGroupingBySelectionCriteria(this);
                }
                return this.mwCustomGroupingBySelectionCriteria;
            }
        }
        
        public wGridCustomGroupingBySelectionCriteria wGridCustomGroupingBySelectionCriteria
        {
            get
            {
                if ((this.mwGridCustomGroupingBySelectionCriteria == null))
                {
                    this.mwGridCustomGroupingBySelectionCriteria = new wGridCustomGroupingBySelectionCriteria(this);
                }
                return this.mwGridCustomGroupingBySelectionCriteria;
            }
        }
        
        public wRemove wRemove
        {
            get
            {
                if ((this.mwRemove == null))
                {
                    this.mwRemove = new wRemove(this);
                }
                return this.mwRemove;
            }
        }
        
        public wValidate wValidate
        {
            get
            {
                if ((this.mwValidate == null))
                {
                    this.mwValidate = new wValidate(this);
                }
                return this.mwValidate;
            }
        }
        
        public wCboCustomGroupingByBreakField wCboCustomGroupingByBreakField
        {
            get
            {
                if ((this.mwCboCustomGroupingByBreakField == null))
                {
                    this.mwCboCustomGroupingByBreakField = new wCboCustomGroupingByBreakField(this);
                }
                return this.mwCboCustomGroupingByBreakField;
            }
        }
        
        public wMoveUp wMoveUp
        {
            get
            {
                if ((this.mwMoveUp == null))
                {
                    this.mwMoveUp = new wMoveUp(this);
                }
                return this.mwMoveUp;
            }
        }
        
        public wMoveDown wMoveDown
        {
            get
            {
                if ((this.mwMoveDown == null))
                {
                    this.mwMoveDown = new wMoveDown(this);
                }
                return this.mwMoveDown;
            }
        }
        
        public wEditSelectionCriteria wEditSelectionCriteria
        {
            get
            {
                if ((this.mwEditSelectionCriteria == null))
                {
                    this.mwEditSelectionCriteria = new wEditSelectionCriteria(this);
                }
                return this.mwEditSelectionCriteria;
            }
        }
        
        public wModelPopulationSizePerParticipantGroup wModelPopulationSizePerParticipantGroup
        {
            get
            {
                if ((this.mwModelPopulationSizePerParticipantGroup == null))
                {
                    this.mwModelPopulationSizePerParticipantGroup = new wModelPopulationSizePerParticipantGroup(this);
                }
                return this.mwModelPopulationSizePerParticipantGroup;
            }
        }
        
        public wRemoveAllfromLibrary wRemoveAllfromLibrary
        {
            get
            {
                if ((this.mwRemoveAllfromLibrary == null))
                {
                    this.mwRemoveAllfromLibrary = new wRemoveAllfromLibrary(this);
                }
                return this.mwRemoveAllfromLibrary;
            }
        }
        
        public wRemoveSelectedfromLi wRemoveSelectedfromLi
        {
            get
            {
                if ((this.mwRemoveSelectedfromLi == null))
                {
                    this.mwRemoveSelectedfromLi = new wRemoveSelectedfromLi(this);
                }
                return this.mwRemoveSelectedfromLi;
            }
        }
        
        public wFundingUpdateDate_UK wFundingUpdateDate_UK
        {
            get
            {
                if ((this.mwFundingUpdateDate_UK == null))
                {
                    this.mwFundingUpdateDate_UK = new wFundingUpdateDate_UK(this);
                }
                return this.mwFundingUpdateDate_UK;
            }
        }
        
        public wNudNumberOfRuns wNudNumberOfRuns
        {
            get
            {
                if ((this.mwNudNumberOfRuns == null))
                {
                    this.mwNudNumberOfRuns = new wNudNumberOfRuns(this);
                }
                return this.mwNudNumberOfRuns;
            }
        }
        
        public wNudRandomNumDismiss wNudRandomNumDismiss
        {
            get
            {
                if ((this.mwNudRandomNumDismiss == null))
                {
                    this.mwNudRandomNumDismiss = new wNudRandomNumDismiss(this);
                }
                return this.mwNudRandomNumDismiss;
            }
        }
        
        public wAlignRatesWithCurrent wAlignRatesWithCurrent
        {
            get
            {
                if ((this.mwAlignRatesWithCurrent == null))
                {
                    this.mwAlignRatesWithCurrent = new wAlignRatesWithCurrent(this);
                }
                return this.mwAlignRatesWithCurrent;
            }
        }
        
        public wAlignRatesWithEach wAlignRatesWithEach
        {
            get
            {
                if ((this.mwAlignRatesWithEach == null))
                {
                    this.mwAlignRatesWithEach = new wAlignRatesWithEach(this);
                }
                return this.mwAlignRatesWithEach;
            }
        }
        
        public UITestCaseLibraryFindCWindow UITestCaseLibraryFindCWindow
        {
            get
            {
                if ((this.mUITestCaseLibraryFindCWindow == null))
                {
                    this.mUITestCaseLibraryFindCWindow = new UITestCaseLibraryFindCWindow(this);
                }
                return this.mUITestCaseLibraryFindCWindow;
            }
        }
        
        public wEstimatedPPAMortality wEstimatedPPAMortality
        {
            get
            {
                if ((this.mwEstimatedPPAMortality == null))
                {
                    this.mwEstimatedPPAMortality = new wEstimatedPPAMortality(this);
                }
                return this.mwEstimatedPPAMortality;
            }
        }
        
        public UISprPopulationSizeGriWindow UISprPopulationSizeGriWindow
        {
            get
            {
                if ((this.mUISprPopulationSizeGriWindow == null))
                {
                    this.mUISprPopulationSizeGriWindow = new UISprPopulationSizeGriWindow(this);
                }
                return this.mUISprPopulationSizeGriWindow;
            }
        }
        
        public UIGrowthrateWindow UIGrowthrateWindow
        {
            get
            {
                if ((this.mUIGrowthrateWindow == null))
                {
                    this.mUIGrowthrateWindow = new UIGrowthrateWindow(this);
                }
                return this.mUIGrowthrateWindow;
            }
        }
        #endregion
        
        #region Fields
        private wTab mwTab;
        
        private wPopulationSizeGrid mwPopulationSizeGrid;
        
        private wPopulationSizeEdit mwPopulationSizeEdit;
        
        private wTestCaseLibrary mwTestCaseLibrary;
        
        private wRestoredefault mwRestoredefault;
        
        private wApply mwApply;
        
        private wSelectionCriteria mwSelectionCriteria;
        
        private wSelectionResults mwSelectionResults;
        
        private wOK mwOK;
        
        private wAddSelectedToLibrary mwAddSelectedToLibrary;
        
        private wByDecrement mwByDecrement;
        
        private wAllBenefitDefinition mwAllBenefitDefinition;
        
        private wCustomGroupingByBenefit mwCustomGroupingByBenefit;
        
        private wEveryYearForTheFirst mwEveryYearForTheFirst;
        
        private wAndEvery mwAndEvery;
        
        private wUpToIncluding mwUpToIncluding;
        
        private wProjectYears mwProjectYears;
        
        private wUsingRates_txt mwUsingRates_txt;
        
        private wUsingRates_P mwUsingRates_P;
        
        private wUsingRates_T mwUsingRates_T;
        
        private wUsingRates_cbo mwUsingRates_cbo;
        
        private wAddRow mwAddRow;
        
        private wGroupByStatusCodes mwGroupByStatusCodes;
        
        private wCustomGroupingByBreakField mwCustomGroupingByBreakField;
        
        private wCustomGroupingBySelectionCriteria mwCustomGroupingBySelectionCriteria;
        
        private wGridCustomGroupingBySelectionCriteria mwGridCustomGroupingBySelectionCriteria;
        
        private wRemove mwRemove;
        
        private wValidate mwValidate;
        
        private wCboCustomGroupingByBreakField mwCboCustomGroupingByBreakField;
        
        private wMoveUp mwMoveUp;
        
        private wMoveDown mwMoveDown;
        
        private wEditSelectionCriteria mwEditSelectionCriteria;
        
        private wModelPopulationSizePerParticipantGroup mwModelPopulationSizePerParticipantGroup;
        
        private wRemoveAllfromLibrary mwRemoveAllfromLibrary;
        
        private wRemoveSelectedfromLi mwRemoveSelectedfromLi;
        
        private wFundingUpdateDate_UK mwFundingUpdateDate_UK;
        
        private wNudNumberOfRuns mwNudNumberOfRuns;
        
        private wNudRandomNumDismiss mwNudRandomNumDismiss;
        
        private wAlignRatesWithCurrent mwAlignRatesWithCurrent;
        
        private wAlignRatesWithEach mwAlignRatesWithEach;
        
        private UITestCaseLibraryFindCWindow mUITestCaseLibraryFindCWindow;
        
        private wEstimatedPPAMortality mwEstimatedPPAMortality;
        
        private UISprPopulationSizeGriWindow mUISprPopulationSizeGriWindow;
        
        private UIGrowthrateWindow mUIGrowthrateWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTab : WinWindow
    {
        
        public wTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabWorkspaceFutureValuationOptions";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinTabPage tab
        {
            get
            {
                if ((this.mtab == null))
                {
                    this.mtab = new WinTabPage(this);
                    #region Search Criteria
                    this.mtab.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mtab;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mtab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPopulationSizeGrid : WinWindow
    {
        
        public wPopulationSizeGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprPopulationSizeGrid";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPopulationSizeEdit : WinWindow
    {
        
        public wPopulationSizeEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTestCaseLibrary : WinWindow
    {
        
        public wTestCaseLibrary(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpSpreadLibrary";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRestoredefault : WinWindow
    {
        
        public wRestoredefault(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnClear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Restore default";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApply : WinWindow
    {
        
        public wApply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRunQuery";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Apply";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectionCriteria : WinWindow
    {
        
        public wSelectionCriteria(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_acTextBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectionResults : WinWindow
    {
        
        public wSelectionResults(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpSpreadImport";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "FindColumn";
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK : WinWindow
    {
        
        public wOK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddSelectedToLibrary : WinWindow
    {
        
        public wAddSelectedToLibrary(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddToLibrary";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Add Selected To Library";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wByDecrement : WinWindow
    {
        
        public wByDecrement(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radByDecrement";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "By decrement";
                    this.mrd.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAllBenefitDefinition : WinWindow
    {
        
        public wAllBenefitDefinition(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radAllBenefitDefinitionsInOneGroup";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "All benefit definitions in one group";
                    this.mrd.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomGroupingByBenefit : WinWindow
    {
        
        public wCustomGroupingByBenefit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radCustomGroupingOfBenefitDefinitions";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Custom grouping by benefit definitions";
                    this.mrd.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEveryYearForTheFirst : WinWindow
    {
        
        public wEveryYearForTheFirst(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudInitialInterval";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public Edit Edit
        {
            get
            {
                if ((this.mEdit == null))
                {
                    this.mEdit = new Edit(this);
                }
                return this.mEdit;
            }
        }
        #endregion
        
        #region Fields
        private Edit mEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Edit : WinEdit
    {
        
        public Edit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudInitialIntervalEdit1
        {
            get
            {
                if ((this.mUINudInitialIntervalEdit1 == null))
                {
                    this.mUINudInitialIntervalEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudInitialIntervalEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINudInitialIntervalEdit1.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mUINudInitialIntervalEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudInitialIntervalEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAndEvery : WinWindow
    {
        
        public wAndEvery(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbInterval";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "and every";
                    this.mcbo.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUpToIncluding : WinWindow
    {
        
        public wUpToIncluding(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbEndyear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "up to including projection year";
                    this.mcbo.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProjectYears : WinWindow
    {
        
        public wProjectYears(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtProjectionYears";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit Edit
        {
            get
            {
                if ((this.mEdit == null))
                {
                    this.mEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Projection years:";
                    this.mEdit.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUsingRates_txt : WinWindow
    {
        
        public wUsingRates_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_numEditRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public Edit1 Edit
        {
            get
            {
                if ((this.mEdit == null))
                {
                    this.mEdit = new Edit1(this);
                }
                return this.mEdit;
            }
        }
        #endregion
        
        #region Fields
        private Edit1 mEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Edit1 : WinEdit
    {
        
        public Edit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_numEditRateEdit1
        {
            get
            {
                if ((this.mUI_numEditRateEdit1 == null))
                {
                    this.mUI_numEditRateEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUI_numEditRateEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUI_numEditRateEdit1.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mUI_numEditRateEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_numEditRateEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUsingRates_P : WinWindow
    {
        
        public wUsingRates_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnRate";
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "%";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUsingRates_T : WinWindow
    {
        
        public wUsingRates_T(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnTable";
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "T";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUsingRates_cbo : WinWindow
    {
        
        public wUsingRates_cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cboTableName";
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddRow : WinWindow
    {
        
        public wAddRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddRow";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Add row";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGroupByStatusCodes : WinWindow
    {
        
        public wGroupByStatusCodes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radGroupByStatusCodes";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Group by status codes";
                    this.mrd.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomGroupingByBreakField : WinWindow
    {
        
        public wCustomGroupingByBreakField(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radCustomGroupingByBreakField";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Custom grouping by break field";
                    this.mrd.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomGroupingBySelectionCriteria : WinWindow
    {
        
        public wCustomGroupingBySelectionCriteria(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radCustomGroupingBySelectionCriteria";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Custom grouping by selection criteria";
                    this.mrd.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGridCustomGroupingBySelectionCriteria : WinWindow
    {
        
        public wGridCustomGroupingBySelectionCriteria(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprSelectionCriteria";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRemove : WinWindow
    {
        
        public wRemove(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRemove";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Remove";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValidate : WinWindow
    {
        
        public wValidate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnValidate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Validate";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCboCustomGroupingByBreakField : WinWindow
    {
        
        public wCboCustomGroupingByBreakField(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboBreaks";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMoveUp : WinWindow
    {
        
        public wMoveUp(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnMoveUp";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Move up";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMoveDown : WinWindow
    {
        
        public wMoveDown(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnMoveDown";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Move down";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEditSelectionCriteria : WinWindow
    {
        
        public wEditSelectionCriteria(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wModelPopulationSizePerParticipantGroup : WinWindow
    {
        
        public wModelPopulationSizePerParticipantGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkModelSize";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chx
        {
            get
            {
                if ((this.mchx == null))
                {
                    this.mchx = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchx.SearchProperties[WinCheckBox.PropertyNames.Name] = "Model population size per participant group ";
                    this.mchx.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mchx;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchx;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRemoveAllfromLibrary : WinWindow
    {
        
        public wRemoveAllfromLibrary(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRemoveAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Remove All from Library";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRemoveSelectedfromLi : WinWindow
    {
        
        public wRemoveSelectedfromLi(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRemoveRecords";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Remove Selected from Library";
                    this.mbtn.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFundingUpdateDate_UK : WinWindow
    {
        
        public wFundingUpdateDate_UK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dteFundingUpdateDate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public cbo cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new cbo(this);
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private cbo mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cbo : WinComboBox
    {
        
        public cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit Edit
        {
            get
            {
                if ((this.mEdit == null))
                {
                    this.mEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mEdit.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNudNumberOfRuns : WinWindow
    {
        
        public wNudNumberOfRuns(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudNumberOfRuns";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public Edit2 Edit
        {
            get
            {
                if ((this.mEdit == null))
                {
                    this.mEdit = new Edit2(this);
                }
                return this.mEdit;
            }
        }
        #endregion
        
        #region Fields
        private Edit2 mEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Edit2 : WinEdit
    {
        
        public Edit2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNudRandomNumDismiss : WinWindow
    {
        
        public wNudRandomNumDismiss(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudRandomNumDismissed";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public Edit3 Edit
        {
            get
            {
                if ((this.mEdit == null))
                {
                    this.mEdit = new Edit3(this);
                }
                return this.mEdit;
            }
        }
        #endregion
        
        #region Fields
        private Edit3 mEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Edit3 : WinEdit
    {
        
        public Edit3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAlignRatesWithCurrent : WinWindow
    {
        
        public wAlignRatesWithCurrent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtAlignWithCurrentValuationDate";
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Align rates with current valuation date in calculations as of future valuation da" +
                        "tes";
                    this.mrd.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAlignRatesWithEach : WinWindow
    {
        
        public wAlignRatesWithEach(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtAlignWithEachFutureValuationDate";
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Align rates with each future valuation date";
                    this.mrd.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITestCaseLibraryFindCWindow : WinWindow
    {
        
        public UITestCaseLibraryFindCWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "testCaseLibraryFindColCB";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public UIFindColumnComboBox UIFindColumnComboBox
        {
            get
            {
                if ((this.mUIFindColumnComboBox == null))
                {
                    this.mUIFindColumnComboBox = new UIFindColumnComboBox(this);
                }
                return this.mUIFindColumnComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UIFindColumnComboBox mUIFindColumnComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFindColumnComboBox : WinComboBox
    {
        
        public UIFindColumnComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "FindColumn";
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wEstimatedPPAMortality : WinWindow
    {
        
        public wEstimatedPPAMortality(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbPPA";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Estimated PPA mortality tables to use during projection period";
                    this.mcbo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcbo.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISprPopulationSizeGriWindow : WinWindow
    {
        
        public UISprPopulationSizeGriWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprPopulationSizeGrid";
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinClient UISprPopulationSizeGriClient
        {
            get
            {
                if ((this.mUISprPopulationSizeGriClient == null))
                {
                    this.mUISprPopulationSizeGriClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISprPopulationSizeGriClient.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mUISprPopulationSizeGriClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISprPopulationSizeGriClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIGrowthrateWindow : WinWindow
    {
        
        public UIGrowthrateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "InputTextBox_Internal";
            this.WindowTitles.Add("Future Valuation Options");
            #endregion
        }
        
        #region Properties
        public WinEdit UIInputTextBox_InternaEdit
        {
            get
            {
                if ((this.mUIInputTextBox_InternaEdit == null))
                {
                    this.mUIInputTextBox_InternaEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInputTextBox_InternaEdit.WindowTitles.Add("Future Valuation Options");
                    #endregion
                }
                return this.mUIInputTextBox_InternaEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIInputTextBox_InternaEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAnnuityBenefitGroup : WinWindow
    {
        
        public wAnnuityBenefitGroup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Annuity Benefit Group";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public wGroupName wGroupName
        {
            get
            {
                if ((this.mwGroupName == null))
                {
                    this.mwGroupName = new wGroupName(this);
                }
                return this.mwGroupName;
            }
        }
        
        public wIncludingBenefitDefinitions wIncludingBenefitDefinitions
        {
            get
            {
                if ((this.mwIncludingBenefitDefinitions == null))
                {
                    this.mwIncludingBenefitDefinitions = new wIncludingBenefitDefinitions(this);
                }
                return this.mwIncludingBenefitDefinitions;
            }
        }
        
        public wOK1 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK1(this);
                }
                return this.mwOK;
            }
        }
        
        public wDeathLiab wDeathLiab
        {
            get
            {
                if ((this.mwDeathLiab == null))
                {
                    this.mwDeathLiab = new wDeathLiab(this);
                }
                return this.mwDeathLiab;
            }
        }
        
        public wDisabilityLiab wDisabilityLiab
        {
            get
            {
                if ((this.mwDisabilityLiab == null))
                {
                    this.mwDisabilityLiab = new wDisabilityLiab(this);
                }
                return this.mwDisabilityLiab;
            }
        }
        
        public wInactiveLiab wInactiveLiab
        {
            get
            {
                if ((this.mwInactiveLiab == null))
                {
                    this.mwInactiveLiab = new wInactiveLiab(this);
                }
                return this.mwInactiveLiab;
            }
        }
        
        public wRetirementLiab wRetirementLiab
        {
            get
            {
                if ((this.mwRetirementLiab == null))
                {
                    this.mwRetirementLiab = new wRetirementLiab(this);
                }
                return this.mwRetirementLiab;
            }
        }
        
        public wWithDrawalLiab wWithDrawalLiab
        {
            get
            {
                if ((this.mwWithDrawalLiab == null))
                {
                    this.mwWithDrawalLiab = new wWithDrawalLiab(this);
                }
                return this.mwWithDrawalLiab;
            }
        }
        
        public wWithDrawalLiab_US015 wWithDrawalLiab_US015
        {
            get
            {
                if ((this.mwWithDrawalLiab_US015 == null))
                {
                    this.mwWithDrawalLiab_US015 = new wWithDrawalLiab_US015(this);
                }
                return this.mwWithDrawalLiab_US015;
            }
        }
        #endregion
        
        #region Fields
        private wGroupName mwGroupName;
        
        private wIncludingBenefitDefinitions mwIncludingBenefitDefinitions;
        
        private wOK1 mwOK;
        
        private wDeathLiab mwDeathLiab;
        
        private wDisabilityLiab mwDisabilityLiab;
        
        private wInactiveLiab mwInactiveLiab;
        
        private wRetirementLiab mwRetirementLiab;
        
        private wWithDrawalLiab mwWithDrawalLiab;
        
        private wWithDrawalLiab_US015 mwWithDrawalLiab_US015;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGroupName : WinWindow
    {
        
        public wGroupName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtGroupName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public WinEdit Edit
        {
            get
            {
                if ((this.mEdit == null))
                {
                    this.mEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Includes benefit definitions:";
                    this.mEdit.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludingBenefitDefinitions : WinWindow
    {
        
        public wIncludingBenefitDefinitions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lbBenefitDefinitions";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public WinListItem DeathLiab
        {
            get
            {
                if ((this.mDeathLiab == null))
                {
                    this.mDeathLiab = new WinListItem(this);
                    #region Search Criteria
                    this.mDeathLiab.SearchProperties[WinListItem.PropertyNames.Name] = "DeathLiab";
                    this.mDeathLiab.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mDeathLiab.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mDeathLiab;
            }
        }
        
        public WinListItem DisabilityLiab
        {
            get
            {
                if ((this.mDisabilityLiab == null))
                {
                    this.mDisabilityLiab = new WinListItem(this);
                    #region Search Criteria
                    this.mDisabilityLiab.SearchProperties[WinListItem.PropertyNames.Name] = "DisabilityLiab";
                    this.mDisabilityLiab.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mDisabilityLiab;
            }
        }
        
        public WinListItem InactiveLiab
        {
            get
            {
                if ((this.mInactiveLiab == null))
                {
                    this.mInactiveLiab = new WinListItem(this);
                    #region Search Criteria
                    this.mInactiveLiab.SearchProperties[WinListItem.PropertyNames.Name] = "InactiveLiab";
                    this.mInactiveLiab.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mInactiveLiab;
            }
        }
        
        public WinListItem RetirementLiab
        {
            get
            {
                if ((this.mRetirementLiab == null))
                {
                    this.mRetirementLiab = new WinListItem(this);
                    #region Search Criteria
                    this.mRetirementLiab.SearchProperties[WinListItem.PropertyNames.Name] = "RetirementLiab";
                    this.mRetirementLiab.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mRetirementLiab;
            }
        }
        
        public WinListItem WithDrawalLiab
        {
            get
            {
                if ((this.mWithDrawalLiab == null))
                {
                    this.mWithDrawalLiab = new WinListItem(this);
                    #region Search Criteria
                    this.mWithDrawalLiab.SearchProperties[WinListItem.PropertyNames.Name] = "WithDrawalLiab";
                    this.mWithDrawalLiab.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mWithDrawalLiab;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mDeathLiab;
        
        private WinListItem mDisabilityLiab;
        
        private WinListItem mInactiveLiab;
        
        private WinListItem mRetirementLiab;
        
        private WinListItem mWithDrawalLiab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK1 : WinWindow
    {
        
        public wOK1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeathLiab : WinWindow
    {
        
        public wDeathLiab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDisabilityLiab : WinWindow
    {
        
        public wDisabilityLiab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInactiveLiab : WinWindow
    {
        
        public wInactiveLiab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementLiab : WinWindow
    {
        
        public wRetirementLiab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWithDrawalLiab : WinWindow
    {
        
        public wWithDrawalLiab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWithDrawalLiab_US015 : WinWindow
    {
        
        public wWithDrawalLiab_US015(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Annuity Benefit Group");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Annuity Benefit Group");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wConfirmRecordDeletio : WinWindow
    {
        
        public wConfirmRecordDeletio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Record Deletion";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Record Deletion");
            #endregion
        }
        
        #region Properties
        public wYes wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes : WinWindow
    {
        
        public wYes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Confirm Record Deletion");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.WindowTitles.Add("Confirm Record Deletion");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommmonWindow : WinWindow
    {
        
        public wCommmonWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public wListBox wListBox
        {
            get
            {
                if ((this.mwListBox == null))
                {
                    this.mwListBox = new wListBox(this);
                }
                return this.mwListBox;
            }
        }
        #endregion
        
        #region Fields
        private wListBox mwListBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wListBox : WinWindow
    {
        
        public wListBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.LISTBOX", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public wList wList
        {
            get
            {
                if ((this.mwList == null))
                {
                    this.mwList = new wList(this);
                }
                return this.mwList;
            }
        }
        #endregion
        
        #region Fields
        private wList mwList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wList : WinList
    {
        
        public wList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinListItem item
        {
            get
            {
                if ((this.mitem == null))
                {
                    this.mitem = new WinListItem(this);
                    #region Search Criteria
                    this.mitem.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mitem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mitem;
        #endregion
    }
}
