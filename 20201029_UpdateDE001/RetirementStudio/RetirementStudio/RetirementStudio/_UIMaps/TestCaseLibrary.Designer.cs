// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RetirementStudio._UIMaps.TestCaseLibraryClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class TestCaseLibrary
    {
        
        #region Properties
        public wRetirementStudio wRetirementStudio
        {
            get
            {
                if ((this.mwRetirementStudio == null))
                {
                    this.mwRetirementStudio = new wRetirementStudio();
                }
                return this.mwRetirementStudio;
            }
        }
        
        public wTestCaseRunOptions wTestCaseRunOptions
        {
            get
            {
                if ((this.mwTestCaseRunOptions == null))
                {
                    this.mwTestCaseRunOptions = new wTestCaseRunOptions();
                }
                return this.mwTestCaseRunOptions;
            }
        }
        
        public wTestCaseViewer_ wTestCaseViewer_
        {
            get
            {
                if ((this.mwTestCaseViewer_ == null))
                {
                    this.mwTestCaseViewer_ = new wTestCaseViewer_();
                }
                return this.mwTestCaseViewer_;
            }
        }
        
        public wTestCaseViewer wTestCaseViewer
        {
            get
            {
                if ((this.mwTestCaseViewer == null))
                {
                    this.mwTestCaseViewer = new wTestCaseViewer();
                }
                return this.mwTestCaseViewer;
            }
        }
        
        public wConfirmRecordDeletion wConfirmRecordDeletion
        {
            get
            {
                if ((this.mwConfirmRecordDeletion == null))
                {
                    this.mwConfirmRecordDeletion = new wConfirmRecordDeletion();
                }
                return this.mwConfirmRecordDeletion;
            }
        }
        #endregion
        
        #region Fields
        private wRetirementStudio mwRetirementStudio;
        
        private wTestCaseRunOptions mwTestCaseRunOptions;
        
        private wTestCaseViewer_ mwTestCaseViewer_;
        
        private wTestCaseViewer mwTestCaseViewer;
        
        private wConfirmRecordDeletion mwConfirmRecordDeletion;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudio : WinWindow
    {
        
        public wRetirementStudio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wApply wApply
        {
            get
            {
                if ((this.mwApply == null))
                {
                    this.mwApply = new wApply(this);
                }
                return this.mwApply;
            }
        }
        
        public wAddSelectedToLibrary wAddSelectedToLibrary
        {
            get
            {
                if ((this.mwAddSelectedToLibrary == null))
                {
                    this.mwAddSelectedToLibrary = new wAddSelectedToLibrary(this);
                }
                return this.mwAddSelectedToLibrary;
            }
        }
        
        public wFPGrid_Results wFPGrid_Results
        {
            get
            {
                if ((this.mwFPGrid_Results == null))
                {
                    this.mwFPGrid_Results = new wFPGrid_Results(this);
                }
                return this.mwFPGrid_Results;
            }
        }
        
        public wClear wClear
        {
            get
            {
                if ((this.mwClear == null))
                {
                    this.mwClear = new wClear(this);
                }
                return this.mwClear;
            }
        }
        
        public wSearchCriteria wSearchCriteria
        {
            get
            {
                if ((this.mwSearchCriteria == null))
                {
                    this.mwSearchCriteria = new wSearchCriteria(this);
                }
                return this.mwSearchCriteria;
            }
        }
        
        public wFPGrid_TestCaseLibrary wFPGrid_TestCaseLibrary
        {
            get
            {
                if ((this.mwFPGrid_TestCaseLibrary == null))
                {
                    this.mwFPGrid_TestCaseLibrary = new wFPGrid_TestCaseLibrary(this);
                }
                return this.mwFPGrid_TestCaseLibrary;
            }
        }
        
        public wRunSelectedTestLife wRunSelectedTestLife
        {
            get
            {
                if ((this.mwRunSelectedTestLife == null))
                {
                    this.mwRunSelectedTestLife = new wRunSelectedTestLife(this);
                }
                return this.mwRunSelectedTestLife;
            }
        }
        
        public wRemoveSelectedfromLi wRemoveSelectedfromLi
        {
            get
            {
                if ((this.mwRemoveSelectedfromLi == null))
                {
                    this.mwRemoveSelectedfromLi = new wRemoveSelectedfromLi(this);
                }
                return this.mwRemoveSelectedfromLi;
            }
        }
        #endregion
        
        #region Fields
        private wApply mwApply;
        
        private wAddSelectedToLibrary mwAddSelectedToLibrary;
        
        private wFPGrid_Results mwFPGrid_Results;
        
        private wClear mwClear;
        
        private wSearchCriteria mwSearchCriteria;
        
        private wFPGrid_TestCaseLibrary mwFPGrid_TestCaseLibrary;
        
        private wRunSelectedTestLife mwRunSelectedTestLife;
        
        private wRemoveSelectedfromLi mwRemoveSelectedfromLi;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApply : WinWindow
    {
        
        public wApply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRunQuery";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnApply
        {
            get
            {
                if ((this.mbtnApply == null))
                {
                    this.mbtnApply = new WinButton(this);
                    #region Search Criteria
                    this.mbtnApply.SearchProperties[WinButton.PropertyNames.Name] = "Apply";
                    this.mbtnApply.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnApply;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnApply;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddSelectedToLibrary : WinWindow
    {
        
        public wAddSelectedToLibrary(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddToLibrary";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddSelectedToLibrary
        {
            get
            {
                if ((this.mbtnAddSelectedToLibrary == null))
                {
                    this.mbtnAddSelectedToLibrary = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddSelectedToLibrary.SearchProperties[WinButton.PropertyNames.Name] = "Add Selected To Library";
                    this.mbtnAddSelectedToLibrary.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddSelectedToLibrary;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddSelectedToLibrary;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid_Results : WinWindow
    {
        
        public wFPGrid_Results(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpSpreadImport";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "FindColumn";
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClear : WinWindow
    {
        
        public wClear(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnClear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnClear
        {
            get
            {
                if ((this.mbtnClear == null))
                {
                    this.mbtnClear = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClear.SearchProperties[WinButton.PropertyNames.Name] = "Clear";
                    this.mbtnClear.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnClear;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClear;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSearchCriteria : WinWindow
    {
        
        public wSearchCriteria(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_acTextBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtSearchCriteria
        {
            get
            {
                if ((this.mtxtSearchCriteria == null))
                {
                    this.mtxtSearchCriteria = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtSearchCriteria.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtSearchCriteria;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtSearchCriteria;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid_TestCaseLibrary : WinWindow
    {
        
        public wFPGrid_TestCaseLibrary(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpSpreadLibrary";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunSelectedTestLife : WinWindow
    {
        
        public wRunSelectedTestLife(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnViewOutput";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Run Selected Test Life";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRemoveSelectedfromLi : WinWindow
    {
        
        public wRemoveSelectedfromLi(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRemoveRecords";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Remove Selected from Library";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTestCaseRunOptions : WinWindow
    {
        
        public wTestCaseRunOptions()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Test Case Run Options";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Test Case Run Options");
            #endregion
        }
        
        #region Properties
        public wPayoutProjection wPayoutProjection
        {
            get
            {
                if ((this.mwPayoutProjection == null))
                {
                    this.mwPayoutProjection = new wPayoutProjection(this);
                }
                return this.mwPayoutProjection;
            }
        }
        
        public wRunSelected wRunSelected
        {
            get
            {
                if ((this.mwRunSelected == null))
                {
                    this.mwRunSelected = new wRunSelected(this);
                }
                return this.mwRunSelected;
            }
        }
        
        public wLiabilityTypes wLiabilityTypes
        {
            get
            {
                if ((this.mwLiabilityTypes == null))
                {
                    this.mwLiabilityTypes = new wLiabilityTypes(this);
                }
                return this.mwLiabilityTypes;
            }
        }
        #endregion
        
        #region Fields
        private wPayoutProjection mwPayoutProjection;
        
        private wRunSelected mwRunSelected;
        
        private wLiabilityTypes mwLiabilityTypes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayoutProjection : WinWindow
    {
        
        public wPayoutProjection(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPayoutProjection";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Test Case Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Payout Projection";
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRunSelected : WinWindow
    {
        
        public wRunSelected(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRunSelected";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Test Case Run Options");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Run Selected";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLiabilityTypes : WinWindow
    {
        
        public wLiabilityTypes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lstLiabilityTypes";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Test Case Run Options");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAllLiabilityTypes
        {
            get
            {
                if ((this.mchkAllLiabilityTypes == null))
                {
                    this.mchkAllLiabilityTypes = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAllLiabilityTypes.SearchProperties[WinCheckBox.PropertyNames.Name] = "All Liability Types";
                    this.mchkAllLiabilityTypes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAllLiabilityTypes.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mchkAllLiabilityTypes;
            }
        }
        
        public WinCheckBox chkPPA_NAR_Min
        {
            get
            {
                if ((this.mchkPPA_NAR_Min == null))
                {
                    this.mchkPPA_NAR_Min = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPA_NAR_Min.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPA Not-At-Risk Liability for Minimum";
                    this.mchkPPA_NAR_Min.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPA_NAR_Min.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mchkPPA_NAR_Min;
            }
        }
        
        public WinCheckBox chkPPA_NAR_PVVB
        {
            get
            {
                if ((this.mchkPPA_NAR_PVVB == null))
                {
                    this.mchkPPA_NAR_PVVB = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPA_NAR_PVVB.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPA Not-At-Risk Present Value of Vested Benefits";
                    this.mchkPPA_NAR_PVVB.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPA_NAR_PVVB.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mchkPPA_NAR_PVVB;
            }
        }
        
        public WinCheckBox chkPPA_NAR_Max
        {
            get
            {
                if ((this.mchkPPA_NAR_Max == null))
                {
                    this.mchkPPA_NAR_Max = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPPA_NAR_Max.SearchProperties[WinCheckBox.PropertyNames.Name] = "PPA Not-At-Risk Liability for Maximum";
                    this.mchkPPA_NAR_Max.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPPA_NAR_Max.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mchkPPA_NAR_Max;
            }
        }
        
        public WinCheckBox chkPBGC_NAR_PVVB
        {
            get
            {
                if ((this.mchkPBGC_NAR_PVVB == null))
                {
                    this.mchkPBGC_NAR_PVVB = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPBGC_NAR_PVVB.SearchProperties[WinCheckBox.PropertyNames.Name] = "PBGC Not-At-Risk Present Value of Vested Benefits";
                    this.mchkPBGC_NAR_PVVB.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkPBGC_NAR_PVVB.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mchkPBGC_NAR_PVVB;
            }
        }
        
        public WinCheckBox chkFAS35_PVAB
        {
            get
            {
                if ((this.mchkFAS35_PVAB == null))
                {
                    this.mchkFAS35_PVAB = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkFAS35_PVAB.SearchProperties[WinCheckBox.PropertyNames.Name] = "FAS 35 Present Value of Accumulated Benefits";
                    this.mchkFAS35_PVAB.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkFAS35_PVAB.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mchkFAS35_PVAB;
            }
        }
        
        public WinCheckBox chkFAS35_PVVB
        {
            get
            {
                if ((this.mchkFAS35_PVVB == null))
                {
                    this.mchkFAS35_PVVB = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkFAS35_PVVB.SearchProperties[WinCheckBox.PropertyNames.Name] = "FAS 35 Present Value of Vested Benefits";
                    this.mchkFAS35_PVVB.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkFAS35_PVVB.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mchkFAS35_PVVB;
            }
        }
        
        public WinCheckBox chkFunding
        {
            get
            {
                if ((this.mchkFunding == null))
                {
                    this.mchkFunding = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkFunding.SearchProperties[WinCheckBox.PropertyNames.Name] = "Funding";
                    this.mchkFunding.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkFunding.WindowTitles.Add("Test Case Run Options");
                    #endregion
                }
                return this.mchkFunding;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAllLiabilityTypes;
        
        private WinCheckBox mchkPPA_NAR_Min;
        
        private WinCheckBox mchkPPA_NAR_PVVB;
        
        private WinCheckBox mchkPPA_NAR_Max;
        
        private WinCheckBox mchkPBGC_NAR_PVVB;
        
        private WinCheckBox mchkFAS35_PVAB;
        
        private WinCheckBox mchkFAS35_PVVB;
        
        private WinCheckBox mchkFunding;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTestCaseViewer_ : WinWindow
    {
        
        public wTestCaseViewer_()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Test Case Viewer", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("017822827 [ID] : Baseline [valuation set] : July 2006 Valuation [service] : QA US" +
                    " Benchmark 010 Create New Plan [plan] : QA US Benchmark 010 Create New_201409122" +
                    " [client] : Test Case Viewer");
            #endregion
        }
        
        #region Properties
        public wViewTestCaseInExcel wViewTestCaseInExcel
        {
            get
            {
                if ((this.mwViewTestCaseInExcel == null))
                {
                    this.mwViewTestCaseInExcel = new wViewTestCaseInExcel(this);
                }
                return this.mwViewTestCaseInExcel;
            }
        }
        
        public wClose wClose
        {
            get
            {
                if ((this.mwClose == null))
                {
                    this.mwClose = new wClose(this);
                }
                return this.mwClose;
            }
        }
        #endregion
        
        #region Fields
        private wViewTestCaseInExcel mwViewTestCaseInExcel;
        
        private wClose mwClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wViewTestCaseInExcel : WinWindow
    {
        
        public wViewTestCaseInExcel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "openTCLOExcelBtn";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("017822827 [ID] : Baseline [valuation set] : July 2006 Valuation [service] : QA US" +
                    " Benchmark 010 Create New Plan [plan] : QA US Benchmark 010 Create New_201409122" +
                    " [client] : Test Case Viewer");
            #endregion
        }
        
        #region Properties
        public txt txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt : WinText
    {
        
        public txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "View Test Case in Excel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("017822827 [ID] : Baseline [valuation set] : July 2006 Valuation [service] : QA US" +
                    " Benchmark 010 Create New Plan [plan] : QA US Benchmark 010 Create New_201409122" +
                    " [client] : Test Case Viewer");
            #endregion
        }
        
        #region Properties
        public WinHyperlink link
        {
            get
            {
                if ((this.mlink == null))
                {
                    this.mlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "View Test Case in Excel";
                    this.mlink.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mlink.WindowTitles.Add("017822827 [ID] : Baseline [valuation set] : July 2006 Valuation [service] : QA US" +
                            " Benchmark 010 Create New Plan [plan] : QA US Benchmark 010 Create New_201409122" +
                            " [client] : Test Case Viewer");
                    #endregion
                }
                return this.mlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClose : WinTitleBar
    {
        
        public wClose(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("017822827 [ID] : Baseline [valuation set] : July 2006 Valuation [service] : QA US" +
                    " Benchmark 010 Create New Plan [plan] : QA US Benchmark 010 Create New_201409122" +
                    " [client] : Test Case Viewer");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("017822827 [ID] : Baseline [valuation set] : July 2006 Valuation [service] : QA US" +
                            " Benchmark 010 Create New Plan [plan] : QA US Benchmark 010 Create New_201409122" +
                            " [client] : Test Case Viewer");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTestCaseViewer : WinWindow
    {
        
        public wTestCaseViewer()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Test Case Viewer", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("UK12345JW [ID] : 0 Percent run for FSG cashflows [valuation set] : Valuation2012 " +
                    "[service] : UK Plan [plan] : UK_Performance_Test_Custom [client] : Test Case Vie" +
                    "wer");
            #endregion
        }
        
        #region Properties
        public wRecalculate wRecalculate
        {
            get
            {
                if ((this.mwRecalculate == null))
                {
                    this.mwRecalculate = new wRecalculate(this);
                }
                return this.mwRecalculate;
            }
        }
        
        public wViewTestCaseInExcel1 wViewTestCaseInExcel
        {
            get
            {
                if ((this.mwViewTestCaseInExcel == null))
                {
                    this.mwViewTestCaseInExcel = new wViewTestCaseInExcel1(this);
                }
                return this.mwViewTestCaseInExcel;
            }
        }
        
        public wClose1 wClose
        {
            get
            {
                if ((this.mwClose == null))
                {
                    this.mwClose = new wClose1(this);
                }
                return this.mwClose;
            }
        }
        #endregion
        
        #region Fields
        private wRecalculate mwRecalculate;
        
        private wViewTestCaseInExcel1 mwViewTestCaseInExcel;
        
        private wClose1 mwClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRecalculate : WinWindow
    {
        
        public wRecalculate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRecalculate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("UK12345JW [ID] : 0 Percent run for FSG cashflows [valuation set] : Valuation2012 " +
                    "[service] : UK Plan [plan] : UK_Performance_Test_Custom [client] : Test Case Vie" +
                    "wer");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Recalculate";
                    this.mbtn.WindowTitles.Add("UK12345JW [ID] : 0 Percent run for FSG cashflows [valuation set] : Valuation2012 " +
                            "[service] : UK Plan [plan] : UK_Performance_Test_Custom [client] : Test Case Vie" +
                            "wer");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wViewTestCaseInExcel1 : WinWindow
    {
        
        public wViewTestCaseInExcel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "openTCLOExcelBtn";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("UK12345JW [ID] : 0 Percent run for FSG cashflows [valuation set] : Valuation2012 " +
                    "[service] : UK Plan [plan] : UK_Performance_Test_Custom [client] : Test Case Vie" +
                    "wer");
            #endregion
        }
        
        #region Properties
        public txt1 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt1(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt1 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt1 : WinText
    {
        
        public txt1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "View Test Case in Excel";
            this.WindowTitles.Add("UK12345JW [ID] : 0 Percent run for FSG cashflows [valuation set] : Valuation2012 " +
                    "[service] : UK Plan [plan] : UK_Performance_Test_Custom [client] : Test Case Vie" +
                    "wer");
            #endregion
        }
        
        #region Properties
        public WinHyperlink link
        {
            get
            {
                if ((this.mlink == null))
                {
                    this.mlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "View Test Case in Excel";
                    this.mlink.WindowTitles.Add("UK12345JW [ID] : 0 Percent run for FSG cashflows [valuation set] : Valuation2012 " +
                            "[service] : UK Plan [plan] : UK_Performance_Test_Custom [client] : Test Case Vie" +
                            "wer");
                    #endregion
                }
                return this.mlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClose1 : WinTitleBar
    {
        
        public wClose1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("UK12345JW [ID] : 0 Percent run for FSG cashflows [valuation set] : Valuation2012 " +
                    "[service] : UK Plan [plan] : UK_Performance_Test_Custom [client] : Test Case Vie" +
                    "wer");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtn.WindowTitles.Add("UK12345JW [ID] : 0 Percent run for FSG cashflows [valuation set] : Valuation2012 " +
                            "[service] : UK Plan [plan] : UK_Performance_Test_Custom [client] : Test Case Vie" +
                            "wer");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wConfirmRecordDeletion : WinWindow
    {
        
        public wConfirmRecordDeletion()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Record Deletion";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm Record Deletion");
            #endregion
        }
        
        #region Properties
        public wYes wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes : WinWindow
    {
        
        public wYes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm Record Deletion");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.WindowTitles.Add("Confirm Record Deletion");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
}
