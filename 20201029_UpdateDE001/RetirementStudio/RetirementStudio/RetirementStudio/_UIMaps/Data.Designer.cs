// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RetirementStudio._UIMaps.DataClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class Data
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton btnDropDown = this.wRetirementStudio.wSP_Filter.btn.btnDropDown;
            WinCheckBox uIActiveMemberCheckBox = this.wIP_Matching_AcceptRecordsAs_Popup.UICertainPeriodWindow1.UIActiveMemberCheckBox;
            #endregion

            // Last mouse action was not recorded.

            // Click 'Drop down' button
            Mouse.Click(btnDropDown, new Point(9, 7));

            // Select 'Active Member' check box
            uIActiveMemberCheckBox.Checked = this.RecordedMethod1Params.UIActiveMemberCheckBoxChecked;
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public wRetirementStudio wRetirementStudio
        {
            get
            {
                if ((this.mwRetirementStudio == null))
                {
                    this.mwRetirementStudio = new wRetirementStudio();
                }
                return this.mwRetirementStudio;
            }
        }
        
        public wCV_AddLabel wCV_AddLabel
        {
            get
            {
                if ((this.mwCV_AddLabel == null))
                {
                    this.mwCV_AddLabel = new wCV_AddLabel();
                }
                return this.mwCV_AddLabel;
            }
        }
        
        public wIP_SelectFile_FileSelection wIP_SelectFile_FileSelection
        {
            get
            {
                if ((this.mwIP_SelectFile_FileSelection == null))
                {
                    this.mwIP_SelectFile_FileSelection = new wIP_SelectFile_FileSelection();
                }
                return this.mwIP_SelectFile_FileSelection;
            }
        }
        
        public wIP_ValidateAndLoad_Popup wIP_ValidateAndLoad_Popup
        {
            get
            {
                if ((this.mwIP_ValidateAndLoad_Popup == null))
                {
                    this.mwIP_ValidateAndLoad_Popup = new wIP_ValidateAndLoad_Popup();
                }
                return this.mwIP_ValidateAndLoad_Popup;
            }
        }
        
        public wIP_Matching_ConfirmAccept_Popup wIP_Matching_ConfirmAccept_Popup
        {
            get
            {
                if ((this.mwIP_Matching_ConfirmAccept_Popup == null))
                {
                    this.mwIP_Matching_ConfirmAccept_Popup = new wIP_Matching_ConfirmAccept_Popup();
                }
                return this.mwIP_Matching_ConfirmAccept_Popup;
            }
        }
        
        public wIP_Matching_AcceptRecordsAs_Popup wIP_Matching_AcceptRecordsAs_Popup
        {
            get
            {
                if ((this.mwIP_Matching_AcceptRecordsAs_Popup == null))
                {
                    this.mwIP_Matching_AcceptRecordsAs_Popup = new wIP_Matching_AcceptRecordsAs_Popup();
                }
                return this.mwIP_Matching_AcceptRecordsAs_Popup;
            }
        }
        
        public wIP_Matching_RunResults_Popup wIP_Matching_RunResults_Popup
        {
            get
            {
                if ((this.mwIP_Matching_RunResults_Popup == null))
                {
                    this.mwIP_Matching_RunResults_Popup = new wIP_Matching_RunResults_Popup();
                }
                return this.mwIP_Matching_RunResults_Popup;
            }
        }
        
        public wIP_Matching_ProcessMatchingResultsConfirm_Popup wIP_Matching_ProcessMatchingResultsConfirm_Popup
        {
            get
            {
                if ((this.mwIP_Matching_ProcessMatchingResultsConfirm_Popup == null))
                {
                    this.mwIP_Matching_ProcessMatchingResultsConfirm_Popup = new wIP_Matching_ProcessMatchingResultsConfirm_Popup();
                }
                return this.mwIP_Matching_ProcessMatchingResultsConfirm_Popup;
            }
        }
        
        public wIP_Matching_ProcessMatchingResultsComplete_Popup wIP_Matching_ProcessMatchingResultsComplete_Popup
        {
            get
            {
                if ((this.mwIP_Matching_ProcessMatchingResultsComplete_Popup == null))
                {
                    this.mwIP_Matching_ProcessMatchingResultsComplete_Popup = new wIP_Matching_ProcessMatchingResultsComplete_Popup();
                }
                return this.mwIP_Matching_ProcessMatchingResultsComplete_Popup;
            }
        }
        
        public wDG_DerivationDefinition wDG_DerivationDefinition
        {
            get
            {
                if ((this.mwDG_DerivationDefinition == null))
                {
                    this.mwDG_DerivationDefinition = new wDG_DerivationDefinition();
                }
                return this.mwDG_DerivationDefinition;
            }
        }
        
        public wSelectInputFields1 wSelectInputFields
        {
            get
            {
                if ((this.mwSelectInputFields == null))
                {
                    this.mwSelectInputFields = new wSelectInputFields1();
                }
                return this.mwSelectInputFields;
            }
        }
        
        public wDG_SaveDerivedValuesToWarehouse_Popup wDG_SaveDerivedValuesToWarehouse_Popup
        {
            get
            {
                if ((this.mwDG_SaveDerivedValuesToWarehouse_Popup == null))
                {
                    this.mwDG_SaveDerivedValuesToWarehouse_Popup = new wDG_SaveDerivedValuesToWarehouse_Popup();
                }
                return this.mwDG_SaveDerivedValuesToWarehouse_Popup;
            }
        }
        
        public wSP_Snapshot_Popup wSP_Snapshot_Popup
        {
            get
            {
                if ((this.mwSP_Snapshot_Popup == null))
                {
                    this.mwSP_Snapshot_Popup = new wSP_Snapshot_Popup();
                }
                return this.mwSP_Snapshot_Popup;
            }
        }
        
        public wCK_StandardInputs1 wCK_StandardInputs
        {
            get
            {
                if ((this.mwCK_StandardInputs == null))
                {
                    this.mwCK_StandardInputs = new wCK_StandardInputs1();
                }
                return this.mwCK_StandardInputs;
            }
        }
        
        public wRP_SaveDataServiceParameters_Popup wRP_SaveDataServiceParameters_Popup
        {
            get
            {
                if ((this.mwRP_SaveDataServiceParameters_Popup == null))
                {
                    this.mwRP_SaveDataServiceParameters_Popup = new wRP_SaveDataServiceParameters_Popup();
                }
                return this.mwRP_SaveDataServiceParameters_Popup;
            }
        }
        
        public wRP_ReportGenerated_Popup wRP_ReportGenerated_Popup
        {
            get
            {
                if ((this.mwRP_ReportGenerated_Popup == null))
                {
                    this.mwRP_ReportGenerated_Popup = new wRP_ReportGenerated_Popup();
                }
                return this.mwRP_ReportGenerated_Popup;
            }
        }
        
        public wCV_AddLabels wCV_AddLabels
        {
            get
            {
                if ((this.mwCV_AddLabels == null))
                {
                    this.mwCV_AddLabels = new wCV_AddLabels();
                }
                return this.mwCV_AddLabels;
            }
        }
        
        public wIP_TransformationDefinition wIP_TransformationDefinition
        {
            get
            {
                if ((this.mwIP_TransformationDefinition == null))
                {
                    this.mwIP_TransformationDefinition = new wIP_TransformationDefinition();
                }
                return this.mwIP_TransformationDefinition;
            }
        }
        
        public wCK_AddCustomGroup1 wCK_AddCustomGroup
        {
            get
            {
                if ((this.mwCK_AddCustomGroup == null))
                {
                    this.mwCK_AddCustomGroup = new wCK_AddCustomGroup1();
                }
                return this.mwCK_AddCustomGroup;
            }
        }
        
        public wCK_EditFilter wCK_EditFilter
        {
            get
            {
                if ((this.mwCK_EditFilter == null))
                {
                    this.mwCK_EditFilter = new wCK_EditFilter();
                }
                return this.mwCK_EditFilter;
            }
        }
        
        public wCK_QueryInstructions wCK_QueryInstructions
        {
            get
            {
                if ((this.mwCK_QueryInstructions == null))
                {
                    this.mwCK_QueryInstructions = new wCK_QueryInstructions();
                }
                return this.mwCK_QueryInstructions;
            }
        }
        
        public wCK_Checks_Popup wCK_Checks_Popup
        {
            get
            {
                if ((this.mwCK_Checks_Popup == null))
                {
                    this.mwCK_Checks_Popup = new wCK_Checks_Popup();
                }
                return this.mwCK_Checks_Popup;
            }
        }
        
        public wSM_Popup wSM_Popup
        {
            get
            {
                if ((this.mwSM_Popup == null))
                {
                    this.mwSM_Popup = new wSM_Popup();
                }
                return this.mwSM_Popup;
            }
        }
        
        public wUndo_ConfirmUndo wUndo_ConfirmUndo
        {
            get
            {
                if ((this.mwUndo_ConfirmUndo == null))
                {
                    this.mwUndo_ConfirmUndo = new wUndo_ConfirmUndo();
                }
                return this.mwUndo_ConfirmUndo;
            }
        }
        
        public wBU_DeleteBatchUpdate wBU_DeleteBatchUpdate
        {
            get
            {
                if ((this.mwBU_DeleteBatchUpdate == null))
                {
                    this.mwBU_DeleteBatchUpdate = new wBU_DeleteBatchUpdate();
                }
                return this.mwBU_DeleteBatchUpdate;
            }
        }
        
        public wSP_RepublishSnapshot wSP_RepublishSnapshot
        {
            get
            {
                if ((this.mwSP_RepublishSnapshot == null))
                {
                    this.mwSP_RepublishSnapshot = new wSP_RepublishSnapshot();
                }
                return this.mwSP_RepublishSnapshot;
            }
        }
        
        public wSP_ExtractCreated wSP_ExtractCreated
        {
            get
            {
                if ((this.mwSP_ExtractCreated == null))
                {
                    this.mwSP_ExtractCreated = new wSP_ExtractCreated();
                }
                return this.mwSP_ExtractCreated;
            }
        }
        
        public wIP_ManualMatching wIP_ManualMatching
        {
            get
            {
                if ((this.mwIP_ManualMatching == null))
                {
                    this.mwIP_ManualMatching = new wIP_ManualMatching();
                }
                return this.mwIP_ManualMatching;
            }
        }
        
        public wOM_DataService_Popup wOM_DataService_Popup
        {
            get
            {
                if ((this.mwOM_DataService_Popup == null))
                {
                    this.mwOM_DataService_Popup = new wOM_DataService_Popup();
                }
                return this.mwOM_DataService_Popup;
            }
        }
        
        public wConfirm_Popup wConfirm_Popup
        {
            get
            {
                if ((this.mwConfirm_Popup == null))
                {
                    this.mwConfirm_Popup = new wConfirm_Popup();
                }
                return this.mwConfirm_Popup;
            }
        }
        
        public wDG_CopyDerivations wDG_CopyDerivations
        {
            get
            {
                if ((this.mwDG_CopyDerivations == null))
                {
                    this.mwDG_CopyDerivations = new wDG_CopyDerivations();
                }
                return this.mwDG_CopyDerivations;
            }
        }
        
        public wCopyValidationErrors wCopyValidationErrors
        {
            get
            {
                if ((this.mwCopyValidationErrors == null))
                {
                    this.mwCopyValidationErrors = new wCopyValidationErrors();
                }
                return this.mwCopyValidationErrors;
            }
        }
        
        public wDataAcquisition wDataAcquisition
        {
            get
            {
                if ((this.mwDataAcquisition == null))
                {
                    this.mwDataAcquisition = new wDataAcquisition();
                }
                return this.mwDataAcquisition;
            }
        }
        
        public wIP_CopyImports wIP_CopyImports
        {
            get
            {
                if ((this.mwIP_CopyImports == null))
                {
                    this.mwIP_CopyImports = new wIP_CopyImports();
                }
                return this.mwIP_CopyImports;
            }
        }
        
        public wCK_Warning_Popup wCK_Warning_Popup
        {
            get
            {
                if ((this.mwCK_Warning_Popup == null))
                {
                    this.mwCK_Warning_Popup = new wCK_Warning_Popup();
                }
                return this.mwCK_Warning_Popup;
            }
        }
        
        public wVU_PrintToFile_Popup wVU_PrintToFile_Popup
        {
            get
            {
                if ((this.mwVU_PrintToFile_Popup == null))
                {
                    this.mwVU_PrintToFile_Popup = new wVU_PrintToFile_Popup();
                }
                return this.mwVU_PrintToFile_Popup;
            }
        }
        
        public wVU_ReportOnManualChanges wVU_ReportOnManualChanges
        {
            get
            {
                if ((this.mwVU_ReportOnManualChanges == null))
                {
                    this.mwVU_ReportOnManualChanges = new wVU_ReportOnManualChanges();
                }
                return this.mwVU_ReportOnManualChanges;
            }
        }
        
        public wUndo_Popup wUndo_Popup
        {
            get
            {
                if ((this.mwUndo_Popup == null))
                {
                    this.mwUndo_Popup = new wUndo_Popup();
                }
                return this.mwUndo_Popup;
            }
        }
        
        public wDG_RunDerivationsinBatch wDG_RunDerivationsinBatch
        {
            get
            {
                if ((this.mwDG_RunDerivationsinBatch == null))
                {
                    this.mwDG_RunDerivationsinBatch = new wDG_RunDerivationsinBatch();
                }
                return this.mwDG_RunDerivationsinBatch;
            }
        }
        
        public wDG_DerivationBatchRun wDG_DerivationBatchRun
        {
            get
            {
                if ((this.mwDG_DerivationBatchRun == null))
                {
                    this.mwDG_DerivationBatchRun = new wDG_DerivationBatchRun();
                }
                return this.mwDG_DerivationBatchRun;
            }
        }
        
        public wComplete_Popup wComplete_Popup
        {
            get
            {
                if ((this.mwComplete_Popup == null))
                {
                    this.mwComplete_Popup = new wComplete_Popup();
                }
                return this.mwComplete_Popup;
            }
        }
        
        public wIP_CopyMappings wIP_CopyMappings
        {
            get
            {
                if ((this.mwIP_CopyMappings == null))
                {
                    this.mwIP_CopyMappings = new wIP_CopyMappings();
                }
                return this.mwIP_CopyMappings;
            }
        }
        
        public wIP_CopyMappings_Popup wIP_CopyMappings_Popup
        {
            get
            {
                if ((this.mwIP_CopyMappings_Popup == null))
                {
                    this.mwIP_CopyMappings_Popup = new wIP_CopyMappings_Popup();
                }
                return this.mwIP_CopyMappings_Popup;
            }
        }
        
        public wSP_DataSummaryReportsParam wSP_DataSummaryReportsParam
        {
            get
            {
                if ((this.mwSP_DataSummaryReportsParam == null))
                {
                    this.mwSP_DataSummaryReportsParam = new wSP_DataSummaryReportsParam();
                }
                return this.mwSP_DataSummaryReportsParam;
            }
        }
        
        public wDG_ExtractDerivationDefinition wDG_ExtractDerivationDefinition
        {
            get
            {
                if ((this.mwDG_ExtractDerivationDefinition == null))
                {
                    this.mwDG_ExtractDerivationDefinition = new wDG_ExtractDerivationDefinition();
                }
                return this.mwDG_ExtractDerivationDefinition;
            }
        }
        
        public wIP_Mapping_Status2Column wIP_Mapping_Status2Column
        {
            get
            {
                if ((this.mwIP_Mapping_Status2Column == null))
                {
                    this.mwIP_Mapping_Status2Column = new wIP_Mapping_Status2Column();
                }
                return this.mwIP_Mapping_Status2Column;
            }
        }
        
        public wIP_Mapping_Status3Column wIP_Mapping_Status3Column
        {
            get
            {
                if ((this.mwIP_Mapping_Status3Column == null))
                {
                    this.mwIP_Mapping_Status3Column = new wIP_Mapping_Status3Column();
                }
                return this.mwIP_Mapping_Status3Column;
            }
        }
        
        public wCV_StatusUSCTable wCV_StatusUSCTable
        {
            get
            {
                if ((this.mwCV_StatusUSCTable == null))
                {
                    this.mwCV_StatusUSCTable = new wCV_StatusUSCTable();
                }
                return this.mwCV_StatusUSCTable;
            }
        }
        
        public wRP_OverwriteReport wRP_OverwriteReport
        {
            get
            {
                if ((this.mwRP_OverwriteReport == null))
                {
                    this.mwRP_OverwriteReport = new wRP_OverwriteReport();
                }
                return this.mwRP_OverwriteReport;
            }
        }
        
        public wIP_Matching_ProcessMatchingResultsContinue_Popup wIP_Matching_ProcessMatchingResultsContinue_Popup
        {
            get
            {
                if ((this.mwIP_Matching_ProcessMatchingResultsContinue_Popup == null))
                {
                    this.mwIP_Matching_ProcessMatchingResultsContinue_Popup = new wIP_Matching_ProcessMatchingResultsContinue_Popup();
                }
                return this.mwIP_Matching_ProcessMatchingResultsContinue_Popup;
            }
        }
        
        public wIP_Matching_RunCurrentStage1 wIP_Matching_RunCurrentStage
        {
            get
            {
                if ((this.mwIP_Matching_RunCurrentStage == null))
                {
                    this.mwIP_Matching_RunCurrentStage = new wIP_Matching_RunCurrentStage1();
                }
                return this.mwIP_Matching_RunCurrentStage;
            }
        }
        
        public wIP_Matching_RunAllStages1 wIP_Matching_RunAllStages
        {
            get
            {
                if ((this.mwIP_Matching_RunAllStages == null))
                {
                    this.mwIP_Matching_RunAllStages = new wIP_Matching_RunAllStages1();
                }
                return this.mwIP_Matching_RunAllStages;
            }
        }
        
        public wDG_ActuarialTableFunctionDefinition wDG_ActuarialTableFunctionDefinition
        {
            get
            {
                if ((this.mwDG_ActuarialTableFunctionDefinition == null))
                {
                    this.mwDG_ActuarialTableFunctionDefinition = new wDG_ActuarialTableFunctionDefinition();
                }
                return this.mwDG_ActuarialTableFunctionDefinition;
            }
        }
        
        public wIP_ClearMappings wIP_ClearMappings
        {
            get
            {
                if ((this.mwIP_ClearMappings == null))
                {
                    this.mwIP_ClearMappings = new wIP_ClearMappings();
                }
                return this.mwIP_ClearMappings;
            }
        }
        
        public wVU_IR_ManualCorrection wVU_IR_ManualCorrection
        {
            get
            {
                if ((this.mwVU_IR_ManualCorrection == null))
                {
                    this.mwVU_IR_ManualCorrection = new wVU_IR_ManualCorrection();
                }
                return this.mwVU_IR_ManualCorrection;
            }
        }
        
        public wIP_VL_MappingSummaryAndConfirm wIP_VL_MappingSummaryAndConfirm
        {
            get
            {
                if ((this.mwIP_VL_MappingSummaryAndConfirm == null))
                {
                    this.mwIP_VL_MappingSummaryAndConfirm = new wIP_VL_MappingSummaryAndConfirm();
                }
                return this.mwIP_VL_MappingSummaryAndConfirm;
            }
        }
        
        public wUL_Upload wUL_Upload
        {
            get
            {
                if ((this.mwUL_Upload == null))
                {
                    this.mwUL_Upload = new wUL_Upload();
                }
                return this.mwUL_Upload;
            }
        }
        
        public wVU_SelectTotalsFields wVU_SelectTotalsFields
        {
            get
            {
                if ((this.mwVU_SelectTotalsFields == null))
                {
                    this.mwVU_SelectTotalsFields = new wVU_SelectTotalsFields();
                }
                return this.mwVU_SelectTotalsFields;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private wRetirementStudio mwRetirementStudio;
        
        private wCV_AddLabel mwCV_AddLabel;
        
        private wIP_SelectFile_FileSelection mwIP_SelectFile_FileSelection;
        
        private wIP_ValidateAndLoad_Popup mwIP_ValidateAndLoad_Popup;
        
        private wIP_Matching_ConfirmAccept_Popup mwIP_Matching_ConfirmAccept_Popup;
        
        private wIP_Matching_AcceptRecordsAs_Popup mwIP_Matching_AcceptRecordsAs_Popup;
        
        private wIP_Matching_RunResults_Popup mwIP_Matching_RunResults_Popup;
        
        private wIP_Matching_ProcessMatchingResultsConfirm_Popup mwIP_Matching_ProcessMatchingResultsConfirm_Popup;
        
        private wIP_Matching_ProcessMatchingResultsComplete_Popup mwIP_Matching_ProcessMatchingResultsComplete_Popup;
        
        private wDG_DerivationDefinition mwDG_DerivationDefinition;
        
        private wSelectInputFields1 mwSelectInputFields;
        
        private wDG_SaveDerivedValuesToWarehouse_Popup mwDG_SaveDerivedValuesToWarehouse_Popup;
        
        private wSP_Snapshot_Popup mwSP_Snapshot_Popup;
        
        private wCK_StandardInputs1 mwCK_StandardInputs;
        
        private wRP_SaveDataServiceParameters_Popup mwRP_SaveDataServiceParameters_Popup;
        
        private wRP_ReportGenerated_Popup mwRP_ReportGenerated_Popup;
        
        private wCV_AddLabels mwCV_AddLabels;
        
        private wIP_TransformationDefinition mwIP_TransformationDefinition;
        
        private wCK_AddCustomGroup1 mwCK_AddCustomGroup;
        
        private wCK_EditFilter mwCK_EditFilter;
        
        private wCK_QueryInstructions mwCK_QueryInstructions;
        
        private wCK_Checks_Popup mwCK_Checks_Popup;
        
        private wSM_Popup mwSM_Popup;
        
        private wUndo_ConfirmUndo mwUndo_ConfirmUndo;
        
        private wBU_DeleteBatchUpdate mwBU_DeleteBatchUpdate;
        
        private wSP_RepublishSnapshot mwSP_RepublishSnapshot;
        
        private wSP_ExtractCreated mwSP_ExtractCreated;
        
        private wIP_ManualMatching mwIP_ManualMatching;
        
        private wOM_DataService_Popup mwOM_DataService_Popup;
        
        private wConfirm_Popup mwConfirm_Popup;
        
        private wDG_CopyDerivations mwDG_CopyDerivations;
        
        private wCopyValidationErrors mwCopyValidationErrors;
        
        private wDataAcquisition mwDataAcquisition;
        
        private wIP_CopyImports mwIP_CopyImports;
        
        private wCK_Warning_Popup mwCK_Warning_Popup;
        
        private wVU_PrintToFile_Popup mwVU_PrintToFile_Popup;
        
        private wVU_ReportOnManualChanges mwVU_ReportOnManualChanges;
        
        private wUndo_Popup mwUndo_Popup;
        
        private wDG_RunDerivationsinBatch mwDG_RunDerivationsinBatch;
        
        private wDG_DerivationBatchRun mwDG_DerivationBatchRun;
        
        private wComplete_Popup mwComplete_Popup;
        
        private wIP_CopyMappings mwIP_CopyMappings;
        
        private wIP_CopyMappings_Popup mwIP_CopyMappings_Popup;
        
        private wSP_DataSummaryReportsParam mwSP_DataSummaryReportsParam;
        
        private wDG_ExtractDerivationDefinition mwDG_ExtractDerivationDefinition;
        
        private wIP_Mapping_Status2Column mwIP_Mapping_Status2Column;
        
        private wIP_Mapping_Status3Column mwIP_Mapping_Status3Column;
        
        private wCV_StatusUSCTable mwCV_StatusUSCTable;
        
        private wRP_OverwriteReport mwRP_OverwriteReport;
        
        private wIP_Matching_ProcessMatchingResultsContinue_Popup mwIP_Matching_ProcessMatchingResultsContinue_Popup;
        
        private wIP_Matching_RunCurrentStage1 mwIP_Matching_RunCurrentStage;
        
        private wIP_Matching_RunAllStages1 mwIP_Matching_RunAllStages;
        
        private wDG_ActuarialTableFunctionDefinition mwDG_ActuarialTableFunctionDefinition;
        
        private wIP_ClearMappings mwIP_ClearMappings;
        
        private wVU_IR_ManualCorrection mwVU_IR_ManualCorrection;
        
        private wIP_VL_MappingSummaryAndConfirm mwIP_VL_MappingSummaryAndConfirm;
        
        private wUL_Upload mwUL_Upload;
        
        private wVU_SelectTotalsFields mwVU_SelectTotalsFields;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Active Member' check box
        /// </summary>
        public bool UIActiveMemberCheckBoxChecked = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudio : WinWindow
    {
        
        public wRetirementStudio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wFPGrid wFPGrid
        {
            get
            {
                if ((this.mwFPGrid == null))
                {
                    this.mwFPGrid = new wFPGrid(this);
                }
                return this.mwFPGrid;
            }
        }
        
        public wIP_Mapping_CopyMappings wIP_Mapping_CopyMappings
        {
            get
            {
                if ((this.mwIP_Mapping_CopyMappings == null))
                {
                    this.mwIP_Mapping_CopyMappings = new wIP_Mapping_CopyMappings(this);
                }
                return this.mwIP_Mapping_CopyMappings;
            }
        }
        
        public wCV_AddSingleLabel wCV_AddSingleLabel
        {
            get
            {
                if ((this.mwCV_AddSingleLabel == null))
                {
                    this.mwCV_AddSingleLabel = new wCV_AddSingleLabel(this);
                }
                return this.mwCV_AddSingleLabel;
            }
        }
        
        public wCV_AddMultipleLabels wCV_AddMultipleLabels
        {
            get
            {
                if ((this.mwCV_AddMultipleLabels == null))
                {
                    this.mwCV_AddMultipleLabels = new wCV_AddMultipleLabels(this);
                }
                return this.mwCV_AddMultipleLabels;
            }
        }
        
        public WinWindow tvNaviTree
        {
            get
            {
                if ((this.mtvNaviTree == null))
                {
                    this.mtvNaviTree = new WinWindow(this);
                    #region Search Criteria
                    this.mtvNaviTree.SearchProperties[WinWindow.PropertyNames.ControlName] = "tasksTree";
                    this.mtvNaviTree.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtvNaviTree.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtvNaviTree;
            }
        }
        
        public wCV_EditSelection wCV_EditSelection
        {
            get
            {
                if ((this.mwCV_EditSelection == null))
                {
                    this.mwCV_EditSelection = new wCV_EditSelection(this);
                }
                return this.mwCV_EditSelection;
            }
        }
        
        public wUD_LocalFile wUD_LocalFile
        {
            get
            {
                if ((this.mwUD_LocalFile == null))
                {
                    this.mwUD_LocalFile = new wUD_LocalFile(this);
                }
                return this.mwUD_LocalFile;
            }
        }
        
        public wUD_GRSUnloadFile wUD_GRSUnloadFile
        {
            get
            {
                if ((this.mwUD_GRSUnloadFile == null))
                {
                    this.mwUD_GRSUnloadFile = new wUD_GRSUnloadFile(this);
                }
                return this.mwUD_GRSUnloadFile;
            }
        }
        
        public wUD_SharepointFile wUD_SharepointFile
        {
            get
            {
                if ((this.mwUD_SharepointFile == null))
                {
                    this.mwUD_SharepointFile = new wUD_SharepointFile(this);
                }
                return this.mwUD_SharepointFile;
            }
        }
        
        public wUD_Browse wUD_Browse
        {
            get
            {
                if ((this.mwUD_Browse == null))
                {
                    this.mwUD_Browse = new wUD_Browse(this);
                }
                return this.mwUD_Browse;
            }
        }
        
        public wUD_Upload wUD_Upload
        {
            get
            {
                if ((this.mwUD_Upload == null))
                {
                    this.mwUD_Upload = new wUD_Upload(this);
                }
                return this.mwUD_Upload;
            }
        }
        
        public wUD_RepositoryContents wUD_RepositoryContents
        {
            get
            {
                if ((this.mwUD_RepositoryContents == null))
                {
                    this.mwUD_RepositoryContents = new wUD_RepositoryContents(this);
                }
                return this.mwUD_RepositoryContents;
            }
        }
        
        public wIP_SelectFile_FileDefinitionName wIP_SelectFile_FileDefinitionName
        {
            get
            {
                if ((this.mwIP_SelectFile_FileDefinitionName == null))
                {
                    this.mwIP_SelectFile_FileDefinitionName = new wIP_SelectFile_FileDefinitionName(this);
                }
                return this.mwIP_SelectFile_FileDefinitionName;
            }
        }
        
        public wIP_SelectFile_FileType wIP_SelectFile_FileType
        {
            get
            {
                if ((this.mwIP_SelectFile_FileType == null))
                {
                    this.mwIP_SelectFile_FileType = new wIP_SelectFile_FileType(this);
                }
                return this.mwIP_SelectFile_FileType;
            }
        }
        
        public wIP_SelectFile_Preview wIP_SelectFile_Preview
        {
            get
            {
                if ((this.mwIP_SelectFile_Preview == null))
                {
                    this.mwIP_SelectFile_Preview = new wIP_SelectFile_Preview(this);
                }
                return this.mwIP_SelectFile_Preview;
            }
        }
        
        public wIP_Selectfile_Browse wIP_Selectfile_Browse
        {
            get
            {
                if ((this.mwIP_Selectfile_Browse == null))
                {
                    this.mwIP_Selectfile_Browse = new wIP_Selectfile_Browse(this);
                }
                return this.mwIP_Selectfile_Browse;
            }
        }
        
        public wIP_Tabs wIP_Tabs
        {
            get
            {
                if ((this.mwIP_Tabs == null))
                {
                    this.mwIP_Tabs = new wIP_Tabs(this);
                }
                return this.mwIP_Tabs;
            }
        }
        
        public wIP_Mapping_DockingWin wIP_Mapping_DockingWin
        {
            get
            {
                if ((this.mwIP_Mapping_DockingWin == null))
                {
                    this.mwIP_Mapping_DockingWin = new wIP_Mapping_DockingWin(this);
                }
                return this.mwIP_Mapping_DockingWin;
            }
        }
        
        public wIP_VL_LoadBlankData wIP_VL_LoadBlankData
        {
            get
            {
                if ((this.mwIP_VL_LoadBlankData == null))
                {
                    this.mwIP_VL_LoadBlankData = new wIP_VL_LoadBlankData(this);
                }
                return this.mwIP_VL_LoadBlankData;
            }
        }
        
        public wIP_VL_MatchingIsCaseSensitive wIP_VL_MatchingIsCaseSensitive
        {
            get
            {
                if ((this.mwIP_VL_MatchingIsCaseSensitive == null))
                {
                    this.mwIP_VL_MatchingIsCaseSensitive = new wIP_VL_MatchingIsCaseSensitive(this);
                }
                return this.mwIP_VL_MatchingIsCaseSensitive;
            }
        }
        
        public wIP_VL_IgnoreGoneRecordsForMatching wIP_VL_IgnoreGoneRecordsForMatching
        {
            get
            {
                if ((this.mwIP_VL_IgnoreGoneRecordsForMatching == null))
                {
                    this.mwIP_VL_IgnoreGoneRecordsForMatching = new wIP_VL_IgnoreGoneRecordsForMatching(this);
                }
                return this.mwIP_VL_IgnoreGoneRecordsForMatching;
            }
        }
        
        public wIP_VL_ValidateData wIP_VL_ValidateData
        {
            get
            {
                if ((this.mwIP_VL_ValidateData == null))
                {
                    this.mwIP_VL_ValidateData = new wIP_VL_ValidateData(this);
                }
                return this.mwIP_VL_ValidateData;
            }
        }
        
        public wIP_VL_LoadData wIP_VL_LoadData
        {
            get
            {
                if ((this.mwIP_VL_LoadData == null))
                {
                    this.mwIP_VL_LoadData = new wIP_VL_LoadData(this);
                }
                return this.mwIP_VL_LoadData;
            }
        }
        
        public wIP_VL_ValidateAndLoadData wIP_VL_ValidateAndLoadData
        {
            get
            {
                if ((this.mwIP_VL_ValidateAndLoadData == null))
                {
                    this.mwIP_VL_ValidateAndLoadData = new wIP_VL_ValidateAndLoadData(this);
                }
                return this.mwIP_VL_ValidateAndLoadData;
            }
        }
        
        public wIP_VL_Status wIP_VL_Status
        {
            get
            {
                if ((this.mwIP_VL_Status == null))
                {
                    this.mwIP_VL_Status = new wIP_VL_Status(this);
                }
                return this.mwIP_VL_Status;
            }
        }
        
        public wIP_Matching_FPGrid wIP_Matching_FPGrid
        {
            get
            {
                if ((this.mwIP_Matching_FPGrid == null))
                {
                    this.mwIP_Matching_FPGrid = new wIP_Matching_FPGrid(this);
                }
                return this.mwIP_Matching_FPGrid;
            }
        }
        
        public wIP_Matching_FindMatches wIP_Matching_FindMatches
        {
            get
            {
                if ((this.mwIP_Matching_FindMatches == null))
                {
                    this.mwIP_Matching_FindMatches = new wIP_Matching_FindMatches(this);
                }
                return this.mwIP_Matching_FindMatches;
            }
        }
        
        public wIP_Matching_MatchManually wIP_Matching_MatchManually
        {
            get
            {
                if ((this.mwIP_Matching_MatchManually == null))
                {
                    this.mwIP_Matching_MatchManually = new wIP_Matching_MatchManually(this);
                }
                return this.mwIP_Matching_MatchManually;
            }
        }
        
        public wIP_Matching_SaveToWarehouse wIP_Matching_SaveToWarehouse
        {
            get
            {
                if ((this.mwIP_Matching_SaveToWarehouse == null))
                {
                    this.mwIP_Matching_SaveToWarehouse = new wIP_Matching_SaveToWarehouse(this);
                }
                return this.mwIP_Matching_SaveToWarehouse;
            }
        }
        
        public wIP_Matching_UD_NoMatch wIP_Matching_UD_NoMatch
        {
            get
            {
                if ((this.mwIP_Matching_UD_NoMatch == null))
                {
                    this.mwIP_Matching_UD_NoMatch = new wIP_Matching_UD_NoMatch(this);
                }
                return this.mwIP_Matching_UD_NoMatch;
            }
        }
        
        public wIP_Matching_UD_UniqueMatch wIP_Matching_UD_UniqueMatch
        {
            get
            {
                if ((this.mwIP_Matching_UD_UniqueMatch == null))
                {
                    this.mwIP_Matching_UD_UniqueMatch = new wIP_Matching_UD_UniqueMatch(this);
                }
                return this.mwIP_Matching_UD_UniqueMatch;
            }
        }
        
        public wIP_Matching_UD_MultipleMatches wIP_Matching_UD_MultipleMatches
        {
            get
            {
                if ((this.mwIP_Matching_UD_MultipleMatches == null))
                {
                    this.mwIP_Matching_UD_MultipleMatches = new wIP_Matching_UD_MultipleMatches(this);
                }
                return this.mwIP_Matching_UD_MultipleMatches;
            }
        }
        
        public wIP_Matching_UD_NoMatch_Num wIP_Matching_UD_NoMatch_Num
        {
            get
            {
                if ((this.mwIP_Matching_UD_NoMatch_Num == null))
                {
                    this.mwIP_Matching_UD_NoMatch_Num = new wIP_Matching_UD_NoMatch_Num(this);
                }
                return this.mwIP_Matching_UD_NoMatch_Num;
            }
        }
        
        public wIP_Matching_UD_UniqueMatch_Num wIP_Matching_UD_UniqueMatch_Num
        {
            get
            {
                if ((this.mwIP_Matching_UD_UniqueMatch_Num == null))
                {
                    this.mwIP_Matching_UD_UniqueMatch_Num = new wIP_Matching_UD_UniqueMatch_Num(this);
                }
                return this.mwIP_Matching_UD_UniqueMatch_Num;
            }
        }
        
        public wIP_Matching_UD_MultipleMatches_Num wIP_Matching_UD_MultipleMatches_Num
        {
            get
            {
                if ((this.mwIP_Matching_UD_MultipleMatches_Num == null))
                {
                    this.mwIP_Matching_UD_MultipleMatches_Num = new wIP_Matching_UD_MultipleMatches_Num(this);
                }
                return this.mwIP_Matching_UD_MultipleMatches_Num;
            }
        }
        
        public wIP_Matching_WR_NoMatch wIP_Matching_WR_NoMatch
        {
            get
            {
                if ((this.mwIP_Matching_WR_NoMatch == null))
                {
                    this.mwIP_Matching_WR_NoMatch = new wIP_Matching_WR_NoMatch(this);
                }
                return this.mwIP_Matching_WR_NoMatch;
            }
        }
        
        public wIP_Matching_DD_NoMatch wIP_Matching_DD_NoMatch
        {
            get
            {
                if ((this.mwIP_Matching_DD_NoMatch == null))
                {
                    this.mwIP_Matching_DD_NoMatch = new wIP_Matching_DD_NoMatch(this);
                }
                return this.mwIP_Matching_DD_NoMatch;
            }
        }
        
        public wIP_Matching_DD_UniqueMatch wIP_Matching_DD_UniqueMatch
        {
            get
            {
                if ((this.mwIP_Matching_DD_UniqueMatch == null))
                {
                    this.mwIP_Matching_DD_UniqueMatch = new wIP_Matching_DD_UniqueMatch(this);
                }
                return this.mwIP_Matching_DD_UniqueMatch;
            }
        }
        
        public wIP_Matching_DD_MultipleMatches wIP_Matching_DD_MultipleMatches
        {
            get
            {
                if ((this.mwIP_Matching_DD_MultipleMatches == null))
                {
                    this.mwIP_Matching_DD_MultipleMatches = new wIP_Matching_DD_MultipleMatches(this);
                }
                return this.mwIP_Matching_DD_MultipleMatches;
            }
        }
        
        public wIP_Matching_DD_NoMatch_Num wIP_Matching_DD_NoMatch_Num
        {
            get
            {
                if ((this.mwIP_Matching_DD_NoMatch_Num == null))
                {
                    this.mwIP_Matching_DD_NoMatch_Num = new wIP_Matching_DD_NoMatch_Num(this);
                }
                return this.mwIP_Matching_DD_NoMatch_Num;
            }
        }
        
        public wIP_Matching_DD_UniqueMatch_Num wIP_Matching_DD_UniqueMatch_Num
        {
            get
            {
                if ((this.mwIP_Matching_DD_UniqueMatch_Num == null))
                {
                    this.mwIP_Matching_DD_UniqueMatch_Num = new wIP_Matching_DD_UniqueMatch_Num(this);
                }
                return this.mwIP_Matching_DD_UniqueMatch_Num;
            }
        }
        
        public wIP_Matching_DD_MultipleMatches_Num wIP_Matching_DD_MultipleMatches_Num
        {
            get
            {
                if ((this.mwIP_Matching_DD_MultipleMatches_Num == null))
                {
                    this.mwIP_Matching_DD_MultipleMatches_Num = new wIP_Matching_DD_MultipleMatches_Num(this);
                }
                return this.mwIP_Matching_DD_MultipleMatches_Num;
            }
        }
        
        public wIP_Matching_AR_Matched_Num wIP_Matching_AR_Matched_Num
        {
            get
            {
                if ((this.mwIP_Matching_AR_Matched_Num == null))
                {
                    this.mwIP_Matching_AR_Matched_Num = new wIP_Matching_AR_Matched_Num(this);
                }
                return this.mwIP_Matching_AR_Matched_Num;
            }
        }
        
        public wIP_Matching_AR_New_Num wIP_Matching_AR_New_Num
        {
            get
            {
                if ((this.mwIP_Matching_AR_New_Num == null))
                {
                    this.mwIP_Matching_AR_New_Num = new wIP_Matching_AR_New_Num(this);
                }
                return this.mwIP_Matching_AR_New_Num;
            }
        }
        
        public wIP_Matching_AR_Ignored_Num wIP_Matching_AR_Ignored_Num
        {
            get
            {
                if ((this.mwIP_Matching_AR_Ignored_Num == null))
                {
                    this.mwIP_Matching_AR_Ignored_Num = new wIP_Matching_AR_Ignored_Num(this);
                }
                return this.mwIP_Matching_AR_Ignored_Num;
            }
        }
        
        public wIP_Matching_AR_Gone_Num wIP_Matching_AR_Gone_Num
        {
            get
            {
                if ((this.mwIP_Matching_AR_Gone_Num == null))
                {
                    this.mwIP_Matching_AR_Gone_Num = new wIP_Matching_AR_Gone_Num(this);
                }
                return this.mwIP_Matching_AR_Gone_Num;
            }
        }
        
        public wIP_Matching_AR_Leaver_Num wIP_Matching_AR_Leaver_Num
        {
            get
            {
                if ((this.mwIP_Matching_AR_Leaver_Num == null))
                {
                    this.mwIP_Matching_AR_Leaver_Num = new wIP_Matching_AR_Leaver_Num(this);
                }
                return this.mwIP_Matching_AR_Leaver_Num;
            }
        }
        
        public wIP_Matching_AR_Unmatched_Num wIP_Matching_AR_Unmatched_Num
        {
            get
            {
                if ((this.mwIP_Matching_AR_Unmatched_Num == null))
                {
                    this.mwIP_Matching_AR_Unmatched_Num = new wIP_Matching_AR_Unmatched_Num(this);
                }
                return this.mwIP_Matching_AR_Unmatched_Num;
            }
        }
        
        public wIP_Matching_AR_Unmerged_Num wIP_Matching_AR_Unmerged_Num
        {
            get
            {
                if ((this.mwIP_Matching_AR_Unmerged_Num == null))
                {
                    this.mwIP_Matching_AR_Unmerged_Num = new wIP_Matching_AR_Unmerged_Num(this);
                }
                return this.mwIP_Matching_AR_Unmerged_Num;
            }
        }
        
        public wIP_Matching_RunCurrentStage wIP_Matching_RunCurrentStage
        {
            get
            {
                if ((this.mwIP_Matching_RunCurrentStage == null))
                {
                    this.mwIP_Matching_RunCurrentStage = new wIP_Matching_RunCurrentStage(this);
                }
                return this.mwIP_Matching_RunCurrentStage;
            }
        }
        
        public wIP_Matching_RunAllStages wIP_Matching_RunAllStages
        {
            get
            {
                if ((this.mwIP_Matching_RunAllStages == null))
                {
                    this.mwIP_Matching_RunAllStages = new wIP_Matching_RunAllStages(this);
                }
                return this.mwIP_Matching_RunAllStages;
            }
        }
        
        public wIP_Matching_AcceptAllRecordsAs__ wIP_Matching_AcceptAllRecordsAs__
        {
            get
            {
                if ((this.mwIP_Matching_AcceptAllRecordsAs__ == null))
                {
                    this.mwIP_Matching_AcceptAllRecordsAs__ = new wIP_Matching_AcceptAllRecordsAs__(this);
                }
                return this.mwIP_Matching_AcceptAllRecordsAs__;
            }
        }
        
        public wIP_Matching_AcceptSelectedRecordsAs__ wIP_Matching_AcceptSelectedRecordsAs__
        {
            get
            {
                if ((this.mwIP_Matching_AcceptSelectedRecordsAs__ == null))
                {
                    this.mwIP_Matching_AcceptSelectedRecordsAs__ = new wIP_Matching_AcceptSelectedRecordsAs__(this);
                }
                return this.mwIP_Matching_AcceptSelectedRecordsAs__;
            }
        }
        
        public wIP_Matching_WR_NoMatch_Num wIP_Matching_WR_NoMatch_Num
        {
            get
            {
                if ((this.mwIP_Matching_WR_NoMatch_Num == null))
                {
                    this.mwIP_Matching_WR_NoMatch_Num = new wIP_Matching_WR_NoMatch_Num(this);
                }
                return this.mwIP_Matching_WR_NoMatch_Num;
            }
        }
        
        public wIP_Matching_RefreshResults wIP_Matching_RefreshResults
        {
            get
            {
                if ((this.mwIP_Matching_RefreshResults == null))
                {
                    this.mwIP_Matching_RefreshResults = new wIP_Matching_RefreshResults(this);
                }
                return this.mwIP_Matching_RefreshResults;
            }
        }
        
        public wIP_Matching_UnacceptAllRecords wIP_Matching_UnacceptAllRecords
        {
            get
            {
                if ((this.mwIP_Matching_UnacceptAllRecords == null))
                {
                    this.mwIP_Matching_UnacceptAllRecords = new wIP_Matching_UnacceptAllRecords(this);
                }
                return this.mwIP_Matching_UnacceptAllRecords;
            }
        }
        
        public wIP_Matching_UnacceptSelectedRecords wIP_Matching_UnacceptSelectedRecords
        {
            get
            {
                if ((this.mwIP_Matching_UnacceptSelectedRecords == null))
                {
                    this.mwIP_Matching_UnacceptSelectedRecords = new wIP_Matching_UnacceptSelectedRecords(this);
                }
                return this.mwIP_Matching_UnacceptSelectedRecords;
            }
        }
        
        public wIP_Matching_MergeDuplicates wIP_Matching_MergeDuplicates
        {
            get
            {
                if ((this.mwIP_Matching_MergeDuplicates == null))
                {
                    this.mwIP_Matching_MergeDuplicates = new wIP_Matching_MergeDuplicates(this);
                }
                return this.mwIP_Matching_MergeDuplicates;
            }
        }
        
        public wDG_DerivationGroupName wDG_DerivationGroupName
        {
            get
            {
                if ((this.mwDG_DerivationGroupName == null))
                {
                    this.mwDG_DerivationGroupName = new wDG_DerivationGroupName(this);
                }
                return this.mwDG_DerivationGroupName;
            }
        }
        
        public wDG_Filter wDG_Filter
        {
            get
            {
                if ((this.mwDG_Filter == null))
                {
                    this.mwDG_Filter = new wDG_Filter(this);
                }
                return this.mwDG_Filter;
            }
        }
        
        public wDG_Add wDG_Add
        {
            get
            {
                if ((this.mwDG_Add == null))
                {
                    this.mwDG_Add = new wDG_Add(this);
                }
                return this.mwDG_Add;
            }
        }
        
        public wDG_Delete wDG_Delete
        {
            get
            {
                if ((this.mwDG_Delete == null))
                {
                    this.mwDG_Delete = new wDG_Delete(this);
                }
                return this.mwDG_Delete;
            }
        }
        
        public wDG_Insert wDG_Insert
        {
            get
            {
                if ((this.mwDG_Insert == null))
                {
                    this.mwDG_Insert = new wDG_Insert(this);
                }
                return this.mwDG_Insert;
            }
        }
        
        public wDG_AddWorkFields wDG_AddWorkFields
        {
            get
            {
                if ((this.mwDG_AddWorkFields == null))
                {
                    this.mwDG_AddWorkFields = new wDG_AddWorkFields(this);
                }
                return this.mwDG_AddWorkFields;
            }
        }
        
        public wDG_CalculateAndPreview wDG_CalculateAndPreview
        {
            get
            {
                if ((this.mwDG_CalculateAndPreview == null))
                {
                    this.mwDG_CalculateAndPreview = new wDG_CalculateAndPreview(this);
                }
                return this.mwDG_CalculateAndPreview;
            }
        }
        
        public wDG_SaveToWarehouse wDG_SaveToWarehouse
        {
            get
            {
                if ((this.mwDG_SaveToWarehouse == null))
                {
                    this.mwDG_SaveToWarehouse = new wDG_SaveToWarehouse(this);
                }
                return this.mwDG_SaveToWarehouse;
            }
        }
        
        public wDG_MoveUp wDG_MoveUp
        {
            get
            {
                if ((this.mwDG_MoveUp == null))
                {
                    this.mwDG_MoveUp = new wDG_MoveUp(this);
                }
                return this.mwDG_MoveUp;
            }
        }
        
        public wDG_MoveDown wDG_MoveDown
        {
            get
            {
                if ((this.mwDG_MoveDown == null))
                {
                    this.mwDG_MoveDown = new wDG_MoveDown(this);
                }
                return this.mwDG_MoveDown;
            }
        }
        
        public wDG_FPGrid wDG_FPGrid
        {
            get
            {
                if ((this.mwDG_FPGrid == null))
                {
                    this.mwDG_FPGrid = new wDG_FPGrid(this);
                }
                return this.mwDG_FPGrid;
            }
        }
        
        public wSP_SnapshotName wSP_SnapshotName
        {
            get
            {
                if ((this.mwSP_SnapshotName == null))
                {
                    this.mwSP_SnapshotName = new wSP_SnapshotName(this);
                }
                return this.mwSP_SnapshotName;
            }
        }
        
        public wSP_UseLatestDate wSP_UseLatestDate
        {
            get
            {
                if ((this.mwSP_UseLatestDate == null))
                {
                    this.mwSP_UseLatestDate = new wSP_UseLatestDate(this);
                }
                return this.mwSP_UseLatestDate;
            }
        }
        
        public wSP_PublishSnapshot wSP_PublishSnapshot
        {
            get
            {
                if ((this.mwSP_PublishSnapshot == null))
                {
                    this.mwSP_PublishSnapshot = new wSP_PublishSnapshot(this);
                }
                return this.mwSP_PublishSnapshot;
            }
        }
        
        public wSP_CreateExtract wSP_CreateExtract
        {
            get
            {
                if ((this.mwSP_CreateExtract == null))
                {
                    this.mwSP_CreateExtract = new wSP_CreateExtract(this);
                }
                return this.mwSP_CreateExtract;
            }
        }
        
        public wSP_Preview wSP_Preview
        {
            get
            {
                if ((this.mwSP_Preview == null))
                {
                    this.mwSP_Preview = new wSP_Preview(this);
                }
                return this.mwSP_Preview;
            }
        }
        
        public wSP_TreeViewCurrent wSP_TreeViewCurrent
        {
            get
            {
                if ((this.mwSP_TreeViewCurrent == null))
                {
                    this.mwSP_TreeViewCurrent = new wSP_TreeViewCurrent(this);
                }
                return this.mwSP_TreeViewCurrent;
            }
        }
        
        public wCK_StandardInputs wCK_StandardInputs
        {
            get
            {
                if ((this.mwCK_StandardInputs == null))
                {
                    this.mwCK_StandardInputs = new wCK_StandardInputs(this);
                }
                return this.mwCK_StandardInputs;
            }
        }
        
        public wCK_AddCustomGroup wCK_AddCustomGroup
        {
            get
            {
                if ((this.mwCK_AddCustomGroup == null))
                {
                    this.mwCK_AddCustomGroup = new wCK_AddCustomGroup(this);
                }
                return this.mwCK_AddCustomGroup;
            }
        }
        
        public wCK_AddCheck wCK_AddCheck
        {
            get
            {
                if ((this.mwCK_AddCheck == null))
                {
                    this.mwCK_AddCheck = new wCK_AddCheck(this);
                }
                return this.mwCK_AddCheck;
            }
        }
        
        public wCK_ApplyChecks wCK_ApplyChecks
        {
            get
            {
                if ((this.mwCK_ApplyChecks == null))
                {
                    this.mwCK_ApplyChecks = new wCK_ApplyChecks(this);
                }
                return this.mwCK_ApplyChecks;
            }
        }
        
        public wCK_ClearAllResults wCK_ClearAllResults
        {
            get
            {
                if ((this.mwCK_ClearAllResults == null))
                {
                    this.mwCK_ClearAllResults = new wCK_ClearAllResults(this);
                }
                return this.mwCK_ClearAllResults;
            }
        }
        
        public wCK_FPGrid wCK_FPGrid
        {
            get
            {
                if ((this.mwCK_FPGrid == null))
                {
                    this.mwCK_FPGrid = new wCK_FPGrid(this);
                }
                return this.mwCK_FPGrid;
            }
        }
        
        public wSM_CreateMatrix wSM_CreateMatrix
        {
            get
            {
                if ((this.mwSM_CreateMatrix == null))
                {
                    this.mwSM_CreateMatrix = new wSM_CreateMatrix(this);
                }
                return this.mwSM_CreateMatrix;
            }
        }
        
        public wRP_Checks wRP_Checks
        {
            get
            {
                if ((this.mwRP_Checks == null))
                {
                    this.mwRP_Checks = new wRP_Checks(this);
                }
                return this.mwRP_Checks;
            }
        }
        
        public wRP_Checks_Filter wRP_Checks_Filter
        {
            get
            {
                if ((this.mwRP_Checks_Filter == null))
                {
                    this.mwRP_Checks_Filter = new wRP_Checks_Filter(this);
                }
                return this.mwRP_Checks_Filter;
            }
        }
        
        public wRP_StatusMatrix wRP_StatusMatrix
        {
            get
            {
                if ((this.mwRP_StatusMatrix == null))
                {
                    this.mwRP_StatusMatrix = new wRP_StatusMatrix(this);
                }
                return this.mwRP_StatusMatrix;
            }
        }
        
        public wRP_StatusMatrix_Filter wRP_StatusMatrix_Filter
        {
            get
            {
                if ((this.mwRP_StatusMatrix_Filter == null))
                {
                    this.mwRP_StatusMatrix_Filter = new wRP_StatusMatrix_Filter(this);
                }
                return this.mwRP_StatusMatrix_Filter;
            }
        }
        
        public wRP_ReportName wRP_ReportName
        {
            get
            {
                if ((this.mwRP_ReportName == null))
                {
                    this.mwRP_ReportName = new wRP_ReportName(this);
                }
                return this.mwRP_ReportName;
            }
        }
        
        public wRP_GenerateReport wRP_GenerateReport
        {
            get
            {
                if ((this.mwRP_GenerateReport == null))
                {
                    this.mwRP_GenerateReport = new wRP_GenerateReport(this);
                }
                return this.mwRP_GenerateReport;
            }
        }
        
        public wIP_Matching_MatchingResults wIP_Matching_MatchingResults
        {
            get
            {
                if ((this.mwIP_Matching_MatchingResults == null))
                {
                    this.mwIP_Matching_MatchingResults = new wIP_Matching_MatchingResults(this);
                }
                return this.mwIP_Matching_MatchingResults;
            }
        }
        
        public wOM_FPGrid wOM_FPGrid
        {
            get
            {
                if ((this.mwOM_FPGrid == null))
                {
                    this.mwOM_FPGrid = new wOM_FPGrid(this);
                }
                return this.mwOM_FPGrid;
            }
        }
        
        public wOM_FPGrid_Report wOM_FPGrid_Report
        {
            get
            {
                if ((this.mwOM_FPGrid_Report == null))
                {
                    this.mwOM_FPGrid_Report = new wOM_FPGrid_Report(this);
                }
                return this.mwOM_FPGrid_Report;
            }
        }
        
        public wIP_Columns wIP_Columns
        {
            get
            {
                if ((this.mwIP_Columns == null))
                {
                    this.mwIP_Columns = new wIP_Columns(this);
                }
                return this.mwIP_Columns;
            }
        }
        
        public wIP_Mapping_Preview wIP_Mapping_Preview
        {
            get
            {
                if ((this.mwIP_Mapping_Preview == null))
                {
                    this.mwIP_Mapping_Preview = new wIP_Mapping_Preview(this);
                }
                return this.mwIP_Mapping_Preview;
            }
        }
        
        public wCK_AllQuery wCK_AllQuery
        {
            get
            {
                if ((this.mwCK_AllQuery == null))
                {
                    this.mwCK_AllQuery = new wCK_AllQuery(this);
                }
                return this.mwCK_AllQuery;
            }
        }
        
        public wCK_AllPlug wCK_AllPlug
        {
            get
            {
                if ((this.mwCK_AllPlug == null))
                {
                    this.mwCK_AllPlug = new wCK_AllPlug(this);
                }
                return this.mwCK_AllPlug;
            }
        }
        
        public wCK_AllOK wCK_AllOK
        {
            get
            {
                if ((this.mwCK_AllOK == null))
                {
                    this.mwCK_AllOK = new wCK_AllOK(this);
                }
                return this.mwCK_AllOK;
            }
        }
        
        public wCK_Notes wCK_Notes
        {
            get
            {
                if ((this.mwCK_Notes == null))
                {
                    this.mwCK_Notes = new wCK_Notes(this);
                }
                return this.mwCK_Notes;
            }
        }
        
        public wCK_CheckResults wCK_CheckResults
        {
            get
            {
                if ((this.mwCK_CheckResults == null))
                {
                    this.mwCK_CheckResults = new wCK_CheckResults(this);
                }
                return this.mwCK_CheckResults;
            }
        }
        
        public wSIP_Process wSIP_Process
        {
            get
            {
                if ((this.mwSIP_Process == null))
                {
                    this.mwSIP_Process = new wSIP_Process(this);
                }
                return this.mwSIP_Process;
            }
        }
        
        public wBU_BatchUpdateName wBU_BatchUpdateName
        {
            get
            {
                if ((this.mwBU_BatchUpdateName == null))
                {
                    this.mwBU_BatchUpdateName = new wBU_BatchUpdateName(this);
                }
                return this.mwBU_BatchUpdateName;
            }
        }
        
        public wBU_SelectFieldstoUpdate wBU_SelectFieldstoUpdate
        {
            get
            {
                if ((this.mwBU_SelectFieldstoUpdate == null))
                {
                    this.mwBU_SelectFieldstoUpdate = new wBU_SelectFieldstoUpdate(this);
                }
                return this.mwBU_SelectFieldstoUpdate;
            }
        }
        
        public wBU_StandardorCustomFilter wBU_StandardorCustomFilter
        {
            get
            {
                if ((this.mwBU_StandardorCustomFilter == null))
                {
                    this.mwBU_StandardorCustomFilter = new wBU_StandardorCustomFilter(this);
                }
                return this.mwBU_StandardorCustomFilter;
            }
        }
        
        public wBU_CustomExpression wBU_CustomExpression
        {
            get
            {
                if ((this.mwBU_CustomExpression == null))
                {
                    this.mwBU_CustomExpression = new wBU_CustomExpression(this);
                }
                return this.mwBU_CustomExpression;
            }
        }
        
        public wBU_CustomExpressionFormula wBU_CustomExpressionFormula
        {
            get
            {
                if ((this.mwBU_CustomExpressionFormula == null))
                {
                    this.mwBU_CustomExpressionFormula = new wBU_CustomExpressionFormula(this);
                }
                return this.mwBU_CustomExpressionFormula;
            }
        }
        
        public wBU_CustomExpressionAccept wBU_CustomExpressionAccept
        {
            get
            {
                if ((this.mwBU_CustomExpressionAccept == null))
                {
                    this.mwBU_CustomExpressionAccept = new wBU_CustomExpressionAccept(this);
                }
                return this.mwBU_CustomExpressionAccept;
            }
        }
        
        public wBU_SavetoWarehouse wBU_SavetoWarehouse
        {
            get
            {
                if ((this.mwBU_SavetoWarehouse == null))
                {
                    this.mwBU_SavetoWarehouse = new wBU_SavetoWarehouse(this);
                }
                return this.mwBU_SavetoWarehouse;
            }
        }
        
        public wBU_Plug wBU_Plug
        {
            get
            {
                if ((this.mwBU_Plug == null))
                {
                    this.mwBU_Plug = new wBU_Plug(this);
                }
                return this.mwBU_Plug;
            }
        }
        
        public wBU_Correction wBU_Correction
        {
            get
            {
                if ((this.mwBU_Correction == null))
                {
                    this.mwBU_Correction = new wBU_Correction(this);
                }
                return this.mwBU_Correction;
            }
        }
        
        public wBU_FPGrid wBU_FPGrid
        {
            get
            {
                if ((this.mwBU_FPGrid == null))
                {
                    this.mwBU_FPGrid = new wBU_FPGrid(this);
                }
                return this.mwBU_FPGrid;
            }
        }
        
        public wBU_Apply wBU_Apply
        {
            get
            {
                if ((this.mwBU_Apply == null))
                {
                    this.mwBU_Apply = new wBU_Apply(this);
                }
                return this.mwBU_Apply;
            }
        }
        
        public wFL_AddFilter wFL_AddFilter
        {
            get
            {
                if ((this.mwFL_AddFilter == null))
                {
                    this.mwFL_AddFilter = new wFL_AddFilter(this);
                }
                return this.mwFL_AddFilter;
            }
        }
        
        public wFL_DeleteHighlightedFilter wFL_DeleteHighlightedFilter
        {
            get
            {
                if ((this.mwFL_DeleteHighlightedFilter == null))
                {
                    this.mwFL_DeleteHighlightedFilter = new wFL_DeleteHighlightedFilter(this);
                }
                return this.mwFL_DeleteHighlightedFilter;
            }
        }
        
        public wFL_FPGrid wFL_FPGrid
        {
            get
            {
                if ((this.mwFL_FPGrid == null))
                {
                    this.mwFL_FPGrid = new wFL_FPGrid(this);
                }
                return this.mwFL_FPGrid;
            }
        }
        
        public wDG_SelectFieldsForPreview wDG_SelectFieldsForPreview
        {
            get
            {
                if ((this.mwDG_SelectFieldsForPreview == null))
                {
                    this.mwDG_SelectFieldsForPreview = new wDG_SelectFieldsForPreview(this);
                }
                return this.mwDG_SelectFieldsForPreview;
            }
        }
        
        public wUndo_ShowHideUndoEntries wUndo_ShowHideUndoEntries
        {
            get
            {
                if ((this.mwUndo_ShowHideUndoEntries == null))
                {
                    this.mwUndo_ShowHideUndoEntries = new wUndo_ShowHideUndoEntries(this);
                }
                return this.mwUndo_ShowHideUndoEntries;
            }
        }
        
        public wUndo_Undo wUndo_Undo
        {
            get
            {
                if ((this.mwUndo_Undo == null))
                {
                    this.mwUndo_Undo = new wUndo_Undo(this);
                }
                return this.mwUndo_Undo;
            }
        }
        
        public wUndo_FPGrid wUndo_FPGrid
        {
            get
            {
                if ((this.mwUndo_FPGrid == null))
                {
                    this.mwUndo_FPGrid = new wUndo_FPGrid(this);
                }
                return this.mwUndo_FPGrid;
            }
        }
        
        public wOM_ExporttoExcel wOM_ExporttoExcel
        {
            get
            {
                if ((this.mwOM_ExporttoExcel == null))
                {
                    this.mwOM_ExporttoExcel = new wOM_ExporttoExcel(this);
                }
                return this.mwOM_ExporttoExcel;
            }
        }
        
        public wOM_TabPage wOM_TabPage
        {
            get
            {
                if ((this.mwOM_TabPage == null))
                {
                    this.mwOM_TabPage = new wOM_TabPage(this);
                }
                return this.mwOM_TabPage;
            }
        }
        
        public wCK_CheckResultsTab wCK_CheckResultsTab
        {
            get
            {
                if ((this.mwCK_CheckResultsTab == null))
                {
                    this.mwCK_CheckResultsTab = new wCK_CheckResultsTab(this);
                }
                return this.mwCK_CheckResultsTab;
            }
        }
        
        public wIP_SelectFile_SingleTab_cbo wIP_SelectFile_SingleTab_cbo
        {
            get
            {
                if ((this.mwIP_SelectFile_SingleTab_cbo == null))
                {
                    this.mwIP_SelectFile_SingleTab_cbo = new wIP_SelectFile_SingleTab_cbo(this);
                }
                return this.mwIP_SelectFile_SingleTab_cbo;
            }
        }
        
        public wBU_StandardorCustomFilter_cbo wBU_StandardorCustomFilter_cbo
        {
            get
            {
                if ((this.mwBU_StandardorCustomFilter_cbo == null))
                {
                    this.mwBU_StandardorCustomFilter_cbo = new wBU_StandardorCustomFilter_cbo(this);
                }
                return this.mwBU_StandardorCustomFilter_cbo;
            }
        }
        
        public wUpdateIncludedVOs wUpdateIncludedVOs
        {
            get
            {
                if ((this.mwUpdateIncludedVOs == null))
                {
                    this.mwUpdateIncludedVOs = new wUpdateIncludedVOs(this);
                }
                return this.mwUpdateIncludedVOs;
            }
        }
        
        public wFPGrid_VOsIncludedForService wFPGrid_VOsIncludedForService
        {
            get
            {
                if ((this.mwFPGrid_VOsIncludedForService == null))
                {
                    this.mwFPGrid_VOsIncludedForService = new wFPGrid_VOsIncludedForService(this);
                }
                return this.mwFPGrid_VOsIncludedForService;
            }
        }
        
        public wSP_Filter_________ wSP_Filter_________
        {
            get
            {
                if ((this.mwSP_Filter_________ == null))
                {
                    this.mwSP_Filter_________ = new wSP_Filter_________(this);
                }
                return this.mwSP_Filter_________;
            }
        }
        
        public wVU_Filter wVU_Filter
        {
            get
            {
                if ((this.mwVU_Filter == null))
                {
                    this.mwVU_Filter = new wVU_Filter(this);
                }
                return this.mwVU_Filter;
            }
        }
        
        public wVU_Apply wVU_Apply
        {
            get
            {
                if ((this.mwVU_Apply == null))
                {
                    this.mwVU_Apply = new wVU_Apply(this);
                }
                return this.mwVU_Apply;
            }
        }
        
        public wDG_SelectSampleRecords_Formula wDG_SelectSampleRecords_Formula
        {
            get
            {
                if ((this.mwDG_SelectSampleRecords_Formula == null))
                {
                    this.mwDG_SelectSampleRecords_Formula = new wDG_SelectSampleRecords_Formula(this);
                }
                return this.mwDG_SelectSampleRecords_Formula;
            }
        }
        
        public wDG_SelectSampleRecords_Apply wDG_SelectSampleRecords_Apply
        {
            get
            {
                if ((this.mwDG_SelectSampleRecords_Apply == null))
                {
                    this.mwDG_SelectSampleRecords_Apply = new wDG_SelectSampleRecords_Apply(this);
                }
                return this.mwDG_SelectSampleRecords_Apply;
            }
        }
        
        public wDG_SelectSampleRecords_Accept wDG_SelectSampleRecords_Accept
        {
            get
            {
                if ((this.mwDG_SelectSampleRecords_Accept == null))
                {
                    this.mwDG_SelectSampleRecords_Accept = new wDG_SelectSampleRecords_Accept(this);
                }
                return this.mwDG_SelectSampleRecords_Accept;
            }
        }
        
        public wVU_ViewSetName wVU_ViewSetName
        {
            get
            {
                if ((this.mwVU_ViewSetName == null))
                {
                    this.mwVU_ViewSetName = new wVU_ViewSetName(this);
                }
                return this.mwVU_ViewSetName;
            }
        }
        
        public wVU_SelectLabelsToView wVU_SelectLabelsToView
        {
            get
            {
                if ((this.mwVU_SelectLabelsToView == null))
                {
                    this.mwVU_SelectLabelsToView = new wVU_SelectLabelsToView(this);
                }
                return this.mwVU_SelectLabelsToView;
            }
        }
        
        public wIP_Matching_ImportFilter wIP_Matching_ImportFilter
        {
            get
            {
                if ((this.mwIP_Matching_ImportFilter == null))
                {
                    this.mwIP_Matching_ImportFilter = new wIP_Matching_ImportFilter(this);
                }
                return this.mwIP_Matching_ImportFilter;
            }
        }
        
        public wIP_Matching_WarehouseFilter wIP_Matching_WarehouseFilter
        {
            get
            {
                if ((this.mwIP_Matching_WarehouseFilter == null))
                {
                    this.mwIP_Matching_WarehouseFilter = new wIP_Matching_WarehouseFilter(this);
                }
                return this.mwIP_Matching_WarehouseFilter;
            }
        }
        
        public wVU_TabPage wVU_TabPage
        {
            get
            {
                if ((this.mwVU_TabPage == null))
                {
                    this.mwVU_TabPage = new wVU_TabPage(this);
                }
                return this.mwVU_TabPage;
            }
        }
        
        public wVU_GenerateSummary wVU_GenerateSummary
        {
            get
            {
                if ((this.mwVU_GenerateSummary == null))
                {
                    this.mwVU_GenerateSummary = new wVU_GenerateSummary(this);
                }
                return this.mwVU_GenerateSummary;
            }
        }
        
        public wVU_PrintToFile wVU_PrintToFile
        {
            get
            {
                if ((this.mwVU_PrintToFile == null))
                {
                    this.mwVU_PrintToFile = new wVU_PrintToFile(this);
                }
                return this.mwVU_PrintToFile;
            }
        }
        
        public wOM_FPGrid_SupportingInfo wOM_FPGrid_SupportingInfo
        {
            get
            {
                if ((this.mwOM_FPGrid_SupportingInfo == null))
                {
                    this.mwOM_FPGrid_SupportingInfo = new wOM_FPGrid_SupportingInfo(this);
                }
                return this.mwOM_FPGrid_SupportingInfo;
            }
        }
        
        public wSP_Preview_Next wSP_Preview_Next
        {
            get
            {
                if ((this.mwSP_Preview_Next == null))
                {
                    this.mwSP_Preview_Next = new wSP_Preview_Next(this);
                }
                return this.mwSP_Preview_Next;
            }
        }
        
        public wSP_Preview_Last wSP_Preview_Last
        {
            get
            {
                if ((this.mwSP_Preview_Last == null))
                {
                    this.mwSP_Preview_Last = new wSP_Preview_Last(this);
                }
                return this.mwSP_Preview_Last;
            }
        }
        
        public wVU_ViewAllManualChanges wVU_ViewAllManualChanges
        {
            get
            {
                if ((this.mwVU_ViewAllManualChanges == null))
                {
                    this.mwVU_ViewAllManualChanges = new wVU_ViewAllManualChanges(this);
                }
                return this.mwVU_ViewAllManualChanges;
            }
        }
        
        public wDG_PrintAll wDG_PrintAll
        {
            get
            {
                if ((this.mwDG_PrintAll == null))
                {
                    this.mwDG_PrintAll = new wDG_PrintAll(this);
                }
                return this.mwDG_PrintAll;
            }
        }
        
        public wDG_PrintToFile wDG_PrintToFile
        {
            get
            {
                if ((this.mwDG_PrintToFile == null))
                {
                    this.mwDG_PrintToFile = new wDG_PrintToFile(this);
                }
                return this.mwDG_PrintToFile;
            }
        }
        
        public wSP_TreeViewPrior wSP_TreeViewPrior
        {
            get
            {
                if ((this.mwSP_TreeViewPrior == null))
                {
                    this.mwSP_TreeViewPrior = new wSP_TreeViewPrior(this);
                }
                return this.mwSP_TreeViewPrior;
            }
        }
        
        public wOM_ExportAll wOM_ExportAll
        {
            get
            {
                if ((this.mwOM_ExportAll == null))
                {
                    this.mwOM_ExportAll = new wOM_ExportAll(this);
                }
                return this.mwOM_ExportAll;
            }
        }
        
        public wIP_VL_CorrectionImportForAdmin wIP_VL_CorrectionImportForAdmin
        {
            get
            {
                if ((this.mwIP_VL_CorrectionImportForAdmin == null))
                {
                    this.mwIP_VL_CorrectionImportForAdmin = new wIP_VL_CorrectionImportForAdmin(this);
                }
                return this.mwIP_VL_CorrectionImportForAdmin;
            }
        }
        
        public wIP_Mapping_ClearMappings wIP_Mapping_ClearMappings
        {
            get
            {
                if ((this.mwIP_Mapping_ClearMappings == null))
                {
                    this.mwIP_Mapping_ClearMappings = new wIP_Mapping_ClearMappings(this);
                }
                return this.mwIP_Mapping_ClearMappings;
            }
        }
        
        public wDG_NewVersion wDG_NewVersion
        {
            get
            {
                if ((this.mwDG_NewVersion == null))
                {
                    this.mwDG_NewVersion = new wDG_NewVersion(this);
                }
                return this.mwDG_NewVersion;
            }
        }
        
        public wVU_PrintAll wVU_PrintAll
        {
            get
            {
                if ((this.mwVU_PrintAll == null))
                {
                    this.mwVU_PrintAll = new wVU_PrintAll(this);
                }
                return this.mwVU_PrintAll;
            }
        }
        
        public wVU_SimpleQuery wVU_SimpleQuery
        {
            get
            {
                if ((this.mwVU_SimpleQuery == null))
                {
                    this.mwVU_SimpleQuery = new wVU_SimpleQuery(this);
                }
                return this.mwVU_SimpleQuery;
            }
        }
        
        public wVU_SimpleQuery_Field wVU_SimpleQuery_Field
        {
            get
            {
                if ((this.mwVU_SimpleQuery_Field == null))
                {
                    this.mwVU_SimpleQuery_Field = new wVU_SimpleQuery_Field(this);
                }
                return this.mwVU_SimpleQuery_Field;
            }
        }
        
        public wVU_SimpleQuery_Operator wVU_SimpleQuery_Operator
        {
            get
            {
                if ((this.mwVU_SimpleQuery_Operator == null))
                {
                    this.mwVU_SimpleQuery_Operator = new wVU_SimpleQuery_Operator(this);
                }
                return this.mwVU_SimpleQuery_Operator;
            }
        }
        
        public wVU_Simplequery_Value wVU_Simplequery_Value
        {
            get
            {
                if ((this.mwVU_Simplequery_Value == null))
                {
                    this.mwVU_Simplequery_Value = new wVU_Simplequery_Value(this);
                }
                return this.mwVU_Simplequery_Value;
            }
        }
        
        public wSI_Correction wSI_Correction
        {
            get
            {
                if ((this.mwSI_Correction == null))
                {
                    this.mwSI_Correction = new wSI_Correction(this);
                }
                return this.mwSI_Correction;
            }
        }
        
        public wSI_Plug wSI_Plug
        {
            get
            {
                if ((this.mwSI_Plug == null))
                {
                    this.mwSI_Plug = new wSI_Plug(this);
                }
                return this.mwSI_Plug;
            }
        }
        
        public wSI_NoFlag wSI_NoFlag
        {
            get
            {
                if ((this.mwSI_NoFlag == null))
                {
                    this.mwSI_NoFlag = new wSI_NoFlag(this);
                }
                return this.mwSI_NoFlag;
            }
        }
        
        public wCK_ResultsPreview_Total wCK_ResultsPreview_Total
        {
            get
            {
                if ((this.mwCK_ResultsPreview_Total == null))
                {
                    this.mwCK_ResultsPreview_Total = new wCK_ResultsPreview_Total(this);
                }
                return this.mwCK_ResultsPreview_Total;
            }
        }
        
        public wVU_IR_Grid wVU_IR_Grid
        {
            get
            {
                if ((this.mwVU_IR_Grid == null))
                {
                    this.mwVU_IR_Grid = new wVU_IR_Grid(this);
                }
                return this.mwVU_IR_Grid;
            }
        }
        
        public wIP_Matching_AcceptAllRecordsAs wIP_Matching_AcceptAllRecordsAs
        {
            get
            {
                if ((this.mwIP_Matching_AcceptAllRecordsAs == null))
                {
                    this.mwIP_Matching_AcceptAllRecordsAs = new wIP_Matching_AcceptAllRecordsAs(this);
                }
                return this.mwIP_Matching_AcceptAllRecordsAs;
            }
        }
        
        public wIP_Matching_AcceptSelectedRecordsAs wIP_Matching_AcceptSelectedRecordsAs
        {
            get
            {
                if ((this.mwIP_Matching_AcceptSelectedRecordsAs == null))
                {
                    this.mwIP_Matching_AcceptSelectedRecordsAs = new wIP_Matching_AcceptSelectedRecordsAs(this);
                }
                return this.mwIP_Matching_AcceptSelectedRecordsAs;
            }
        }
        
        public wSP_Filter wSP_Filter
        {
            get
            {
                if ((this.mwSP_Filter == null))
                {
                    this.mwSP_Filter = new wSP_Filter(this);
                }
                return this.mwSP_Filter;
            }
        }
        
        public wUD_RepositoryFileName wUD_RepositoryFileName
        {
            get
            {
                if ((this.mwUD_RepositoryFileName == null))
                {
                    this.mwUD_RepositoryFileName = new wUD_RepositoryFileName(this);
                }
                return this.mwUD_RepositoryFileName;
            }
        }
        
        public wIP_SelectFile_Delimiter wIP_SelectFile_Delimiter
        {
            get
            {
                if ((this.mwIP_SelectFile_Delimiter == null))
                {
                    this.mwIP_SelectFile_Delimiter = new wIP_SelectFile_Delimiter(this);
                }
                return this.mwIP_SelectFile_Delimiter;
            }
        }
        
        public wVU_FPGrid wVU_FPGrid
        {
            get
            {
                if ((this.mwVU_FPGrid == null))
                {
                    this.mwVU_FPGrid = new wVU_FPGrid(this);
                }
                return this.mwVU_FPGrid;
            }
        }
        
        public wVU_DataSummary_SelectTotalFields wVU_DataSummary_SelectTotalFields
        {
            get
            {
                if ((this.mwVU_DataSummary_SelectTotalFields == null))
                {
                    this.mwVU_DataSummary_SelectTotalFields = new wVU_DataSummary_SelectTotalFields(this);
                }
                return this.mwVU_DataSummary_SelectTotalFields;
            }
        }
        #endregion
        
        #region Fields
        private wFPGrid mwFPGrid;
        
        private wIP_Mapping_CopyMappings mwIP_Mapping_CopyMappings;
        
        private wCV_AddSingleLabel mwCV_AddSingleLabel;
        
        private wCV_AddMultipleLabels mwCV_AddMultipleLabels;
        
        private WinWindow mtvNaviTree;
        
        private wCV_EditSelection mwCV_EditSelection;
        
        private wUD_LocalFile mwUD_LocalFile;
        
        private wUD_GRSUnloadFile mwUD_GRSUnloadFile;
        
        private wUD_SharepointFile mwUD_SharepointFile;
        
        private wUD_Browse mwUD_Browse;
        
        private wUD_Upload mwUD_Upload;
        
        private wUD_RepositoryContents mwUD_RepositoryContents;
        
        private wIP_SelectFile_FileDefinitionName mwIP_SelectFile_FileDefinitionName;
        
        private wIP_SelectFile_FileType mwIP_SelectFile_FileType;
        
        private wIP_SelectFile_Preview mwIP_SelectFile_Preview;
        
        private wIP_Selectfile_Browse mwIP_Selectfile_Browse;
        
        private wIP_Tabs mwIP_Tabs;
        
        private wIP_Mapping_DockingWin mwIP_Mapping_DockingWin;
        
        private wIP_VL_LoadBlankData mwIP_VL_LoadBlankData;
        
        private wIP_VL_MatchingIsCaseSensitive mwIP_VL_MatchingIsCaseSensitive;
        
        private wIP_VL_IgnoreGoneRecordsForMatching mwIP_VL_IgnoreGoneRecordsForMatching;
        
        private wIP_VL_ValidateData mwIP_VL_ValidateData;
        
        private wIP_VL_LoadData mwIP_VL_LoadData;
        
        private wIP_VL_ValidateAndLoadData mwIP_VL_ValidateAndLoadData;
        
        private wIP_VL_Status mwIP_VL_Status;
        
        private wIP_Matching_FPGrid mwIP_Matching_FPGrid;
        
        private wIP_Matching_FindMatches mwIP_Matching_FindMatches;
        
        private wIP_Matching_MatchManually mwIP_Matching_MatchManually;
        
        private wIP_Matching_SaveToWarehouse mwIP_Matching_SaveToWarehouse;
        
        private wIP_Matching_UD_NoMatch mwIP_Matching_UD_NoMatch;
        
        private wIP_Matching_UD_UniqueMatch mwIP_Matching_UD_UniqueMatch;
        
        private wIP_Matching_UD_MultipleMatches mwIP_Matching_UD_MultipleMatches;
        
        private wIP_Matching_UD_NoMatch_Num mwIP_Matching_UD_NoMatch_Num;
        
        private wIP_Matching_UD_UniqueMatch_Num mwIP_Matching_UD_UniqueMatch_Num;
        
        private wIP_Matching_UD_MultipleMatches_Num mwIP_Matching_UD_MultipleMatches_Num;
        
        private wIP_Matching_WR_NoMatch mwIP_Matching_WR_NoMatch;
        
        private wIP_Matching_DD_NoMatch mwIP_Matching_DD_NoMatch;
        
        private wIP_Matching_DD_UniqueMatch mwIP_Matching_DD_UniqueMatch;
        
        private wIP_Matching_DD_MultipleMatches mwIP_Matching_DD_MultipleMatches;
        
        private wIP_Matching_DD_NoMatch_Num mwIP_Matching_DD_NoMatch_Num;
        
        private wIP_Matching_DD_UniqueMatch_Num mwIP_Matching_DD_UniqueMatch_Num;
        
        private wIP_Matching_DD_MultipleMatches_Num mwIP_Matching_DD_MultipleMatches_Num;
        
        private wIP_Matching_AR_Matched_Num mwIP_Matching_AR_Matched_Num;
        
        private wIP_Matching_AR_New_Num mwIP_Matching_AR_New_Num;
        
        private wIP_Matching_AR_Ignored_Num mwIP_Matching_AR_Ignored_Num;
        
        private wIP_Matching_AR_Gone_Num mwIP_Matching_AR_Gone_Num;
        
        private wIP_Matching_AR_Leaver_Num mwIP_Matching_AR_Leaver_Num;
        
        private wIP_Matching_AR_Unmatched_Num mwIP_Matching_AR_Unmatched_Num;
        
        private wIP_Matching_AR_Unmerged_Num mwIP_Matching_AR_Unmerged_Num;
        
        private wIP_Matching_RunCurrentStage mwIP_Matching_RunCurrentStage;
        
        private wIP_Matching_RunAllStages mwIP_Matching_RunAllStages;
        
        private wIP_Matching_AcceptAllRecordsAs__ mwIP_Matching_AcceptAllRecordsAs__;
        
        private wIP_Matching_AcceptSelectedRecordsAs__ mwIP_Matching_AcceptSelectedRecordsAs__;
        
        private wIP_Matching_WR_NoMatch_Num mwIP_Matching_WR_NoMatch_Num;
        
        private wIP_Matching_RefreshResults mwIP_Matching_RefreshResults;
        
        private wIP_Matching_UnacceptAllRecords mwIP_Matching_UnacceptAllRecords;
        
        private wIP_Matching_UnacceptSelectedRecords mwIP_Matching_UnacceptSelectedRecords;
        
        private wIP_Matching_MergeDuplicates mwIP_Matching_MergeDuplicates;
        
        private wDG_DerivationGroupName mwDG_DerivationGroupName;
        
        private wDG_Filter mwDG_Filter;
        
        private wDG_Add mwDG_Add;
        
        private wDG_Delete mwDG_Delete;
        
        private wDG_Insert mwDG_Insert;
        
        private wDG_AddWorkFields mwDG_AddWorkFields;
        
        private wDG_CalculateAndPreview mwDG_CalculateAndPreview;
        
        private wDG_SaveToWarehouse mwDG_SaveToWarehouse;
        
        private wDG_MoveUp mwDG_MoveUp;
        
        private wDG_MoveDown mwDG_MoveDown;
        
        private wDG_FPGrid mwDG_FPGrid;
        
        private wSP_SnapshotName mwSP_SnapshotName;
        
        private wSP_UseLatestDate mwSP_UseLatestDate;
        
        private wSP_PublishSnapshot mwSP_PublishSnapshot;
        
        private wSP_CreateExtract mwSP_CreateExtract;
        
        private wSP_Preview mwSP_Preview;
        
        private wSP_TreeViewCurrent mwSP_TreeViewCurrent;
        
        private wCK_StandardInputs mwCK_StandardInputs;
        
        private wCK_AddCustomGroup mwCK_AddCustomGroup;
        
        private wCK_AddCheck mwCK_AddCheck;
        
        private wCK_ApplyChecks mwCK_ApplyChecks;
        
        private wCK_ClearAllResults mwCK_ClearAllResults;
        
        private wCK_FPGrid mwCK_FPGrid;
        
        private wSM_CreateMatrix mwSM_CreateMatrix;
        
        private wRP_Checks mwRP_Checks;
        
        private wRP_Checks_Filter mwRP_Checks_Filter;
        
        private wRP_StatusMatrix mwRP_StatusMatrix;
        
        private wRP_StatusMatrix_Filter mwRP_StatusMatrix_Filter;
        
        private wRP_ReportName mwRP_ReportName;
        
        private wRP_GenerateReport mwRP_GenerateReport;
        
        private wIP_Matching_MatchingResults mwIP_Matching_MatchingResults;
        
        private wOM_FPGrid mwOM_FPGrid;
        
        private wOM_FPGrid_Report mwOM_FPGrid_Report;
        
        private wIP_Columns mwIP_Columns;
        
        private wIP_Mapping_Preview mwIP_Mapping_Preview;
        
        private wCK_AllQuery mwCK_AllQuery;
        
        private wCK_AllPlug mwCK_AllPlug;
        
        private wCK_AllOK mwCK_AllOK;
        
        private wCK_Notes mwCK_Notes;
        
        private wCK_CheckResults mwCK_CheckResults;
        
        private wSIP_Process mwSIP_Process;
        
        private wBU_BatchUpdateName mwBU_BatchUpdateName;
        
        private wBU_SelectFieldstoUpdate mwBU_SelectFieldstoUpdate;
        
        private wBU_StandardorCustomFilter mwBU_StandardorCustomFilter;
        
        private wBU_CustomExpression mwBU_CustomExpression;
        
        private wBU_CustomExpressionFormula mwBU_CustomExpressionFormula;
        
        private wBU_CustomExpressionAccept mwBU_CustomExpressionAccept;
        
        private wBU_SavetoWarehouse mwBU_SavetoWarehouse;
        
        private wBU_Plug mwBU_Plug;
        
        private wBU_Correction mwBU_Correction;
        
        private wBU_FPGrid mwBU_FPGrid;
        
        private wBU_Apply mwBU_Apply;
        
        private wFL_AddFilter mwFL_AddFilter;
        
        private wFL_DeleteHighlightedFilter mwFL_DeleteHighlightedFilter;
        
        private wFL_FPGrid mwFL_FPGrid;
        
        private wDG_SelectFieldsForPreview mwDG_SelectFieldsForPreview;
        
        private wUndo_ShowHideUndoEntries mwUndo_ShowHideUndoEntries;
        
        private wUndo_Undo mwUndo_Undo;
        
        private wUndo_FPGrid mwUndo_FPGrid;
        
        private wOM_ExporttoExcel mwOM_ExporttoExcel;
        
        private wOM_TabPage mwOM_TabPage;
        
        private wCK_CheckResultsTab mwCK_CheckResultsTab;
        
        private wIP_SelectFile_SingleTab_cbo mwIP_SelectFile_SingleTab_cbo;
        
        private wBU_StandardorCustomFilter_cbo mwBU_StandardorCustomFilter_cbo;
        
        private wUpdateIncludedVOs mwUpdateIncludedVOs;
        
        private wFPGrid_VOsIncludedForService mwFPGrid_VOsIncludedForService;
        
        private wSP_Filter_________ mwSP_Filter_________;
        
        private wVU_Filter mwVU_Filter;
        
        private wVU_Apply mwVU_Apply;
        
        private wDG_SelectSampleRecords_Formula mwDG_SelectSampleRecords_Formula;
        
        private wDG_SelectSampleRecords_Apply mwDG_SelectSampleRecords_Apply;
        
        private wDG_SelectSampleRecords_Accept mwDG_SelectSampleRecords_Accept;
        
        private wVU_ViewSetName mwVU_ViewSetName;
        
        private wVU_SelectLabelsToView mwVU_SelectLabelsToView;
        
        private wIP_Matching_ImportFilter mwIP_Matching_ImportFilter;
        
        private wIP_Matching_WarehouseFilter mwIP_Matching_WarehouseFilter;
        
        private wVU_TabPage mwVU_TabPage;
        
        private wVU_GenerateSummary mwVU_GenerateSummary;
        
        private wVU_PrintToFile mwVU_PrintToFile;
        
        private wOM_FPGrid_SupportingInfo mwOM_FPGrid_SupportingInfo;
        
        private wSP_Preview_Next mwSP_Preview_Next;
        
        private wSP_Preview_Last mwSP_Preview_Last;
        
        private wVU_ViewAllManualChanges mwVU_ViewAllManualChanges;
        
        private wDG_PrintAll mwDG_PrintAll;
        
        private wDG_PrintToFile mwDG_PrintToFile;
        
        private wSP_TreeViewPrior mwSP_TreeViewPrior;
        
        private wOM_ExportAll mwOM_ExportAll;
        
        private wIP_VL_CorrectionImportForAdmin mwIP_VL_CorrectionImportForAdmin;
        
        private wIP_Mapping_ClearMappings mwIP_Mapping_ClearMappings;
        
        private wDG_NewVersion mwDG_NewVersion;
        
        private wVU_PrintAll mwVU_PrintAll;
        
        private wVU_SimpleQuery mwVU_SimpleQuery;
        
        private wVU_SimpleQuery_Field mwVU_SimpleQuery_Field;
        
        private wVU_SimpleQuery_Operator mwVU_SimpleQuery_Operator;
        
        private wVU_Simplequery_Value mwVU_Simplequery_Value;
        
        private wSI_Correction mwSI_Correction;
        
        private wSI_Plug mwSI_Plug;
        
        private wSI_NoFlag mwSI_NoFlag;
        
        private wCK_ResultsPreview_Total mwCK_ResultsPreview_Total;
        
        private wVU_IR_Grid mwVU_IR_Grid;
        
        private wIP_Matching_AcceptAllRecordsAs mwIP_Matching_AcceptAllRecordsAs;
        
        private wIP_Matching_AcceptSelectedRecordsAs mwIP_Matching_AcceptSelectedRecordsAs;
        
        private wSP_Filter mwSP_Filter;
        
        private wUD_RepositoryFileName mwUD_RepositoryFileName;
        
        private wIP_SelectFile_Delimiter mwIP_SelectFile_Delimiter;
        
        private wVU_FPGrid mwVU_FPGrid;
        
        private wVU_DataSummary_SelectTotalFields mwVU_DataSummary_SelectTotalFields;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid : WinWindow
    {
        
        public wFPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_grid";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Mapping_CopyMappings : WinWindow
    {
        
        public wIP_Mapping_CopyMappings(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonCopyMappings";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Copy Mappings...";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCV_AddSingleLabel : WinWindow
    {
        
        public wCV_AddSingleLabel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "addLabelButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddSingleLabel
        {
            get
            {
                if ((this.mbtnAddSingleLabel == null))
                {
                    this.mbtnAddSingleLabel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddSingleLabel.SearchProperties[WinButton.PropertyNames.Name] = "Add single label";
                    this.mbtnAddSingleLabel.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddSingleLabel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddSingleLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCV_AddMultipleLabels : WinWindow
    {
        
        public wCV_AddMultipleLabels(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "addMultiLabelButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddMultipleLabels
        {
            get
            {
                if ((this.mbtnAddMultipleLabels == null))
                {
                    this.mbtnAddMultipleLabels = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddMultipleLabels.SearchProperties[WinButton.PropertyNames.Name] = "Add multiple labels";
                    this.mbtnAddMultipleLabels.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddMultipleLabels;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddMultipleLabels;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCV_EditSelection : WinWindow
    {
        
        public wCV_EditSelection(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "editSelectionsButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnEditSelection
        {
            get
            {
                if ((this.mbtnEditSelection == null))
                {
                    this.mbtnEditSelection = new WinButton(this);
                    #region Search Criteria
                    this.mbtnEditSelection.SearchProperties[WinButton.PropertyNames.Name] = "Edit selections";
                    this.mbtnEditSelection.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnEditSelection;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnEditSelection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUD_LocalFile : WinWindow
    {
        
        public wUD_LocalFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbLocalFile";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdLocalFile
        {
            get
            {
                if ((this.mrdLocalFile == null))
                {
                    this.mrdLocalFile = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdLocalFile.SearchProperties[WinRadioButton.PropertyNames.Name] = "Local File";
                    this.mrdLocalFile.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdLocalFile;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdLocalFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUD_GRSUnloadFile : WinWindow
    {
        
        public wUD_GRSUnloadFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbGRSFile";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdGRSUnloadFile
        {
            get
            {
                if ((this.mrdGRSUnloadFile == null))
                {
                    this.mrdGRSUnloadFile = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdGRSUnloadFile.SearchProperties[WinRadioButton.PropertyNames.Name] = "GRS Unload File";
                    this.mrdGRSUnloadFile.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdGRSUnloadFile;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdGRSUnloadFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUD_SharepointFile : WinWindow
    {
        
        public wUD_SharepointFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbSharepointFile";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdSharepointFile
        {
            get
            {
                if ((this.mrdSharepointFile == null))
                {
                    this.mrdSharepointFile = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdSharepointFile.SearchProperties[WinRadioButton.PropertyNames.Name] = "Sharepoint File";
                    this.mrdSharepointFile.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdSharepointFile;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdSharepointFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUD_Browse : WinWindow
    {
        
        public wUD_Browse(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPickFile";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnBrowse
        {
            get
            {
                if ((this.mbtnBrowse == null))
                {
                    this.mbtnBrowse = new WinButton(this);
                    #region Search Criteria
                    this.mbtnBrowse.SearchProperties[WinButton.PropertyNames.Name] = "Browse...";
                    this.mbtnBrowse.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnBrowse;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnBrowse;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUD_Upload : WinWindow
    {
        
        public wUD_Upload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnUpload";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnUpload
        {
            get
            {
                if ((this.mbtnUpload == null))
                {
                    this.mbtnUpload = new WinButton(this);
                    #region Search Criteria
                    this.mbtnUpload.SearchProperties[WinButton.PropertyNames.Name] = "Upload";
                    this.mbtnUpload.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnUpload;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnUpload;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUD_RepositoryContents : WinWindow
    {
        
        public wUD_RepositoryContents(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgRepositoryData";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tbl_RepositoryContents tbl_RepositoryContents
        {
            get
            {
                if ((this.mtbl_RepositoryContents == null))
                {
                    this.mtbl_RepositoryContents = new tbl_RepositoryContents(this);
                }
                return this.mtbl_RepositoryContents;
            }
        }
        #endregion
        
        #region Fields
        private tbl_RepositoryContents mtbl_RepositoryContents;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tbl_RepositoryContents : WinTable
    {
        
        public tbl_RepositoryContents(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIRow0Row UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row(this);
                }
                return this.mUIRow0Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row mUIRow0Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRow0Row : WinRow
    {
        
        public UIRow0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "DR010B03.DAT;1/1/2010;4/24/2013;Mercer\\webber-ling;\\\\mercer.com\\US_Data\\Shared\\DF" +
                "L\\Data1\\RSS\\GRS\\grsstu\\CLIENTS\\L0000281\\K0000001\\DR010B03.DAT;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCell UIDR010B03DATCell
        {
            get
            {
                if ((this.mUIDR010B03DATCell == null))
                {
                    this.mUIDR010B03DATCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIDR010B03DATCell.SearchProperties[WinCell.PropertyNames.Value] = "DR010B03.DAT";
                    this.mUIDR010B03DATCell.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIDR010B03DATCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIDR010B03DATCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_SelectFile_FileDefinitionName : WinWindow
    {
        
        public wIP_SelectFile_FileDefinitionName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameTextBox";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFileDefinitionName
        {
            get
            {
                if ((this.mtxtFileDefinitionName == null))
                {
                    this.mtxtFileDefinitionName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFileDefinitionName.SearchProperties[WinEdit.PropertyNames.Name] = "File Definition Name:";
                    this.mtxtFileDefinitionName.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtFileDefinitionName.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtFileDefinitionName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFileDefinitionName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_SelectFile_FileType : WinWindow
    {
        
        public wIP_SelectFile_FileType(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fileTypeComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboFileType
        {
            get
            {
                if ((this.mcboFileType == null))
                {
                    this.mcboFileType = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboFileType.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboFileType.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboFileType;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboFileType;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_SelectFile_Preview : WinWindow
    {
        
        public wIP_SelectFile_Preview(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ControlName, "preview", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnPreview
        {
            get
            {
                if ((this.mbtnPreview == null))
                {
                    this.mbtnPreview = new WinButton(this);
                    #region Search Criteria
                    this.mbtnPreview.SearchProperties[WinButton.PropertyNames.Name] = "Preview";
                    this.mbtnPreview.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnPreview.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnPreview;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnPreview;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Selectfile_Browse : WinWindow
    {
        
        public wIP_Selectfile_Browse(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "browseFileButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnBrowse
        {
            get
            {
                if ((this.mbtnBrowse == null))
                {
                    this.mbtnBrowse = new WinButton(this);
                    #region Search Criteria
                    this.mbtnBrowse.SearchProperties[WinButton.PropertyNames.Name] = "Browse";
                    this.mbtnBrowse.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnBrowse.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnBrowse;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnBrowse;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Tabs : WinWindow
    {
        
        public wIP_Tabs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ImportWorkspace";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage UISelectFileTabPage
        {
            get
            {
                if ((this.mUISelectFileTabPage == null))
                {
                    this.mUISelectFileTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUISelectFileTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Select File";
                    this.mUISelectFileTabPage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUISelectFileTabPage;
            }
        }
        
        public WinTabPage UIValidateLoadTabPage
        {
            get
            {
                if ((this.mUIValidateLoadTabPage == null))
                {
                    this.mUIValidateLoadTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIValidateLoadTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Validate & Load";
                    this.mUIValidateLoadTabPage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIValidateLoadTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUISelectFileTabPage;
        
        private WinTabPage mUIValidateLoadTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Mapping_DockingWin : WinWindow
    {
        
        public wIP_Mapping_DockingWin(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "windowDockingArea1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient wDockingWin
        {
            get
            {
                if ((this.mwDockingWin == null))
                {
                    this.mwDockingWin = new WinClient(this);
                    #region Search Criteria
                    this.mwDockingWin.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mwDockingWin.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mwDockingWin;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mwDockingWin;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_VL_LoadBlankData : WinWindow
    {
        
        public wIP_VL_LoadBlankData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "loadBlankCheckBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkLoadBlankData
        {
            get
            {
                if ((this.mchkLoadBlankData == null))
                {
                    this.mchkLoadBlankData = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkLoadBlankData.SearchProperties[WinCheckBox.PropertyNames.Name] = "Load blank data";
                    this.mchkLoadBlankData.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkLoadBlankData.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkLoadBlankData;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkLoadBlankData;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_VL_MatchingIsCaseSensitive : WinWindow
    {
        
        public wIP_VL_MatchingIsCaseSensitive(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkMatchCaseSensitive";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkMatchingIsCaseSensitive
        {
            get
            {
                if ((this.mchkMatchingIsCaseSensitive == null))
                {
                    this.mchkMatchingIsCaseSensitive = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkMatchingIsCaseSensitive.SearchProperties[WinCheckBox.PropertyNames.Name] = "Matching is case sensitive";
                    this.mchkMatchingIsCaseSensitive.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkMatchingIsCaseSensitive.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkMatchingIsCaseSensitive;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkMatchingIsCaseSensitive;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_VL_IgnoreGoneRecordsForMatching : WinWindow
    {
        
        public wIP_VL_IgnoreGoneRecordsForMatching(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkFilterGone";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkIgnoreGoneRecordsForMatching
        {
            get
            {
                if ((this.mchkIgnoreGoneRecordsForMatching == null))
                {
                    this.mchkIgnoreGoneRecordsForMatching = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkIgnoreGoneRecordsForMatching.SearchProperties[WinCheckBox.PropertyNames.Name] = "Ignore gone records for matching";
                    this.mchkIgnoreGoneRecordsForMatching.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkIgnoreGoneRecordsForMatching.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkIgnoreGoneRecordsForMatching;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkIgnoreGoneRecordsForMatching;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_VL_ValidateData : WinWindow
    {
        
        public wIP_VL_ValidateData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonValidate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnValidateData
        {
            get
            {
                if ((this.mbtnValidateData == null))
                {
                    this.mbtnValidateData = new WinButton(this);
                    #region Search Criteria
                    this.mbtnValidateData.SearchProperties[WinButton.PropertyNames.Name] = "Validate Data";
                    this.mbtnValidateData.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnValidateData.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnValidateData;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnValidateData;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_VL_LoadData : WinWindow
    {
        
        public wIP_VL_LoadData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonLoad";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnLoadData
        {
            get
            {
                if ((this.mbtnLoadData == null))
                {
                    this.mbtnLoadData = new WinButton(this);
                    #region Search Criteria
                    this.mbtnLoadData.SearchProperties[WinButton.PropertyNames.Name] = "Load Data";
                    this.mbtnLoadData.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnLoadData.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnLoadData;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnLoadData;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_VL_ValidateAndLoadData : WinWindow
    {
        
        public wIP_VL_ValidateAndLoadData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "loadAndValidateButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnValidateAndLoadData
        {
            get
            {
                if ((this.mbtnValidateAndLoadData == null))
                {
                    this.mbtnValidateAndLoadData = new WinButton(this);
                    #region Search Criteria
                    this.mbtnValidateAndLoadData.SearchProperties[WinButton.PropertyNames.Name] = "Validate and Load Data";
                    this.mbtnValidateAndLoadData.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnValidateAndLoadData.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnValidateAndLoadData;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnValidateAndLoadData;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_VL_Status : WinWindow
    {
        
        public wIP_VL_Status(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "loadStatusLabel2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtStatus
        {
            get
            {
                if ((this.mtxtStatus == null))
                {
                    this.mtxtStatus = new WinText(this);
                    #region Search Criteria
                    this.mtxtStatus.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtStatus.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtStatus;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtStatus;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_FPGrid : WinWindow
    {
        
        public wIP_Matching_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpSpreadMatching";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_FindMatches : WinWindow
    {
        
        public wIP_Matching_FindMatches(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnFindMatches";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnFindMatches
        {
            get
            {
                if ((this.mbtnFindMatches == null))
                {
                    this.mbtnFindMatches = new WinButton(this);
                    #region Search Criteria
                    this.mbtnFindMatches.SearchProperties[WinButton.PropertyNames.Name] = "Find Matches";
                    this.mbtnFindMatches.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnFindMatches.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnFindMatches;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnFindMatches;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_MatchManually : WinWindow
    {
        
        public wIP_Matching_MatchManually(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnMatchManually";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnMatchManually
        {
            get
            {
                if ((this.mbtnMatchManually == null))
                {
                    this.mbtnMatchManually = new WinButton(this);
                    #region Search Criteria
                    this.mbtnMatchManually.SearchProperties[WinButton.PropertyNames.Name] = "Match Manually";
                    this.mbtnMatchManually.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnMatchManually.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnMatchManually;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnMatchManually;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_SaveToWarehouse : WinWindow
    {
        
        public wIP_Matching_SaveToWarehouse(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnProcessAcceptedResults";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnSaveToWarehouse
        {
            get
            {
                if ((this.mbtnSaveToWarehouse == null))
                {
                    this.mbtnSaveToWarehouse = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSaveToWarehouse.SearchProperties[WinButton.PropertyNames.Name] = "Save to Warehouse";
                    this.mbtnSaveToWarehouse.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnSaveToWarehouse;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSaveToWarehouse;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_UD_NoMatch : WinWindow
    {
        
        public wIP_Matching_UD_NoMatch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "uniqueNoMatchNameLink";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtNoMatch txtNoMatch
        {
            get
            {
                if ((this.mtxtNoMatch == null))
                {
                    this.mtxtNoMatch = new txtNoMatch(this);
                }
                return this.mtxtNoMatch;
            }
        }
        #endregion
        
        #region Fields
        private txtNoMatch mtxtNoMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtNoMatch : WinText
    {
        
        public txtNoMatch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "No Match:";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkNoMatch
        {
            get
            {
                if ((this.mlinkNoMatch == null))
                {
                    this.mlinkNoMatch = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkNoMatch.SearchProperties[WinHyperlink.PropertyNames.Name] = "No Match:";
                    this.mlinkNoMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlinkNoMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkNoMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_UD_UniqueMatch : WinWindow
    {
        
        public wIP_Matching_UD_UniqueMatch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "uniqueUniqueMatchNameLink";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtUniqueMatch txtUniqueMatch
        {
            get
            {
                if ((this.mtxtUniqueMatch == null))
                {
                    this.mtxtUniqueMatch = new txtUniqueMatch(this);
                }
                return this.mtxtUniqueMatch;
            }
        }
        #endregion
        
        #region Fields
        private txtUniqueMatch mtxtUniqueMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtUniqueMatch : WinText
    {
        
        public txtUniqueMatch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Unique Match";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkUniqueMatch
        {
            get
            {
                if ((this.mlinkUniqueMatch == null))
                {
                    this.mlinkUniqueMatch = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkUniqueMatch.SearchProperties[WinHyperlink.PropertyNames.Name] = "Unique Match";
                    this.mlinkUniqueMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlinkUniqueMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkUniqueMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_UD_MultipleMatches : WinWindow
    {
        
        public wIP_Matching_UD_MultipleMatches(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "uniqueMultipleMatchesNameLink";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtMultipleMatches txtMultipleMatches
        {
            get
            {
                if ((this.mtxtMultipleMatches == null))
                {
                    this.mtxtMultipleMatches = new txtMultipleMatches(this);
                }
                return this.mtxtMultipleMatches;
            }
        }
        #endregion
        
        #region Fields
        private txtMultipleMatches mtxtMultipleMatches;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtMultipleMatches : WinText
    {
        
        public txtMultipleMatches(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Multiple Matches";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkMultipleMatches
        {
            get
            {
                if ((this.mlinkMultipleMatches == null))
                {
                    this.mlinkMultipleMatches = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkMultipleMatches.SearchProperties[WinHyperlink.PropertyNames.Name] = "Multiple Matches";
                    this.mlinkMultipleMatches.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlinkMultipleMatches;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkMultipleMatches;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_UD_NoMatch_Num : WinWindow
    {
        
        public wIP_Matching_UD_NoMatch_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "uniqueNoMatchCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtNoMatch
        {
            get
            {
                if ((this.mtxtNoMatch == null))
                {
                    this.mtxtNoMatch = new WinText(this);
                    #region Search Criteria
                    this.mtxtNoMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtNoMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtNoMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_UD_UniqueMatch_Num : WinWindow
    {
        
        public wIP_Matching_UD_UniqueMatch_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "uniqueUniqueMatchCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtUniqueMatch
        {
            get
            {
                if ((this.mtxtUniqueMatch == null))
                {
                    this.mtxtUniqueMatch = new WinText(this);
                    #region Search Criteria
                    this.mtxtUniqueMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtUniqueMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtUniqueMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_UD_MultipleMatches_Num : WinWindow
    {
        
        public wIP_Matching_UD_MultipleMatches_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "uniqueMultipleMatchesCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtMultipleMatches
        {
            get
            {
                if ((this.mtxtMultipleMatches == null))
                {
                    this.mtxtMultipleMatches = new WinText(this);
                    #region Search Criteria
                    this.mtxtMultipleMatches.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtMultipleMatches;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMultipleMatches;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_WR_NoMatch : WinWindow
    {
        
        public wIP_Matching_WR_NoMatch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "unmatchedInWarehouseNameLink";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtNoMatch1 txtNoMatch
        {
            get
            {
                if ((this.mtxtNoMatch == null))
                {
                    this.mtxtNoMatch = new txtNoMatch1(this);
                }
                return this.mtxtNoMatch;
            }
        }
        #endregion
        
        #region Fields
        private txtNoMatch1 mtxtNoMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtNoMatch1 : WinText
    {
        
        public txtNoMatch1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "No Match";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkNoMatch
        {
            get
            {
                if ((this.mlinkNoMatch == null))
                {
                    this.mlinkNoMatch = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkNoMatch.SearchProperties[WinHyperlink.PropertyNames.Name] = "No Match";
                    this.mlinkNoMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlinkNoMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkNoMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_DD_NoMatch : WinWindow
    {
        
        public wIP_Matching_DD_NoMatch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "duplicateNoMatchNameLink";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtNoMatch2 txtNoMatch
        {
            get
            {
                if ((this.mtxtNoMatch == null))
                {
                    this.mtxtNoMatch = new txtNoMatch2(this);
                }
                return this.mtxtNoMatch;
            }
        }
        #endregion
        
        #region Fields
        private txtNoMatch2 mtxtNoMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtNoMatch2 : WinText
    {
        
        public txtNoMatch2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "No Match";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkNoMatch
        {
            get
            {
                if ((this.mlinkNoMatch == null))
                {
                    this.mlinkNoMatch = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkNoMatch.SearchProperties[WinHyperlink.PropertyNames.Name] = "No Match";
                    this.mlinkNoMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlinkNoMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkNoMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_DD_UniqueMatch : WinWindow
    {
        
        public wIP_Matching_DD_UniqueMatch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "duplicateUniqueMatchNameLink";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtUniqueMatch1 txtUniqueMatch
        {
            get
            {
                if ((this.mtxtUniqueMatch == null))
                {
                    this.mtxtUniqueMatch = new txtUniqueMatch1(this);
                }
                return this.mtxtUniqueMatch;
            }
        }
        #endregion
        
        #region Fields
        private txtUniqueMatch1 mtxtUniqueMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtUniqueMatch1 : WinText
    {
        
        public txtUniqueMatch1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Unique Match";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkUniqueMatch
        {
            get
            {
                if ((this.mlinkUniqueMatch == null))
                {
                    this.mlinkUniqueMatch = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkUniqueMatch.SearchProperties[WinHyperlink.PropertyNames.Name] = "Unique Match";
                    this.mlinkUniqueMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlinkUniqueMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkUniqueMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_DD_MultipleMatches : WinWindow
    {
        
        public wIP_Matching_DD_MultipleMatches(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "duplicateMultipleMatchesNameLink";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtMultipleMatches1 txtMultipleMatches
        {
            get
            {
                if ((this.mtxtMultipleMatches == null))
                {
                    this.mtxtMultipleMatches = new txtMultipleMatches1(this);
                }
                return this.mtxtMultipleMatches;
            }
        }
        #endregion
        
        #region Fields
        private txtMultipleMatches1 mtxtMultipleMatches;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtMultipleMatches1 : WinText
    {
        
        public txtMultipleMatches1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Multiple Matches";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkMultipleMatches
        {
            get
            {
                if ((this.mlinkMultipleMatches == null))
                {
                    this.mlinkMultipleMatches = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkMultipleMatches.SearchProperties[WinHyperlink.PropertyNames.Name] = "Multiple Matches";
                    this.mlinkMultipleMatches.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlinkMultipleMatches;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkMultipleMatches;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_DD_NoMatch_Num : WinWindow
    {
        
        public wIP_Matching_DD_NoMatch_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "duplicateNoMatchCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtNoMatch
        {
            get
            {
                if ((this.mtxtNoMatch == null))
                {
                    this.mtxtNoMatch = new WinText(this);
                    #region Search Criteria
                    this.mtxtNoMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtNoMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtNoMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_DD_UniqueMatch_Num : WinWindow
    {
        
        public wIP_Matching_DD_UniqueMatch_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "duplicateUniqueMatchCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtUniqueMatch
        {
            get
            {
                if ((this.mtxtUniqueMatch == null))
                {
                    this.mtxtUniqueMatch = new WinText(this);
                    #region Search Criteria
                    this.mtxtUniqueMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtUniqueMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtUniqueMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_DD_MultipleMatches_Num : WinWindow
    {
        
        public wIP_Matching_DD_MultipleMatches_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "duplicateMultipleMatchesCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtMultipleMatches
        {
            get
            {
                if ((this.mtxtMultipleMatches == null))
                {
                    this.mtxtMultipleMatches = new WinText(this);
                    #region Search Criteria
                    this.mtxtMultipleMatches.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtMultipleMatches;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMultipleMatches;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AR_Matched_Num : WinWindow
    {
        
        public wIP_Matching_AR_Matched_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptedMatchedCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtMatched
        {
            get
            {
                if ((this.mtxtMatched == null))
                {
                    this.mtxtMatched = new WinText(this);
                    #region Search Criteria
                    this.mtxtMatched.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtMatched;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMatched;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AR_New_Num : WinWindow
    {
        
        public wIP_Matching_AR_New_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptedNewCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtNew
        {
            get
            {
                if ((this.mtxtNew == null))
                {
                    this.mtxtNew = new WinText(this);
                    #region Search Criteria
                    this.mtxtNew.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtNew;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtNew;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AR_Ignored_Num : WinWindow
    {
        
        public wIP_Matching_AR_Ignored_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptedIgnoredCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtIgnored
        {
            get
            {
                if ((this.mtxtIgnored == null))
                {
                    this.mtxtIgnored = new WinText(this);
                    #region Search Criteria
                    this.mtxtIgnored.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtIgnored;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtIgnored;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AR_Gone_Num : WinWindow
    {
        
        public wIP_Matching_AR_Gone_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptedGoneCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtGone
        {
            get
            {
                if ((this.mtxtGone == null))
                {
                    this.mtxtGone = new WinText(this);
                    #region Search Criteria
                    this.mtxtGone.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtGone;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtGone;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AR_Leaver_Num : WinWindow
    {
        
        public wIP_Matching_AR_Leaver_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptedLeaverCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtLeaver
        {
            get
            {
                if ((this.mtxtLeaver == null))
                {
                    this.mtxtLeaver = new WinText(this);
                    #region Search Criteria
                    this.mtxtLeaver.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtLeaver;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtLeaver;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AR_Unmatched_Num : WinWindow
    {
        
        public wIP_Matching_AR_Unmatched_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptedUnmatchedCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtUnmatched
        {
            get
            {
                if ((this.mtxtUnmatched == null))
                {
                    this.mtxtUnmatched = new WinText(this);
                    #region Search Criteria
                    this.mtxtUnmatched.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtUnmatched;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtUnmatched;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AR_Unmerged_Num : WinWindow
    {
        
        public wIP_Matching_AR_Unmerged_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptedUnmergedCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtUnmerged
        {
            get
            {
                if ((this.mtxtUnmerged == null))
                {
                    this.mtxtUnmerged = new WinText(this);
                    #region Search Criteria
                    this.mtxtUnmerged.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtUnmerged;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtUnmerged;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_RunCurrentStage : WinWindow
    {
        
        public wIP_Matching_RunCurrentStage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRunCurrentStage";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnRunCurrentStage
        {
            get
            {
                if ((this.mbtnRunCurrentStage == null))
                {
                    this.mbtnRunCurrentStage = new WinButton(this);
                    #region Search Criteria
                    this.mbtnRunCurrentStage.SearchProperties[WinButton.PropertyNames.Name] = "Run Current Stage";
                    this.mbtnRunCurrentStage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnRunCurrentStage;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnRunCurrentStage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_RunAllStages : WinWindow
    {
        
        public wIP_Matching_RunAllStages(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAutoAccept";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnRunAllStages
        {
            get
            {
                if ((this.mbtnRunAllStages == null))
                {
                    this.mbtnRunAllStages = new WinButton(this);
                    #region Search Criteria
                    this.mbtnRunAllStages.SearchProperties[WinButton.PropertyNames.Name] = "Run All Stages";
                    this.mbtnRunAllStages.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnRunAllStages;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnRunAllStages;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AcceptAllRecordsAs__ : WinWindow
    {
        
        public wIP_Matching_AcceptAllRecordsAs__(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtAcceptAllRecordsAs txtAcceptAllRecordsAs
        {
            get
            {
                if ((this.mtxtAcceptAllRecordsAs == null))
                {
                    this.mtxtAcceptAllRecordsAs = new txtAcceptAllRecordsAs(this);
                }
                return this.mtxtAcceptAllRecordsAs;
            }
        }
        #endregion
        
        #region Fields
        private txtAcceptAllRecordsAs mtxtAcceptAllRecordsAs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtAcceptAllRecordsAs : WinText
    {
        
        public txtAcceptAllRecordsAs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Accept All Records As...";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAcceptAllRecordsAs
        {
            get
            {
                if ((this.mbtnAcceptAllRecordsAs == null))
                {
                    this.mbtnAcceptAllRecordsAs = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAcceptAllRecordsAs.SearchProperties[WinButton.PropertyNames.Name] = "Accept All Records As...";
                    this.mbtnAcceptAllRecordsAs.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAcceptAllRecordsAs;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAcceptAllRecordsAs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AcceptSelectedRecordsAs__ : WinWindow
    {
        
        public wIP_Matching_AcceptSelectedRecordsAs__(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptSelected";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtAcceptSelectedRecordsAs txtAcceptSelectedRecordsAs
        {
            get
            {
                if ((this.mtxtAcceptSelectedRecordsAs == null))
                {
                    this.mtxtAcceptSelectedRecordsAs = new txtAcceptSelectedRecordsAs(this);
                }
                return this.mtxtAcceptSelectedRecordsAs;
            }
        }
        #endregion
        
        #region Fields
        private txtAcceptSelectedRecordsAs mtxtAcceptSelectedRecordsAs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtAcceptSelectedRecordsAs : WinText
    {
        
        public txtAcceptSelectedRecordsAs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Accept Selected Records As...";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAcceptSelectedRecordsAs
        {
            get
            {
                if ((this.mbtnAcceptSelectedRecordsAs == null))
                {
                    this.mbtnAcceptSelectedRecordsAs = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAcceptSelectedRecordsAs.SearchProperties[WinButton.PropertyNames.Name] = "Accept Selected Records As...";
                    this.mbtnAcceptSelectedRecordsAs.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAcceptSelectedRecordsAs;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAcceptSelectedRecordsAs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_WR_NoMatch_Num : WinWindow
    {
        
        public wIP_Matching_WR_NoMatch_Num(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "unmatchedInWarehouseCountLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText txtNoMatch
        {
            get
            {
                if ((this.mtxtNoMatch == null))
                {
                    this.mtxtNoMatch = new WinText(this);
                    #region Search Criteria
                    this.mtxtNoMatch.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtNoMatch;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtNoMatch;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_RefreshResults : WinWindow
    {
        
        public wIP_Matching_RefreshResults(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRefreshResults";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnRefreshResults
        {
            get
            {
                if ((this.mbtnRefreshResults == null))
                {
                    this.mbtnRefreshResults = new WinButton(this);
                    #region Search Criteria
                    this.mbtnRefreshResults.SearchProperties[WinButton.PropertyNames.Name] = "Refresh Results";
                    this.mbtnRefreshResults.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnRefreshResults;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnRefreshResults;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_UnacceptAllRecords : WinWindow
    {
        
        public wIP_Matching_UnacceptAllRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnUndoMatching";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnUnacceptAllRecords
        {
            get
            {
                if ((this.mbtnUnacceptAllRecords == null))
                {
                    this.mbtnUnacceptAllRecords = new WinButton(this);
                    #region Search Criteria
                    this.mbtnUnacceptAllRecords.SearchProperties[WinButton.PropertyNames.Name] = "Unaccept All Records";
                    this.mbtnUnacceptAllRecords.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnUnacceptAllRecords;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnUnacceptAllRecords;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_UnacceptSelectedRecords : WinWindow
    {
        
        public wIP_Matching_UnacceptSelectedRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnUnacceptSelectedRecords";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnUnacceptSelectedRecords
        {
            get
            {
                if ((this.mbtnUnacceptSelectedRecords == null))
                {
                    this.mbtnUnacceptSelectedRecords = new WinButton(this);
                    #region Search Criteria
                    this.mbtnUnacceptSelectedRecords.SearchProperties[WinButton.PropertyNames.Name] = "Unaccept Selected Records";
                    this.mbtnUnacceptSelectedRecords.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnUnacceptSelectedRecords;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnUnacceptSelectedRecords;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_MergeDuplicates : WinWindow
    {
        
        public wIP_Matching_MergeDuplicates(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnMergeDuplicates";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnMergeDuplicates
        {
            get
            {
                if ((this.mbtnMergeDuplicates == null))
                {
                    this.mbtnMergeDuplicates = new WinButton(this);
                    #region Search Criteria
                    this.mbtnMergeDuplicates.SearchProperties[WinButton.PropertyNames.Name] = "Merge Duplicates";
                    this.mbtnMergeDuplicates.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnMergeDuplicates;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnMergeDuplicates;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_DerivationGroupName : WinWindow
    {
        
        public wDG_DerivationGroupName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxDerivationGroupName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtDerivationGroupName
        {
            get
            {
                if ((this.mtxtDerivationGroupName == null))
                {
                    this.mtxtDerivationGroupName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtDerivationGroupName.SearchProperties[WinEdit.PropertyNames.Name] = "Derivation Group Name:";
                    this.mtxtDerivationGroupName.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtDerivationGroupName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtDerivationGroupName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_Filter : WinWindow
    {
        
        public wDG_Filter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "filterComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboFilter
        {
            get
            {
                if ((this.mcboFilter == null))
                {
                    this.mcboFilter = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboFilter.SearchProperties[WinComboBox.PropertyNames.Name] = "Filter:";
                    this.mcboFilter.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboFilter.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboFilter;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_Add : WinWindow
    {
        
        public wDG_Add(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAdd";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAdd
        {
            get
            {
                if ((this.mbtnAdd == null))
                {
                    this.mbtnAdd = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAdd.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mbtnAdd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAdd;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAdd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_Delete : WinWindow
    {
        
        public wDG_Delete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDelete";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnDelete
        {
            get
            {
                if ((this.mbtnDelete == null))
                {
                    this.mbtnDelete = new WinButton(this);
                    #region Search Criteria
                    this.mbtnDelete.SearchProperties[WinButton.PropertyNames.Name] = "Delete";
                    this.mbtnDelete.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnDelete;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnDelete;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_Insert : WinWindow
    {
        
        public wDG_Insert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnInsert";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnInsert
        {
            get
            {
                if ((this.mbtnInsert == null))
                {
                    this.mbtnInsert = new WinButton(this);
                    #region Search Criteria
                    this.mbtnInsert.SearchProperties[WinButton.PropertyNames.Name] = "Insert";
                    this.mbtnInsert.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnInsert;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnInsert;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_AddWorkFields : WinWindow
    {
        
        public wDG_AddWorkFields(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddMultiLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddWorkFields
        {
            get
            {
                if ((this.mbtnAddWorkFields == null))
                {
                    this.mbtnAddWorkFields = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddWorkFields.SearchProperties[WinButton.PropertyNames.Name] = "Add Work Fields";
                    this.mbtnAddWorkFields.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddWorkFields;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddWorkFields;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_CalculateAndPreview : WinWindow
    {
        
        public wDG_CalculateAndPreview(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPreview";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnCalculateAndPreview
        {
            get
            {
                if ((this.mbtnCalculateAndPreview == null))
                {
                    this.mbtnCalculateAndPreview = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCalculateAndPreview.SearchProperties[WinButton.PropertyNames.Name] = "Calculate & Preview";
                    this.mbtnCalculateAndPreview.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnCalculateAndPreview;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCalculateAndPreview;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_SaveToWarehouse : WinWindow
    {
        
        public wDG_SaveToWarehouse(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSaveToWarehouse";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnSaveToWarehouse
        {
            get
            {
                if ((this.mbtnSaveToWarehouse == null))
                {
                    this.mbtnSaveToWarehouse = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSaveToWarehouse.SearchProperties.Add(new PropertyExpression(WinButton.PropertyNames.Name, "Save to", PropertyExpressionOperator.Contains));
                    this.mbtnSaveToWarehouse.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnSaveToWarehouse;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSaveToWarehouse;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_MoveUp : WinWindow
    {
        
        public wDG_MoveUp(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnMoveUp";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnMoveUp
        {
            get
            {
                if ((this.mbtnMoveUp == null))
                {
                    this.mbtnMoveUp = new WinButton(this);
                    #region Search Criteria
                    this.mbtnMoveUp.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnMoveUp;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnMoveUp;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_MoveDown : WinWindow
    {
        
        public wDG_MoveDown(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnMoveDown";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnMoveDown
        {
            get
            {
                if ((this.mbtnMoveDown == null))
                {
                    this.mbtnMoveDown = new WinButton(this);
                    #region Search Criteria
                    this.mbtnMoveDown.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnMoveDown;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnMoveDown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_FPGrid : WinWindow
    {
        
        public wDG_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpSpreadDerivations";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_SnapshotName : WinWindow
    {
        
        public wSP_SnapshotName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "snapshotNameTextBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtSnapshotName
        {
            get
            {
                if ((this.mtxtSnapshotName == null))
                {
                    this.mtxtSnapshotName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtSnapshotName.SearchProperties[WinEdit.PropertyNames.Name] = "Snapshot Name:";
                    this.mtxtSnapshotName.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtSnapshotName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtSnapshotName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_UseLatestDate : WinWindow
    {
        
        public wSP_UseLatestDate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbUseLatestDate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkUseLatestDate
        {
            get
            {
                if ((this.mchkUseLatestDate == null))
                {
                    this.mchkUseLatestDate = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkUseLatestDate.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use Latest Date";
                    this.mchkUseLatestDate.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkUseLatestDate;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkUseLatestDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_PublishSnapshot : WinWindow
    {
        
        public wSP_PublishSnapshot(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPublishSnapshot";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnPublishSnapshot
        {
            get
            {
                if ((this.mbtnPublishSnapshot == null))
                {
                    this.mbtnPublishSnapshot = new WinButton(this);
                    #region Search Criteria
                    this.mbtnPublishSnapshot.SearchProperties[WinButton.PropertyNames.Name] = "Publish Snapshot";
                    this.mbtnPublishSnapshot.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnPublishSnapshot;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnPublishSnapshot;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_CreateExtract : WinWindow
    {
        
        public wSP_CreateExtract(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCreateExtract";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnCreateExtract
        {
            get
            {
                if ((this.mbtnCreateExtract == null))
                {
                    this.mbtnCreateExtract = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCreateExtract.SearchProperties[WinButton.PropertyNames.Name] = "Create  Extract";
                    this.mbtnCreateExtract.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnCreateExtract;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCreateExtract;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_Preview : WinWindow
    {
        
        public wSP_Preview(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "snapshotPreviewButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnPreview
        {
            get
            {
                if ((this.mbtnPreview == null))
                {
                    this.mbtnPreview = new WinButton(this);
                    #region Search Criteria
                    this.mbtnPreview.SearchProperties[WinButton.PropertyNames.Name] = "Preview";
                    this.mbtnPreview.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnPreview;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnPreview;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_TreeViewCurrent : WinWindow
    {
        
        public wSP_TreeViewCurrent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "treeViewCurrent";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tvCurrentView tvCurrentView
        {
            get
            {
                if ((this.mtvCurrentView == null))
                {
                    this.mtvCurrentView = new tvCurrentView(this);
                }
                return this.mtvCurrentView;
            }
        }
        #endregion
        
        #region Fields
        private tvCurrentView mtvCurrentView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvCurrentView : WinTree
    {
        
        public tvCurrentView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Current View";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIIncludeallCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIIncludeallCheckBoxTreeItem == null))
                {
                    this.mUIIncludeallCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIIncludeallCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Include all";
                    this.mUIIncludeallCheckBoxTreeItem.SearchProperties["Value"] = "0";
                    this.mUIIncludeallCheckBoxTreeItem.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIIncludeallCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIIncludeallCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_StandardInputs : WinWindow
    {
        
        public wCK_StandardInputs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnStandardInputs";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnStandardInputs
        {
            get
            {
                if ((this.mbtnStandardInputs == null))
                {
                    this.mbtnStandardInputs = new WinButton(this);
                    #region Search Criteria
                    this.mbtnStandardInputs.SearchProperties[WinButton.PropertyNames.Name] = "Standard Inputs";
                    this.mbtnStandardInputs.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnStandardInputs;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnStandardInputs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_AddCustomGroup : WinWindow
    {
        
        public wCK_AddCustomGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddCustomCategory";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddCustomGroup
        {
            get
            {
                if ((this.mbtnAddCustomGroup == null))
                {
                    this.mbtnAddCustomGroup = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddCustomGroup.SearchProperties[WinButton.PropertyNames.Name] = "Add Custom Group";
                    this.mbtnAddCustomGroup.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddCustomGroup;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddCustomGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_AddCheck : WinWindow
    {
        
        public wCK_AddCheck(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddCheck";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddCheck
        {
            get
            {
                if ((this.mbtnAddCheck == null))
                {
                    this.mbtnAddCheck = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddCheck.SearchProperties[WinButton.PropertyNames.Name] = "Add Check";
                    this.mbtnAddCheck.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddCheck;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddCheck;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_ApplyChecks : WinWindow
    {
        
        public wCK_ApplyChecks(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnApplyChecks";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnApplyChecks
        {
            get
            {
                if ((this.mbtnApplyChecks == null))
                {
                    this.mbtnApplyChecks = new WinButton(this);
                    #region Search Criteria
                    this.mbtnApplyChecks.SearchProperties[WinButton.PropertyNames.Name] = "Apply Checks";
                    this.mbtnApplyChecks.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnApplyChecks;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnApplyChecks;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_ClearAllResults : WinWindow
    {
        
        public wCK_ClearAllResults(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnClearAllResults";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnClearAllResults
        {
            get
            {
                if ((this.mbtnClearAllResults == null))
                {
                    this.mbtnClearAllResults = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClearAllResults.SearchProperties[WinButton.PropertyNames.Name] = "Clear All Results";
                    this.mbtnClearAllResults.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnClearAllResults;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClearAllResults;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_FPGrid : WinWindow
    {
        
        public wCK_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_grid";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSM_CreateMatrix : WinWindow
    {
        
        public wSM_CreateMatrix(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCreateMatrix";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnCreateMatrix
        {
            get
            {
                if ((this.mbtnCreateMatrix == null))
                {
                    this.mbtnCreateMatrix = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCreateMatrix.SearchProperties[WinButton.PropertyNames.Name] = "Create Matrix";
                    this.mbtnCreateMatrix.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnCreateMatrix;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCreateMatrix;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRP_Checks : WinWindow
    {
        
        public wRP_Checks(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkQueryReportRadioButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdChecks
        {
            get
            {
                if ((this.mrdChecks == null))
                {
                    this.mrdChecks = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdChecks.SearchProperties[WinRadioButton.PropertyNames.Name] = "Checks";
                    this.mrdChecks.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdChecks;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdChecks;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRP_Checks_Filter : WinWindow
    {
        
        public wRP_Checks_Filter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkQueryReportComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboChecks_Filter
        {
            get
            {
                if ((this.mcboChecks_Filter == null))
                {
                    this.mcboChecks_Filter = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboChecks_Filter.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboChecks_Filter;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboChecks_Filter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRP_StatusMatrix : WinWindow
    {
        
        public wRP_StatusMatrix(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "statusMatrixRadioButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdStatusMatrix
        {
            get
            {
                if ((this.mrdStatusMatrix == null))
                {
                    this.mrdStatusMatrix = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdStatusMatrix.SearchProperties[WinRadioButton.PropertyNames.Name] = "Status Matrix";
                    this.mrdStatusMatrix.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdStatusMatrix;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdStatusMatrix;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRP_StatusMatrix_Filter : WinWindow
    {
        
        public wRP_StatusMatrix_Filter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "statusMatrixComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboStatusMatrix_Filter
        {
            get
            {
                if ((this.mcboStatusMatrix_Filter == null))
                {
                    this.mcboStatusMatrix_Filter = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboStatusMatrix_Filter.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboStatusMatrix_Filter;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboStatusMatrix_Filter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRP_ReportName : WinWindow
    {
        
        public wRP_ReportName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "reportNameTextBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtReportName
        {
            get
            {
                if ((this.mtxtReportName == null))
                {
                    this.mtxtReportName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtReportName.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtReportName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtReportName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRP_GenerateReport : WinWindow
    {
        
        public wRP_GenerateReport(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "generateReportButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnGenerateReport
        {
            get
            {
                if ((this.mbtnGenerateReport == null))
                {
                    this.mbtnGenerateReport = new WinButton(this);
                    #region Search Criteria
                    this.mbtnGenerateReport.SearchProperties[WinButton.PropertyNames.Name] = "Generate Report";
                    this.mbtnGenerateReport.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnGenerateReport;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnGenerateReport;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_MatchingResults : WinWindow
    {
        
        public wIP_Matching_MatchingResults(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "resultsDataGrid";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tblMatchingResults tblMatchingResults
        {
            get
            {
                if ((this.mtblMatchingResults == null))
                {
                    this.mtblMatchingResults = new tblMatchingResults(this);
                }
                return this.mtblMatchingResults;
            }
        }
        #endregion
        
        #region Fields
        private tblMatchingResults mtblMatchingResults;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tblMatchingResults : WinTable
    {
        
        public tblMatchingResults(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIRow15Row UIRow15Row
        {
            get
            {
                if ((this.mUIRow15Row == null))
                {
                    this.mUIRow15Row = new UIRow15Row(this);
                }
                return this.mUIRow15Row;
            }
        }
        
        public rowHeader rowHeader
        {
            get
            {
                if ((this.mrowHeader == null))
                {
                    this.mrowHeader = new rowHeader(this);
                }
                return this.mrowHeader;
            }
        }
        
        public rowFirstRow rowFirstRow
        {
            get
            {
                if ((this.mrowFirstRow == null))
                {
                    this.mrowFirstRow = new rowFirstRow(this);
                }
                return this.mrowFirstRow;
            }
        }
        #endregion
        
        #region Fields
        private UIRow15Row mUIRow15Row;
        
        private rowHeader mrowHeader;
        
        private rowFirstRow mrowFirstRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRow15Row : WinRow
    {
        
        public UIRow15Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Jane145;6/6/1987;10/22/2010;Act;F;AC;DEF;H;XY;(null);(null);1.000;1.000;(null);(" +
                        "null);(null);(null);0.00;(null);(null);(null);0;(null)", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCell UIItem10222010Cell
        {
            get
            {
                if ((this.mUIItem10222010Cell == null))
                {
                    this.mUIItem10222010Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem10222010Cell.SearchProperties[WinCell.PropertyNames.Value] = "10/22/2010";
                    this.mUIItem10222010Cell.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIItem10222010Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIItem10222010Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class rowHeader : WinRow
    {
        
        public rowHeader(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRowHeader header
        {
            get
            {
                if ((this.mheader == null))
                {
                    this.mheader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mheader.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mheader;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mheader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class rowFirstRow : WinRow
    {
        
        public rowFirstRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Joe7;3/21/1987;7/5/2008;", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCell cellBirthDate
        {
            get
            {
                if ((this.mcellBirthDate == null))
                {
                    this.mcellBirthDate = new WinCell(this);
                    #region Search Criteria
                    this.mcellBirthDate.SearchProperties[WinCell.PropertyNames.Value] = "3/21/1987";
                    this.mcellBirthDate.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcellBirthDate.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcellBirthDate;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcellBirthDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOM_FPGrid : WinWindow
    {
        
        public wOM_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spAllSets";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOM_FPGrid_Report : WinWindow
    {
        
        public wOM_FPGrid_Report(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "16";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Columns : WinWindow
    {
        
        public wIP_Columns(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "columnNamingDataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tblColumns tblColumns
        {
            get
            {
                if ((this.mtblColumns == null))
                {
                    this.mtblColumns = new tblColumns(this);
                }
                return this.mtblColumns;
            }
        }
        #endregion
        
        #region Fields
        private tblColumns mtblColumns;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tblColumns : WinTable
    {
        
        public tblColumns(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIRow0Row1 UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row1(this);
                }
                return this.mUIRow0Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row1 mUIRow0Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRow0Row1 : WinRow
    {
        
        public UIRow0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "EmployeeIDNumber;(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCell UIEmployeeIDNumberCell
        {
            get
            {
                if ((this.mUIEmployeeIDNumberCell == null))
                {
                    this.mUIEmployeeIDNumberCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIEmployeeIDNumberCell.SearchProperties[WinCell.PropertyNames.Value] = "EmployeeIDNumber";
                    this.mUIEmployeeIDNumberCell.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIEmployeeIDNumberCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIEmployeeIDNumberCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Mapping_Preview : WinWindow
    {
        
        public wIP_Mapping_Preview(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "previewButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnPreview
        {
            get
            {
                if ((this.mbtnPreview == null))
                {
                    this.mbtnPreview = new WinButton(this);
                    #region Search Criteria
                    this.mbtnPreview.SearchProperties[WinButton.PropertyNames.Name] = "Preview";
                    this.mbtnPreview.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnPreview.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnPreview;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnPreview;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_AllQuery : WinWindow
    {
        
        public wCK_AllQuery(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbAllQuery";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdAllQuery
        {
            get
            {
                if ((this.mrdAllQuery == null))
                {
                    this.mrdAllQuery = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdAllQuery.SearchProperties[WinRadioButton.PropertyNames.Name] = "All Query";
                    this.mrdAllQuery.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdAllQuery.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdAllQuery;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdAllQuery;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_AllPlug : WinWindow
    {
        
        public wCK_AllPlug(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbAllPlug";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdAllPlug
        {
            get
            {
                if ((this.mrdAllPlug == null))
                {
                    this.mrdAllPlug = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdAllPlug.SearchProperties[WinRadioButton.PropertyNames.Name] = "All Plug";
                    this.mrdAllPlug.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdAllPlug.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdAllPlug;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdAllPlug;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_AllOK : WinWindow
    {
        
        public wCK_AllOK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbAllOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdAllOK
        {
            get
            {
                if ((this.mrdAllOK == null))
                {
                    this.mrdAllOK = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdAllOK.SearchProperties[WinRadioButton.PropertyNames.Name] = "All OK";
                    this.mrdAllOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdAllOK.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdAllOK;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdAllOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_Notes : WinWindow
    {
        
        public wCK_Notes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNotes";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtNotes
        {
            get
            {
                if ((this.mtxtNotes == null))
                {
                    this.mtxtNotes = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtNotes.SearchProperties[WinEdit.PropertyNames.Name] = "Notes:";
                    this.mtxtNotes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtNotes.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtNotes;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtNotes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_CheckResults : WinWindow
    {
        
        public wCK_CheckResults(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checksFailDataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTable tblCheckResults
        {
            get
            {
                if ((this.mtblCheckResults == null))
                {
                    this.mtblCheckResults = new WinTable(this);
                    #region Search Criteria
                    this.mtblCheckResults.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
                    this.mtblCheckResults.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtblCheckResults.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtblCheckResults;
            }
        }
        #endregion
        
        #region Fields
        private WinTable mtblCheckResults;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSIP_Process : WinWindow
    {
        
        public wSIP_Process(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "processButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnProcess
        {
            get
            {
                if ((this.mbtnProcess == null))
                {
                    this.mbtnProcess = new WinButton(this);
                    #region Search Criteria
                    this.mbtnProcess.SearchProperties[WinButton.PropertyNames.Name] = "Process";
                    this.mbtnProcess.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnProcess.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnProcess;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnProcess;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_BatchUpdateName : WinWindow
    {
        
        public wBU_BatchUpdateName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxBatchUpdateName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtBatchUpdateName
        {
            get
            {
                if ((this.mtxtBatchUpdateName == null))
                {
                    this.mtxtBatchUpdateName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtBatchUpdateName.SearchProperties[WinEdit.PropertyNames.Name] = "Batch Update Name:";
                    this.mtxtBatchUpdateName.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtBatchUpdateName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtBatchUpdateName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_SelectFieldstoUpdate : WinWindow
    {
        
        public wBU_SelectFieldstoUpdate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonSelectFields";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnSelectFieldstoUpdate
        {
            get
            {
                if ((this.mbtnSelectFieldstoUpdate == null))
                {
                    this.mbtnSelectFieldstoUpdate = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSelectFieldstoUpdate.SearchProperties[WinButton.PropertyNames.Name] = "Select Fields to Update";
                    this.mbtnSelectFieldstoUpdate.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnSelectFieldstoUpdate;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSelectFieldstoUpdate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_StandardorCustomFilter : WinWindow
    {
        
        public wBU_StandardorCustomFilter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButtonFilter";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdStandardorCustomFilter
        {
            get
            {
                if ((this.mrdStandardorCustomFilter == null))
                {
                    this.mrdStandardorCustomFilter = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdStandardorCustomFilter.SearchProperties[WinRadioButton.PropertyNames.Name] = "Standard or Custom Filter";
                    this.mrdStandardorCustomFilter.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdStandardorCustomFilter;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdStandardorCustomFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_CustomExpression : WinWindow
    {
        
        public wBU_CustomExpression(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButtonSelectionCriteria";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdCustomExpression
        {
            get
            {
                if ((this.mrdCustomExpression == null))
                {
                    this.mrdCustomExpression = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdCustomExpression.SearchProperties[WinRadioButton.PropertyNames.Name] = "Custom Expression";
                    this.mrdCustomExpression.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdCustomExpression;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdCustomExpression;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_CustomExpressionFormula : WinWindow
    {
        
        public wBU_CustomExpressionFormula(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaTextBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFormula
        {
            get
            {
                if ((this.mtxtFormula == null))
                {
                    this.mtxtFormula = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFormula.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtFormula;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFormula;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_CustomExpressionAccept : WinWindow
    {
        
        public wBU_CustomExpressionAccept(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAccept
        {
            get
            {
                if ((this.mbtnAccept == null))
                {
                    this.mbtnAccept = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAccept.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAccept;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAccept;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_SavetoWarehouse : WinWindow
    {
        
        public wBU_SavetoWarehouse(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonSaveToWarehouse";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnSavetoWarehouse
        {
            get
            {
                if ((this.mbtnSavetoWarehouse == null))
                {
                    this.mbtnSavetoWarehouse = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSavetoWarehouse.SearchProperties[WinButton.PropertyNames.Name] = "Save to Warehouse";
                    this.mbtnSavetoWarehouse.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnSavetoWarehouse;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSavetoWarehouse;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_Plug : WinWindow
    {
        
        public wBU_Plug(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ControlName, "Plug", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdPlug
        {
            get
            {
                if ((this.mrdPlug == null))
                {
                    this.mrdPlug = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdPlug.SearchProperties[WinRadioButton.PropertyNames.Name] = "Plug";
                    this.mrdPlug.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdPlug;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdPlug;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_Correction : WinWindow
    {
        
        public wBU_Correction(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ControlName, "Correction", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdCorrection
        {
            get
            {
                if ((this.mrdCorrection == null))
                {
                    this.mrdCorrection = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdCorrection.SearchProperties[WinRadioButton.PropertyNames.Name] = "Correction";
                    this.mrdCorrection.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdCorrection;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdCorrection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_FPGrid : WinWindow
    {
        
        public wBU_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpSpreadBatchUpdate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_Apply : WinWindow
    {
        
        public wBU_Apply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonApply";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnApply
        {
            get
            {
                if ((this.mbtnApply == null))
                {
                    this.mbtnApply = new WinButton(this);
                    #region Search Criteria
                    this.mbtnApply.SearchProperties[WinButton.PropertyNames.Name] = "Apply";
                    this.mbtnApply.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnApply;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnApply;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFL_AddFilter : WinWindow
    {
        
        public wFL_AddFilter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAdd";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddFilter
        {
            get
            {
                if ((this.mbtnAddFilter == null))
                {
                    this.mbtnAddFilter = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddFilter.SearchProperties[WinButton.PropertyNames.Name] = "Add Filter";
                    this.mbtnAddFilter.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnAddFilter;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFL_DeleteHighlightedFilter : WinWindow
    {
        
        public wFL_DeleteHighlightedFilter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDelete";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnDeleteHighlightedFilter
        {
            get
            {
                if ((this.mbtnDeleteHighlightedFilter == null))
                {
                    this.mbtnDeleteHighlightedFilter = new WinButton(this);
                    #region Search Criteria
                    this.mbtnDeleteHighlightedFilter.SearchProperties[WinButton.PropertyNames.Name] = "Delete Highlighted Filter";
                    this.mbtnDeleteHighlightedFilter.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnDeleteHighlightedFilter;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnDeleteHighlightedFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFL_FPGrid : WinWindow
    {
        
        public wFL_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_grid";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_SelectFieldsForPreview : WinWindow
    {
        
        public wDG_SelectFieldsForPreview(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSelectFieldsForPreview";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnSelectFieldsForPreview
        {
            get
            {
                if ((this.mbtnSelectFieldsForPreview == null))
                {
                    this.mbtnSelectFieldsForPreview = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSelectFieldsForPreview.SearchProperties[WinButton.PropertyNames.Name] = "Select fields for preview";
                    this.mbtnSelectFieldsForPreview.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnSelectFieldsForPreview.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnSelectFieldsForPreview;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSelectFieldsForPreview;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUndo_ShowHideUndoEntries : WinWindow
    {
        
        public wUndo_ShowHideUndoEntries(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "optionSet1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wGroup wGroup
        {
            get
            {
                if ((this.mwGroup == null))
                {
                    this.mwGroup = new wGroup(this);
                }
                return this.mwGroup;
            }
        }
        #endregion
        
        #region Fields
        private wGroup mwGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGroup : WinGroup
    {
        
        public wGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdShowUndo
        {
            get
            {
                if ((this.mrdShowUndo == null))
                {
                    this.mrdShowUndo = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdShowUndo.SearchProperties[WinRadioButton.PropertyNames.Name] = "Show Undone Entries";
                    this.mrdShowUndo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdShowUndo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdShowUndo;
            }
        }
        
        public WinRadioButton rdHideUndo
        {
            get
            {
                if ((this.mrdHideUndo == null))
                {
                    this.mrdHideUndo = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdHideUndo.SearchProperties[WinRadioButton.PropertyNames.Name] = "Hide Undone Entries";
                    this.mrdHideUndo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdHideUndo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdHideUndo;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdShowUndo;
        
        private WinRadioButton mrdHideUndo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUndo_Undo : WinWindow
    {
        
        public wUndo_Undo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnUndo";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnUndo
        {
            get
            {
                if ((this.mbtnUndo == null))
                {
                    this.mbtnUndo = new WinButton(this);
                    #region Search Criteria
                    this.mbtnUndo.SearchProperties[WinButton.PropertyNames.Name] = "Undo";
                    this.mbtnUndo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnUndo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnUndo;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnUndo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUndo_FPGrid : WinWindow
    {
        
        public wUndo_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpActivityLog";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "Select a point for Undo";
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOM_ExporttoExcel : WinWindow
    {
        
        public wOM_ExporttoExcel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "exportToExcelButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnExporttoExcel
        {
            get
            {
                if ((this.mbtnExporttoExcel == null))
                {
                    this.mbtnExporttoExcel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnExporttoExcel.SearchProperties[WinButton.PropertyNames.Name] = "Export to Excel ...";
                    this.mbtnExporttoExcel.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnExporttoExcel.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnExporttoExcel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnExporttoExcel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOM_TabPage : WinWindow
    {
        
        public wOM_TabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabControl1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIDataFileMappingTabPage
        {
            get
            {
                if ((this.mUIDataFileMappingTabPage == null))
                {
                    this.mUIDataFileMappingTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIDataFileMappingTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Data File Mapping";
                    this.mUIDataFileMappingTabPage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIDataFileMappingTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIDataFileMappingTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_CheckResultsTab : WinWindow
    {
        
        public wCK_CheckResultsTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabControl1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage tabFail
        {
            get
            {
                if ((this.mtabFail == null))
                {
                    this.mtabFail = new WinTabPage(this);
                    #region Search Criteria
                    this.mtabFail.SearchProperties[WinTabPage.PropertyNames.Name] = "Fail";
                    this.mtabFail.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtabFail.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtabFail;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mtabFail;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_SelectFile_SingleTab_cbo : WinWindow
    {
        
        public wIP_SelectFile_SingleTab_cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbSingleTab";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_StandardorCustomFilter_cbo : WinWindow
    {
        
        public wBU_StandardorCustomFilter_cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "filterComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnDropDown
        {
            get
            {
                if ((this.mbtnDropDown == null))
                {
                    this.mbtnDropDown = new WinButton(this);
                    #region Search Criteria
                    this.mbtnDropDown.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mbtnDropDown.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnDropDown.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnDropDown;
            }
        }
        
        public WinComboBox cboFilter
        {
            get
            {
                if ((this.mcboFilter == null))
                {
                    this.mcboFilter = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboFilter.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboFilter.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboFilter;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnDropDown;
        
        private WinComboBox mcboFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUpdateIncludedVOs : WinWindow
    {
        
        public wUpdateIncludedVOs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSaveChanges";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Update Included VOs";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid_VOsIncludedForService : WinWindow
    {
        
        public wFPGrid_VOsIncludedForService(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valGroupsSpread";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_Filter_________ : WinWindow
    {
        
        public wSP_Filter_________(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ultraDropDownButton1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtFilter txtFilter
        {
            get
            {
                if ((this.mtxtFilter == null))
                {
                    this.mtxtFilter = new txtFilter(this);
                }
                return this.mtxtFilter;
            }
        }
        #endregion
        
        #region Fields
        private txtFilter mtxtFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtFilter : WinText
    {
        
        public txtFilter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton bttnDropdown
        {
            get
            {
                if ((this.mbttnDropdown == null))
                {
                    this.mbttnDropdown = new WinButton(this);
                    #region Search Criteria
                    this.mbttnDropdown.SearchProperties[WinButton.PropertyNames.Name] = "Drop down";
                    this.mbttnDropdown.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbttnDropdown;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbttnDropdown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_Filter : WinWindow
    {
        
        public wVU_Filter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "filterComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_Apply : WinWindow
    {
        
        public wVU_Apply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "applySelectRecordsFilterButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Apply";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_SelectSampleRecords_Formula : WinWindow
    {
        
        public wDG_SelectSampleRecords_Formula(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaTextBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_SelectSampleRecords_Apply : WinWindow
    {
        
        public wDG_SelectSampleRecords_Apply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnApplySelectRecordCriteria";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Apply";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_SelectSampleRecords_Accept : WinWindow
    {
        
        public wDG_SelectSampleRecords_Accept(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_ViewSetName : WinWindow
    {
        
        public wVU_ViewSetName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtViewSetName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "View set name";
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_SelectLabelsToView : WinWindow
    {
        
        public wVU_SelectLabelsToView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelSelectButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Select labels to view";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_ImportFilter : WinWindow
    {
        
        public wIP_Matching_ImportFilter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fptxtImportFilter";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Import Filter:";
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_WarehouseFilter : WinWindow
    {
        
        public wIP_Matching_WarehouseFilter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fptxtWarehouseFilter";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Warehouse Filter:";
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_TabPage : WinWindow
    {
        
        public wVU_TabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ViewAndUpdateWorkspace";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIDataSummaryTabPage
        {
            get
            {
                if ((this.mUIDataSummaryTabPage == null))
                {
                    this.mUIDataSummaryTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIDataSummaryTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Data Summary";
                    this.mUIDataSummaryTabPage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIDataSummaryTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIDataSummaryTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_GenerateSummary : WinWindow
    {
        
        public wVU_GenerateSummary(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonGenerate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Generate Summary";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_PrintToFile : WinWindow
    {
        
        public wVU_PrintToFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "printToFileButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Print to file";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOM_FPGrid_SupportingInfo : WinWindow
    {
        
        public wOM_FPGrid_SupportingInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spSelectedSets";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_Preview_Next : WinWindow
    {
        
        public wSP_Preview_Next(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "linkNext";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt : WinText
    {
        
        public txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Next";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink link
        {
            get
            {
                if ((this.mlink == null))
                {
                    this.mlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Next";
                    this.mlink.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_Preview_Last : WinWindow
    {
        
        public wSP_Preview_Last(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "linkLast";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt1 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt1(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt1 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt1 : WinText
    {
        
        public txt1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Last";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink link
        {
            get
            {
                if ((this.mlink == null))
                {
                    this.mlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Last";
                    this.mlink.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_ViewAllManualChanges : WinWindow
    {
        
        public wVU_ViewAllManualChanges(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "allCorrectionsViewButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "View all manual changes in this service";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_PrintAll : WinWindow
    {
        
        public wDG_PrintAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPrintAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Print All";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_PrintToFile : WinWindow
    {
        
        public wDG_PrintToFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPrint";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Print to File";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_TreeViewPrior : WinWindow
    {
        
        public wSP_TreeViewPrior(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "treeViewPrevious";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tvPriorView tvPriorView
        {
            get
            {
                if ((this.mtvPriorView == null))
                {
                    this.mtvPriorView = new tvPriorView(this);
                }
                return this.mtvPriorView;
            }
        }
        #endregion
        
        #region Fields
        private tvPriorView mtvPriorView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvPriorView : WinTree
    {
        
        public tvPriorView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Prior View";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem tviIncludeAll
        {
            get
            {
                if ((this.mtviIncludeAll == null))
                {
                    this.mtviIncludeAll = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mtviIncludeAll.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Include all";
                    this.mtviIncludeAll.SearchProperties["Value"] = "0";
                    this.mtviIncludeAll.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtviIncludeAll.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtviIncludeAll;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mtviIncludeAll;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOM_ExportAll : WinWindow
    {
        
        public wOM_ExportAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnExportAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Export All";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_VL_CorrectionImportForAdmin : WinWindow
    {
        
        public wIP_VL_CorrectionImportForAdmin(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chbCorrectionImport";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Correction Import for Administration fields";
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Mapping_ClearMappings : WinWindow
    {
        
        public wIP_Mapping_ClearMappings(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonClearMappings";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Clear Mappings";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_NewVersion : WinWindow
    {
        
        public wDG_NewVersion(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDerivationNewVersion";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "New Version";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_PrintAll : WinWindow
    {
        
        public wVU_PrintAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "printAllButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Print All";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_SimpleQuery : WinWindow
    {
        
        public wVU_SimpleQuery(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButtonSimpleQuery";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Simple Query";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_SimpleQuery_Field : WinWindow
    {
        
        public wVU_SimpleQuery_Field(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxField";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_SimpleQuery_Operator : WinWindow
    {
        
        public wVU_SimpleQuery_Operator(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxOperator";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_Simplequery_Value : WinWindow
    {
        
        public wVU_Simplequery_Value(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSI_Correction : WinWindow
    {
        
        public wSI_Correction(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdoCorrection";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Correction";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSI_Plug : WinWindow
    {
        
        public wSI_Plug(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdoPlug";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Plug";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSI_NoFlag : WinWindow
    {
        
        public wSI_NoFlag(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdoNoFlag";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "No Flag";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_ResultsPreview_Total : WinWindow
    {
        
        public wCK_ResultsPreview_Total(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textTotal";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txtTotal
        {
            get
            {
                if ((this.mtxtTotal == null))
                {
                    this.mtxtTotal = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtTotal.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtTotal.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxtTotal;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtTotal;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_IR_Grid : WinWindow
    {
        
        public wVU_IR_Grid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "unpivotedDataDataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wTable wTable
        {
            get
            {
                if ((this.mwTable == null))
                {
                    this.mwTable = new wTable(this);
                }
                return this.mwTable;
            }
        }
        #endregion
        
        #region Fields
        private wTable mwTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTable : WinTable
    {
        
        public wTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wRow wRow
        {
            get
            {
                if ((this.mwRow == null))
                {
                    this.mwRow = new wRow(this);
                }
                return this.mwRow;
            }
        }
        #endregion
        
        #region Fields
        private wRow mwRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRow : WinRow
    {
        
        public wRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCell wCol
        {
            get
            {
                if ((this.mwCol == null))
                {
                    this.mwCol = new WinCell(this);
                    #region Search Criteria
                    this.mwCol.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mwCol.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mwCol;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mwCol;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AcceptAllRecordsAs : WinWindow
    {
        
        public wIP_Matching_AcceptAllRecordsAs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public btn btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new btn(this);
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private btn mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class btn : WinButton
    {
        
        public btn(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "Accept All Records As...";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn1
        {
            get
            {
                if ((this.mbtn1 == null))
                {
                    this.mbtn1 = new WinButton(this);
                    #region Search Criteria
                    this.mbtn1.SearchProperties[WinButton.PropertyNames.Name] = "Accept All Records As...";
                    this.mbtn1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mbtn1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn1;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AcceptSelectedRecordsAs : WinWindow
    {
        
        public wIP_Matching_AcceptSelectedRecordsAs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptSelected";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public btn2 btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new btn2(this);
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private btn2 mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class btn2 : WinButton
    {
        
        public btn2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "Accept Selected Records As...";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn1
        {
            get
            {
                if ((this.mbtn1 == null))
                {
                    this.mbtn1 = new WinButton(this);
                    #region Search Criteria
                    this.mbtn1.SearchProperties[WinButton.PropertyNames.Name] = "Accept Selected Records As...";
                    this.mbtn1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mbtn1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn1;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_Filter : WinWindow
    {
        
        public wSP_Filter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ultraDropDownButton1";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public btn1 btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new btn1(this);
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private btn1 mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class btn1 : WinButton
    {
        
        public btn1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinButton.PropertyNames.Name, "<", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnDropDown
        {
            get
            {
                if ((this.mbtnDropDown == null))
                {
                    this.mbtnDropDown = new WinButton(this);
                    #region Search Criteria
                    this.mbtnDropDown.SearchProperties[WinButton.PropertyNames.Name] = "Drop down";
                    this.mbtnDropDown.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnDropDown;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnDropDown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUD_RepositoryFileName : WinWindow
    {
        
        public wUD_RepositoryFileName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtRepositoryFileName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Notes:";
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_SelectFile_Delimiter : WinWindow
    {
        
        public wIP_SelectFile_Delimiter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabDelimiterRadioButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdTab
        {
            get
            {
                if ((this.mrdTab == null))
                {
                    this.mrdTab = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdTab.SearchProperties[WinRadioButton.PropertyNames.Name] = "Tab";
                    this.mrdTab.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdTab.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdTab;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_FPGrid : WinWindow
    {
        
        public wVU_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "multipleRecordsDataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tbl tbl
        {
            get
            {
                if ((this.mtbl == null))
                {
                    this.mtbl = new tbl(this);
                }
                return this.mtbl;
            }
        }
        #endregion
        
        #region Fields
        private tbl mtbl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tbl : WinTable
    {
        
        public tbl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wRow1 wRow
        {
            get
            {
                if ((this.mwRow == null))
                {
                    this.mwRow = new wRow1(this);
                }
                return this.mwRow;
            }
        }
        #endregion
        
        #region Fields
        private wRow1 mwRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRow1 : WinRow
    {
        
        public wRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";111111;05/11/1959;01/12/1980;M;XLs;31/05/2028;1;(null)", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "1";
                    this.mcell.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcell.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_DataSummary_SelectTotalFields : WinWindow
    {
        
        public wVU_DataSummary_SelectTotalFields(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonSelectFields";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Select Totals Fields and Break Field";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCV_AddLabel : WinWindow
    {
        
        public wCV_AddLabel()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "label", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public wLabel wLabel
        {
            get
            {
                if ((this.mwLabel == null))
                {
                    this.mwLabel = new wLabel(this);
                }
                return this.mwLabel;
            }
        }
        
        public wDisplayName wDisplayName
        {
            get
            {
                if ((this.mwDisplayName == null))
                {
                    this.mwDisplayName = new wDisplayName(this);
                }
                return this.mwDisplayName;
            }
        }
        
        public wWarehouseFieldType wWarehouseFieldType
        {
            get
            {
                if ((this.mwWarehouseFieldType == null))
                {
                    this.mwWarehouseFieldType = new wWarehouseFieldType(this);
                }
                return this.mwWarehouseFieldType;
            }
        }
        
        public wFieldLength wFieldLength
        {
            get
            {
                if ((this.mwFieldLength == null))
                {
                    this.mwFieldLength = new wFieldLength(this);
                }
                return this.mwFieldLength;
            }
        }
        
        public wDecimalPlaces wDecimalPlaces
        {
            get
            {
                if ((this.mwDecimalPlaces == null))
                {
                    this.mwDecimalPlaces = new wDecimalPlaces(this);
                }
                return this.mwDecimalPlaces;
            }
        }
        
        public wOK wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel(this);
                }
                return this.mwCancel;
            }
        }
        
        public wHistoryLabels wHistoryLabels
        {
            get
            {
                if ((this.mwHistoryLabels == null))
                {
                    this.mwHistoryLabels = new wHistoryLabels(this);
                }
                return this.mwHistoryLabels;
            }
        }
        
        public wMonthly wMonthly
        {
            get
            {
                if ((this.mwMonthly == null))
                {
                    this.mwMonthly = new wMonthly(this);
                }
                return this.mwMonthly;
            }
        }
        
        public wYearly wYearly
        {
            get
            {
                if ((this.mwYearly == null))
                {
                    this.mwYearly = new wYearly(this);
                }
                return this.mwYearly;
            }
        }
        
        public wFromDate wFromDate
        {
            get
            {
                if ((this.mwFromDate == null))
                {
                    this.mwFromDate = new wFromDate(this);
                }
                return this.mwFromDate;
            }
        }
        
        public wVariesbyVO wVariesbyVO
        {
            get
            {
                if ((this.mwVariesbyVO == null))
                {
                    this.mwVariesbyVO = new wVariesbyVO(this);
                }
                return this.mwVariesbyVO;
            }
        }
        
        public wSelectAnExistingWHField wSelectAnExistingWHField
        {
            get
            {
                if ((this.mwSelectAnExistingWHField == null))
                {
                    this.mwSelectAnExistingWHField = new wSelectAnExistingWHField(this);
                }
                return this.mwSelectAnExistingWHField;
            }
        }
        
        public wExistingWHField wExistingWHField
        {
            get
            {
                if ((this.mwExistingWHField == null))
                {
                    this.mwExistingWHField = new wExistingWHField(this);
                }
                return this.mwExistingWHField;
            }
        }
        #endregion
        
        #region Fields
        private wLabel mwLabel;
        
        private wDisplayName mwDisplayName;
        
        private wWarehouseFieldType mwWarehouseFieldType;
        
        private wFieldLength mwFieldLength;
        
        private wDecimalPlaces mwDecimalPlaces;
        
        private wOK mwOK;
        
        private wCancel mwCancel;
        
        private wHistoryLabels mwHistoryLabels;
        
        private wMonthly mwMonthly;
        
        private wYearly mwYearly;
        
        private wFromDate mwFromDate;
        
        private wVariesbyVO mwVariesbyVO;
        
        private wSelectAnExistingWHField mwSelectAnExistingWHField;
        
        private wExistingWHField mwExistingWHField;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLabel : WinWindow
    {
        
        public wLabel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelTextBox";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinEdit txtLabel
        {
            get
            {
                if ((this.mtxtLabel == null))
                {
                    this.mtxtLabel = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtLabel.SearchProperties[WinEdit.PropertyNames.Name] = "Label:";
                    this.mtxtLabel.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtLabel.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mtxtLabel;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDisplayName : WinWindow
    {
        
        public wDisplayName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "displayNameTextBox";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinEdit txtDisplayName
        {
            get
            {
                if ((this.mtxtDisplayName == null))
                {
                    this.mtxtDisplayName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtDisplayName.SearchProperties[WinEdit.PropertyNames.Name] = "Display Name:";
                    this.mtxtDisplayName.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtDisplayName.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mtxtDisplayName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtDisplayName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWarehouseFieldType : WinWindow
    {
        
        public wWarehouseFieldType(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "warehouseFieldTypeComboBox";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboWarehouseFieldType
        {
            get
            {
                if ((this.mcboWarehouseFieldType == null))
                {
                    this.mcboWarehouseFieldType = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboWarehouseFieldType.SearchProperties[WinComboBox.PropertyNames.Name] = "Warehouse field type:";
                    this.mcboWarehouseFieldType.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboWarehouseFieldType.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mcboWarehouseFieldType;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboWarehouseFieldType;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFieldLength : WinComboBox
    {
        
        public wFieldLength(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Field length";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFieldLength
        {
            get
            {
                if ((this.mtxtFieldLength == null))
                {
                    this.mtxtFieldLength = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFieldLength.SearchProperties[WinEdit.PropertyNames.Name] = "Field length";
                    this.mtxtFieldLength.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtFieldLength.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mtxtFieldLength;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFieldLength;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDecimalPlaces : WinComboBox
    {
        
        public wDecimalPlaces(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Decimal places";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinEdit txtDecimalPlaces
        {
            get
            {
                if ((this.mtxtDecimalPlaces == null))
                {
                    this.mtxtDecimalPlaces = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtDecimalPlaces.SearchProperties[WinEdit.PropertyNames.Name] = "Decimal places";
                    this.mtxtDecimalPlaces.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtDecimalPlaces.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mtxtDecimalPlaces;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtDecimalPlaces;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK : WinWindow
    {
        
        public wOK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel : WinWindow
    {
        
        public wCancel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cancelButton";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnCancel.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistoryLabels : WinComboBox
    {
        
        public wHistoryLabels(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Add";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinEdit txtHistoryLabels
        {
            get
            {
                if ((this.mtxtHistoryLabels == null))
                {
                    this.mtxtHistoryLabels = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtHistoryLabels.SearchProperties[WinEdit.PropertyNames.Name] = "Add";
                    this.mtxtHistoryLabels.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtHistoryLabels.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mtxtHistoryLabels;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtHistoryLabels;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMonthly : WinWindow
    {
        
        public wMonthly(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "monthlyRadioButton";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdMonthly
        {
            get
            {
                if ((this.mrdMonthly == null))
                {
                    this.mrdMonthly = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdMonthly.SearchProperties[WinRadioButton.PropertyNames.Name] = "Monthly";
                    this.mrdMonthly.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdMonthly.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mrdMonthly;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdMonthly;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYearly : WinWindow
    {
        
        public wYearly(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "yearlyRadioButton";
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdYearly
        {
            get
            {
                if ((this.mrdYearly == null))
                {
                    this.mrdYearly = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdYearly.SearchProperties[WinRadioButton.PropertyNames.Name] = "Yearly";
                    this.mrdYearly.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdYearly.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mrdYearly;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdYearly;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFromDate : WinComboBox
    {
        
        public wFromDate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFromDate
        {
            get
            {
                if ((this.mtxtFromDate == null))
                {
                    this.mtxtFromDate = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFromDate.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxtFromDate.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtFromDate.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mtxtFromDate;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFromDate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVariesbyVO : WinWindow
    {
        
        public wVariesbyVO(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbIsSplit";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Varies by VO";
                    this.mchk.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectAnExistingWHField : WinWindow
    {
        
        public wSelectAnExistingWHField(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "selectExistingFieldRadioButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Select an existing Warehouse field";
                    this.mrd.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExistingWHField : WinWindow
    {
        
        public wExistingWHField(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "existingFieldComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add label");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Add label");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_SelectFile_FileSelection : WinWindow
    {
        
        public wIP_SelectFile_FileSelection()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "File selection";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("File selection");
            #endregion
        }
        
        #region Properties
        public wOK1 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK1(this);
                }
                return this.mwOK;
            }
        }
        
        public wFileList wFileList
        {
            get
            {
                if ((this.mwFileList == null))
                {
                    this.mwFileList = new wFileList(this);
                }
                return this.mwFileList;
            }
        }
        
        public wCancel1 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel1(this);
                }
                return this.mwCancel;
            }
        }
        #endregion
        
        #region Fields
        private wOK1 mwOK;
        
        private wFileList mwFileList;
        
        private wCancel1 mwCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK1 : WinWindow
    {
        
        public wOK1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "OKButton";
            this.WindowTitles.Add("File selection");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("File selection");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFileList : WinWindow
    {
        
        public wFileList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "clientFileListListBox";
            this.WindowTitles.Add("File selection");
            #endregion
        }
        
        #region Properties
        public WinList listFileList
        {
            get
            {
                if ((this.mlistFileList == null))
                {
                    this.mlistFileList = new WinList(this);
                    #region Search Criteria
                    this.mlistFileList.WindowTitles.Add("File selection");
                    #endregion
                }
                return this.mlistFileList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mlistFileList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel1 : WinWindow
    {
        
        public wCancel1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cancelButton";
            this.WindowTitles.Add("File selection");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("File selection");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_ValidateAndLoad_Popup : WinWindow
    {
        
        public wIP_ValidateAndLoad_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Validate & Load";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Validate & Load");
            #endregion
        }
        
        #region Properties
        public wOK2 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK2(this);
                }
                return this.mwOK;
            }
        }
        
        public wMessage wMessage
        {
            get
            {
                if ((this.mwMessage == null))
                {
                    this.mwMessage = new wMessage(this);
                }
                return this.mwMessage;
            }
        }
        #endregion
        
        #region Fields
        private wOK2 mwOK;
        
        private wMessage mwMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK2 : WinWindow
    {
        
        public wOK2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Validate & Load");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Validate & Load");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMessage : WinWindow
    {
        
        public wMessage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Validate & Load");
            #endregion
        }
        
        #region Properties
        public WinText txtMessage
        {
            get
            {
                if ((this.mtxtMessage == null))
                {
                    this.mtxtMessage = new WinText(this);
                    #region Search Criteria
                    this.mtxtMessage.SearchProperties.Add(new PropertyExpression(WinText.PropertyNames.Name, "SUCCESS.", PropertyExpressionOperator.Contains));
                    this.mtxtMessage.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtMessage.WindowTitles.Add("Validate & Load");
                    #endregion
                }
                return this.mtxtMessage;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_ConfirmAccept_Popup : WinWindow
    {
        
        public wIP_Matching_ConfirmAccept_Popup()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Confirm Accept", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm Accept All Records Status");
            #endregion
        }
        
        #region Properties
        public wYes wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes(this);
                }
                return this.mwYes;
            }
        }
        
        public wNo wNo
        {
            get
            {
                if ((this.mwNo == null))
                {
                    this.mwNo = new wNo(this);
                }
                return this.mwNo;
            }
        }
        
        public wMessage1 wMessage
        {
            get
            {
                if ((this.mwMessage == null))
                {
                    this.mwMessage = new wMessage1(this);
                }
                return this.mwMessage;
            }
        }
        #endregion
        
        #region Fields
        private wYes mwYes;
        
        private wNo mwNo;
        
        private wMessage1 mwMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes : WinWindow
    {
        
        public wYes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Confirm Accept All Records Status");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.WindowTitles.Add("Confirm Accept All Records Status");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNo : WinWindow
    {
        
        public wNo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Confirm Accept All Records Status");
            #endregion
        }
        
        #region Properties
        public WinButton btnNo
        {
            get
            {
                if ((this.mbtnNo == null))
                {
                    this.mbtnNo = new WinButton(this);
                    #region Search Criteria
                    this.mbtnNo.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mbtnNo.WindowTitles.Add("Confirm Accept All Records Status");
                    #endregion
                }
                return this.mbtnNo;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnNo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMessage1 : WinWindow
    {
        
        public wMessage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm Accept All Records Status");
            #endregion
        }
        
        #region Properties
        public WinText txtMessage
        {
            get
            {
                if ((this.mtxtMessage == null))
                {
                    this.mtxtMessage = new WinText(this);
                    #region Search Criteria
                    this.mtxtMessage.WindowTitles.Add("Confirm Accept All Records Status");
                    #endregion
                }
                return this.mtxtMessage;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_AcceptRecordsAs_Popup : WinWindow
    {
        
        public wIP_Matching_AcceptRecordsAs_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public wAcceptAll wAcceptAll
        {
            get
            {
                if ((this.mwAcceptAll == null))
                {
                    this.mwAcceptAll = new wAcceptAll(this);
                }
                return this.mwAcceptAll;
            }
        }
        
        public wAcceptSelected wAcceptSelected
        {
            get
            {
                if ((this.mwAcceptSelected == null))
                {
                    this.mwAcceptSelected = new wAcceptSelected(this);
                }
                return this.mwAcceptSelected;
            }
        }
        
        public wDerivationDefintion_Filter wDerivationDefintion_Filter
        {
            get
            {
                if ((this.mwDerivationDefintion_Filter == null))
                {
                    this.mwDerivationDefintion_Filter = new wDerivationDefintion_Filter(this);
                }
                return this.mwDerivationDefintion_Filter;
            }
        }
        
        public UICertainPeriodWindow1 UICertainPeriodWindow1
        {
            get
            {
                if ((this.mUICertainPeriodWindow1 == null))
                {
                    this.mUICertainPeriodWindow1 = new UICertainPeriodWindow1(this);
                }
                return this.mUICertainPeriodWindow1;
            }
        }
        
        public UIEditingControlList UIEditingControlList
        {
            get
            {
                if ((this.mUIEditingControlList == null))
                {
                    this.mUIEditingControlList = new UIEditingControlList(this);
                }
                return this.mUIEditingControlList;
            }
        }
        #endregion
        
        #region Fields
        private wAcceptAll mwAcceptAll;
        
        private wAcceptSelected mwAcceptSelected;
        
        private wDerivationDefintion_Filter mwDerivationDefintion_Filter;
        
        private UICertainPeriodWindow1 mUICertainPeriodWindow1;
        
        private UIEditingControlList mUIEditingControlList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcceptAll : WinWindow
    {
        
        public wAcceptAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "AcceptAllListBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinList listItems
        {
            get
            {
                if ((this.mlistItems == null))
                {
                    this.mlistItems = new WinList(this);
                }
                return this.mlistItems;
            }
        }
        #endregion
        
        #region Fields
        private WinList mlistItems;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcceptSelected : WinWindow
    {
        
        public wAcceptSelected(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "AcceptSelectedListBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinList listItems
        {
            get
            {
                if ((this.mlistItems == null))
                {
                    this.mlistItems = new WinList(this);
                }
                return this.mlistItems;
            }
        }
        #endregion
        
        #region Fields
        private WinList mlistItems;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDerivationDefintion_Filter : WinWindow
    {
        
        public wDerivationDefintion_Filter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkedListBox1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIIsActCheckBox
        {
            get
            {
                if ((this.mUIIsActCheckBox == null))
                {
                    this.mUIIsActCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIIsActCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Is Act";
                    #endregion
                }
                return this.mUIIsActCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIIsActCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICertainPeriodWindow1 : WinWindow
    {
        
        public UICertainPeriodWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkedListBox1";
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIIsActCheckBox
        {
            get
            {
                if ((this.mUIIsActCheckBox == null))
                {
                    this.mUIIsActCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIIsActCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Is Act";
                    #endregion
                }
                return this.mUIIsActCheckBox;
            }
        }
        
        public WinCheckBox UIActiveMemberCheckBox
        {
            get
            {
                if ((this.mUIActiveMemberCheckBox == null))
                {
                    this.mUIActiveMemberCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIActiveMemberCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Active Member";
                    #endregion
                }
                return this.mUIActiveMemberCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIIsActCheckBox;
        
        private WinCheckBox mUIActiveMemberCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIEditingControlList : WinList
    {
        
        public UIEditingControlList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Editing Control";
            #endregion
        }
        
        #region Properties
        public WinListItem UIStatus2ListItem
        {
            get
            {
                if ((this.mUIStatus2ListItem == null))
                {
                    this.mUIStatus2ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIStatus2ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Status2";
                    #endregion
                }
                return this.mUIStatus2ListItem;
            }
        }
        
        public WinListItem UIStatus3ListItem
        {
            get
            {
                if ((this.mUIStatus3ListItem == null))
                {
                    this.mUIStatus3ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIStatus3ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Status3";
                    #endregion
                }
                return this.mUIStatus3ListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIStatus2ListItem;
        
        private WinListItem mUIStatus3ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_RunResults_Popup : WinWindow
    {
        
        public wIP_Matching_RunResults_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run Results";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Results");
            #endregion
        }
        
        #region Properties
        public wOK3 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK3(this);
                }
                return this.mwOK;
            }
        }
        
        public wMessage2 wMessage
        {
            get
            {
                if ((this.mwMessage == null))
                {
                    this.mwMessage = new wMessage2(this);
                }
                return this.mwMessage;
            }
        }
        #endregion
        
        #region Fields
        private wOK3 mwOK;
        
        private wMessage2 mwMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK3 : WinWindow
    {
        
        public wOK3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Run Results");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Run Results");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMessage2 : WinWindow
    {
        
        public wMessage2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Run Results");
            #endregion
        }
        
        #region Properties
        public WinText txtMessage
        {
            get
            {
                if ((this.mtxtMessage == null))
                {
                    this.mtxtMessage = new WinText(this);
                    #region Search Criteria
                    this.mtxtMessage.WindowTitles.Add("Run Results");
                    #endregion
                }
                return this.mtxtMessage;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_ProcessMatchingResultsConfirm_Popup : WinWindow
    {
        
        public wIP_Matching_ProcessMatchingResultsConfirm_Popup()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Process Matching Results - Con", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Process Matching Results - Confirm");
            #endregion
        }
        
        #region Properties
        public wYes1 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes1(this);
                }
                return this.mwYes;
            }
        }
        
        public wNo1 wNo
        {
            get
            {
                if ((this.mwNo == null))
                {
                    this.mwNo = new wNo1(this);
                }
                return this.mwNo;
            }
        }
        
        public wMessage3 wMessage
        {
            get
            {
                if ((this.mwMessage == null))
                {
                    this.mwMessage = new wMessage3(this);
                }
                return this.mwMessage;
            }
        }
        #endregion
        
        #region Fields
        private wYes1 mwYes;
        
        private wNo1 mwNo;
        
        private wMessage3 mwMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes1 : WinWindow
    {
        
        public wYes1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Process Matching Results - Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.WindowTitles.Add("Process Matching Results - Confirm");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNo1 : WinWindow
    {
        
        public wNo1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Process Matching Results - Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton btnNo
        {
            get
            {
                if ((this.mbtnNo == null))
                {
                    this.mbtnNo = new WinButton(this);
                    #region Search Criteria
                    this.mbtnNo.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mbtnNo.WindowTitles.Add("Process Matching Results - Confirm");
                    #endregion
                }
                return this.mbtnNo;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnNo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMessage3 : WinWindow
    {
        
        public wMessage3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Process Matching Results - Confirm");
            #endregion
        }
        
        #region Properties
        public WinText txtMessage
        {
            get
            {
                if ((this.mtxtMessage == null))
                {
                    this.mtxtMessage = new WinText(this);
                    #region Search Criteria
                    this.mtxtMessage.WindowTitles.Add("Process Matching Results - Confirm");
                    #endregion
                }
                return this.mtxtMessage;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_ProcessMatchingResultsComplete_Popup : WinWindow
    {
        
        public wIP_Matching_ProcessMatchingResultsComplete_Popup()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Process Matching Results - Co", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Process Matching Results - Complete");
            #endregion
        }
        
        #region Properties
        public wOK4 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK4(this);
                }
                return this.mwOK;
            }
        }
        
        public wMessage4 wMessage
        {
            get
            {
                if ((this.mwMessage == null))
                {
                    this.mwMessage = new wMessage4(this);
                }
                return this.mwMessage;
            }
        }
        #endregion
        
        #region Fields
        private wOK4 mwOK;
        
        private wMessage4 mwMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK4 : WinWindow
    {
        
        public wOK4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Process Matching Results - Complete");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Process Matching Results - Complete");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMessage4 : WinWindow
    {
        
        public wMessage4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Process Matching Results - Complete");
            #endregion
        }
        
        #region Properties
        public WinText txtMessage
        {
            get
            {
                if ((this.mtxtMessage == null))
                {
                    this.mtxtMessage = new WinText(this);
                    #region Search Criteria
                    this.mtxtMessage.WindowTitles.Add("Process Matching Results - Complete");
                    #endregion
                }
                return this.mtxtMessage;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxtMessage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_DerivationDefinition : WinWindow
    {
        
        public wDG_DerivationDefinition()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Definition", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public wSelectInputFields wSelectInputFields
        {
            get
            {
                if ((this.mwSelectInputFields == null))
                {
                    this.mwSelectInputFields = new wSelectInputFields(this);
                }
                return this.mwSelectInputFields;
            }
        }
        
        public wOK5 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK5(this);
                }
                return this.mwOK;
            }
        }
        
        public wStandardorCustomFilter wStandardorCustomFilter
        {
            get
            {
                if ((this.mwStandardorCustomFilter == null))
                {
                    this.mwStandardorCustomFilter = new wStandardorCustomFilter(this);
                }
                return this.mwStandardorCustomFilter;
            }
        }
        
        public wCustomExpression wCustomExpression
        {
            get
            {
                if ((this.mwCustomExpression == null))
                {
                    this.mwCustomExpression = new wCustomExpression(this);
                }
                return this.mwCustomExpression;
            }
        }
        
        public wCustomExpression_Accept wCustomExpression_Accept
        {
            get
            {
                if ((this.mwCustomExpression_Accept == null))
                {
                    this.mwCustomExpression_Accept = new wCustomExpression_Accept(this);
                }
                return this.mwCustomExpression_Accept;
            }
        }
        
        public wApply wApply
        {
            get
            {
                if ((this.mwApply == null))
                {
                    this.mwApply = new wApply(this);
                }
                return this.mwApply;
            }
        }
        
        public wFPGrid1 wFPGrid
        {
            get
            {
                if ((this.mwFPGrid == null))
                {
                    this.mwFPGrid = new wFPGrid1(this);
                }
                return this.mwFPGrid;
            }
        }
        
        public wFormula wFormula
        {
            get
            {
                if ((this.mwFormula == null))
                {
                    this.mwFormula = new wFormula(this);
                }
                return this.mwFormula;
            }
        }
        
        public wCustomExpression_Formula wCustomExpression_Formula
        {
            get
            {
                if ((this.mwCustomExpression_Formula == null))
                {
                    this.mwCustomExpression_Formula = new wCustomExpression_Formula(this);
                }
                return this.mwCustomExpression_Formula;
            }
        }
        
        public wAccept wAccept
        {
            get
            {
                if ((this.mwAccept == null))
                {
                    this.mwAccept = new wAccept(this);
                }
                return this.mwAccept;
            }
        }
        
        public wPrevious wPrevious
        {
            get
            {
                if ((this.mwPrevious == null))
                {
                    this.mwPrevious = new wPrevious(this);
                }
                return this.mwPrevious;
            }
        }
        
        public wNext wNext
        {
            get
            {
                if ((this.mwNext == null))
                {
                    this.mwNext = new wNext(this);
                }
                return this.mwNext;
            }
        }
        
        public wFilter wFilter
        {
            get
            {
                if ((this.mwFilter == null))
                {
                    this.mwFilter = new wFilter(this);
                }
                return this.mwFilter;
            }
        }
        
        public wName wName
        {
            get
            {
                if ((this.mwName == null))
                {
                    this.mwName = new wName(this);
                }
                return this.mwName;
            }
        }
        
        public wRange wRange
        {
            get
            {
                if ((this.mwRange == null))
                {
                    this.mwRange = new wRange(this);
                }
                return this.mwRange;
            }
        }
        #endregion
        
        #region Fields
        private wSelectInputFields mwSelectInputFields;
        
        private wOK5 mwOK;
        
        private wStandardorCustomFilter mwStandardorCustomFilter;
        
        private wCustomExpression mwCustomExpression;
        
        private wCustomExpression_Accept mwCustomExpression_Accept;
        
        private wApply mwApply;
        
        private wFPGrid1 mwFPGrid;
        
        private wFormula mwFormula;
        
        private wCustomExpression_Formula mwCustomExpression_Formula;
        
        private wAccept mwAccept;
        
        private wPrevious mwPrevious;
        
        private wNext mwNext;
        
        private wFilter mwFilter;
        
        private wName mwName;
        
        private wRange mwRange;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectInputFields : WinWindow
    {
        
        public wSelectInputFields(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "addInputButton";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnSelectInputFields
        {
            get
            {
                if ((this.mbtnSelectInputFields == null))
                {
                    this.mbtnSelectInputFields = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSelectInputFields.SearchProperties[WinButton.PropertyNames.Name] = "Select Input Field(s)...";
                    this.mbtnSelectInputFields.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mbtnSelectInputFields;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSelectInputFields;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK5 : WinWindow
    {
        
        public wOK5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandardorCustomFilter : WinWindow
    {
        
        public wStandardorCustomFilter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButtonFilter";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdStandardorCustomFilter
        {
            get
            {
                if ((this.mrdStandardorCustomFilter == null))
                {
                    this.mrdStandardorCustomFilter = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdStandardorCustomFilter.SearchProperties[WinRadioButton.PropertyNames.Name] = "Standard or Custom Filter";
                    this.mrdStandardorCustomFilter.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mrdStandardorCustomFilter;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdStandardorCustomFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomExpression : WinWindow
    {
        
        public wCustomExpression(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButtonSelectionCriteria";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdCustomExpression
        {
            get
            {
                if ((this.mrdCustomExpression == null))
                {
                    this.mrdCustomExpression = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdCustomExpression.SearchProperties[WinRadioButton.PropertyNames.Name] = "Custom Expression";
                    this.mrdCustomExpression.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mrdCustomExpression;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdCustomExpression;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomExpression_Accept : WinWindow
    {
        
        public wCustomExpression_Accept(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptButton";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnAccept
        {
            get
            {
                if ((this.mbtnAccept == null))
                {
                    this.mbtnAccept = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAccept.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mbtnAccept;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAccept;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApply : WinWindow
    {
        
        public wApply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonApply";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnApply
        {
            get
            {
                if ((this.mbtnApply == null))
                {
                    this.mbtnApply = new WinButton(this);
                    #region Search Criteria
                    this.mbtnApply.SearchProperties[WinButton.PropertyNames.Name] = "Apply";
                    this.mbtnApply.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mbtnApply;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnApply;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid1 : WinWindow
    {
        
        public wFPGrid1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpSpread1";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFormula : WinWindow
    {
        
        public wFormula(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaTextBox1";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFormula
        {
            get
            {
                if ((this.mtxtFormula == null))
                {
                    this.mtxtFormula = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFormula.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mtxtFormula;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFormula;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomExpression_Formula : WinWindow
    {
        
        public wCustomExpression_Formula(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaTextBox";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFormula
        {
            get
            {
                if ((this.mtxtFormula == null))
                {
                    this.mtxtFormula = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFormula.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mtxtFormula;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFormula;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAccept : WinWindow
    {
        
        public wAccept(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAccept";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinControl btnAccept
        {
            get
            {
                if ((this.mbtnAccept == null))
                {
                    this.mbtnAccept = new WinControl(this);
                    #region Search Criteria
                    this.mbtnAccept.SearchProperties[UITestControl.PropertyNames.ControlType] = "Border";
                    this.mbtnAccept.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mbtnAccept;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mbtnAccept;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPrevious : WinWindow
    {
        
        public wPrevious(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "previousButton";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnPrevious
        {
            get
            {
                if ((this.mbtnPrevious == null))
                {
                    this.mbtnPrevious = new WinButton(this);
                    #region Search Criteria
                    this.mbtnPrevious.SearchProperties[WinButton.PropertyNames.Name] = "Previous";
                    this.mbtnPrevious.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mbtnPrevious;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnPrevious;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNext : WinWindow
    {
        
        public wNext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nextButton";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnNext
        {
            get
            {
                if ((this.mbtnNext == null))
                {
                    this.mbtnNext = new WinButton(this);
                    #region Search Criteria
                    this.mbtnNext.SearchProperties[WinButton.PropertyNames.Name] = "Next";
                    this.mbtnNext.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mbtnNext;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnNext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFilter : WinWindow
    {
        
        public wFilter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ultraDropDownButton1";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public txtFilter1 txtFilter
        {
            get
            {
                if ((this.mtxtFilter == null))
                {
                    this.mtxtFilter = new txtFilter1(this);
                }
                return this.mtxtFilter;
            }
        }
        #endregion
        
        #region Fields
        private txtFilter1 mtxtFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtFilter1 : WinText
    {
        
        public txtFilter1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "<No Filter>";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnDropDown
        {
            get
            {
                if ((this.mbtnDropDown == null))
                {
                    this.mbtnDropDown = new WinButton(this);
                    #region Search Criteria
                    this.mbtnDropDown.SearchProperties[WinButton.PropertyNames.Name] = "Drop down";
                    this.mbtnDropDown.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mbtnDropDown;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnDropDown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wName : WinWindow
    {
        
        public wName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nameTextBox";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinEdit txtName
        {
            get
            {
                if ((this.mtxtName == null))
                {
                    this.mtxtName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtName.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mtxtName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRange : WinWindow
    {
        
        public wRange(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rangeTextBox";
            this.WindowTitles.Add("Custom Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinEdit txtRange
        {
            get
            {
                if ((this.mtxtRange == null))
                {
                    this.mtxtRange = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtRange.WindowTitles.Add("Custom Derivation Definition");
                    #endregion
                }
                return this.mtxtRange;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtRange;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectInputFields1 : WinWindow
    {
        
        public wSelectInputFields1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Select ", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Select Input Fields");
            #endregion
        }
        
        #region Properties
        public wOK6 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK6(this);
                }
                return this.mwOK;
            }
        }
        
        public wTreeViewCurrent wTreeViewCurrent
        {
            get
            {
                if ((this.mwTreeViewCurrent == null))
                {
                    this.mwTreeViewCurrent = new wTreeViewCurrent(this);
                }
                return this.mwTreeViewCurrent;
            }
        }
        
        public wTreeViewPrevious wTreeViewPrevious
        {
            get
            {
                if ((this.mwTreeViewPrevious == null))
                {
                    this.mwTreeViewPrevious = new wTreeViewPrevious(this);
                }
                return this.mwTreeViewPrevious;
            }
        }
        
        public wTreeViewStandardInput wTreeViewStandardInput
        {
            get
            {
                if ((this.mwTreeViewStandardInput == null))
                {
                    this.mwTreeViewStandardInput = new wTreeViewStandardInput(this);
                }
                return this.mwTreeViewStandardInput;
            }
        }
        #endregion
        
        #region Fields
        private wOK6 mwOK;
        
        private wTreeViewCurrent mwTreeViewCurrent;
        
        private wTreeViewPrevious mwTreeViewPrevious;
        
        private wTreeViewStandardInput mwTreeViewStandardInput;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK6 : WinWindow
    {
        
        public wOK6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.WindowTitles.Add("Select Input Fields");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Select Input Fields");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTreeViewCurrent : WinWindow
    {
        
        public wTreeViewCurrent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "treeViewCurrent";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Select Input Fields");
            #endregion
        }
        
        #region Properties
        public tvCurrentView1 tvCurrentView
        {
            get
            {
                if ((this.mtvCurrentView == null))
                {
                    this.mtvCurrentView = new tvCurrentView1(this);
                }
                return this.mtvCurrentView;
            }
        }
        #endregion
        
        #region Fields
        private tvCurrentView1 mtvCurrentView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvCurrentView1 : WinTree
    {
        
        public tvCurrentView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Current View";
            this.WindowTitles.Add("Select Input Fields");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIIncludeallCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIIncludeallCheckBoxTreeItem == null))
                {
                    this.mUIIncludeallCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIIncludeallCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Include all";
                    this.mUIIncludeallCheckBoxTreeItem.SearchProperties["Value"] = "0";
                    this.mUIIncludeallCheckBoxTreeItem.WindowTitles.Add("Select Input Fields");
                    #endregion
                }
                return this.mUIIncludeallCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIIncludeallCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTreeViewPrevious : WinWindow
    {
        
        public wTreeViewPrevious(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "treeViewPrevious";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Select Input Fields");
            #endregion
        }
        
        #region Properties
        public tvPriorView1 tvPriorView
        {
            get
            {
                if ((this.mtvPriorView == null))
                {
                    this.mtvPriorView = new tvPriorView1(this);
                }
                return this.mtvPriorView;
            }
        }
        #endregion
        
        #region Fields
        private tvPriorView1 mtvPriorView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvPriorView1 : WinTree
    {
        
        public tvPriorView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Prior View";
            this.WindowTitles.Add("Select Input Fields");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIIncludeallCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIIncludeallCheckBoxTreeItem == null))
                {
                    this.mUIIncludeallCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIIncludeallCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Include all";
                    this.mUIIncludeallCheckBoxTreeItem.SearchProperties["Value"] = "0";
                    this.mUIIncludeallCheckBoxTreeItem.WindowTitles.Add("Select Input Fields");
                    #endregion
                }
                return this.mUIIncludeallCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIIncludeallCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTreeViewStandardInput : WinWindow
    {
        
        public wTreeViewStandardInput(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "treeViewStandardInput";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Select Input Fields");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIIncludeallCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIIncludeallCheckBoxTreeItem == null))
                {
                    this.mUIIncludeallCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIIncludeallCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Include all";
                    this.mUIIncludeallCheckBoxTreeItem.SearchProperties["Value"] = "0";
                    this.mUIIncludeallCheckBoxTreeItem.WindowTitles.Add("Select Input Fields");
                    #endregion
                }
                return this.mUIIncludeallCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIIncludeallCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_SaveDerivedValuesToWarehouse_Popup : WinWindow
    {
        
        public wDG_SaveDerivedValuesToWarehouse_Popup()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Derived Values to ", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save Derived Values to Warehouse");
            #endregion
        }
        
        #region Properties
        public wOK7 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK7(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel2 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel2(this);
                }
                return this.mwCancel;
            }
        }
        #endregion
        
        #region Fields
        private wOK7 mwOK;
        
        private wCancel2 mwCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK7 : WinWindow
    {
        
        public wOK7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save Derived Values to Warehouse");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Save Derived Values to Warehouse");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel2 : WinWindow
    {
        
        public wCancel2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save Derived Values to Warehouse");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("Save Derived Values to Warehouse");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_Snapshot_Popup : WinWindow
    {
        
        public wSP_Snapshot_Popup()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Snapshot", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Snapshot");
            #endregion
        }
        
        #region Properties
        public wOK8 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK8(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK8 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK8 : WinWindow
    {
        
        public wOK8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Snapshot");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Snapshot");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_StandardInputs1 : WinWindow
    {
        
        public wCK_StandardInputs1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Standard Inputs";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public wPay_C wPay_C
        {
            get
            {
                if ((this.mwPay_C == null))
                {
                    this.mwPay_C = new wPay_C(this);
                }
                return this.mwPay_C;
            }
        }
        
        public wPay_P wPay_P
        {
            get
            {
                if ((this.mwPay_P == null))
                {
                    this.mwPay_P = new wPay_P(this);
                }
                return this.mwPay_P;
            }
        }
        
        public wAccruedBenefit_C wAccruedBenefit_C
        {
            get
            {
                if ((this.mwAccruedBenefit_C == null))
                {
                    this.mwAccruedBenefit_C = new wAccruedBenefit_C(this);
                }
                return this.mwAccruedBenefit_C;
            }
        }
        
        public wAccruedBenefit_P wAccruedBenefit_P
        {
            get
            {
                if ((this.mwAccruedBenefit_P == null))
                {
                    this.mwAccruedBenefit_P = new wAccruedBenefit_P(this);
                }
                return this.mwAccruedBenefit_P;
            }
        }
        
        public wCashBalanceBenefit_C wCashBalanceBenefit_C
        {
            get
            {
                if ((this.mwCashBalanceBenefit_C == null))
                {
                    this.mwCashBalanceBenefit_C = new wCashBalanceBenefit_C(this);
                }
                return this.mwCashBalanceBenefit_C;
            }
        }
        
        public wCashBalanceBenefit_P wCashBalanceBenefit_P
        {
            get
            {
                if ((this.mwCashBalanceBenefit_P == null))
                {
                    this.mwCashBalanceBenefit_P = new wCashBalanceBenefit_P(this);
                }
                return this.mwCashBalanceBenefit_P;
            }
        }
        
        public wVestingService_C wVestingService_C
        {
            get
            {
                if ((this.mwVestingService_C == null))
                {
                    this.mwVestingService_C = new wVestingService_C(this);
                }
                return this.mwVestingService_C;
            }
        }
        
        public wVestingService_P wVestingService_P
        {
            get
            {
                if ((this.mwVestingService_P == null))
                {
                    this.mwVestingService_P = new wVestingService_P(this);
                }
                return this.mwVestingService_P;
            }
        }
        
        public wHours_C wHours_C
        {
            get
            {
                if ((this.mwHours_C == null))
                {
                    this.mwHours_C = new wHours_C(this);
                }
                return this.mwHours_C;
            }
        }
        
        public wHours_P wHours_P
        {
            get
            {
                if ((this.mwHours_P == null))
                {
                    this.mwHours_P = new wHours_P(this);
                }
                return this.mwHours_P;
            }
        }
        
        public wInactiveBenefit_C wInactiveBenefit_C
        {
            get
            {
                if ((this.mwInactiveBenefit_C == null))
                {
                    this.mwInactiveBenefit_C = new wInactiveBenefit_C(this);
                }
                return this.mwInactiveBenefit_C;
            }
        }
        
        public wInactiveBenefit_P wInactiveBenefit_P
        {
            get
            {
                if ((this.mwInactiveBenefit_P == null))
                {
                    this.mwInactiveBenefit_P = new wInactiveBenefit_P(this);
                }
                return this.mwInactiveBenefit_P;
            }
        }
        
        public wStartDate_P wStartDate_P
        {
            get
            {
                if ((this.mwStartDate_P == null))
                {
                    this.mwStartDate_P = new wStartDate_P(this);
                }
                return this.mwStartDate_P;
            }
        }
        
        public wHireDate_C wHireDate_C
        {
            get
            {
                if ((this.mwHireDate_C == null))
                {
                    this.mwHireDate_C = new wHireDate_C(this);
                }
                return this.mwHireDate_C;
            }
        }
        
        public wHireDate_P wHireDate_P
        {
            get
            {
                if ((this.mwHireDate_P == null))
                {
                    this.mwHireDate_P = new wHireDate_P(this);
                }
                return this.mwHireDate_P;
            }
        }
        
        public wMembershipDate_C wMembershipDate_C
        {
            get
            {
                if ((this.mwMembershipDate_C == null))
                {
                    this.mwMembershipDate_C = new wMembershipDate_C(this);
                }
                return this.mwMembershipDate_C;
            }
        }
        
        public wMembershipDate_P wMembershipDate_P
        {
            get
            {
                if ((this.mwMembershipDate_P == null))
                {
                    this.mwMembershipDate_P = new wMembershipDate_P(this);
                }
                return this.mwMembershipDate_P;
            }
        }
        
        public wTerminationDate_C wTerminationDate_C
        {
            get
            {
                if ((this.mwTerminationDate_C == null))
                {
                    this.mwTerminationDate_C = new wTerminationDate_C(this);
                }
                return this.mwTerminationDate_C;
            }
        }
        
        public wPaymentForm_C wPaymentForm_C
        {
            get
            {
                if ((this.mwPaymentForm_C == null))
                {
                    this.mwPaymentForm_C = new wPaymentForm_C(this);
                }
                return this.mwPaymentForm_C;
            }
        }
        
        public wPaymentForm_P wPaymentForm_P
        {
            get
            {
                if ((this.mwPaymentForm_P == null))
                {
                    this.mwPaymentForm_P = new wPaymentForm_P(this);
                }
                return this.mwPaymentForm_P;
            }
        }
        
        public wYearsCertain_C wYearsCertain_C
        {
            get
            {
                if ((this.mwYearsCertain_C == null))
                {
                    this.mwYearsCertain_C = new wYearsCertain_C(this);
                }
                return this.mwYearsCertain_C;
            }
        }
        
        public wYearsCertain_P wYearsCertain_P
        {
            get
            {
                if ((this.mwYearsCertain_P == null))
                {
                    this.mwYearsCertain_P = new wYearsCertain_P(this);
                }
                return this.mwYearsCertain_P;
            }
        }
        
        public wBeneficiaryPercent_C wBeneficiaryPercent_C
        {
            get
            {
                if ((this.mwBeneficiaryPercent_C == null))
                {
                    this.mwBeneficiaryPercent_C = new wBeneficiaryPercent_C(this);
                }
                return this.mwBeneficiaryPercent_C;
            }
        }
        
        public wBeneficiaryPercent_P wBeneficiaryPercent_P
        {
            get
            {
                if ((this.mwBeneficiaryPercent_P == null))
                {
                    this.mwBeneficiaryPercent_P = new wBeneficiaryPercent_P(this);
                }
                return this.mwBeneficiaryPercent_P;
            }
        }
        
        public wStartDate_C wStartDate_C
        {
            get
            {
                if ((this.mwStartDate_C == null))
                {
                    this.mwStartDate_C = new wStartDate_C(this);
                }
                return this.mwStartDate_C;
            }
        }
        
        public wOK9 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK9(this);
                }
                return this.mwOK;
            }
        }
        
        public wPayChange_Max wPayChange_Max
        {
            get
            {
                if ((this.mwPayChange_Max == null))
                {
                    this.mwPayChange_Max = new wPayChange_Max(this);
                }
                return this.mwPayChange_Max;
            }
        }
        
        public wPayRange_Max wPayRange_Max
        {
            get
            {
                if ((this.mwPayRange_Max == null))
                {
                    this.mwPayRange_Max = new wPayRange_Max(this);
                }
                return this.mwPayRange_Max;
            }
        }
        
        public wAccruedBenefitChange_Min wAccruedBenefitChange_Min
        {
            get
            {
                if ((this.mwAccruedBenefitChange_Min == null))
                {
                    this.mwAccruedBenefitChange_Min = new wAccruedBenefitChange_Min(this);
                }
                return this.mwAccruedBenefitChange_Min;
            }
        }
        
        public wAccruedBenefitChange_Max wAccruedBenefitChange_Max
        {
            get
            {
                if ((this.mwAccruedBenefitChange_Max == null))
                {
                    this.mwAccruedBenefitChange_Max = new wAccruedBenefitChange_Max(this);
                }
                return this.mwAccruedBenefitChange_Max;
            }
        }
        
        public wAccruedBenefitRange_Min wAccruedBenefitRange_Min
        {
            get
            {
                if ((this.mwAccruedBenefitRange_Min == null))
                {
                    this.mwAccruedBenefitRange_Min = new wAccruedBenefitRange_Min(this);
                }
                return this.mwAccruedBenefitRange_Min;
            }
        }
        
        public wInactiveBenefitChange_Min wInactiveBenefitChange_Min
        {
            get
            {
                if ((this.mwInactiveBenefitChange_Min == null))
                {
                    this.mwInactiveBenefitChange_Min = new wInactiveBenefitChange_Min(this);
                }
                return this.mwInactiveBenefitChange_Min;
            }
        }
        
        public wInactiveBenefitChange_Max wInactiveBenefitChange_Max
        {
            get
            {
                if ((this.mwInactiveBenefitChange_Max == null))
                {
                    this.mwInactiveBenefitChange_Max = new wInactiveBenefitChange_Max(this);
                }
                return this.mwInactiveBenefitChange_Max;
            }
        }
        
        public wInactiveBenefitRange_Max wInactiveBenefitRange_Max
        {
            get
            {
                if ((this.mwInactiveBenefitRange_Max == null))
                {
                    this.mwInactiveBenefitRange_Max = new wInactiveBenefitRange_Max(this);
                }
                return this.mwInactiveBenefitRange_Max;
            }
        }
        
        public wCashBalanceChange_Act_Min wCashBalanceChange_Act_Min
        {
            get
            {
                if ((this.mwCashBalanceChange_Act_Min == null))
                {
                    this.mwCashBalanceChange_Act_Min = new wCashBalanceChange_Act_Min(this);
                }
                return this.mwCashBalanceChange_Act_Min;
            }
        }
        
        public wCashBalanceChange_Act_Max wCashBalanceChange_Act_Max
        {
            get
            {
                if ((this.mwCashBalanceChange_Act_Max == null))
                {
                    this.mwCashBalanceChange_Act_Max = new wCashBalanceChange_Act_Max(this);
                }
                return this.mwCashBalanceChange_Act_Max;
            }
        }
        
        public wCashBalanceChange_InAct_Min wCashBalanceChange_InAct_Min
        {
            get
            {
                if ((this.mwCashBalanceChange_InAct_Min == null))
                {
                    this.mwCashBalanceChange_InAct_Min = new wCashBalanceChange_InAct_Min(this);
                }
                return this.mwCashBalanceChange_InAct_Min;
            }
        }
        
        public wCashBalanceChange_InAct_Max wCashBalanceChange_InAct_Max
        {
            get
            {
                if ((this.mwCashBalanceChange_InAct_Max == null))
                {
                    this.mwCashBalanceChange_InAct_Max = new wCashBalanceChange_InAct_Max(this);
                }
                return this.mwCashBalanceChange_InAct_Max;
            }
        }
        
        public wCashBalanceRange_Min wCashBalanceRange_Min
        {
            get
            {
                if ((this.mwCashBalanceRange_Min == null))
                {
                    this.mwCashBalanceRange_Min = new wCashBalanceRange_Min(this);
                }
                return this.mwCashBalanceRange_Min;
            }
        }
        
        public wCashBalanceRange_Max wCashBalanceRange_Max
        {
            get
            {
                if ((this.mwCashBalanceRange_Max == null))
                {
                    this.mwCashBalanceRange_Max = new wCashBalanceRange_Max(this);
                }
                return this.mwCashBalanceRange_Max;
            }
        }
        
        public wHoursRange_Min wHoursRange_Min
        {
            get
            {
                if ((this.mwHoursRange_Min == null))
                {
                    this.mwHoursRange_Min = new wHoursRange_Min(this);
                }
                return this.mwHoursRange_Min;
            }
        }
        
        public wHoursRange_Max wHoursRange_Max
        {
            get
            {
                if ((this.mwHoursRange_Max == null))
                {
                    this.mwHoursRange_Max = new wHoursRange_Max(this);
                }
                return this.mwHoursRange_Max;
            }
        }
        
        public wBenefitServiceRange_Min wBenefitServiceRange_Min
        {
            get
            {
                if ((this.mwBenefitServiceRange_Min == null))
                {
                    this.mwBenefitServiceRange_Min = new wBenefitServiceRange_Min(this);
                }
                return this.mwBenefitServiceRange_Min;
            }
        }
        
        public wBenefitServiceRange_Max wBenefitServiceRange_Max
        {
            get
            {
                if ((this.mwBenefitServiceRange_Max == null))
                {
                    this.mwBenefitServiceRange_Max = new wBenefitServiceRange_Max(this);
                }
                return this.mwBenefitServiceRange_Max;
            }
        }
        
        public wVestingServiceRange_Max wVestingServiceRange_Max
        {
            get
            {
                if ((this.mwVestingServiceRange_Max == null))
                {
                    this.mwVestingServiceRange_Max = new wVestingServiceRange_Max(this);
                }
                return this.mwVestingServiceRange_Max;
            }
        }
        
        public wVestingServiceRange_Min wVestingServiceRange_Min
        {
            get
            {
                if ((this.mwVestingServiceRange_Min == null))
                {
                    this.mwVestingServiceRange_Min = new wVestingServiceRange_Min(this);
                }
                return this.mwVestingServiceRange_Min;
            }
        }
        
        public wBenefitServiceForNewAct_Max wBenefitServiceForNewAct_Max
        {
            get
            {
                if ((this.mwBenefitServiceForNewAct_Max == null))
                {
                    this.mwBenefitServiceForNewAct_Max = new wBenefitServiceForNewAct_Max(this);
                }
                return this.mwBenefitServiceForNewAct_Max;
            }
        }
        
        public wVestServiceForNewAct_Max wVestServiceForNewAct_Max
        {
            get
            {
                if ((this.mwVestServiceForNewAct_Max == null))
                {
                    this.mwVestServiceForNewAct_Max = new wVestServiceForNewAct_Max(this);
                }
                return this.mwVestServiceForNewAct_Max;
            }
        }
        
        public wAgeForNewAct_Min wAgeForNewAct_Min
        {
            get
            {
                if ((this.mwAgeForNewAct_Min == null))
                {
                    this.mwAgeForNewAct_Min = new wAgeForNewAct_Min(this);
                }
                return this.mwAgeForNewAct_Min;
            }
        }
        
        public wAgeForNewAct_Max wAgeForNewAct_Max
        {
            get
            {
                if ((this.mwAgeForNewAct_Max == null))
                {
                    this.mwAgeForNewAct_Max = new wAgeForNewAct_Max(this);
                }
                return this.mwAgeForNewAct_Max;
            }
        }
        
        public wAgeForNewRetirees_Min wAgeForNewRetirees_Min
        {
            get
            {
                if ((this.mwAgeForNewRetirees_Min == null))
                {
                    this.mwAgeForNewRetirees_Min = new wAgeForNewRetirees_Min(this);
                }
                return this.mwAgeForNewRetirees_Min;
            }
        }
        
        public wYearsRequiredForVesting wYearsRequiredForVesting
        {
            get
            {
                if ((this.mwYearsRequiredForVesting == null))
                {
                    this.mwYearsRequiredForVesting = new wYearsRequiredForVesting(this);
                }
                return this.mwYearsRequiredForVesting;
            }
        }
        
        public wPayChange_Min wPayChange_Min
        {
            get
            {
                if ((this.mwPayChange_Min == null))
                {
                    this.mwPayChange_Min = new wPayChange_Min(this);
                }
                return this.mwPayChange_Min;
            }
        }
        
        public wBirthDate_Threshold wBirthDate_Threshold
        {
            get
            {
                if ((this.mwBirthDate_Threshold == null))
                {
                    this.mwBirthDate_Threshold = new wBirthDate_Threshold(this);
                }
                return this.mwBirthDate_Threshold;
            }
        }
        
        public wHireDate_Threshold wHireDate_Threshold
        {
            get
            {
                if ((this.mwHireDate_Threshold == null))
                {
                    this.mwHireDate_Threshold = new wHireDate_Threshold(this);
                }
                return this.mwHireDate_Threshold;
            }
        }
        
        public wMembershipDate_Threshold wMembershipDate_Threshold
        {
            get
            {
                if ((this.mwMembershipDate_Threshold == null))
                {
                    this.mwMembershipDate_Threshold = new wMembershipDate_Threshold(this);
                }
                return this.mwMembershipDate_Threshold;
            }
        }
        
        public wStartDate_Threshold wStartDate_Threshold
        {
            get
            {
                if ((this.mwStartDate_Threshold == null))
                {
                    this.mwStartDate_Threshold = new wStartDate_Threshold(this);
                }
                return this.mwStartDate_Threshold;
            }
        }
        
        public wPayRange_Min wPayRange_Min
        {
            get
            {
                if ((this.mwPayRange_Min == null))
                {
                    this.mwPayRange_Min = new wPayRange_Min(this);
                }
                return this.mwPayRange_Min;
            }
        }
        
        public wAccruedBenefitRange_Max wAccruedBenefitRange_Max
        {
            get
            {
                if ((this.mwAccruedBenefitRange_Max == null))
                {
                    this.mwAccruedBenefitRange_Max = new wAccruedBenefitRange_Max(this);
                }
                return this.mwAccruedBenefitRange_Max;
            }
        }
        
        public wInactiveBenefitRange_Min wInactiveBenefitRange_Min
        {
            get
            {
                if ((this.mwInactiveBenefitRange_Min == null))
                {
                    this.mwInactiveBenefitRange_Min = new wInactiveBenefitRange_Min(this);
                }
                return this.mwInactiveBenefitRange_Min;
            }
        }
        
        public wBenefitService_C wBenefitService_C
        {
            get
            {
                if ((this.mwBenefitService_C == null))
                {
                    this.mwBenefitService_C = new wBenefitService_C(this);
                }
                return this.mwBenefitService_C;
            }
        }
        
        public wBenefitService_P wBenefitService_P
        {
            get
            {
                if ((this.mwBenefitService_P == null))
                {
                    this.mwBenefitService_P = new wBenefitService_P(this);
                }
                return this.mwBenefitService_P;
            }
        }
        
        public wBenefitActives_NL wBenefitActives_NL
        {
            get
            {
                if ((this.mwBenefitActives_NL == null))
                {
                    this.mwBenefitActives_NL = new wBenefitActives_NL(this);
                }
                return this.mwBenefitActives_NL;
            }
        }
        #endregion
        
        #region Fields
        private wPay_C mwPay_C;
        
        private wPay_P mwPay_P;
        
        private wAccruedBenefit_C mwAccruedBenefit_C;
        
        private wAccruedBenefit_P mwAccruedBenefit_P;
        
        private wCashBalanceBenefit_C mwCashBalanceBenefit_C;
        
        private wCashBalanceBenefit_P mwCashBalanceBenefit_P;
        
        private wVestingService_C mwVestingService_C;
        
        private wVestingService_P mwVestingService_P;
        
        private wHours_C mwHours_C;
        
        private wHours_P mwHours_P;
        
        private wInactiveBenefit_C mwInactiveBenefit_C;
        
        private wInactiveBenefit_P mwInactiveBenefit_P;
        
        private wStartDate_P mwStartDate_P;
        
        private wHireDate_C mwHireDate_C;
        
        private wHireDate_P mwHireDate_P;
        
        private wMembershipDate_C mwMembershipDate_C;
        
        private wMembershipDate_P mwMembershipDate_P;
        
        private wTerminationDate_C mwTerminationDate_C;
        
        private wPaymentForm_C mwPaymentForm_C;
        
        private wPaymentForm_P mwPaymentForm_P;
        
        private wYearsCertain_C mwYearsCertain_C;
        
        private wYearsCertain_P mwYearsCertain_P;
        
        private wBeneficiaryPercent_C mwBeneficiaryPercent_C;
        
        private wBeneficiaryPercent_P mwBeneficiaryPercent_P;
        
        private wStartDate_C mwStartDate_C;
        
        private wOK9 mwOK;
        
        private wPayChange_Max mwPayChange_Max;
        
        private wPayRange_Max mwPayRange_Max;
        
        private wAccruedBenefitChange_Min mwAccruedBenefitChange_Min;
        
        private wAccruedBenefitChange_Max mwAccruedBenefitChange_Max;
        
        private wAccruedBenefitRange_Min mwAccruedBenefitRange_Min;
        
        private wInactiveBenefitChange_Min mwInactiveBenefitChange_Min;
        
        private wInactiveBenefitChange_Max mwInactiveBenefitChange_Max;
        
        private wInactiveBenefitRange_Max mwInactiveBenefitRange_Max;
        
        private wCashBalanceChange_Act_Min mwCashBalanceChange_Act_Min;
        
        private wCashBalanceChange_Act_Max mwCashBalanceChange_Act_Max;
        
        private wCashBalanceChange_InAct_Min mwCashBalanceChange_InAct_Min;
        
        private wCashBalanceChange_InAct_Max mwCashBalanceChange_InAct_Max;
        
        private wCashBalanceRange_Min mwCashBalanceRange_Min;
        
        private wCashBalanceRange_Max mwCashBalanceRange_Max;
        
        private wHoursRange_Min mwHoursRange_Min;
        
        private wHoursRange_Max mwHoursRange_Max;
        
        private wBenefitServiceRange_Min mwBenefitServiceRange_Min;
        
        private wBenefitServiceRange_Max mwBenefitServiceRange_Max;
        
        private wVestingServiceRange_Max mwVestingServiceRange_Max;
        
        private wVestingServiceRange_Min mwVestingServiceRange_Min;
        
        private wBenefitServiceForNewAct_Max mwBenefitServiceForNewAct_Max;
        
        private wVestServiceForNewAct_Max mwVestServiceForNewAct_Max;
        
        private wAgeForNewAct_Min mwAgeForNewAct_Min;
        
        private wAgeForNewAct_Max mwAgeForNewAct_Max;
        
        private wAgeForNewRetirees_Min mwAgeForNewRetirees_Min;
        
        private wYearsRequiredForVesting mwYearsRequiredForVesting;
        
        private wPayChange_Min mwPayChange_Min;
        
        private wBirthDate_Threshold mwBirthDate_Threshold;
        
        private wHireDate_Threshold mwHireDate_Threshold;
        
        private wMembershipDate_Threshold mwMembershipDate_Threshold;
        
        private wStartDate_Threshold mwStartDate_Threshold;
        
        private wPayRange_Min mwPayRange_Min;
        
        private wAccruedBenefitRange_Max mwAccruedBenefitRange_Max;
        
        private wInactiveBenefitRange_Min mwInactiveBenefitRange_Min;
        
        private wBenefitService_C mwBenefitService_C;
        
        private wBenefitService_P mwBenefitService_P;
        
        private wBenefitActives_NL mwBenefitActives_NL;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPay_C : WinWindow
    {
        
        public wPay_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPay_C
        {
            get
            {
                if ((this.mcboPay_C == null))
                {
                    this.mcboPay_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPay_C.SearchProperties[WinComboBox.PropertyNames.Name] = "Input";
                    this.mcboPay_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboPay_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPay_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPay_P : WinWindow
    {
        
        public wPay_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPay_P
        {
            get
            {
                if ((this.mcboPay_P == null))
                {
                    this.mcboPay_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPay_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "2";
                    this.mcboPay_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboPay_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPay_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAccruedBenefit_C : WinWindow
    {
        
        public wAccruedBenefit_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboAccruedBenefit_C
        {
            get
            {
                if ((this.mcboAccruedBenefit_C == null))
                {
                    this.mcboAccruedBenefit_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboAccruedBenefit_C.SearchProperties[WinComboBox.PropertyNames.Name] = "Last Year";
                    this.mcboAccruedBenefit_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboAccruedBenefit_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboAccruedBenefit_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAccruedBenefit_P : WinWindow
    {
        
        public wAccruedBenefit_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboAccruedBenefit_P
        {
            get
            {
                if ((this.mcboAccruedBenefit_P == null))
                {
                    this.mcboAccruedBenefit_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboAccruedBenefit_P.SearchProperties[WinComboBox.PropertyNames.Name] = "Pay";
                    this.mcboAccruedBenefit_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboAccruedBenefit_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboAccruedBenefit_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBalanceBenefit_C : WinWindow
    {
        
        public wCashBalanceBenefit_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboCashBalanceBenefit_C
        {
            get
            {
                if ((this.mcboCashBalanceBenefit_C == null))
                {
                    this.mcboCashBalanceBenefit_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboCashBalanceBenefit_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "5";
                    this.mcboCashBalanceBenefit_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboCashBalanceBenefit_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboCashBalanceBenefit_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBalanceBenefit_P : WinWindow
    {
        
        public wCashBalanceBenefit_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboCashBalanceBenefit_P
        {
            get
            {
                if ((this.mcboCashBalanceBenefit_P == null))
                {
                    this.mcboCashBalanceBenefit_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboCashBalanceBenefit_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "6";
                    this.mcboCashBalanceBenefit_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboCashBalanceBenefit_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboCashBalanceBenefit_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVestingService_C : WinWindow
    {
        
        public wVestingService_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboVestingService_C
        {
            get
            {
                if ((this.mcboVestingService_C == null))
                {
                    this.mcboVestingService_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboVestingService_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "9";
                    this.mcboVestingService_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboVestingService_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboVestingService_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVestingService_P : WinWindow
    {
        
        public wVestingService_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboVestingService_P
        {
            get
            {
                if ((this.mcboVestingService_P == null))
                {
                    this.mcboVestingService_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboVestingService_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "10";
                    this.mcboVestingService_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboVestingService_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboVestingService_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHours_C : WinWindow
    {
        
        public wHours_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboHours_C
        {
            get
            {
                if ((this.mcboHours_C == null))
                {
                    this.mcboHours_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboHours_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "11";
                    this.mcboHours_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboHours_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboHours_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHours_P : WinWindow
    {
        
        public wHours_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboHours_P
        {
            get
            {
                if ((this.mcboHours_P == null))
                {
                    this.mcboHours_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboHours_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "12";
                    this.mcboHours_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboHours_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboHours_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInactiveBenefit_C : WinWindow
    {
        
        public wInactiveBenefit_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboInactiveBenefit_C
        {
            get
            {
                if ((this.mcboInactiveBenefit_C == null))
                {
                    this.mcboInactiveBenefit_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboInactiveBenefit_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "13";
                    this.mcboInactiveBenefit_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboInactiveBenefit_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboInactiveBenefit_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInactiveBenefit_P : WinWindow
    {
        
        public wInactiveBenefit_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboInactiveBenefit_P
        {
            get
            {
                if ((this.mcboInactiveBenefit_P == null))
                {
                    this.mcboInactiveBenefit_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboInactiveBenefit_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "14";
                    this.mcboInactiveBenefit_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboInactiveBenefit_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboInactiveBenefit_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStartDate_P : WinWindow
    {
        
        public wStartDate_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboStartDate_P
        {
            get
            {
                if ((this.mcboStartDate_P == null))
                {
                    this.mcboStartDate_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboStartDate_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "16";
                    this.mcboStartDate_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboStartDate_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboStartDate_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHireDate_C : WinWindow
    {
        
        public wHireDate_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboHireDate_C
        {
            get
            {
                if ((this.mcboHireDate_C == null))
                {
                    this.mcboHireDate_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboHireDate_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "17";
                    this.mcboHireDate_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboHireDate_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboHireDate_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHireDate_P : WinWindow
    {
        
        public wHireDate_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboHireDate_P
        {
            get
            {
                if ((this.mcboHireDate_P == null))
                {
                    this.mcboHireDate_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboHireDate_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "18";
                    this.mcboHireDate_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboHireDate_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboHireDate_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMembershipDate_C : WinWindow
    {
        
        public wMembershipDate_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboMembershipDate_C
        {
            get
            {
                if ((this.mcboMembershipDate_C == null))
                {
                    this.mcboMembershipDate_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboMembershipDate_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "19";
                    this.mcboMembershipDate_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboMembershipDate_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboMembershipDate_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMembershipDate_P : WinWindow
    {
        
        public wMembershipDate_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboMembershipDate_P
        {
            get
            {
                if ((this.mcboMembershipDate_P == null))
                {
                    this.mcboMembershipDate_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboMembershipDate_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "20";
                    this.mcboMembershipDate_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboMembershipDate_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboMembershipDate_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTerminationDate_C : WinWindow
    {
        
        public wTerminationDate_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboTerminationDate_C
        {
            get
            {
                if ((this.mcboTerminationDate_C == null))
                {
                    this.mcboTerminationDate_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboTerminationDate_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "21";
                    this.mcboTerminationDate_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboTerminationDate_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboTerminationDate_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPaymentForm_C : WinWindow
    {
        
        public wPaymentForm_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPaymentForm_C
        {
            get
            {
                if ((this.mcboPaymentForm_C == null))
                {
                    this.mcboPaymentForm_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPaymentForm_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "22";
                    this.mcboPaymentForm_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboPaymentForm_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPaymentForm_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPaymentForm_P : WinWindow
    {
        
        public wPaymentForm_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPaymentForm_P
        {
            get
            {
                if ((this.mcboPaymentForm_P == null))
                {
                    this.mcboPaymentForm_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPaymentForm_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "23";
                    this.mcboPaymentForm_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboPaymentForm_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPaymentForm_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYearsCertain_C : WinWindow
    {
        
        public wYearsCertain_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboYearsCertain_C
        {
            get
            {
                if ((this.mcboYearsCertain_C == null))
                {
                    this.mcboYearsCertain_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboYearsCertain_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "24";
                    this.mcboYearsCertain_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboYearsCertain_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboYearsCertain_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYearsCertain_P : WinWindow
    {
        
        public wYearsCertain_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboYearsCertain_P
        {
            get
            {
                if ((this.mcboYearsCertain_P == null))
                {
                    this.mcboYearsCertain_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboYearsCertain_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "25";
                    this.mcboYearsCertain_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboYearsCertain_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboYearsCertain_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBeneficiaryPercent_C : WinWindow
    {
        
        public wBeneficiaryPercent_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboBeneficiaryPercent_C
        {
            get
            {
                if ((this.mcboBeneficiaryPercent_C == null))
                {
                    this.mcboBeneficiaryPercent_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboBeneficiaryPercent_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "26";
                    this.mcboBeneficiaryPercent_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboBeneficiaryPercent_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboBeneficiaryPercent_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBeneficiaryPercent_P : WinWindow
    {
        
        public wBeneficiaryPercent_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboBeneficiaryPercent_P
        {
            get
            {
                if ((this.mcboBeneficiaryPercent_P == null))
                {
                    this.mcboBeneficiaryPercent_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboBeneficiaryPercent_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "27";
                    this.mcboBeneficiaryPercent_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboBeneficiaryPercent_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboBeneficiaryPercent_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStartDate_C : WinWindow
    {
        
        public wStartDate_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboStartDate_C
        {
            get
            {
                if ((this.mcboStartDate_C == null))
                {
                    this.mcboStartDate_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboStartDate_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "15";
                    this.mcboStartDate_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboStartDate_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboStartDate_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK9 : WinWindow
    {
        
        public wOK9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonOk";
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayChange_Max : WinEdit
    {
        
        public wPayChange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtPayChange_Max
        {
            get
            {
                if ((this.mtxtPayChange_Max == null))
                {
                    this.mtxtPayChange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPayChange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "1";
                    this.mtxtPayChange_Max.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxtPayChange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtPayChange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtPayChange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayRange_Max : WinWindow
    {
        
        public wPayRange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtPayRange_Max
        {
            get
            {
                if ((this.mtxtPayRange_Max == null))
                {
                    this.mtxtPayRange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPayRange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "4";
                    this.mtxtPayRange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtPayRange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtPayRange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAccruedBenefitChange_Min : WinEdit
    {
        
        public wAccruedBenefitChange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Hours Range";
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtAccruedBenefitChange_Min
        {
            get
            {
                if ((this.mtxtAccruedBenefitChange_Min == null))
                {
                    this.mtxtAccruedBenefitChange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtAccruedBenefitChange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "5";
                    this.mtxtAccruedBenefitChange_Min.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxtAccruedBenefitChange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtAccruedBenefitChange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtAccruedBenefitChange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAccruedBenefitChange_Max : WinWindow
    {
        
        public wAccruedBenefitChange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtAccruedBenefitChange_Max
        {
            get
            {
                if ((this.mtxtAccruedBenefitChange_Max == null))
                {
                    this.mtxtAccruedBenefitChange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtAccruedBenefitChange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "6";
                    this.mtxtAccruedBenefitChange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtAccruedBenefitChange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtAccruedBenefitChange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAccruedBenefitRange_Min : WinWindow
    {
        
        public wAccruedBenefitRange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtAccruedBenefitRange_Min
        {
            get
            {
                if ((this.mtxtAccruedBenefitRange_Min == null))
                {
                    this.mtxtAccruedBenefitRange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtAccruedBenefitRange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "7";
                    this.mtxtAccruedBenefitRange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtAccruedBenefitRange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtAccruedBenefitRange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInactiveBenefitChange_Min : WinWindow
    {
        
        public wInactiveBenefitChange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtInactiveBenefitChange_Min
        {
            get
            {
                if ((this.mtxtInactiveBenefitChange_Min == null))
                {
                    this.mtxtInactiveBenefitChange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtInactiveBenefitChange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "9";
                    this.mtxtInactiveBenefitChange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtInactiveBenefitChange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtInactiveBenefitChange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInactiveBenefitChange_Max : WinWindow
    {
        
        public wInactiveBenefitChange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtInactiveBenefitChange_Max
        {
            get
            {
                if ((this.mtxtInactiveBenefitChange_Max == null))
                {
                    this.mtxtInactiveBenefitChange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtInactiveBenefitChange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "10";
                    this.mtxtInactiveBenefitChange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtInactiveBenefitChange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtInactiveBenefitChange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInactiveBenefitRange_Max : WinWindow
    {
        
        public wInactiveBenefitRange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtInactiveBenefitRange_Max
        {
            get
            {
                if ((this.mtxtInactiveBenefitRange_Max == null))
                {
                    this.mtxtInactiveBenefitRange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtInactiveBenefitRange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "12";
                    this.mtxtInactiveBenefitRange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtInactiveBenefitRange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtInactiveBenefitRange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBalanceChange_Act_Min : WinWindow
    {
        
        public wCashBalanceChange_Act_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtCashBalanceChange_Act_Min
        {
            get
            {
                if ((this.mtxtCashBalanceChange_Act_Min == null))
                {
                    this.mtxtCashBalanceChange_Act_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtCashBalanceChange_Act_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "13";
                    this.mtxtCashBalanceChange_Act_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtCashBalanceChange_Act_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtCashBalanceChange_Act_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBalanceChange_Act_Max : WinEdit
    {
        
        public wCashBalanceChange_Act_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtCashBalanceChange_Act_Max
        {
            get
            {
                if ((this.mtxtCashBalanceChange_Act_Max == null))
                {
                    this.mtxtCashBalanceChange_Act_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtCashBalanceChange_Act_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "14";
                    this.mtxtCashBalanceChange_Act_Max.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxtCashBalanceChange_Act_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtCashBalanceChange_Act_Max;
            }
        }
        
        public WinEdit txtPayRange_Min
        {
            get
            {
                if ((this.mtxtPayRange_Min == null))
                {
                    this.mtxtPayRange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPayRange_Min.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxtPayRange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "5";
                    this.mtxtPayRange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtPayRange_Min;
            }
        }
        
        public WinEdit txtPensionerMemberPensionIncrease_Max
        {
            get
            {
                if ((this.mtxtPensionerMemberPensionIncrease_Max == null))
                {
                    this.mtxtPensionerMemberPensionIncrease_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPensionerMemberPensionIncrease_Max.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxtPensionerMemberPensionIncrease_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "8";
                    this.mtxtPensionerMemberPensionIncrease_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtPensionerMemberPensionIncrease_Max;
            }
        }
        
        public WinEdit txtMinimumServiceAtValuation
        {
            get
            {
                if ((this.mtxtMinimumServiceAtValuation == null))
                {
                    this.mtxtMinimumServiceAtValuation = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtMinimumServiceAtValuation.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxtMinimumServiceAtValuation.SearchProperties[WinEdit.PropertyNames.Instance] = "35";
                    this.mtxtMinimumServiceAtValuation.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtMinimumServiceAtValuation;
            }
        }
        
        public WinEdit txtMaximumPre88GMPIncrease
        {
            get
            {
                if ((this.mtxtMaximumPre88GMPIncrease == null))
                {
                    this.mtxtMaximumPre88GMPIncrease = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtMaximumPre88GMPIncrease.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxtMaximumPre88GMPIncrease.SearchProperties[WinEdit.PropertyNames.Instance] = "36";
                    this.mtxtMaximumPre88GMPIncrease.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtMaximumPre88GMPIncrease;
            }
        }
        
        public WinEdit txtMaximumPost88GMPIncrease
        {
            get
            {
                if ((this.mtxtMaximumPost88GMPIncrease == null))
                {
                    this.mtxtMaximumPost88GMPIncrease = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtMaximumPost88GMPIncrease.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxtMaximumPost88GMPIncrease.SearchProperties[WinEdit.PropertyNames.Instance] = "37";
                    this.mtxtMaximumPost88GMPIncrease.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtMaximumPost88GMPIncrease;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtCashBalanceChange_Act_Max;
        
        private WinEdit mtxtPayRange_Min;
        
        private WinEdit mtxtPensionerMemberPensionIncrease_Max;
        
        private WinEdit mtxtMinimumServiceAtValuation;
        
        private WinEdit mtxtMaximumPre88GMPIncrease;
        
        private WinEdit mtxtMaximumPost88GMPIncrease;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBalanceChange_InAct_Min : WinWindow
    {
        
        public wCashBalanceChange_InAct_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtCashBalanceChange_InAct_Min
        {
            get
            {
                if ((this.mtxtCashBalanceChange_InAct_Min == null))
                {
                    this.mtxtCashBalanceChange_InAct_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtCashBalanceChange_InAct_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "15";
                    this.mtxtCashBalanceChange_InAct_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtCashBalanceChange_InAct_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtCashBalanceChange_InAct_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBalanceChange_InAct_Max : WinEdit
    {
        
        public wCashBalanceChange_InAct_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtCashBalanceChange_InAct_Max
        {
            get
            {
                if ((this.mtxtCashBalanceChange_InAct_Max == null))
                {
                    this.mtxtCashBalanceChange_InAct_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtCashBalanceChange_InAct_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "16";
                    this.mtxtCashBalanceChange_InAct_Max.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxtCashBalanceChange_InAct_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtCashBalanceChange_InAct_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtCashBalanceChange_InAct_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBalanceRange_Min : WinWindow
    {
        
        public wCashBalanceRange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtCashBalanceRange_Min
        {
            get
            {
                if ((this.mtxtCashBalanceRange_Min == null))
                {
                    this.mtxtCashBalanceRange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtCashBalanceRange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "17";
                    this.mtxtCashBalanceRange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtCashBalanceRange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtCashBalanceRange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBalanceRange_Max : WinEdit
    {
        
        public wCashBalanceRange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtCashBalanceRange_Max
        {
            get
            {
                if ((this.mtxtCashBalanceRange_Max == null))
                {
                    this.mtxtCashBalanceRange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtCashBalanceRange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "18";
                    this.mtxtCashBalanceRange_Max.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxtCashBalanceRange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtCashBalanceRange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtCashBalanceRange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHoursRange_Min : WinWindow
    {
        
        public wHoursRange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtHoursRange_Min
        {
            get
            {
                if ((this.mtxtHoursRange_Min == null))
                {
                    this.mtxtHoursRange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtHoursRange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "19";
                    this.mtxtHoursRange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtHoursRange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtHoursRange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHoursRange_Max : WinWindow
    {
        
        public wHoursRange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtHoursRange_Max
        {
            get
            {
                if ((this.mtxtHoursRange_Max == null))
                {
                    this.mtxtHoursRange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtHoursRange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "20";
                    this.mtxtHoursRange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtHoursRange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtHoursRange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitServiceRange_Min : WinEdit
    {
        
        public wBenefitServiceRange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Instance] = "21";
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtBenefitServiceRange_Min
        {
            get
            {
                if ((this.mtxtBenefitServiceRange_Min == null))
                {
                    this.mtxtBenefitServiceRange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtBenefitServiceRange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "1";
                    this.mtxtBenefitServiceRange_Min.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxtBenefitServiceRange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtBenefitServiceRange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtBenefitServiceRange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitServiceRange_Max : WinWindow
    {
        
        public wBenefitServiceRange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtBenefitServiceRange_Max
        {
            get
            {
                if ((this.mtxtBenefitServiceRange_Max == null))
                {
                    this.mtxtBenefitServiceRange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtBenefitServiceRange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "22";
                    this.mtxtBenefitServiceRange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtBenefitServiceRange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtBenefitServiceRange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVestingServiceRange_Max : WinWindow
    {
        
        public wVestingServiceRange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtVestingServiceRange_Max
        {
            get
            {
                if ((this.mtxtVestingServiceRange_Max == null))
                {
                    this.mtxtVestingServiceRange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtVestingServiceRange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "24";
                    this.mtxtVestingServiceRange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtVestingServiceRange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtVestingServiceRange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVestingServiceRange_Min : WinWindow
    {
        
        public wVestingServiceRange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtVestingServiceRange_Min
        {
            get
            {
                if ((this.mtxtVestingServiceRange_Min == null))
                {
                    this.mtxtVestingServiceRange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtVestingServiceRange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "23";
                    this.mtxtVestingServiceRange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtVestingServiceRange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtVestingServiceRange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitServiceForNewAct_Max : WinWindow
    {
        
        public wBenefitServiceForNewAct_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtBenefitServiceForNewAct_Max
        {
            get
            {
                if ((this.mtxtBenefitServiceForNewAct_Max == null))
                {
                    this.mtxtBenefitServiceForNewAct_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtBenefitServiceForNewAct_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "25";
                    this.mtxtBenefitServiceForNewAct_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtBenefitServiceForNewAct_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtBenefitServiceForNewAct_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVestServiceForNewAct_Max : WinWindow
    {
        
        public wVestServiceForNewAct_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtVestServiceForNewAct_Max
        {
            get
            {
                if ((this.mtxtVestServiceForNewAct_Max == null))
                {
                    this.mtxtVestServiceForNewAct_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtVestServiceForNewAct_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "26";
                    this.mtxtVestServiceForNewAct_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtVestServiceForNewAct_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtVestServiceForNewAct_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAgeForNewAct_Min : WinWindow
    {
        
        public wAgeForNewAct_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtAgeForNewAct_Min
        {
            get
            {
                if ((this.mtxtAgeForNewAct_Min == null))
                {
                    this.mtxtAgeForNewAct_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtAgeForNewAct_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "27";
                    this.mtxtAgeForNewAct_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtAgeForNewAct_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtAgeForNewAct_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAgeForNewAct_Max : WinWindow
    {
        
        public wAgeForNewAct_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtAgeForNewAct_Max
        {
            get
            {
                if ((this.mtxtAgeForNewAct_Max == null))
                {
                    this.mtxtAgeForNewAct_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtAgeForNewAct_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "28";
                    this.mtxtAgeForNewAct_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtAgeForNewAct_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtAgeForNewAct_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAgeForNewRetirees_Min : WinWindow
    {
        
        public wAgeForNewRetirees_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtAgeForNewRetirees_Min
        {
            get
            {
                if ((this.mtxtAgeForNewRetirees_Min == null))
                {
                    this.mtxtAgeForNewRetirees_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtAgeForNewRetirees_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "29";
                    this.mtxtAgeForNewRetirees_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtAgeForNewRetirees_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtAgeForNewRetirees_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYearsRequiredForVesting : WinEdit
    {
        
        public wYearsRequiredForVesting(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Instance] = "30";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtYearsRequiredForVesting
        {
            get
            {
                if ((this.mtxtYearsRequiredForVesting == null))
                {
                    this.mtxtYearsRequiredForVesting = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtYearsRequiredForVesting.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxtYearsRequiredForVesting.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtYearsRequiredForVesting;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtYearsRequiredForVesting;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayChange_Min : WinEdit
    {
        
        public wPayChange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtPayChange_Min
        {
            get
            {
                if ((this.mtxtPayChange_Min == null))
                {
                    this.mtxtPayChange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPayChange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "1";
                    this.mtxtPayChange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtPayChange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtPayChange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBirthDate_Threshold : WinEdit
    {
        
        public wBirthDate_Threshold(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Instance] = "31";
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtBirthDate_Threshold
        {
            get
            {
                if ((this.mtxtBirthDate_Threshold == null))
                {
                    this.mtxtBirthDate_Threshold = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtBirthDate_Threshold.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxtBirthDate_Threshold.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtBirthDate_Threshold;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtBirthDate_Threshold;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHireDate_Threshold : WinWindow
    {
        
        public wHireDate_Threshold(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtHireDate_Threshold
        {
            get
            {
                if ((this.mtxtHireDate_Threshold == null))
                {
                    this.mtxtHireDate_Threshold = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtHireDate_Threshold.SearchProperties[WinEdit.PropertyNames.Instance] = "32";
                    this.mtxtHireDate_Threshold.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtHireDate_Threshold;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtHireDate_Threshold;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMembershipDate_Threshold : WinWindow
    {
        
        public wMembershipDate_Threshold(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtMembershipDate_Threshold
        {
            get
            {
                if ((this.mtxtMembershipDate_Threshold == null))
                {
                    this.mtxtMembershipDate_Threshold = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtMembershipDate_Threshold.SearchProperties[WinEdit.PropertyNames.Instance] = "33";
                    this.mtxtMembershipDate_Threshold.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtMembershipDate_Threshold;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtMembershipDate_Threshold;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStartDate_Threshold : WinWindow
    {
        
        public wStartDate_Threshold(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtStartDate_Threshold
        {
            get
            {
                if ((this.mtxtStartDate_Threshold == null))
                {
                    this.mtxtStartDate_Threshold = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtStartDate_Threshold.SearchProperties[WinEdit.PropertyNames.Instance] = "34";
                    this.mtxtStartDate_Threshold.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtStartDate_Threshold;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtStartDate_Threshold;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayRange_Min : WinWindow
    {
        
        public wPayRange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtPayRange_Min
        {
            get
            {
                if ((this.mtxtPayRange_Min == null))
                {
                    this.mtxtPayRange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtPayRange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "3";
                    this.mtxtPayRange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtPayRange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtPayRange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAccruedBenefitRange_Max : WinEdit
    {
        
        public wAccruedBenefitRange_Max(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Benefit Service Range";
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtAccruedBenefitRange_Max
        {
            get
            {
                if ((this.mtxtAccruedBenefitRange_Max == null))
                {
                    this.mtxtAccruedBenefitRange_Max = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtAccruedBenefitRange_Max.SearchProperties[WinEdit.PropertyNames.Instance] = "8";
                    this.mtxtAccruedBenefitRange_Max.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mtxtAccruedBenefitRange_Max.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtAccruedBenefitRange_Max;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtAccruedBenefitRange_Max;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInactiveBenefitRange_Min : WinWindow
    {
        
        public wInactiveBenefitRange_Min(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinEdit txtInactiveBenefitRange_Min
        {
            get
            {
                if ((this.mtxtInactiveBenefitRange_Min == null))
                {
                    this.mtxtInactiveBenefitRange_Min = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtInactiveBenefitRange_Min.SearchProperties[WinEdit.PropertyNames.Instance] = "11";
                    this.mtxtInactiveBenefitRange_Min.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mtxtInactiveBenefitRange_Min;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtInactiveBenefitRange_Min;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitService_C : WinWindow
    {
        
        public wBenefitService_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboBenefitService_C
        {
            get
            {
                if ((this.mcboBenefitService_C == null))
                {
                    this.mcboBenefitService_C = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboBenefitService_C.SearchProperties[WinComboBox.PropertyNames.Instance] = "7";
                    this.mcboBenefitService_C.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboBenefitService_C;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboBenefitService_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitService_P : WinWindow
    {
        
        public wBenefitService_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboBenefitService_P
        {
            get
            {
                if ((this.mcboBenefitService_P == null))
                {
                    this.mcboBenefitService_P = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboBenefitService_P.SearchProperties[WinComboBox.PropertyNames.Instance] = "8";
                    this.mcboBenefitService_P.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcboBenefitService_P;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboBenefitService_P;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitActives_NL : WinWindow
    {
        
        public wBenefitActives_NL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "1399820";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Standard Inputs");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Annuitant Benefit";
                    this.mcbo.WindowTitles.Add("Standard Inputs");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRP_SaveDataServiceParameters_Popup : WinWindow
    {
        
        public wRP_SaveDataServiceParameters_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Data Service Parameters";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save Data Service Parameters");
            #endregion
        }
        
        #region Properties
        public wYes2 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes2(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes2 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes2 : WinWindow
    {
        
        public wYes2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save Data Service Parameters");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnYes.WindowTitles.Add("Save Data Service Parameters");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRP_ReportGenerated_Popup : WinWindow
    {
        
        public wRP_ReportGenerated_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Report Generated";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Report Generated");
            #endregion
        }
        
        #region Properties
        public wOK10 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK10(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK10 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK10 : WinWindow
    {
        
        public wOK10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Report Generated");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Report Generated");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCV_AddLabels : WinWindow
    {
        
        public wCV_AddLabels()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add Labels";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Add Labels");
            #endregion
        }
        
        #region Properties
        public wOK11 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK11(this);
                }
                return this.mwOK;
            }
        }
        
        public wFPGrid2 wFPGrid
        {
            get
            {
                if ((this.mwFPGrid == null))
                {
                    this.mwFPGrid = new wFPGrid2(this);
                }
                return this.mwFPGrid;
            }
        }
        #endregion
        
        #region Fields
        private wOK11 mwOK;
        
        private wFPGrid2 mwFPGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK11 : WinWindow
    {
        
        public wOK11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Add Labels");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Add Labels");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid2 : WinWindow
    {
        
        public wFPGrid2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "addMultiLabelGrid";
            this.WindowTitles.Add("Add Labels");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Add Labels");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_TransformationDefinition : WinWindow
    {
        
        public wIP_TransformationDefinition()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Transformation Definition";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Transformation Definition");
            #endregion
        }
        
        #region Properties
        public wLookup wLookup
        {
            get
            {
                if ((this.mwLookup == null))
                {
                    this.mwLookup = new wLookup(this);
                }
                return this.mwLookup;
            }
        }
        
        public wFPGrid3 wFPGrid
        {
            get
            {
                if ((this.mwFPGrid == null))
                {
                    this.mwFPGrid = new wFPGrid3(this);
                }
                return this.mwFPGrid;
            }
        }
        
        public wOK12 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK12(this);
                }
                return this.mwOK;
            }
        }
        
        public wStandard wStandard
        {
            get
            {
                if ((this.mwStandard == null))
                {
                    this.mwStandard = new wStandard(this);
                }
                return this.mwStandard;
            }
        }
        #endregion
        
        #region Fields
        private wLookup mwLookup;
        
        private wFPGrid3 mwFPGrid;
        
        private wOK12 mwOK;
        
        private wStandard mwStandard;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLookup : WinWindow
    {
        
        public wLookup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkLookup";
            this.WindowTitles.Add("Transformation Definition");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkLookup
        {
            get
            {
                if ((this.mchkLookup == null))
                {
                    this.mchkLookup = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkLookup.SearchProperties[WinCheckBox.PropertyNames.Name] = "Lookup";
                    this.mchkLookup.WindowTitles.Add("Transformation Definition");
                    #endregion
                }
                return this.mchkLookup;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkLookup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFPGrid3 : WinWindow
    {
        
        public wFPGrid3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fpSpread1";
            this.WindowTitles.Add("Transformation Definition");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Transformation Definition");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK12 : WinWindow
    {
        
        public wOK12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.WindowTitles.Add("Transformation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Transformation Definition");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard : WinWindow
    {
        
        public wStandard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkStandard";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Transformation Definition");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Standard";
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Transformation Definition");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_AddCustomGroup1 : WinWindow
    {
        
        public wCK_AddCustomGroup1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Checks";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Checks");
            #endregion
        }
        
        #region Properties
        public wOK13 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK13(this);
                }
                return this.mwOK;
            }
        }
        
        public wNewGroupName wNewGroupName
        {
            get
            {
                if ((this.mwNewGroupName == null))
                {
                    this.mwNewGroupName = new wNewGroupName(this);
                }
                return this.mwNewGroupName;
            }
        }
        
        public wCancel3 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel3(this);
                }
                return this.mwCancel;
            }
        }
        #endregion
        
        #region Fields
        private wOK13 mwOK;
        
        private wNewGroupName mwNewGroupName;
        
        private wCancel3 mwCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK13 : WinWindow
    {
        
        public wOK13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOk";
            this.WindowTitles.Add("Checks");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Checks");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNewGroupName : WinWindow
    {
        
        public wNewGroupName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtCustomCategoryName";
            this.WindowTitles.Add("Checks");
            #endregion
        }
        
        #region Properties
        public WinEdit txtNewGroupName
        {
            get
            {
                if ((this.mtxtNewGroupName == null))
                {
                    this.mtxtNewGroupName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtNewGroupName.SearchProperties[WinEdit.PropertyNames.Name] = "Enter new group name:";
                    this.mtxtNewGroupName.WindowTitles.Add("Checks");
                    #endregion
                }
                return this.mtxtNewGroupName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtNewGroupName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel3 : WinWindow
    {
        
        public wCancel3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.WindowTitles.Add("Checks");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("Checks");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_EditFilter : WinWindow
    {
        
        public wCK_EditFilter()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Edit Filter";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Edit Filter");
            #endregion
        }
        
        #region Properties
        public wOK14 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK14(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel4 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel4(this);
                }
                return this.mwCancel;
            }
        }
        
        public wStandardorCustomFilter1 wStandardorCustomFilter
        {
            get
            {
                if ((this.mwStandardorCustomFilter == null))
                {
                    this.mwStandardorCustomFilter = new wStandardorCustomFilter1(this);
                }
                return this.mwStandardorCustomFilter;
            }
        }
        
        public wCustomExpression1 wCustomExpression
        {
            get
            {
                if ((this.mwCustomExpression == null))
                {
                    this.mwCustomExpression = new wCustomExpression1(this);
                }
                return this.mwCustomExpression;
            }
        }
        
        public wCustomExpression_Accept1 wCustomExpression_Accept
        {
            get
            {
                if ((this.mwCustomExpression_Accept == null))
                {
                    this.mwCustomExpression_Accept = new wCustomExpression_Accept1(this);
                }
                return this.mwCustomExpression_Accept;
            }
        }
        
        public wFilter1 wFilter
        {
            get
            {
                if ((this.mwFilter == null))
                {
                    this.mwFilter = new wFilter1(this);
                }
                return this.mwFilter;
            }
        }
        
        public wCustomExpression_Formula1 wCustomExpression_Formula
        {
            get
            {
                if ((this.mwCustomExpression_Formula == null))
                {
                    this.mwCustomExpression_Formula = new wCustomExpression_Formula1(this);
                }
                return this.mwCustomExpression_Formula;
            }
        }
        #endregion
        
        #region Fields
        private wOK14 mwOK;
        
        private wCancel4 mwCancel;
        
        private wStandardorCustomFilter1 mwStandardorCustomFilter;
        
        private wCustomExpression1 mwCustomExpression;
        
        private wCustomExpression_Accept1 mwCustomExpression_Accept;
        
        private wFilter1 mwFilter;
        
        private wCustomExpression_Formula1 mwCustomExpression_Formula;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK14 : WinWindow
    {
        
        public wOK14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Edit Filter");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Edit Filter");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel4 : WinWindow
    {
        
        public wCancel4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.WindowTitles.Add("Edit Filter");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("Edit Filter");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandardorCustomFilter1 : WinWindow
    {
        
        public wStandardorCustomFilter1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButtonFilter";
            this.WindowTitles.Add("Edit Filter");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdStandardorCustomFilter
        {
            get
            {
                if ((this.mrdStandardorCustomFilter == null))
                {
                    this.mrdStandardorCustomFilter = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdStandardorCustomFilter.SearchProperties[WinRadioButton.PropertyNames.Name] = "Standard or Custom Filter";
                    this.mrdStandardorCustomFilter.WindowTitles.Add("Edit Filter");
                    #endregion
                }
                return this.mrdStandardorCustomFilter;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdStandardorCustomFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomExpression1 : WinWindow
    {
        
        public wCustomExpression1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButtonSelectionCriteria";
            this.WindowTitles.Add("Edit Filter");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdCustomExpression
        {
            get
            {
                if ((this.mrdCustomExpression == null))
                {
                    this.mrdCustomExpression = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdCustomExpression.SearchProperties[WinRadioButton.PropertyNames.Name] = "Custom Expression";
                    this.mrdCustomExpression.WindowTitles.Add("Edit Filter");
                    #endregion
                }
                return this.mrdCustomExpression;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdCustomExpression;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomExpression_Accept1 : WinWindow
    {
        
        public wCustomExpression_Accept1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "acceptButton";
            this.WindowTitles.Add("Edit Filter");
            #endregion
        }
        
        #region Properties
        public WinButton btnAccept
        {
            get
            {
                if ((this.mbtnAccept == null))
                {
                    this.mbtnAccept = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAccept.WindowTitles.Add("Edit Filter");
                    #endregion
                }
                return this.mbtnAccept;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAccept;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFilter1 : WinWindow
    {
        
        public wFilter1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ultraDropDownButton1";
            this.WindowTitles.Add("Edit Filter");
            #endregion
        }
        
        #region Properties
        public txtFilter2 txtFilter
        {
            get
            {
                if ((this.mtxtFilter == null))
                {
                    this.mtxtFilter = new txtFilter2(this);
                }
                return this.mtxtFilter;
            }
        }
        #endregion
        
        #region Fields
        private txtFilter2 mtxtFilter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtFilter2 : WinText
    {
        
        public txtFilter2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "<No Filter>";
            this.WindowTitles.Add("Edit Filter");
            #endregion
        }
        
        #region Properties
        public WinButton btnDropDown
        {
            get
            {
                if ((this.mbtnDropDown == null))
                {
                    this.mbtnDropDown = new WinButton(this);
                    #region Search Criteria
                    this.mbtnDropDown.SearchProperties[WinButton.PropertyNames.Name] = "Drop down";
                    this.mbtnDropDown.WindowTitles.Add("Edit Filter");
                    #endregion
                }
                return this.mbtnDropDown;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnDropDown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomExpression_Formula1 : WinWindow
    {
        
        public wCustomExpression_Formula1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "formulaTextBox";
            this.WindowTitles.Add("Edit Filter");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFormula
        {
            get
            {
                if ((this.mtxtFormula == null))
                {
                    this.mtxtFormula = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFormula.WindowTitles.Add("Edit Filter");
                    #endregion
                }
                return this.mtxtFormula;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFormula;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_QueryInstructions : WinWindow
    {
        
        public wCK_QueryInstructions()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "QueryInstructions";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("QueryInstructions");
            #endregion
        }
        
        #region Properties
        public wOK15 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK15(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel5 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel5(this);
                }
                return this.mwCancel;
            }
        }
        
        public wQueryWording wQueryWording
        {
            get
            {
                if ((this.mwQueryWording == null))
                {
                    this.mwQueryWording = new wQueryWording(this);
                }
                return this.mwQueryWording;
            }
        }
        #endregion
        
        #region Fields
        private wOK15 mwOK;
        
        private wCancel5 mwCancel;
        
        private wQueryWording mwQueryWording;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK15 : WinWindow
    {
        
        public wOK15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOk";
            this.WindowTitles.Add("QueryInstructions");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("QueryInstructions");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel5 : WinWindow
    {
        
        public wCancel5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.WindowTitles.Add("QueryInstructions");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("QueryInstructions");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wQueryWording : WinWindow
    {
        
        public wQueryWording(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtQueryInstructions";
            this.WindowTitles.Add("QueryInstructions");
            #endregion
        }
        
        #region Properties
        public WinEdit txtQueryWording
        {
            get
            {
                if ((this.mtxtQueryWording == null))
                {
                    this.mtxtQueryWording = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtQueryWording.SearchProperties[WinEdit.PropertyNames.Name] = "Enter Query Wording:";
                    this.mtxtQueryWording.WindowTitles.Add("QueryInstructions");
                    #endregion
                }
                return this.mtxtQueryWording;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtQueryWording;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_Checks_Popup : WinWindow
    {
        
        public wCK_Checks_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Checks";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Checks");
            #endregion
        }
        
        #region Properties
        public wYes3 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes3(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes3 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes3 : WinWindow
    {
        
        public wYes3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Checks");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.WindowTitles.Add("Checks");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSM_Popup : WinWindow
    {
        
        public wSM_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Status Matrix";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status Matrix");
            #endregion
        }
        
        #region Properties
        public wOK16 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK16(this);
                }
                return this.mwOK;
            }
        }
        
        public wYes4 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes4(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wOK16 mwOK;
        
        private wYes4 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK16 : WinWindow
    {
        
        public wOK16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Status Matrix");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Status Matrix");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes4 : WinWindow
    {
        
        public wYes4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status Matrix");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnYes.WindowTitles.Add("Status Matrix");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUndo_ConfirmUndo : WinWindow
    {
        
        public wUndo_ConfirmUndo()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Undo", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm Undo");
            #endregion
        }
        
        #region Properties
        public wComments wComments
        {
            get
            {
                if ((this.mwComments == null))
                {
                    this.mwComments = new wComments(this);
                }
                return this.mwComments;
            }
        }
        
        public wOK17 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK17(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wComments mwComments;
        
        private wOK17 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wComments : WinWindow
    {
        
        public wComments(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rtbComments";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm Undo");
            #endregion
        }
        
        #region Properties
        public WinEdit txtComments
        {
            get
            {
                if ((this.mtxtComments == null))
                {
                    this.mtxtComments = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtComments.SearchProperties[WinEdit.PropertyNames.Name] = "Comments (mandatory):";
                    this.mtxtComments.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtComments.WindowTitles.Add("Confirm Undo");
                    #endregion
                }
                return this.mtxtComments;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtComments;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK17 : WinWindow
    {
        
        public wOK17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm Undo");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Confirm Undo");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBU_DeleteBatchUpdate : WinWindow
    {
        
        public wBU_DeleteBatchUpdate()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Delete", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Delete Batch Update Node");
            #endregion
        }
        
        #region Properties
        public wYes5 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes5(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes5 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes5 : WinWindow
    {
        
        public wYes5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Delete Batch Update Node");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnYes.WindowTitles.Add("Delete Batch Update Node");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_RepublishSnapshot : WinWindow
    {
        
        public wSP_RepublishSnapshot()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Republish Snapshot";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Republish Snapshot");
            #endregion
        }
        
        #region Properties
        public wYes6 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes6(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes6 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes6 : WinWindow
    {
        
        public wYes6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Republish Snapshot");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnYes.WindowTitles.Add("Republish Snapshot");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_ExtractCreated : WinWindow
    {
        
        public wSP_ExtractCreated()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Extract created";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract created");
            #endregion
        }
        
        #region Properties
        public wOK18 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK18(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK18 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK18 : WinWindow
    {
        
        public wOK18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract created");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Extract created");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_ManualMatching : WinWindow
    {
        
        public wIP_ManualMatching()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Manual Matching";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public wMatchAccept wMatchAccept
        {
            get
            {
                if ((this.mwMatchAccept == null))
                {
                    this.mwMatchAccept = new wMatchAccept(this);
                }
                return this.mwMatchAccept;
            }
        }
        
        public wDataFileRecords wDataFileRecords
        {
            get
            {
                if ((this.mwDataFileRecords == null))
                {
                    this.mwDataFileRecords = new wDataFileRecords(this);
                }
                return this.mwDataFileRecords;
            }
        }
        
        public wWarehouseRecords wWarehouseRecords
        {
            get
            {
                if ((this.mwWarehouseRecords == null))
                {
                    this.mwWarehouseRecords = new wWarehouseRecords(this);
                }
                return this.mwWarehouseRecords;
            }
        }
        
        public wClose wClose
        {
            get
            {
                if ((this.mwClose == null))
                {
                    this.mwClose = new wClose(this);
                }
                return this.mwClose;
            }
        }
        
        public wAcceptSelectedDataFile_AsNew wAcceptSelectedDataFile_AsNew
        {
            get
            {
                if ((this.mwAcceptSelectedDataFile_AsNew == null))
                {
                    this.mwAcceptSelectedDataFile_AsNew = new wAcceptSelectedDataFile_AsNew(this);
                }
                return this.mwAcceptSelectedDataFile_AsNew;
            }
        }
        
        public wAcceptSelectedDataFile_AsIgnore wAcceptSelectedDataFile_AsIgnore
        {
            get
            {
                if ((this.mwAcceptSelectedDataFile_AsIgnore == null))
                {
                    this.mwAcceptSelectedDataFile_AsIgnore = new wAcceptSelectedDataFile_AsIgnore(this);
                }
                return this.mwAcceptSelectedDataFile_AsIgnore;
            }
        }
        
        public wAcceptSelectedWH_AsUnmatched wAcceptSelectedWH_AsUnmatched
        {
            get
            {
                if ((this.mwAcceptSelectedWH_AsUnmatched == null))
                {
                    this.mwAcceptSelectedWH_AsUnmatched = new wAcceptSelectedWH_AsUnmatched(this);
                }
                return this.mwAcceptSelectedWH_AsUnmatched;
            }
        }
        
        public wAcceptSelectedWH_AsGone wAcceptSelectedWH_AsGone
        {
            get
            {
                if ((this.mwAcceptSelectedWH_AsGone == null))
                {
                    this.mwAcceptSelectedWH_AsGone = new wAcceptSelectedWH_AsGone(this);
                }
                return this.mwAcceptSelectedWH_AsGone;
            }
        }
        
        public wAcceptSelectedWH_AsLeaver wAcceptSelectedWH_AsLeaver
        {
            get
            {
                if ((this.mwAcceptSelectedWH_AsLeaver == null))
                {
                    this.mwAcceptSelectedWH_AsLeaver = new wAcceptSelectedWH_AsLeaver(this);
                }
                return this.mwAcceptSelectedWH_AsLeaver;
            }
        }
        #endregion
        
        #region Fields
        private wMatchAccept mwMatchAccept;
        
        private wDataFileRecords mwDataFileRecords;
        
        private wWarehouseRecords mwWarehouseRecords;
        
        private wClose mwClose;
        
        private wAcceptSelectedDataFile_AsNew mwAcceptSelectedDataFile_AsNew;
        
        private wAcceptSelectedDataFile_AsIgnore mwAcceptSelectedDataFile_AsIgnore;
        
        private wAcceptSelectedWH_AsUnmatched mwAcceptSelectedWH_AsUnmatched;
        
        private wAcceptSelectedWH_AsGone mwAcceptSelectedWH_AsGone;
        
        private wAcceptSelectedWH_AsLeaver mwAcceptSelectedWH_AsLeaver;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMatchAccept : WinWindow
    {
        
        public wMatchAccept(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptAsMatched";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public WinButton btnMatchAccept
        {
            get
            {
                if ((this.mbtnMatchAccept == null))
                {
                    this.mbtnMatchAccept = new WinButton(this);
                    #region Search Criteria
                    this.mbtnMatchAccept.SearchProperties[WinButton.PropertyNames.Name] = "<Match  Accept>";
                    this.mbtnMatchAccept.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnMatchAccept.WindowTitles.Add("Manual Matching");
                    #endregion
                }
                return this.mbtnMatchAccept;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnMatchAccept;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataFileRecords : WinWindow
    {
        
        public wDataFileRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "stagingGrid";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public tbl1 tbl
        {
            get
            {
                if ((this.mtbl == null))
                {
                    this.mtbl = new tbl1(this);
                }
                return this.mtbl;
            }
        }
        #endregion
        
        #region Fields
        private tbl1 mtbl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tbl1 : WinTable
    {
        
        public tbl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public topRow topRow
        {
            get
            {
                if ((this.mtopRow == null))
                {
                    this.mtopRow = new topRow(this);
                }
                return this.mtopRow;
            }
        }
        #endregion
        
        #region Fields
        private topRow mtopRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class topRow : WinRow
    {
        
        public topRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Top Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public WinColumnHeader topLeftHeader
        {
            get
            {
                if ((this.mtopLeftHeader == null))
                {
                    this.mtopLeftHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mtopLeftHeader.SearchProperties[WinControl.PropertyNames.Name] = "Top Left Header Cell";
                    this.mtopLeftHeader.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtopLeftHeader.WindowTitles.Add("Manual Matching");
                    #endregion
                }
                return this.mtopLeftHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinColumnHeader mtopLeftHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWarehouseRecords : WinWindow
    {
        
        public wWarehouseRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "warehouseGrid";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public tbl2 tbl
        {
            get
            {
                if ((this.mtbl == null))
                {
                    this.mtbl = new tbl2(this);
                }
                return this.mtbl;
            }
        }
        #endregion
        
        #region Fields
        private tbl2 mtbl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tbl2 : WinTable
    {
        
        public tbl2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public topRow1 topRow
        {
            get
            {
                if ((this.mtopRow == null))
                {
                    this.mtopRow = new topRow1(this);
                }
                return this.mtopRow;
            }
        }
        #endregion
        
        #region Fields
        private topRow1 mtopRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class topRow1 : WinRow
    {
        
        public topRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "Top Row";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public WinColumnHeader topLeftHeader
        {
            get
            {
                if ((this.mtopLeftHeader == null))
                {
                    this.mtopLeftHeader = new WinColumnHeader(this);
                    #region Search Criteria
                    this.mtopLeftHeader.SearchProperties[WinControl.PropertyNames.Name] = "Top Left Header Cell";
                    this.mtopLeftHeader.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtopLeftHeader.WindowTitles.Add("Manual Matching");
                    #endregion
                }
                return this.mtopLeftHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinColumnHeader mtopLeftHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClose : WinWindow
    {
        
        public wClose(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnClose";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public WinButton btnClose
        {
            get
            {
                if ((this.mbtnClose == null))
                {
                    this.mbtnClose = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClose.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtnClose.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnClose.WindowTitles.Add("Manual Matching");
                    #endregion
                }
                return this.mbtnClose;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcceptSelectedDataFile_AsNew : WinWindow
    {
        
        public wAcceptSelectedDataFile_AsNew(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptDataFileRecordsAsNew";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Accept Selected Data File Record(s) as New";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Manual Matching");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcceptSelectedDataFile_AsIgnore : WinWindow
    {
        
        public wAcceptSelectedDataFile_AsIgnore(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptDataFileRecordsAsIgnore";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Accept Selected Data File Record(s) as Ignore";
                    this.mbtn.WindowTitles.Add("Manual Matching");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcceptSelectedWH_AsUnmatched : WinWindow
    {
        
        public wAcceptSelectedWH_AsUnmatched(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptWarehouseRecordsAsUnmatched";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Accept Selected Warehouse Record(s) as Unmatched";
                    this.mbtn.WindowTitles.Add("Manual Matching");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcceptSelectedWH_AsGone : WinWindow
    {
        
        public wAcceptSelectedWH_AsGone(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptWarehouseRecordsAsGone";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Accept Selected Warehouse Record(s) as Gone";
                    this.mbtn.WindowTitles.Add("Manual Matching");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcceptSelectedWH_AsLeaver : WinWindow
    {
        
        public wAcceptSelectedWH_AsLeaver(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAcceptWarehouseRecordsAsLeaver";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Matching");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Accept Selected Warehouse Record(s) as Leaver";
                    this.mbtn.WindowTitles.Add("Manual Matching");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOM_DataService_Popup : WinWindow
    {
        
        public wOM_DataService_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Service";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Service");
            #endregion
        }
        
        #region Properties
        public wYes7 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes7(this);
                }
                return this.mwYes;
            }
        }
        
        public wNO2 wNO
        {
            get
            {
                if ((this.mwNO == null))
                {
                    this.mwNO = new wNO2(this);
                }
                return this.mwNO;
            }
        }
        #endregion
        
        #region Fields
        private wYes7 mwYes;
        
        private wNO2 mwNO;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes7 : WinWindow
    {
        
        public wYes7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Service");
            #endregion
        }
        
        #region Properties
        public WinButton btnYes
        {
            get
            {
                if ((this.mbtnYes == null))
                {
                    this.mbtnYes = new WinButton(this);
                    #region Search Criteria
                    this.mbtnYes.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtnYes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnYes.WindowTitles.Add("Data Service");
                    #endregion
                }
                return this.mbtnYes;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNO2 : WinWindow
    {
        
        public wNO2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Service");
            #endregion
        }
        
        #region Properties
        public WinButton btnNo
        {
            get
            {
                if ((this.mbtnNo == null))
                {
                    this.mbtnNo = new WinButton(this);
                    #region Search Criteria
                    this.mbtnNo.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mbtnNo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnNo.WindowTitles.Add("Data Service");
                    #endregion
                }
                return this.mbtnNo;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnNo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wConfirm_Popup : WinWindow
    {
        
        public wConfirm_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public wYes8 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes8(this);
                }
                return this.mwYes;
            }
        }
        
        public wOK19 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK19(this);
                }
                return this.mwOK;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private wYes8 mwYes;
        
        private wOK19 mwOK;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes8 : WinWindow
    {
        
        public wYes8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Confirm");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK19 : WinWindow
    {
        
        public wOK19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Confirm");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Confirm");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_CopyDerivations : WinWindow
    {
        
        public wDG_CopyDerivations()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Copy", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Derivations");
            #endregion
        }
        
        #region Properties
        public wClient wClient
        {
            get
            {
                if ((this.mwClient == null))
                {
                    this.mwClient = new wClient(this);
                }
                return this.mwClient;
            }
        }
        
        public wPlan wPlan
        {
            get
            {
                if ((this.mwPlan == null))
                {
                    this.mwPlan = new wPlan(this);
                }
                return this.mwPlan;
            }
        }
        
        public wService wService
        {
            get
            {
                if ((this.mwService == null))
                {
                    this.mwService = new wService(this);
                }
                return this.mwService;
            }
        }
        
        public wDerivationGroups wDerivationGroups
        {
            get
            {
                if ((this.mwDerivationGroups == null))
                {
                    this.mwDerivationGroups = new wDerivationGroups(this);
                }
                return this.mwDerivationGroups;
            }
        }
        
        public wOK20 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK20(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wClient mwClient;
        
        private wPlan mwPlan;
        
        private wService mwService;
        
        private wDerivationGroups mwDerivationGroups;
        
        private wOK20 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClient : WinWindow
    {
        
        public wClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbClient";
            this.WindowTitles.Add("Copy Derivations");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Derivations");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlan : WinWindow
    {
        
        public wPlan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbPlan";
            this.WindowTitles.Add("Copy Derivations");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Derivations");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wService : WinWindow
    {
        
        public wService(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbService";
            this.WindowTitles.Add("Copy Derivations");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Copy Derivations");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDerivationGroups : WinWindow
    {
        
        public wDerivationGroups(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ControlName, "tv", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Copy Derivations");
            #endregion
        }
        
        #region Properties
        public WinTree tv
        {
            get
            {
                if ((this.mtv == null))
                {
                    this.mtv = new WinTree(this);
                    #region Search Criteria
                    this.mtv.WindowTitles.Add("Copy Derivations");
                    #endregion
                }
                return this.mtv;
            }
        }
        #endregion
        
        #region Fields
        private WinTree mtv;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK20 : WinWindow
    {
        
        public wOK20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("Copy Derivations");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Copy Derivations");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopyValidationErrors : WinWindow
    {
        
        public wCopyValidationErrors()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, " - Validation Errors", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Derivations - Validation Errors");
            #endregion
        }
        
        #region Properties
        public wCopy wCopy
        {
            get
            {
                if ((this.mwCopy == null))
                {
                    this.mwCopy = new wCopy(this);
                }
                return this.mwCopy;
            }
        }
        #endregion
        
        #region Fields
        private wCopy mwCopy;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCopy : WinWindow
    {
        
        public wCopy(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCopy";
            this.WindowTitles.Add("Copy Derivations - Validation Errors");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Copy";
                    this.mbtn.WindowTitles.Add("Copy Derivations - Validation Errors");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataAcquisition : WinWindow
    {
        
        public wDataAcquisition()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Acquisition";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Acquisition");
            #endregion
        }
        
        #region Properties
        public wOK21 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK21(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK21 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK21 : WinWindow
    {
        
        public wOK21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Data Acquisition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Data Acquisition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_CopyImports : WinWindow
    {
        
        public wIP_CopyImports()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Copy Imports";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Imports");
            #endregion
        }
        
        #region Properties
        public tv tv
        {
            get
            {
                if ((this.mtv == null))
                {
                    this.mtv = new tv(this);
                }
                return this.mtv;
            }
        }
        #endregion
        
        #region Fields
        private tv mtv;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tv : WinTree
    {
        
        public tv(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Import Definitions";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Imports");
            #endregion
        }
        
        #region Properties
        public UIAllCheckBoxTreeItem UIAllCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIAllCheckBoxTreeItem == null))
                {
                    this.mUIAllCheckBoxTreeItem = new UIAllCheckBoxTreeItem(this);
                }
                return this.mUIAllCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAllCheckBoxTreeItem mUIAllCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAllCheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UIAllCheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "All";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Copy Imports");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIImportDataCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIImportDataCheckBoxTreeItem == null))
                {
                    this.mUIImportDataCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIImportDataCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Import Data";
                    this.mUIImportDataCheckBoxTreeItem.SearchProperties["Value"] = "1";
                    this.mUIImportDataCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIImportDataCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIImportDataCheckBoxTreeItem.WindowTitles.Add("Copy Imports");
                    #endregion
                }
                return this.mUIImportDataCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIImportDataCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCK_Warning_Popup : WinWindow
    {
        
        public wCK_Warning_Popup()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Warning", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public wOK22 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK22(this);
                }
                return this.mwOK;
            }
        }
        
        public wYes9 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes9(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wOK22 mwOK;
        
        private wYes9 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK22 : WinWindow
    {
        
        public wOK22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes9 : WinWindow
    {
        
        public wYes9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_PrintToFile_Popup : WinWindow
    {
        
        public wVU_PrintToFile_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Print to File";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Print to File");
            #endregion
        }
        
        #region Properties
        public wOK23 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK23(this);
                }
                return this.mwOK;
            }
        }
        
        public wYes10 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes10(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wOK23 mwOK;
        
        private wYes10 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK23 : WinWindow
    {
        
        public wOK23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Print to File");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Print to File");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes10 : WinWindow
    {
        
        public wYes10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Print to File");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.WindowTitles.Add("Print to File");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_ReportOnManualChanges : WinWindow
    {
        
        public wVU_ReportOnManualChanges()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Report on manual changes";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Report on manual changes");
            #endregion
        }
        
        #region Properties
        public wOK24 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK24(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK24 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK24 : WinWindow
    {
        
        public wOK24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Report on manual changes");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Report on manual changes");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUndo_Popup : WinWindow
    {
        
        public wUndo_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Undo";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Undo");
            #endregion
        }
        
        #region Properties
        public wYes11 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes11(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes11 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes11 : WinWindow
    {
        
        public wYes11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Undo");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.WindowTitles.Add("Undo");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_RunDerivationsinBatch : WinWindow
    {
        
        public wDG_RunDerivationsinBatch()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run Derivations in Batch";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Derivations in Batch");
            #endregion
        }
        
        #region Properties
        public wCalculate wCalculate
        {
            get
            {
                if ((this.mwCalculate == null))
                {
                    this.mwCalculate = new wCalculate(this);
                }
                return this.mwCalculate;
            }
        }
        
        public tvDerivations tvDerivations
        {
            get
            {
                if ((this.mtvDerivations == null))
                {
                    this.mtvDerivations = new tvDerivations(this);
                }
                return this.mtvDerivations;
            }
        }
        #endregion
        
        #region Fields
        private wCalculate mwCalculate;
        
        private tvDerivations mtvDerivations;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCalculate : WinWindow
    {
        
        public wCalculate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCalculate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Derivations in Batch");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Calculate";
                    this.mbtn.WindowTitles.Add("Run Derivations in Batch");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvDerivations : WinTree
    {
        
        public tvDerivations(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Select Derivation Groups to Process. No gaps are permitted.";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Derivations in Batch");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem chkAll
        {
            get
            {
                if ((this.mchkAll == null))
                {
                    this.mchkAll = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mchkAll.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "All";
                    this.mchkAll.SearchProperties["Value"] = "0";
                    this.mchkAll.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkAll.WindowTitles.Add("Run Derivations in Batch");
                    #endregion
                }
                return this.mchkAll;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mchkAll;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_DerivationBatchRun : WinWindow
    {
        
        public wDG_DerivationBatchRun()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Derivation Batch Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Derivation Batch Run");
            #endregion
        }
        
        #region Properties
        public wOK25 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK25(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK25 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK25 : WinWindow
    {
        
        public wOK25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Derivation Batch Run");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Derivation Batch Run");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wComplete_Popup : WinWindow
    {
        
        public wComplete_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Complete";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Complete");
            #endregion
        }
        
        #region Properties
        public wOK26 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK26(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK26 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK26 : WinWindow
    {
        
        public wOK26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Complete");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Complete");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_CopyMappings : WinWindow
    {
        
        public wIP_CopyMappings()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Copy Mappings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Mappings");
            #endregion
        }
        
        #region Properties
        public wOK27 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK27(this);
                }
                return this.mwOK;
            }
        }
        
        public wList wList
        {
            get
            {
                if ((this.mwList == null))
                {
                    this.mwList = new wList(this);
                }
                return this.mwList;
            }
        }
        #endregion
        
        #region Fields
        private wOK27 mwOK;
        
        private wList mwList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK27 : WinWindow
    {
        
        public wOK27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "OKButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Mappings");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Copy Mappings");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wList : WinWindow
    {
        
        public wList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listBoxFiles";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Copy Mappings");
            #endregion
        }
        
        #region Properties
        public WinList list
        {
            get
            {
                if ((this.mlist == null))
                {
                    this.mlist = new WinList(this);
                    #region Search Criteria
                    this.mlist.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mlist.WindowTitles.Add("Copy Mappings");
                    #endregion
                }
                return this.mlist;
            }
        }
        #endregion
        
        #region Fields
        private WinList mlist;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_CopyMappings_Popup : WinWindow
    {
        
        public wIP_CopyMappings_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSP_DataSummaryReportsParam : WinWindow
    {
        
        public wSP_DataSummaryReportsParam()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Summary Reports Parameters";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Summary Reports Parameters");
            #endregion
        }
        
        #region Properties
        public wService1 wService
        {
            get
            {
                if ((this.mwService == null))
                {
                    this.mwService = new wService1(this);
                }
                return this.mwService;
            }
        }
        
        public wPay wPay
        {
            get
            {
                if ((this.mwPay == null))
                {
                    this.mwPay = new wPay(this);
                }
                return this.mwPay;
            }
        }
        
        public wPension wPension
        {
            get
            {
                if ((this.mwPension == null))
                {
                    this.mwPension = new wPension(this);
                }
                return this.mwPension;
            }
        }
        
        public wApplyPctContinuedtoPen wApplyPctContinuedtoPen
        {
            get
            {
                if ((this.mwApplyPctContinuedtoPen == null))
                {
                    this.mwApplyPctContinuedtoPen = new wApplyPctContinuedtoPen(this);
                }
                return this.mwApplyPctContinuedtoPen;
            }
        }
        
        public wCashBalance wCashBalance
        {
            get
            {
                if ((this.mwCashBalance == null))
                {
                    this.mwCashBalance = new wCashBalance(this);
                }
                return this.mwCashBalance;
            }
        }
        
        public wOK28 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK28(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel6 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel6(this);
                }
                return this.mwCancel;
            }
        }
        #endregion
        
        #region Fields
        private wService1 mwService;
        
        private wPay mwPay;
        
        private wPension mwPension;
        
        private wApplyPctContinuedtoPen mwApplyPctContinuedtoPen;
        
        private wCashBalance mwCashBalance;
        
        private wOK28 mwOK;
        
        private wCancel6 mwCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wService1 : WinWindow
    {
        
        public wService1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "serviceTypeSnapshotFieldComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Summary Reports Parameters");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Pay:";
                    this.mcbo.WindowTitles.Add("Data Summary Reports Parameters");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPay : WinWindow
    {
        
        public wPay(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "payTypeSnapshotFieldComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Summary Reports Parameters");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Pension:";
                    this.mcbo.WindowTitles.Add("Data Summary Reports Parameters");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPension : WinWindow
    {
        
        public wPension(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "pensionTypeSnapshotFieldComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Summary Reports Parameters");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Data Summary Reports Parameters");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyPctContinuedtoPen : WinWindow
    {
        
        public wApplyPctContinuedtoPen(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "isApplyContinuePensionCheckBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Summary Reports Parameters");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply % continued to Pension if AliveStatus is NY?";
                    this.mchk.WindowTitles.Add("Data Summary Reports Parameters");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCashBalance : WinWindow
    {
        
        public wCashBalance(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cashBalanceTypeSnapshotFieldComboBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Summary Reports Parameters");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "%Continued:";
                    this.mcbo.WindowTitles.Add("Data Summary Reports Parameters");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK28 : WinWindow
    {
        
        public wOK28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Summary Reports Parameters");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Data Summary Reports Parameters");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel6 : WinWindow
    {
        
        public wCancel6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cancelButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Data Summary Reports Parameters");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtn.WindowTitles.Add("Data Summary Reports Parameters");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_ExtractDerivationDefinition : WinWindow
    {
        
        public wDG_ExtractDerivationDefinition()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Extract Derivation Definition";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Derivation Definition");
            #endregion
        }
        
        #region Properties
        public wClientFieldValue wClientFieldValue
        {
            get
            {
                if ((this.mwClientFieldValue == null))
                {
                    this.mwClientFieldValue = new wClientFieldValue(this);
                }
                return this.mwClientFieldValue;
            }
        }
        
        public wAdminField wAdminField
        {
            get
            {
                if ((this.mwAdminField == null))
                {
                    this.mwAdminField = new wAdminField(this);
                }
                return this.mwAdminField;
            }
        }
        
        public wValue wValue
        {
            get
            {
                if ((this.mwValue == null))
                {
                    this.mwValue = new wValue(this);
                }
                return this.mwValue;
            }
        }
        
        public wDate_V wDate_V
        {
            get
            {
                if ((this.mwDate_V == null))
                {
                    this.mwDate_V = new wDate_V(this);
                }
                return this.mwDate_V;
            }
        }
        
        public wDate_D wDate_D
        {
            get
            {
                if ((this.mwDate_D == null))
                {
                    this.mwDate_D = new wDate_D(this);
                }
                return this.mwDate_D;
            }
        }
        
        public wDate_cbo_V wDate_cbo_V
        {
            get
            {
                if ((this.mwDate_cbo_V == null))
                {
                    this.mwDate_cbo_V = new wDate_cbo_V(this);
                }
                return this.mwDate_cbo_V;
            }
        }
        
        public wDate_txt_D wDate_txt_D
        {
            get
            {
                if ((this.mwDate_txt_D == null))
                {
                    this.mwDate_txt_D = new wDate_txt_D(this);
                }
                return this.mwDate_txt_D;
            }
        }
        #endregion
        
        #region Fields
        private wClientFieldValue mwClientFieldValue;
        
        private wAdminField mwAdminField;
        
        private wValue mwValue;
        
        private wDate_V mwDate_V;
        
        private wDate_D mwDate_D;
        
        private wDate_cbo_V mwDate_cbo_V;
        
        private wDate_txt_D mwDate_txt_D;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wClientFieldValue : WinWindow
    {
        
        public wClientFieldValue(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtDerivedResult";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Instance] = "1";
                    this.mtxt.WindowTitles.Add("Extract Derivation Definition");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdminField : WinWindow
    {
        
        public wAdminField(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbAdminField";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Date";
                    this.mcbo.WindowTitles.Add("Extract Derivation Definition");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValue : WinWindow
    {
        
        public wValue(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Extract Derivation Definition");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDate_V : WinWindow
    {
        
        public wDate_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Extract Derivation Definition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDate_D : WinWindow
    {
        
        public wDate_D(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnDate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "D";
                    this.mbtn.WindowTitles.Add("Extract Derivation Definition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDate_cbo_V : WinWindow
    {
        
        public wDate_cbo_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cboVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Extract Derivation Definition");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDate_txt_D : WinComboBox
    {
        
        public wDate_txt_D(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Derivation Definition");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.WindowTitles.Add("Extract Derivation Definition");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Mapping_Status2Column : WinWindow
    {
        
        public wIP_Mapping_Status2Column()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "HST", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public wOK29 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK29(this);
                }
                return this.mwOK;
            }
        }
        
        public wCancel7 wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel7(this);
                }
                return this.mwCancel;
            }
        }
        
        public wMapView wMapView
        {
            get
            {
                if ((this.mwMapView == null))
                {
                    this.mwMapView = new wMapView(this);
                }
                return this.mwMapView;
            }
        }
        #endregion
        
        #region Fields
        private wOK29 mwOK;
        
        private wCancel7 mwCancel;
        
        private wMapView mwMapView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK29 : WinWindow
    {
        
        public wOK29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel7 : WinWindow
    {
        
        public wCancel7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtn.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMapView : WinWindow
    {
        
        public wMapView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataGridViewAdminMapping";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public wTable1 wTable
        {
            get
            {
                if ((this.mwTable == null))
                {
                    this.mwTable = new wTable1(this);
                }
                return this.mwTable;
            }
        }
        #endregion
        
        #region Fields
        private wTable1 mwTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTable1 : WinTable
    {
        
        public wTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public cell_11 cell_11
        {
            get
            {
                if ((this.mcell_11 == null))
                {
                    this.mcell_11 = new cell_11(this);
                }
                return this.mcell_11;
            }
        }
        
        public cell_12 cell_12
        {
            get
            {
                if ((this.mcell_12 == null))
                {
                    this.mcell_12 = new cell_12(this);
                }
                return this.mcell_12;
            }
        }
        
        public cell_21 cell_21
        {
            get
            {
                if ((this.mcell_21 == null))
                {
                    this.mcell_21 = new cell_21(this);
                }
                return this.mcell_21;
            }
        }
        
        public cell_22 cell_22
        {
            get
            {
                if ((this.mcell_22 == null))
                {
                    this.mcell_22 = new cell_22(this);
                }
                return this.mcell_22;
            }
        }
        
        public cell_31 cell_31
        {
            get
            {
                if ((this.mcell_31 == null))
                {
                    this.mcell_31 = new cell_31(this);
                }
                return this.mcell_31;
            }
        }
        
        public cell_32 cell_32
        {
            get
            {
                if ((this.mcell_32 == null))
                {
                    this.mcell_32 = new cell_32(this);
                }
                return this.mcell_32;
            }
        }
        
        public cell_41 cell_41
        {
            get
            {
                if ((this.mcell_41 == null))
                {
                    this.mcell_41 = new cell_41(this);
                }
                return this.mcell_41;
            }
        }
        
        public cell_42 cell_42
        {
            get
            {
                if ((this.mcell_42 == null))
                {
                    this.mcell_42 = new cell_42(this);
                }
                return this.mcell_42;
            }
        }
        
        public cell_51 cell_51
        {
            get
            {
                if ((this.mcell_51 == null))
                {
                    this.mcell_51 = new cell_51(this);
                }
                return this.mcell_51;
            }
        }
        
        public cell_52 cell_52
        {
            get
            {
                if ((this.mcell_52 == null))
                {
                    this.mcell_52 = new cell_52(this);
                }
                return this.mcell_52;
            }
        }
        
        public cell_61 cell_61
        {
            get
            {
                if ((this.mcell_61 == null))
                {
                    this.mcell_61 = new cell_61(this);
                }
                return this.mcell_61;
            }
        }
        
        public cell_62 cell_62
        {
            get
            {
                if ((this.mcell_62 == null))
                {
                    this.mcell_62 = new cell_62(this);
                }
                return this.mcell_62;
            }
        }
        #endregion
        
        #region Fields
        private cell_11 mcell_11;
        
        private cell_12 mcell_12;
        
        private cell_21 mcell_21;
        
        private cell_22 mcell_22;
        
        private cell_31 mcell_31;
        
        private cell_32 mcell_32;
        
        private cell_41 mcell_41;
        
        private cell_42 mcell_42;
        
        private cell_51 mcell_51;
        
        private cell_52 mcell_52;
        
        private cell_61 mcell_61;
        
        private cell_62 mcell_62;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_11 : WinRow
    {
        
        public cell_11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_12 : WinRow
    {
        
        public cell_12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_21 : WinRow
    {
        
        public cell_21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_22 : WinRow
    {
        
        public cell_22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_31 : WinRow
    {
        
        public cell_31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_32 : WinRow
    {
        
        public cell_32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_41 : WinRow
    {
        
        public cell_41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_42 : WinRow
    {
        
        public cell_42(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_51 : WinRow
    {
        
        public cell_51(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_52 : WinRow
    {
        
        public cell_52(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_61 : WinRow
    {
        
        public cell_61(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_62 : WinRow
    {
        
        public cell_62(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StatusHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("StatusHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Mapping_Status3Column : WinWindow
    {
        
        public wIP_Mapping_Status3Column()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "HST", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public wMapView1 wMapView
        {
            get
            {
                if ((this.mwMapView == null))
                {
                    this.mwMapView = new wMapView1(this);
                }
                return this.mwMapView;
            }
        }
        #endregion
        
        #region Fields
        private wMapView1 mwMapView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMapView1 : WinWindow
    {
        
        public wMapView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataGridViewAdminMapping";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public wTable2 wTable
        {
            get
            {
                if ((this.mwTable == null))
                {
                    this.mwTable = new wTable2(this);
                }
                return this.mwTable;
            }
        }
        #endregion
        
        #region Fields
        private wTable2 mwTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTable2 : WinTable
    {
        
        public wTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public cell_111 cell_11
        {
            get
            {
                if ((this.mcell_11 == null))
                {
                    this.mcell_11 = new cell_111(this);
                }
                return this.mcell_11;
            }
        }
        
        public cell_121 cell_12
        {
            get
            {
                if ((this.mcell_12 == null))
                {
                    this.mcell_12 = new cell_121(this);
                }
                return this.mcell_12;
            }
        }
        
        public cell_13 cell_13
        {
            get
            {
                if ((this.mcell_13 == null))
                {
                    this.mcell_13 = new cell_13(this);
                }
                return this.mcell_13;
            }
        }
        
        public cell_211 cell_21
        {
            get
            {
                if ((this.mcell_21 == null))
                {
                    this.mcell_21 = new cell_211(this);
                }
                return this.mcell_21;
            }
        }
        
        public cell_221 cell_22
        {
            get
            {
                if ((this.mcell_22 == null))
                {
                    this.mcell_22 = new cell_221(this);
                }
                return this.mcell_22;
            }
        }
        
        public cell_23 cell_23
        {
            get
            {
                if ((this.mcell_23 == null))
                {
                    this.mcell_23 = new cell_23(this);
                }
                return this.mcell_23;
            }
        }
        
        public cell_311 cell_31
        {
            get
            {
                if ((this.mcell_31 == null))
                {
                    this.mcell_31 = new cell_311(this);
                }
                return this.mcell_31;
            }
        }
        
        public cell_321 cell_32
        {
            get
            {
                if ((this.mcell_32 == null))
                {
                    this.mcell_32 = new cell_321(this);
                }
                return this.mcell_32;
            }
        }
        
        public cell_33 cell_33
        {
            get
            {
                if ((this.mcell_33 == null))
                {
                    this.mcell_33 = new cell_33(this);
                }
                return this.mcell_33;
            }
        }
        
        public cell_411 cell_41
        {
            get
            {
                if ((this.mcell_41 == null))
                {
                    this.mcell_41 = new cell_411(this);
                }
                return this.mcell_41;
            }
        }
        
        public cell_421 cell_42
        {
            get
            {
                if ((this.mcell_42 == null))
                {
                    this.mcell_42 = new cell_421(this);
                }
                return this.mcell_42;
            }
        }
        
        public cell_43 cell_43
        {
            get
            {
                if ((this.mcell_43 == null))
                {
                    this.mcell_43 = new cell_43(this);
                }
                return this.mcell_43;
            }
        }
        
        public cell_511 cell_51
        {
            get
            {
                if ((this.mcell_51 == null))
                {
                    this.mcell_51 = new cell_511(this);
                }
                return this.mcell_51;
            }
        }
        
        public cell_521 cell_52
        {
            get
            {
                if ((this.mcell_52 == null))
                {
                    this.mcell_52 = new cell_521(this);
                }
                return this.mcell_52;
            }
        }
        
        public cell_53 cell_53
        {
            get
            {
                if ((this.mcell_53 == null))
                {
                    this.mcell_53 = new cell_53(this);
                }
                return this.mcell_53;
            }
        }
        
        public cell_611 cell_61
        {
            get
            {
                if ((this.mcell_61 == null))
                {
                    this.mcell_61 = new cell_611(this);
                }
                return this.mcell_61;
            }
        }
        
        public cell_621 cell_62
        {
            get
            {
                if ((this.mcell_62 == null))
                {
                    this.mcell_62 = new cell_621(this);
                }
                return this.mcell_62;
            }
        }
        
        public cell_63 cell_63
        {
            get
            {
                if ((this.mcell_63 == null))
                {
                    this.mcell_63 = new cell_63(this);
                }
                return this.mcell_63;
            }
        }
        #endregion
        
        #region Fields
        private cell_111 mcell_11;
        
        private cell_121 mcell_12;
        
        private cell_13 mcell_13;
        
        private cell_211 mcell_21;
        
        private cell_221 mcell_22;
        
        private cell_23 mcell_23;
        
        private cell_311 mcell_31;
        
        private cell_321 mcell_32;
        
        private cell_33 mcell_33;
        
        private cell_411 mcell_41;
        
        private cell_421 mcell_42;
        
        private cell_43 mcell_43;
        
        private cell_511 mcell_51;
        
        private cell_521 mcell_52;
        
        private cell_53 mcell_53;
        
        private cell_611 mcell_61;
        
        private cell_621 mcell_62;
        
        private cell_63 mcell_63;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_111 : WinRow
    {
        
        public cell_111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_121 : WinRow
    {
        
        public cell_121(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null);(null)";
            this.SearchProperties[WinRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_13 : WinRow
    {
        
        public cell_13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";(null);(null)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_211 : WinRow
    {
        
        public cell_211(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_221 : WinRow
    {
        
        public cell_221(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_23 : WinRow
    {
        
        public cell_23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";(null);(null)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_311 : WinRow
    {
        
        public cell_311(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_321 : WinRow
    {
        
        public cell_321(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_33 : WinRow
    {
        
        public cell_33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";(null);(null)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_411 : WinRow
    {
        
        public cell_411(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_421 : WinRow
    {
        
        public cell_421(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_43 : WinRow
    {
        
        public cell_43(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";(null);(null)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_511 : WinRow
    {
        
        public cell_511(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_521 : WinRow
    {
        
        public cell_521(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_53 : WinRow
    {
        
        public cell_53(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";(null);(null)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_611 : WinRow
    {
        
        public cell_611(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_621 : WinRow
    {
        
        public cell_621(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_63 : WinRow
    {
        
        public cell_63(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";(null);(null)", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinRow.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("EarnHST");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("EarnHST");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCV_StatusUSCTable : WinWindow
    {
        
        public wCV_StatusUSCTable()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Status USC table";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public wLookUp1 wLookUp
        {
            get
            {
                if ((this.mwLookUp == null))
                {
                    this.mwLookUp = new wLookUp1(this);
                }
                return this.mwLookUp;
            }
        }
        
        public wOK30 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK30(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wLookUp1 mwLookUp;
        
        private wOK30 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLookUp1 : WinWindow
    {
        
        public wLookUp1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvLookUp";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public wTable3 wTable
        {
            get
            {
                if ((this.mwTable == null))
                {
                    this.mwTable = new wTable3(this);
                }
                return this.mwTable;
            }
        }
        #endregion
        
        #region Fields
        private wTable3 mwTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTable3 : WinTable
    {
        
        public wTable3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public cell_112 cell_11
        {
            get
            {
                if ((this.mcell_11 == null))
                {
                    this.mcell_11 = new cell_112(this);
                }
                return this.mcell_11;
            }
        }
        
        public cell_212 cell_21
        {
            get
            {
                if ((this.mcell_21 == null))
                {
                    this.mcell_21 = new cell_212(this);
                }
                return this.mcell_21;
            }
        }
        
        public cell_312 cell_31
        {
            get
            {
                if ((this.mcell_31 == null))
                {
                    this.mcell_31 = new cell_312(this);
                }
                return this.mcell_31;
            }
        }
        
        public cell_122 cell_12
        {
            get
            {
                if ((this.mcell_12 == null))
                {
                    this.mcell_12 = new cell_122(this);
                }
                return this.mcell_12;
            }
        }
        
        public cell_222 cell_22
        {
            get
            {
                if ((this.mcell_22 == null))
                {
                    this.mcell_22 = new cell_222(this);
                }
                return this.mcell_22;
            }
        }
        
        public cell_322 cell_32
        {
            get
            {
                if ((this.mcell_32 == null))
                {
                    this.mcell_32 = new cell_322(this);
                }
                return this.mcell_32;
            }
        }
        
        public cell_412 cell_41
        {
            get
            {
                if ((this.mcell_41 == null))
                {
                    this.mcell_41 = new cell_412(this);
                }
                return this.mcell_41;
            }
        }
        
        public cell_422 cell_42
        {
            get
            {
                if ((this.mcell_42 == null))
                {
                    this.mcell_42 = new cell_422(this);
                }
                return this.mcell_42;
            }
        }
        
        public cell_512 cell_51
        {
            get
            {
                if ((this.mcell_51 == null))
                {
                    this.mcell_51 = new cell_512(this);
                }
                return this.mcell_51;
            }
        }
        
        public cell_522 cell_52
        {
            get
            {
                if ((this.mcell_52 == null))
                {
                    this.mcell_52 = new cell_522(this);
                }
                return this.mcell_52;
            }
        }
        
        public cell_612 cell_61
        {
            get
            {
                if ((this.mcell_61 == null))
                {
                    this.mcell_61 = new cell_612(this);
                }
                return this.mcell_61;
            }
        }
        
        public cell_622 cell_62
        {
            get
            {
                if ((this.mcell_62 == null))
                {
                    this.mcell_62 = new cell_622(this);
                }
                return this.mcell_62;
            }
        }
        
        public cell_71 cell_71
        {
            get
            {
                if ((this.mcell_71 == null))
                {
                    this.mcell_71 = new cell_71(this);
                }
                return this.mcell_71;
            }
        }
        
        public cell_72 cell_72
        {
            get
            {
                if ((this.mcell_72 == null))
                {
                    this.mcell_72 = new cell_72(this);
                }
                return this.mcell_72;
            }
        }
        
        public cell_81 cell_81
        {
            get
            {
                if ((this.mcell_81 == null))
                {
                    this.mcell_81 = new cell_81(this);
                }
                return this.mcell_81;
            }
        }
        
        public cell_82 cell_82
        {
            get
            {
                if ((this.mcell_82 == null))
                {
                    this.mcell_82 = new cell_82(this);
                }
                return this.mcell_82;
            }
        }
        
        public cell_91 cell_91
        {
            get
            {
                if ((this.mcell_91 == null))
                {
                    this.mcell_91 = new cell_91(this);
                }
                return this.mcell_91;
            }
        }
        
        public cell_92 cell_92
        {
            get
            {
                if ((this.mcell_92 == null))
                {
                    this.mcell_92 = new cell_92(this);
                }
                return this.mcell_92;
            }
        }
        
        public cell_101 cell_101
        {
            get
            {
                if ((this.mcell_101 == null))
                {
                    this.mcell_101 = new cell_101(this);
                }
                return this.mcell_101;
            }
        }
        
        public cell_102 cell_102
        {
            get
            {
                if ((this.mcell_102 == null))
                {
                    this.mcell_102 = new cell_102(this);
                }
                return this.mcell_102;
            }
        }
        
        public cell_1111 cell_111
        {
            get
            {
                if ((this.mcell_111 == null))
                {
                    this.mcell_111 = new cell_1111(this);
                }
                return this.mcell_111;
            }
        }
        
        public cell_1121 cell_112
        {
            get
            {
                if ((this.mcell_112 == null))
                {
                    this.mcell_112 = new cell_1121(this);
                }
                return this.mcell_112;
            }
        }
        
        public cell_1211 cell_121
        {
            get
            {
                if ((this.mcell_121 == null))
                {
                    this.mcell_121 = new cell_1211(this);
                }
                return this.mcell_121;
            }
        }
        
        public cell_1221 cell_122
        {
            get
            {
                if ((this.mcell_122 == null))
                {
                    this.mcell_122 = new cell_1221(this);
                }
                return this.mcell_122;
            }
        }
        
        public UIRow12Row UIRow12Row
        {
            get
            {
                if ((this.mUIRow12Row == null))
                {
                    this.mUIRow12Row = new UIRow12Row(this);
                }
                return this.mUIRow12Row;
            }
        }
        
        public cell_131 cell_131
        {
            get
            {
                if ((this.mcell_131 == null))
                {
                    this.mcell_131 = new cell_131(this);
                }
                return this.mcell_131;
            }
        }
        
        public cell_132 cell_132
        {
            get
            {
                if ((this.mcell_132 == null))
                {
                    this.mcell_132 = new cell_132(this);
                }
                return this.mcell_132;
            }
        }
        
        public UIRow13Row UIRow13Row
        {
            get
            {
                if ((this.mUIRow13Row == null))
                {
                    this.mUIRow13Row = new UIRow13Row(this);
                }
                return this.mUIRow13Row;
            }
        }
        
        public cell_141 cell_141
        {
            get
            {
                if ((this.mcell_141 == null))
                {
                    this.mcell_141 = new cell_141(this);
                }
                return this.mcell_141;
            }
        }
        
        public cell_142 cell_142
        {
            get
            {
                if ((this.mcell_142 == null))
                {
                    this.mcell_142 = new cell_142(this);
                }
                return this.mcell_142;
            }
        }
        #endregion
        
        #region Fields
        private cell_112 mcell_11;
        
        private cell_212 mcell_21;
        
        private cell_312 mcell_31;
        
        private cell_122 mcell_12;
        
        private cell_222 mcell_22;
        
        private cell_322 mcell_32;
        
        private cell_412 mcell_41;
        
        private cell_422 mcell_42;
        
        private cell_512 mcell_51;
        
        private cell_522 mcell_52;
        
        private cell_612 mcell_61;
        
        private cell_622 mcell_62;
        
        private cell_71 mcell_71;
        
        private cell_72 mcell_72;
        
        private cell_81 mcell_81;
        
        private cell_82 mcell_82;
        
        private cell_91 mcell_91;
        
        private cell_92 mcell_92;
        
        private cell_101 mcell_101;
        
        private cell_102 mcell_102;
        
        private cell_1111 mcell_111;
        
        private cell_1121 mcell_112;
        
        private cell_1211 mcell_121;
        
        private cell_1221 mcell_122;
        
        private UIRow12Row mUIRow12Row;
        
        private cell_131 mcell_131;
        
        private cell_132 mcell_132;
        
        private UIRow13Row mUIRow13Row;
        
        private cell_141 mcell_141;
        
        private cell_142 mcell_142;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_112 : WinRow
    {
        
        public cell_112(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_212 : WinRow
    {
        
        public cell_212(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_312 : WinRow
    {
        
        public cell_312(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        
        public WinCell UINullCell1
        {
            get
            {
                if ((this.mUINullCell1 == null))
                {
                    this.mUINullCell1 = new WinCell(this);
                    #region Search Criteria
                    this.mUINullCell1.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mUINullCell1.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mUINullCell1.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mUINullCell1;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        
        private WinCell mUINullCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_122 : WinRow
    {
        
        public cell_122(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_222 : WinRow
    {
        
        public cell_222(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_322 : WinRow
    {
        
        public cell_322(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_412 : WinRow
    {
        
        public cell_412(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_422 : WinRow
    {
        
        public cell_422(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_512 : WinRow
    {
        
        public cell_512(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_522 : WinRow
    {
        
        public cell_522(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_612 : WinRow
    {
        
        public cell_612(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_622 : WinRow
    {
        
        public cell_622(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_71 : WinRow
    {
        
        public cell_71(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_72 : WinRow
    {
        
        public cell_72(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_81 : WinRow
    {
        
        public cell_81(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_82 : WinRow
    {
        
        public cell_82(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_91 : WinRow
    {
        
        public cell_91(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_92 : WinRow
    {
        
        public cell_92(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_101 : WinRow
    {
        
        public cell_101(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_102 : WinRow
    {
        
        public cell_102(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_1111 : WinRow
    {
        
        public cell_1111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_1121 : WinRow
    {
        
        public cell_1121(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_1211 : WinRow
    {
        
        public cell_1211(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_1221 : WinRow
    {
        
        public cell_1221(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRow12Row : WinRow
    {
        
        public UIRow12Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_131 : WinRow
    {
        
        public cell_131(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_132 : WinRow
    {
        
        public cell_132(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRow13Row : WinRow
    {
        
        public UIRow13Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell UINullCell
        {
            get
            {
                if ((this.mUINullCell == null))
                {
                    this.mUINullCell = new WinCell(this);
                    #region Search Criteria
                    this.mUINullCell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mUINullCell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mUINullCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUINullCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_141 : WinRow
    {
        
        public cell_141(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cell_142 : WinRow
    {
        
        public cell_142(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);(null)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinCell cell
        {
            get
            {
                if ((this.mcell == null))
                {
                    this.mcell = new WinCell(this);
                    #region Search Criteria
                    this.mcell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mcell.SearchProperties[WinCell.PropertyNames.Instance] = "2";
                    this.mcell.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mcell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mcell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK30 : WinWindow
    {
        
        public wOK30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonOK";
            this.WindowTitles.Add("Status USC table");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Status USC table");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRP_OverwriteReport : WinWindow
    {
        
        public wRP_OverwriteReport()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Overwrite Report";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Overwrite Report");
            #endregion
        }
        
        #region Properties
        public wYes12 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes12(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes12 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes12 : WinWindow
    {
        
        public wYes12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Overwrite Report");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.WindowTitles.Add("Overwrite Report");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_ProcessMatchingResultsContinue_Popup : WinWindow
    {
        
        public wIP_Matching_ProcessMatchingResultsContinue_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Process Matching Results - Continue";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Process Matching Results - Continue");
            #endregion
        }
        
        #region Properties
        public wOK31 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK31(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK31 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK31 : WinWindow
    {
        
        public wOK31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Process Matching Results - Continue");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Process Matching Results - Continue");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_RunCurrentStage1 : WinWindow
    {
        
        public wIP_Matching_RunCurrentStage1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run Current Stage";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Current Stage");
            #endregion
        }
        
        #region Properties
        public wOK32 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK32(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK32 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK32 : WinWindow
    {
        
        public wOK32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run Current Stage");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Run Current Stage");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_Matching_RunAllStages1 : WinWindow
    {
        
        public wIP_Matching_RunAllStages1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run All Stages";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run All Stages");
            #endregion
        }
        
        #region Properties
        public wOK33 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK33(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK33 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK33 : WinWindow
    {
        
        public wOK33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Run All Stages");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Run All Stages");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDG_ActuarialTableFunctionDefinition : WinWindow
    {
        
        public wDG_ActuarialTableFunctionDefinition()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Actuarial Table Function Definition";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public wActuarialTable wActuarialTable
        {
            get
            {
                if ((this.mwActuarialTable == null))
                {
                    this.mwActuarialTable = new wActuarialTable(this);
                }
                return this.mwActuarialTable;
            }
        }
        
        public wGender wGender
        {
            get
            {
                if ((this.mwGender == null))
                {
                    this.mwGender = new wGender(this);
                }
                return this.mwGender;
            }
        }
        
        public wIndex1_V wIndex1_V
        {
            get
            {
                if ((this.mwIndex1_V == null))
                {
                    this.mwIndex1_V = new wIndex1_V(this);
                }
                return this.mwIndex1_V;
            }
        }
        
        public wIndex1_C wIndex1_C
        {
            get
            {
                if ((this.mwIndex1_C == null))
                {
                    this.mwIndex1_C = new wIndex1_C(this);
                }
                return this.mwIndex1_C;
            }
        }
        
        public wIndex2_V wIndex2_V
        {
            get
            {
                if ((this.mwIndex2_V == null))
                {
                    this.mwIndex2_V = new wIndex2_V(this);
                }
                return this.mwIndex2_V;
            }
        }
        
        public wIndex2_C wIndex2_C
        {
            get
            {
                if ((this.mwIndex2_C == null))
                {
                    this.mwIndex2_C = new wIndex2_C(this);
                }
                return this.mwIndex2_C;
            }
        }
        
        public wCommon_cbo wCommon_cbo
        {
            get
            {
                if ((this.mwCommon_cbo == null))
                {
                    this.mwCommon_cbo = new wCommon_cbo(this);
                }
                return this.mwCommon_cbo;
            }
        }
        
        public wCommon_txt wCommon_txt
        {
            get
            {
                if ((this.mwCommon_txt == null))
                {
                    this.mwCommon_txt = new wCommon_txt(this);
                }
                return this.mwCommon_txt;
            }
        }
        
        public wOK34 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK34(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wActuarialTable mwActuarialTable;
        
        private wGender mwGender;
        
        private wIndex1_V mwIndex1_V;
        
        private wIndex1_C mwIndex1_C;
        
        private wIndex2_V mwIndex2_V;
        
        private wIndex2_C mwIndex2_C;
        
        private wCommon_cbo mwCommon_cbo;
        
        private wCommon_txt mwCommon_txt;
        
        private wOK34 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wActuarialTable : WinWindow
    {
        
        public wActuarialTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbActuarialTable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Actuarial Table";
                    this.mcbo.WindowTitles.Add("Actuarial Table Function Definition");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGender : WinWindow
    {
        
        public wGender(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmbGender";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Index 2";
                    this.mcbo.WindowTitles.Add("Actuarial Table Function Definition");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIndex1_V : WinWindow
    {
        
        public wIndex1_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Actuarial Table Function Definition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIndex1_C : WinWindow
    {
        
        public wIndex1_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Actuarial Table Function Definition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIndex2_V : WinWindow
    {
        
        public wIndex2_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Actuarial Table Function Definition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIndex2_C : WinWindow
    {
        
        public wIndex2_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Actuarial Table Function Definition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommon_cbo : WinWindow
    {
        
        public wCommon_cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cboVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Actuarial Table Function Definition");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommon_txt : WinEdit
    {
        
        public wCommon_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.WindowTitles.Add("Actuarial Table Function Definition");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK34 : WinWindow
    {
        
        public wOK34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btn_OK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Actuarial Table Function Definition");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Actuarial Table Function Definition");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_ClearMappings : WinWindow
    {
        
        public wIP_ClearMappings()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Clear Mappings";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Clear Mappings");
            #endregion
        }
        
        #region Properties
        public wYes13 wYes
        {
            get
            {
                if ((this.mwYes == null))
                {
                    this.mwYes = new wYes13(this);
                }
                return this.mwYes;
            }
        }
        #endregion
        
        #region Fields
        private wYes13 mwYes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wYes13 : WinWindow
    {
        
        public wYes13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Clear Mappings");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mbtn.WindowTitles.Add("Clear Mappings");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_IR_ManualCorrection : WinWindow
    {
        
        public wVU_IR_ManualCorrection()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Manual Correction";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Manual Correction");
            #endregion
        }
        
        #region Properties
        public wUpdatedValue wUpdatedValue
        {
            get
            {
                if ((this.mwUpdatedValue == null))
                {
                    this.mwUpdatedValue = new wUpdatedValue(this);
                }
                return this.mwUpdatedValue;
            }
        }
        
        public wComments1 wComments
        {
            get
            {
                if ((this.mwComments == null))
                {
                    this.mwComments = new wComments1(this);
                }
                return this.mwComments;
            }
        }
        
        public wOK35 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK35(this);
                }
                return this.mwOK;
            }
        }
        
        public wPlug wPlug
        {
            get
            {
                if ((this.mwPlug == null))
                {
                    this.mwPlug = new wPlug(this);
                }
                return this.mwPlug;
            }
        }
        
        public wCorrection wCorrection
        {
            get
            {
                if ((this.mwCorrection == null))
                {
                    this.mwCorrection = new wCorrection(this);
                }
                return this.mwCorrection;
            }
        }
        #endregion
        
        #region Fields
        private wUpdatedValue mwUpdatedValue;
        
        private wComments1 mwComments;
        
        private wOK35 mwOK;
        
        private wPlug mwPlug;
        
        private wCorrection mwCorrection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUpdatedValue : WinWindow
    {
        
        public wUpdatedValue(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtUpdatedValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Correction");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Manual Correction");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wComments1 : WinWindow
    {
        
        public wComments1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "commentTextBox";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Correction");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Manual Correction");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK35 : WinWindow
    {
        
        public wOK35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "OKButton";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Correction");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Manual Correction");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlug : WinWindow
    {
        
        public wPlug(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioPlug";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Correction");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Plug";
                    this.mrd.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrd.WindowTitles.Add("Manual Correction");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCorrection : WinWindow
    {
        
        public wCorrection(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioCorrection";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Manual Correction");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Correction";
                    this.mrd.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrd.WindowTitles.Add("Manual Correction");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIP_VL_MappingSummaryAndConfirm : WinWindow
    {
        
        public wIP_VL_MappingSummaryAndConfirm()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Mapping Summary and Confirmation";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Mapping Summary and Confirmation");
            #endregion
        }
        
        #region Properties
        public wProceedWithVL wProceedWithVL
        {
            get
            {
                if ((this.mwProceedWithVL == null))
                {
                    this.mwProceedWithVL = new wProceedWithVL(this);
                }
                return this.mwProceedWithVL;
            }
        }
        
        public wCancelVL wCancelVL
        {
            get
            {
                if ((this.mwCancelVL == null))
                {
                    this.mwCancelVL = new wCancelVL(this);
                }
                return this.mwCancelVL;
            }
        }
        #endregion
        
        #region Fields
        private wProceedWithVL mwProceedWithVL;
        
        private wCancelVL mwCancelVL;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProceedWithVL : WinWindow
    {
        
        public wProceedWithVL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnProcessLAndV";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Mapping Summary and Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Proceed with Validate & Load";
                    this.mbtn.WindowTitles.Add("Mapping Summary and Confirmation");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancelVL : WinWindow
    {
        
        public wCancelVL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Mapping Summary and Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Cancel V & L";
                    this.mbtn.WindowTitles.Add("Mapping Summary and Confirmation");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUL_Upload : WinWindow
    {
        
        public wUL_Upload()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Upload";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Upload");
            #endregion
        }
        
        #region Properties
        public wOK36 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK36(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK36 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK36 : WinWindow
    {
        
        public wOK36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Upload");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Upload");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVU_SelectTotalsFields : WinWindow
    {
        
        public wVU_SelectTotalsFields()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Totals Fields";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Select Totals Fields");
            #endregion
        }
        
        #region Properties
        public FPGrid FPGrid
        {
            get
            {
                if ((this.mFPGrid == null))
                {
                    this.mFPGrid = new FPGrid(this);
                }
                return this.mFPGrid;
            }
        }
        
        public wOK37 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK37(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private FPGrid mFPGrid;
        
        private wOK37 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class FPGrid : WinWindow
    {
        
        public FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_grid";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Select Totals Fields");
            #endregion
        }
        
        #region Properties
        public WinClient gird
        {
            get
            {
                if ((this.mgird == null))
                {
                    this.mgird = new WinClient(this);
                    #region Search Criteria
                    this.mgird.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgird.WindowTitles.Add("Select Totals Fields");
                    #endregion
                }
                return this.mgird;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgird;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK37 : WinWindow
    {
        
        public wOK37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonOk";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Select Totals Fields");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Select Totals Fields");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
}
