// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RetirementStudio._UIMaps.MethodsClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class Methods
    {
        
        #region Properties
        public wRetirementStudio wRetirementStudio
        {
            get
            {
                if ((this.mwRetirementStudio == null))
                {
                    this.mwRetirementStudio = new wRetirementStudio();
                }
                return this.mwRetirementStudio;
            }
        }
        #endregion
        
        #region Fields
        private wRetirementStudio mwRetirementStudio;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudio : WinWindow
    {
        
        public wRetirementStudio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wFunding wFunding
        {
            get
            {
                if ((this.mwFunding == null))
                {
                    this.mwFunding = new wFunding(this);
                }
                return this.mwFunding;
            }
        }
        
        public wPBGCTermLiability wPBGCTermLiability
        {
            get
            {
                if ((this.mwPBGCTermLiability == null))
                {
                    this.mwPBGCTermLiability = new wPBGCTermLiability(this);
                }
                return this.mwPBGCTermLiability;
            }
        }
        
        public wNondiscriminationTesting wNondiscriminationTesting
        {
            get
            {
                if ((this.mwNondiscriminationTesting == null))
                {
                    this.mwNondiscriminationTesting = new wNondiscriminationTesting(this);
                }
                return this.mwNondiscriminationTesting;
            }
        }
        
        public wBenefitExclusions wBenefitExclusions
        {
            get
            {
                if ((this.mwBenefitExclusions == null))
                {
                    this.mwBenefitExclusions = new wBenefitExclusions(this);
                }
                return this.mwBenefitExclusions;
            }
        }
        
        public wCostMethod wCostMethod
        {
            get
            {
                if ((this.mwCostMethod == null))
                {
                    this.mwCostMethod = new wCostMethod(this);
                }
                return this.mwCostMethod;
            }
        }
        
        public wServiceForServiceProrate wServiceForServiceProrate
        {
            get
            {
                if ((this.mwServiceForServiceProrate == null))
                {
                    this.mwServiceForServiceProrate = new wServiceForServiceProrate(this);
                }
                return this.mwServiceForServiceProrate;
            }
        }
        
        public wCompareToAccrued wCompareToAccrued
        {
            get
            {
                if ((this.mwCompareToAccrued == null))
                {
                    this.mwCompareToAccrued = new wCompareToAccrued(this);
                }
                return this.mwCompareToAccrued;
            }
        }
        
        public wAllowNegativeNormalCost wAllowNegativeNormalCost
        {
            get
            {
                if ((this.mwAllowNegativeNormalCost == null))
                {
                    this.mwAllowNegativeNormalCost = new wAllowNegativeNormalCost(this);
                }
                return this.mwAllowNegativeNormalCost;
            }
        }
        
        public wStartAge_VIcon wStartAge_VIcon
        {
            get
            {
                if ((this.mwStartAge_VIcon == null))
                {
                    this.mwStartAge_VIcon = new wStartAge_VIcon(this);
                }
                return this.mwStartAge_VIcon;
            }
        }
        
        public wStartAge_CIcon wStartAge_CIcon
        {
            get
            {
                if ((this.mwStartAge_CIcon == null))
                {
                    this.mwStartAge_CIcon = new wStartAge_CIcon(this);
                }
                return this.mwStartAge_CIcon;
            }
        }
        
        public wCommonTXT wCommonTXT
        {
            get
            {
                if ((this.mwCommonTXT == null))
                {
                    this.mwCommonTXT = new wCommonTXT(this);
                }
                return this.mwCommonTXT;
            }
        }
        
        public wCommonComboBox wCommonComboBox
        {
            get
            {
                if ((this.mwCommonComboBox == null))
                {
                    this.mwCommonComboBox = new wCommonComboBox(this);
                }
                return this.mwCommonComboBox;
            }
        }
        
        public wUsePresentValueOfFutureSalary wUsePresentValueOfFutureSalary
        {
            get
            {
                if ((this.mwUsePresentValueOfFutureSalary == null))
                {
                    this.mwUsePresentValueOfFutureSalary = new wUsePresentValueOfFutureSalary(this);
                }
                return this.mwUsePresentValueOfFutureSalary;
            }
        }
        
        public wUsePresentValueOfFutureService wUsePresentValueOfFutureService
        {
            get
            {
                if ((this.mwUsePresentValueOfFutureService == null))
                {
                    this.mwUsePresentValueOfFutureService = new wUsePresentValueOfFutureService(this);
                }
                return this.mwUsePresentValueOfFutureService;
            }
        }
        
        public wProjectedPayToUseForCoveredPay wProjectedPayToUseForCoveredPay
        {
            get
            {
                if ((this.mwProjectedPayToUseForCoveredPay == null))
                {
                    this.mwProjectedPayToUseForCoveredPay = new wProjectedPayToUseForCoveredPay(this);
                }
                return this.mwProjectedPayToUseForCoveredPay;
            }
        }
        
        public wAccumulationToUseForExpected wAccumulationToUseForExpected
        {
            get
            {
                if ((this.mwAccumulationToUseForExpected == null))
                {
                    this.mwAccumulationToUseForExpected = new wAccumulationToUseForExpected(this);
                }
                return this.mwAccumulationToUseForExpected;
            }
        }
        
        public wIncludePVFutureSalaryService wIncludePVFutureSalaryService
        {
            get
            {
                if ((this.mwIncludePVFutureSalaryService == null))
                {
                    this.mwIncludePVFutureSalaryService = new wIncludePVFutureSalaryService(this);
                }
                return this.mwIncludePVFutureSalaryService;
            }
        }
        
        public wStopPVFuture_VIcon wStopPVFuture_VIcon
        {
            get
            {
                if ((this.mwStopPVFuture_VIcon == null))
                {
                    this.mwStopPVFuture_VIcon = new wStopPVFuture_VIcon(this);
                }
                return this.mwStopPVFuture_VIcon;
            }
        }
        
        public wStopPVFuture_CIcon wStopPVFuture_CIcon
        {
            get
            {
                if ((this.mwStopPVFuture_CIcon == null))
                {
                    this.mwStopPVFuture_CIcon = new wStopPVFuture_CIcon(this);
                }
                return this.mwStopPVFuture_CIcon;
            }
        }
        
        public wBeginningOfTheYearPVFuture wBeginningOfTheYearPVFuture
        {
            get
            {
                if ((this.mwBeginningOfTheYearPVFuture == null))
                {
                    this.mwBeginningOfTheYearPVFuture = new wBeginningOfTheYearPVFuture(this);
                }
                return this.mwBeginningOfTheYearPVFuture;
            }
        }
        
        public wCalculatePresentValueOfFuture wCalculatePresentValueOfFuture
        {
            get
            {
                if ((this.mwCalculatePresentValueOfFuture == null))
                {
                    this.mwCalculatePresentValueOfFuture = new wCalculatePresentValueOfFuture(this);
                }
                return this.mwCalculatePresentValueOfFuture;
            }
        }
        
        public wCalculatePresentValueOfFuture_txt wCalculatePresentValueOfFuture_txt
        {
            get
            {
                if ((this.mwCalculatePresentValueOfFuture_txt == null))
                {
                    this.mwCalculatePresentValueOfFuture_txt = new wCalculatePresentValueOfFuture_txt(this);
                }
                return this.mwCalculatePresentValueOfFuture_txt;
            }
        }
        
        public wAdditionalValuesToBeOutput_Grid wAdditionalValuesToBeOutput_Grid
        {
            get
            {
                if ((this.mwAdditionalValuesToBeOutput_Grid == null))
                {
                    this.mwAdditionalValuesToBeOutput_Grid = new wAdditionalValuesToBeOutput_Grid(this);
                }
                return this.mwAdditionalValuesToBeOutput_Grid;
            }
        }
        
        public wMethodOverrides_Grid wMethodOverrides_Grid
        {
            get
            {
                if ((this.mwMethodOverrides_Grid == null))
                {
                    this.mwMethodOverrides_Grid = new wMethodOverrides_Grid(this);
                }
                return this.mwMethodOverrides_Grid;
            }
        }
        
        public wResultsForStatisticsForExpected_Grid wResultsForStatisticsForExpected_Grid
        {
            get
            {
                if ((this.mwResultsForStatisticsForExpected_Grid == null))
                {
                    this.mwResultsForStatisticsForExpected_Grid = new wResultsForStatisticsForExpected_Grid(this);
                }
                return this.mwResultsForStatisticsForExpected_Grid;
            }
        }
        
        public wCommonVIcon wCommonVIcon
        {
            get
            {
                if ((this.mwCommonVIcon == null))
                {
                    this.mwCommonVIcon = new wCommonVIcon(this);
                }
                return this.mwCommonVIcon;
            }
        }
        
        public wCommonCIcon wCommonCIcon
        {
            get
            {
                if ((this.mwCommonCIcon == null))
                {
                    this.mwCommonCIcon = new wCommonCIcon(this);
                }
                return this.mwCommonCIcon;
            }
        }
        
        public wCommonComboBox_FPGrid wCommonComboBox_FPGrid
        {
            get
            {
                if ((this.mwCommonComboBox_FPGrid == null))
                {
                    this.mwCommonComboBox_FPGrid = new wCommonComboBox_FPGrid(this);
                }
                return this.mwCommonComboBox_FPGrid;
            }
        }
        
        public wCommonTXT_FPGrid wCommonTXT_FPGrid
        {
            get
            {
                if ((this.mwCommonTXT_FPGrid == null))
                {
                    this.mwCommonTXT_FPGrid = new wCommonTXT_FPGrid(this);
                }
                return this.mwCommonTXT_FPGrid;
            }
        }
        
        public wAcc_VestingToUseForAgeFirstVested wAcc_VestingToUseForAgeFirstVested
        {
            get
            {
                if ((this.mwAcc_VestingToUseForAgeFirstVested == null))
                {
                    this.mwAcc_VestingToUseForAgeFirstVested = new wAcc_VestingToUseForAgeFirstVested(this);
                }
                return this.mwAcc_VestingToUseForAgeFirstVested;
            }
        }
        
        public wAcc_AverageWorkingLifeTime wAcc_AverageWorkingLifeTime
        {
            get
            {
                if ((this.mwAcc_AverageWorkingLifeTime == null))
                {
                    this.mwAcc_AverageWorkingLifeTime = new wAcc_AverageWorkingLifeTime(this);
                }
                return this.mwAcc_AverageWorkingLifeTime;
            }
        }
        
        public wAcc_AverageLifeTime wAcc_AverageLifeTime
        {
            get
            {
                if ((this.mwAcc_AverageLifeTime == null))
                {
                    this.mwAcc_AverageLifeTime = new wAcc_AverageLifeTime(this);
                }
                return this.mwAcc_AverageLifeTime;
            }
        }
        
        public wAcc_AverageWorkingLifeTimeToVesting wAcc_AverageWorkingLifeTimeToVesting
        {
            get
            {
                if ((this.mwAcc_AverageWorkingLifeTimeToVesting == null))
                {
                    this.mwAcc_AverageWorkingLifeTimeToVesting = new wAcc_AverageWorkingLifeTimeToVesting(this);
                }
                return this.mwAcc_AverageWorkingLifeTimeToVesting;
            }
        }
        
        public wAcc_AverageWorkingLifeTimeForBenefitingEE wAcc_AverageWorkingLifeTimeForBenefitingEE
        {
            get
            {
                if ((this.mwAcc_AverageWorkingLifeTimeForBenefitingEE == null))
                {
                    this.mwAcc_AverageWorkingLifeTimeForBenefitingEE = new wAcc_AverageWorkingLifeTimeForBenefitingEE(this);
                }
                return this.mwAcc_AverageWorkingLifeTimeForBenefitingEE;
            }
        }
        
        public wAcc_AdditionalCalRequest_ProjectedPayToUse wAcc_AdditionalCalRequest_ProjectedPayToUse
        {
            get
            {
                if ((this.mwAcc_AdditionalCalRequest_ProjectedPayToUse == null))
                {
                    this.mwAcc_AdditionalCalRequest_ProjectedPayToUse = new wAcc_AdditionalCalRequest_ProjectedPayToUse(this);
                }
                return this.mwAcc_AdditionalCalRequest_ProjectedPayToUse;
            }
        }
        
        public wAcc_AdditionalCalRequest_AccumulationToUse wAcc_AdditionalCalRequest_AccumulationToUse
        {
            get
            {
                if ((this.mwAcc_AdditionalCalRequest_AccumulationToUse == null))
                {
                    this.mwAcc_AdditionalCalRequest_AccumulationToUse = new wAcc_AdditionalCalRequest_AccumulationToUse(this);
                }
                return this.mwAcc_AdditionalCalRequest_AccumulationToUse;
            }
        }
        
        public wAcc_AdditionalCalRequest_IncludeExitYearValue wAcc_AdditionalCalRequest_IncludeExitYearValue
        {
            get
            {
                if ((this.mwAcc_AdditionalCalRequest_IncludeExitYearValue == null))
                {
                    this.mwAcc_AdditionalCalRequest_IncludeExitYearValue = new wAcc_AdditionalCalRequest_IncludeExitYearValue(this);
                }
                return this.mwAcc_AdditionalCalRequest_IncludeExitYearValue;
            }
        }
        
        public wTab wTab
        {
            get
            {
                if ((this.mwTab == null))
                {
                    this.mwTab = new wTab(this);
                }
                return this.mwTab;
            }
        }
        
        public wNormalCostForCYTermination_CA wNormalCostForCYTermination_CA
        {
            get
            {
                if ((this.mwNormalCostForCYTermination_CA == null))
                {
                    this.mwNormalCostForCYTermination_CA = new wNormalCostForCYTermination_CA(this);
                }
                return this.mwNormalCostForCYTermination_CA;
            }
        }
        
        public wGrowIn_Age_CA wGrowIn_Age_CA
        {
            get
            {
                if ((this.mwGrowIn_Age_CA == null))
                {
                    this.mwGrowIn_Age_CA = new wGrowIn_Age_CA(this);
                }
                return this.mwGrowIn_Age_CA;
            }
        }
        
        public wGrowIn_Service_CA wGrowIn_Service_CA
        {
            get
            {
                if ((this.mwGrowIn_Service_CA == null))
                {
                    this.mwGrowIn_Service_CA = new wGrowIn_Service_CA(this);
                }
                return this.mwGrowIn_Service_CA;
            }
        }
        
        public wMaxValue_StartAge_CA wMaxValue_StartAge_CA
        {
            get
            {
                if ((this.mwMaxValue_StartAge_CA == null))
                {
                    this.mwMaxValue_StartAge_CA = new wMaxValue_StartAge_CA(this);
                }
                return this.mwMaxValue_StartAge_CA;
            }
        }
        
        public wMaxValue_StopAge_CA wMaxValue_StopAge_CA
        {
            get
            {
                if ((this.mwMaxValue_StopAge_CA == null))
                {
                    this.mwMaxValue_StopAge_CA = new wMaxValue_StopAge_CA(this);
                }
                return this.mwMaxValue_StopAge_CA;
            }
        }
        
        public wBenefitsToInclude_FPGrid_GoingConcern wBenefitsToInclude_FPGrid_GoingConcern
        {
            get
            {
                if ((this.mwBenefitsToInclude_FPGrid_GoingConcern == null))
                {
                    this.mwBenefitsToInclude_FPGrid_GoingConcern = new wBenefitsToInclude_FPGrid_GoingConcern(this);
                }
                return this.mwBenefitsToInclude_FPGrid_GoingConcern;
            }
        }
        
        public wIncludeChangesInPVFutureEEGainLoss_CA wIncludeChangesInPVFutureEEGainLoss_CA
        {
            get
            {
                if ((this.mwIncludeChangesInPVFutureEEGainLoss_CA == null))
                {
                    this.mwIncludeChangesInPVFutureEEGainLoss_CA = new wIncludeChangesInPVFutureEEGainLoss_CA(this);
                }
                return this.mwIncludeChangesInPVFutureEEGainLoss_CA;
            }
        }
        
        public wAccumulationToUseForExepctedPVOfEmployer_CA wAccumulationToUseForExepctedPVOfEmployer_CA
        {
            get
            {
                if ((this.mwAccumulationToUseForExepctedPVOfEmployer_CA == null))
                {
                    this.mwAccumulationToUseForExepctedPVOfEmployer_CA = new wAccumulationToUseForExepctedPVOfEmployer_CA(this);
                }
                return this.mwAccumulationToUseForExepctedPVOfEmployer_CA;
            }
        }
        
        public wScrollBar_CA wScrollBar_CA
        {
            get
            {
                if ((this.mwScrollBar_CA == null))
                {
                    this.mwScrollBar_CA = new wScrollBar_CA(this);
                }
                return this.mwScrollBar_CA;
            }
        }
        
        public wSolvency_AddtionalEligibilityCondition wSolvency_AddtionalEligibilityCondition
        {
            get
            {
                if ((this.mwSolvency_AddtionalEligibilityCondition == null))
                {
                    this.mwSolvency_AddtionalEligibilityCondition = new wSolvency_AddtionalEligibilityCondition(this);
                }
                return this.mwSolvency_AddtionalEligibilityCondition;
            }
        }
        
        public wSolvency_PerformMaximumValueTest wSolvency_PerformMaximumValueTest
        {
            get
            {
                if ((this.mwSolvency_PerformMaximumValueTest == null))
                {
                    this.mwSolvency_PerformMaximumValueTest = new wSolvency_PerformMaximumValueTest(this);
                }
                return this.mwSolvency_PerformMaximumValueTest;
            }
        }
        
        public wBenefitsToValueForSolvency_FPGrid wBenefitsToValueForSolvency_FPGrid
        {
            get
            {
                if ((this.mwBenefitsToValueForSolvency_FPGrid == null))
                {
                    this.mwBenefitsToValueForSolvency_FPGrid = new wBenefitsToValueForSolvency_FPGrid(this);
                }
                return this.mwBenefitsToValueForSolvency_FPGrid;
            }
        }
        
        public wSolvency_AdditionalOptionForExcessContribution wSolvency_AdditionalOptionForExcessContribution
        {
            get
            {
                if ((this.mwSolvency_AdditionalOptionForExcessContribution == null))
                {
                    this.mwSolvency_AdditionalOptionForExcessContribution = new wSolvency_AdditionalOptionForExcessContribution(this);
                }
                return this.mwSolvency_AdditionalOptionForExcessContribution;
            }
        }
        
        public wSolvency_NumOfYearsIncrementalCost wSolvency_NumOfYearsIncrementalCost
        {
            get
            {
                if ((this.mwSolvency_NumOfYearsIncrementalCost == null))
                {
                    this.mwSolvency_NumOfYearsIncrementalCost = new wSolvency_NumOfYearsIncrementalCost(this);
                }
                return this.mwSolvency_NumOfYearsIncrementalCost;
            }
        }
        
        public wCalculateGrowInAndMax_CA wCalculateGrowInAndMax_CA
        {
            get
            {
                if ((this.mwCalculateGrowInAndMax_CA == null))
                {
                    this.mwCalculateGrowInAndMax_CA = new wCalculateGrowInAndMax_CA(this);
                }
                return this.mwCalculateGrowInAndMax_CA;
            }
        }
        
        public wCalculateMax_CA wCalculateMax_CA
        {
            get
            {
                if ((this.mwCalculateMax_CA == null))
                {
                    this.mwCalculateMax_CA = new wCalculateMax_CA(this);
                }
                return this.mwCalculateMax_CA;
            }
        }
        
        public wNoGrowInOrMax_CA wNoGrowInOrMax_CA
        {
            get
            {
                if ((this.mwNoGrowInOrMax_CA == null))
                {
                    this.mwNoGrowInOrMax_CA = new wNoGrowInOrMax_CA(this);
                }
                return this.mwNoGrowInOrMax_CA;
            }
        }
        
        public wBenefitsToValueForWindup_FPGrid wBenefitsToValueForWindup_FPGrid
        {
            get
            {
                if ((this.mwBenefitsToValueForWindup_FPGrid == null))
                {
                    this.mwBenefitsToValueForWindup_FPGrid = new wBenefitsToValueForWindup_FPGrid(this);
                }
                return this.mwBenefitsToValueForWindup_FPGrid;
            }
        }
        
        public wMethodOverrides_BenefitDefinition wMethodOverrides_BenefitDefinition
        {
            get
            {
                if ((this.mwMethodOverrides_BenefitDefinition == null))
                {
                    this.mwMethodOverrides_BenefitDefinition = new wMethodOverrides_BenefitDefinition(this);
                }
                return this.mwMethodOverrides_BenefitDefinition;
            }
        }
        
        public wItemCbo wItemCbo
        {
            get
            {
                if ((this.mwItemCbo == null))
                {
                    this.mwItemCbo = new wItemCbo(this);
                }
                return this.mwItemCbo;
            }
        }
        
        public wMethodOverrides_Formula wMethodOverrides_Formula
        {
            get
            {
                if ((this.mwMethodOverrides_Formula == null))
                {
                    this.mwMethodOverrides_Formula = new wMethodOverrides_Formula(this);
                }
                return this.mwMethodOverrides_Formula;
            }
        }
        
        public wAddRow_BenefitDefinition wAddRow_BenefitDefinition
        {
            get
            {
                if ((this.mwAddRow_BenefitDefinition == null))
                {
                    this.mwAddRow_BenefitDefinition = new wAddRow_BenefitDefinition(this);
                }
                return this.mwAddRow_BenefitDefinition;
            }
        }
        
        public wAddRow_Formula wAddRow_Formula
        {
            get
            {
                if ((this.mwAddRow_Formula == null))
                {
                    this.mwAddRow_Formula = new wAddRow_Formula(this);
                }
                return this.mwAddRow_Formula;
            }
        }
        
        public wMeasurement_Current wMeasurement_Current
        {
            get
            {
                if ((this.mwMeasurement_Current == null))
                {
                    this.mwMeasurement_Current = new wMeasurement_Current(this);
                }
                return this.mwMeasurement_Current;
            }
        }
        
        public wMeasurement_Currentandprio wMeasurement_Currentandprio
        {
            get
            {
                if ((this.mwMeasurement_Currentandprio == null))
                {
                    this.mwMeasurement_Currentandprio = new wMeasurement_Currentandprio(this);
                }
                return this.mwMeasurement_Currentandprio;
            }
        }
        
        public wMeasurement_Currentpriorandfutu wMeasurement_Currentpriorandfutu
        {
            get
            {
                if ((this.mwMeasurement_Currentpriorandfutu == null))
                {
                    this.mwMeasurement_Currentpriorandfutu = new wMeasurement_Currentpriorandfutu(this);
                }
                return this.mwMeasurement_Currentpriorandfutu;
            }
        }
        
        public wMeasurement_Allmeasurements wMeasurement_Allmeasurements
        {
            get
            {
                if ((this.mwMeasurement_Allmeasurements == null))
                {
                    this.mwMeasurement_Allmeasurements = new wMeasurement_Allmeasurements(this);
                }
                return this.mwMeasurement_Allmeasurements;
            }
        }
        
        public wTesting_AveragePay wTesting_AveragePay
        {
            get
            {
                if ((this.mwTesting_AveragePay == null))
                {
                    this.mwTesting_AveragePay = new wTesting_AveragePay(this);
                }
                return this.mwTesting_AveragePay;
            }
        }
        
        public wTesting_Usecurrentpayforcurr wTesting_Usecurrentpayforcurr
        {
            get
            {
                if ((this.mwTesting_Usecurrentpayforcurr == null))
                {
                    this.mwTesting_Usecurrentpayforcurr = new wTesting_Usecurrentpayforcurr(this);
                }
                return this.mwTesting_Usecurrentpayforcurr;
            }
        }
        
        public wDB_Service wDB_Service
        {
            get
            {
                if ((this.mwDB_Service == null))
                {
                    this.mwDB_Service = new wDB_Service(this);
                }
                return this.mwDB_Service;
            }
        }
        
        public wPermitted_SocialSecurityCovered wPermitted_SocialSecurityCovered
        {
            get
            {
                if ((this.mwPermitted_SocialSecurityCovered == null))
                {
                    this.mwPermitted_SocialSecurityCovered = new wPermitted_SocialSecurityCovered(this);
                }
                return this.mwPermitted_SocialSecurityCovered;
            }
        }
        
        public wPermitted_FreshStartServ wPermitted_FreshStartServ
        {
            get
            {
                if ((this.mwPermitted_FreshStartServ == null))
                {
                    this.mwPermitted_FreshStartServ = new wPermitted_FreshStartServ(this);
                }
                return this.mwPermitted_FreshStartServ;
            }
        }
        
        public wInclude_401KAnnualAddition wInclude_401KAnnualAddition
        {
            get
            {
                if ((this.mwInclude_401KAnnualAddition == null))
                {
                    this.mwInclude_401KAnnualAddition = new wInclude_401KAnnualAddition(this);
                }
                return this.mwInclude_401KAnnualAddition;
            }
        }
        
        public wInclude_401KBalance wInclude_401KBalance
        {
            get
            {
                if ((this.mwInclude_401KBalance == null))
                {
                    this.mwInclude_401KBalance = new wInclude_401KBalance(this);
                }
                return this.mwInclude_401KBalance;
            }
        }
        
        public wInclude_401KService wInclude_401KService
        {
            get
            {
                if ((this.mwInclude_401KService == null))
                {
                    this.mwInclude_401KService = new wInclude_401KService(this);
                }
                return this.mwInclude_401KService;
            }
        }
        
        public wInclude_Non401KAnnualAddintion wInclude_Non401KAnnualAddintion
        {
            get
            {
                if ((this.mwInclude_Non401KAnnualAddintion == null))
                {
                    this.mwInclude_Non401KAnnualAddintion = new wInclude_Non401KAnnualAddintion(this);
                }
                return this.mwInclude_Non401KAnnualAddintion;
            }
        }
        
        public wInclude_Non401KBalance wInclude_Non401KBalance
        {
            get
            {
                if ((this.mwInclude_Non401KBalance == null))
                {
                    this.mwInclude_Non401KBalance = new wInclude_Non401KBalance(this);
                }
                return this.mwInclude_Non401KBalance;
            }
        }
        
        public wInclude_Non401KService wInclude_Non401KService
        {
            get
            {
                if ((this.mwInclude_Non401KService == null))
                {
                    this.mwInclude_Non401KService = new wInclude_Non401KService(this);
                }
                return this.mwInclude_Non401KService;
            }
        }
        
        public wValuation_TheEndof wValuation_TheEndof
        {
            get
            {
                if ((this.mwValuation_TheEndof == null))
                {
                    this.mwValuation_TheEndof = new wValuation_TheEndof(this);
                }
                return this.mwValuation_TheEndof;
            }
        }
        
        public wAdditional_EliigibilityWithin10Years wAdditional_EliigibilityWithin10Years
        {
            get
            {
                if ((this.mwAdditional_EliigibilityWithin10Years == null))
                {
                    this.mwAdditional_EliigibilityWithin10Years = new wAdditional_EliigibilityWithin10Years(this);
                }
                return this.mwAdditional_EliigibilityWithin10Years;
            }
        }
        
        public wCom_cbo_NL wCom_cbo_NL
        {
            get
            {
                if ((this.mwCom_cbo_NL == null))
                {
                    this.mwCom_cbo_NL = new wCom_cbo_NL(this);
                }
                return this.mwCom_cbo_NL;
            }
        }
        
        public UISprBenefitDefinitionWindow UISprBenefitDefinitionWindow
        {
            get
            {
                if ((this.mUISprBenefitDefinitionWindow == null))
                {
                    this.mUISprBenefitDefinitionWindow = new UISprBenefitDefinitionWindow(this);
                }
                return this.mUISprBenefitDefinitionWindow;
            }
        }
        
        public wNormalCostforCY_UK wNormalCostforCY_UK
        {
            get
            {
                if ((this.mwNormalCostforCY_UK == null))
                {
                    this.mwNormalCostforCY_UK = new wNormalCostforCY_UK(this);
                }
                return this.mwNormalCostforCY_UK;
            }
        }
        
        public wPBGC4044Calculation wPBGC4044Calculation
        {
            get
            {
                if ((this.mwPBGC4044Calculation == null))
                {
                    this.mwPBGC4044Calculation = new wPBGC4044Calculation(this);
                }
                return this.mwPBGC4044Calculation;
            }
        }
        
        public wUseRetirementDecrements wUseRetirementDecrements
        {
            get
            {
                if ((this.mwUseRetirementDecrements == null))
                {
                    this.mwUseRetirementDecrements = new wUseRetirementDecrements(this);
                }
                return this.mwUseRetirementDecrements;
            }
        }
        
        public wTheBeginningOfThetTestingYear wTheBeginningOfThetTestingYear
        {
            get
            {
                if ((this.mwTheBeginningOfThetTestingYear == null))
                {
                    this.mwTheBeginningOfThetTestingYear = new wTheBeginningOfThetTestingYear(this);
                }
                return this.mwTheBeginningOfThetTestingYear;
            }
        }
        
        public wTheEndOfTheTestingYear wTheEndOfTheTestingYear
        {
            get
            {
                if ((this.mwTheEndOfTheTestingYear == null))
                {
                    this.mwTheEndOfTheTestingYear = new wTheEndOfTheTestingYear(this);
                }
                return this.mwTheEndOfTheTestingYear;
            }
        }
        
        public wTestingBasis_BenefitBasis wTestingBasis_BenefitBasis
        {
            get
            {
                if ((this.mwTestingBasis_BenefitBasis == null))
                {
                    this.mwTestingBasis_BenefitBasis = new wTestingBasis_BenefitBasis(this);
                }
                return this.mwTestingBasis_BenefitBasis;
            }
        }
        
        public wTestingBasis_ContributionBasis wTestingBasis_ContributionBasis
        {
            get
            {
                if ((this.mwTestingBasis_ContributionBasis == null))
                {
                    this.mwTestingBasis_ContributionBasis = new wTestingBasis_ContributionBasis(this);
                }
                return this.mwTestingBasis_ContributionBasis;
            }
        }
        
        public wIncludeDBBenefits wIncludeDBBenefits
        {
            get
            {
                if ((this.mwIncludeDBBenefits == null))
                {
                    this.mwIncludeDBBenefits = new wIncludeDBBenefits(this);
                }
                return this.mwIncludeDBBenefits;
            }
        }
        
        public wIncludeDCBenefits wIncludeDCBenefits
        {
            get
            {
                if ((this.mwIncludeDCBenefits == null))
                {
                    this.mwIncludeDCBenefits = new wIncludeDCBenefits(this);
                }
                return this.mwIncludeDCBenefits;
            }
        }
        
        public wPermittedDis_UseFixedPer_rd wPermittedDis_UseFixedPer_rd
        {
            get
            {
                if ((this.mwPermittedDis_UseFixedPer_rd == null))
                {
                    this.mwPermittedDis_UseFixedPer_rd = new wPermittedDis_UseFixedPer_rd(this);
                }
                return this.mwPermittedDis_UseFixedPer_rd;
            }
        }
        
        public wPermittedDis_UseFixedPer_txt wPermittedDis_UseFixedPer_txt
        {
            get
            {
                if ((this.mwPermittedDis_UseFixedPer_txt == null))
                {
                    this.mwPermittedDis_UseFixedPer_txt = new wPermittedDis_UseFixedPer_txt(this);
                }
                return this.mwPermittedDis_UseFixedPer_txt;
            }
        }
        #endregion
        
        #region Fields
        private wFunding mwFunding;
        
        private wPBGCTermLiability mwPBGCTermLiability;
        
        private wNondiscriminationTesting mwNondiscriminationTesting;
        
        private wBenefitExclusions mwBenefitExclusions;
        
        private wCostMethod mwCostMethod;
        
        private wServiceForServiceProrate mwServiceForServiceProrate;
        
        private wCompareToAccrued mwCompareToAccrued;
        
        private wAllowNegativeNormalCost mwAllowNegativeNormalCost;
        
        private wStartAge_VIcon mwStartAge_VIcon;
        
        private wStartAge_CIcon mwStartAge_CIcon;
        
        private wCommonTXT mwCommonTXT;
        
        private wCommonComboBox mwCommonComboBox;
        
        private wUsePresentValueOfFutureSalary mwUsePresentValueOfFutureSalary;
        
        private wUsePresentValueOfFutureService mwUsePresentValueOfFutureService;
        
        private wProjectedPayToUseForCoveredPay mwProjectedPayToUseForCoveredPay;
        
        private wAccumulationToUseForExpected mwAccumulationToUseForExpected;
        
        private wIncludePVFutureSalaryService mwIncludePVFutureSalaryService;
        
        private wStopPVFuture_VIcon mwStopPVFuture_VIcon;
        
        private wStopPVFuture_CIcon mwStopPVFuture_CIcon;
        
        private wBeginningOfTheYearPVFuture mwBeginningOfTheYearPVFuture;
        
        private wCalculatePresentValueOfFuture mwCalculatePresentValueOfFuture;
        
        private wCalculatePresentValueOfFuture_txt mwCalculatePresentValueOfFuture_txt;
        
        private wAdditionalValuesToBeOutput_Grid mwAdditionalValuesToBeOutput_Grid;
        
        private wMethodOverrides_Grid mwMethodOverrides_Grid;
        
        private wResultsForStatisticsForExpected_Grid mwResultsForStatisticsForExpected_Grid;
        
        private wCommonVIcon mwCommonVIcon;
        
        private wCommonCIcon mwCommonCIcon;
        
        private wCommonComboBox_FPGrid mwCommonComboBox_FPGrid;
        
        private wCommonTXT_FPGrid mwCommonTXT_FPGrid;
        
        private wAcc_VestingToUseForAgeFirstVested mwAcc_VestingToUseForAgeFirstVested;
        
        private wAcc_AverageWorkingLifeTime mwAcc_AverageWorkingLifeTime;
        
        private wAcc_AverageLifeTime mwAcc_AverageLifeTime;
        
        private wAcc_AverageWorkingLifeTimeToVesting mwAcc_AverageWorkingLifeTimeToVesting;
        
        private wAcc_AverageWorkingLifeTimeForBenefitingEE mwAcc_AverageWorkingLifeTimeForBenefitingEE;
        
        private wAcc_AdditionalCalRequest_ProjectedPayToUse mwAcc_AdditionalCalRequest_ProjectedPayToUse;
        
        private wAcc_AdditionalCalRequest_AccumulationToUse mwAcc_AdditionalCalRequest_AccumulationToUse;
        
        private wAcc_AdditionalCalRequest_IncludeExitYearValue mwAcc_AdditionalCalRequest_IncludeExitYearValue;
        
        private wTab mwTab;
        
        private wNormalCostForCYTermination_CA mwNormalCostForCYTermination_CA;
        
        private wGrowIn_Age_CA mwGrowIn_Age_CA;
        
        private wGrowIn_Service_CA mwGrowIn_Service_CA;
        
        private wMaxValue_StartAge_CA mwMaxValue_StartAge_CA;
        
        private wMaxValue_StopAge_CA mwMaxValue_StopAge_CA;
        
        private wBenefitsToInclude_FPGrid_GoingConcern mwBenefitsToInclude_FPGrid_GoingConcern;
        
        private wIncludeChangesInPVFutureEEGainLoss_CA mwIncludeChangesInPVFutureEEGainLoss_CA;
        
        private wAccumulationToUseForExepctedPVOfEmployer_CA mwAccumulationToUseForExepctedPVOfEmployer_CA;
        
        private wScrollBar_CA mwScrollBar_CA;
        
        private wSolvency_AddtionalEligibilityCondition mwSolvency_AddtionalEligibilityCondition;
        
        private wSolvency_PerformMaximumValueTest mwSolvency_PerformMaximumValueTest;
        
        private wBenefitsToValueForSolvency_FPGrid mwBenefitsToValueForSolvency_FPGrid;
        
        private wSolvency_AdditionalOptionForExcessContribution mwSolvency_AdditionalOptionForExcessContribution;
        
        private wSolvency_NumOfYearsIncrementalCost mwSolvency_NumOfYearsIncrementalCost;
        
        private wCalculateGrowInAndMax_CA mwCalculateGrowInAndMax_CA;
        
        private wCalculateMax_CA mwCalculateMax_CA;
        
        private wNoGrowInOrMax_CA mwNoGrowInOrMax_CA;
        
        private wBenefitsToValueForWindup_FPGrid mwBenefitsToValueForWindup_FPGrid;
        
        private wMethodOverrides_BenefitDefinition mwMethodOverrides_BenefitDefinition;
        
        private wItemCbo mwItemCbo;
        
        private wMethodOverrides_Formula mwMethodOverrides_Formula;
        
        private wAddRow_BenefitDefinition mwAddRow_BenefitDefinition;
        
        private wAddRow_Formula mwAddRow_Formula;
        
        private wMeasurement_Current mwMeasurement_Current;
        
        private wMeasurement_Currentandprio mwMeasurement_Currentandprio;
        
        private wMeasurement_Currentpriorandfutu mwMeasurement_Currentpriorandfutu;
        
        private wMeasurement_Allmeasurements mwMeasurement_Allmeasurements;
        
        private wTesting_AveragePay mwTesting_AveragePay;
        
        private wTesting_Usecurrentpayforcurr mwTesting_Usecurrentpayforcurr;
        
        private wDB_Service mwDB_Service;
        
        private wPermitted_SocialSecurityCovered mwPermitted_SocialSecurityCovered;
        
        private wPermitted_FreshStartServ mwPermitted_FreshStartServ;
        
        private wInclude_401KAnnualAddition mwInclude_401KAnnualAddition;
        
        private wInclude_401KBalance mwInclude_401KBalance;
        
        private wInclude_401KService mwInclude_401KService;
        
        private wInclude_Non401KAnnualAddintion mwInclude_Non401KAnnualAddintion;
        
        private wInclude_Non401KBalance mwInclude_Non401KBalance;
        
        private wInclude_Non401KService mwInclude_Non401KService;
        
        private wValuation_TheEndof mwValuation_TheEndof;
        
        private wAdditional_EliigibilityWithin10Years mwAdditional_EliigibilityWithin10Years;
        
        private wCom_cbo_NL mwCom_cbo_NL;
        
        private UISprBenefitDefinitionWindow mUISprBenefitDefinitionWindow;
        
        private wNormalCostforCY_UK mwNormalCostforCY_UK;
        
        private wPBGC4044Calculation mwPBGC4044Calculation;
        
        private wUseRetirementDecrements mwUseRetirementDecrements;
        
        private wTheBeginningOfThetTestingYear mwTheBeginningOfThetTestingYear;
        
        private wTheEndOfTheTestingYear mwTheEndOfTheTestingYear;
        
        private wTestingBasis_BenefitBasis mwTestingBasis_BenefitBasis;
        
        private wTestingBasis_ContributionBasis mwTestingBasis_ContributionBasis;
        
        private wIncludeDBBenefits mwIncludeDBBenefits;
        
        private wIncludeDCBenefits mwIncludeDCBenefits;
        
        private wPermittedDis_UseFixedPer_rd mwPermittedDis_UseFixedPer_rd;
        
        private wPermittedDis_UseFixedPer_txt mwPermittedDis_UseFixedPer_txt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFunding : WinWindow
    {
        
        public wFunding(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radCalculatePPALiabilities";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdFunding
        {
            get
            {
                if ((this.mrdFunding == null))
                {
                    this.mrdFunding = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdFunding.SearchProperties[WinRadioButton.PropertyNames.Name] = "Funding";
                    this.mrdFunding.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdFunding;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdFunding;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPBGCTermLiability : WinWindow
    {
        
        public wPBGCTermLiability(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radCalculatePBGCPlanTerm";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdPBGCTermLiability
        {
            get
            {
                if ((this.mrdPBGCTermLiability == null))
                {
                    this.mrdPBGCTermLiability = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdPBGCTermLiability.SearchProperties[WinRadioButton.PropertyNames.Name] = "PBGC term liability";
                    this.mrdPBGCTermLiability.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdPBGCTermLiability;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdPBGCTermLiability;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNondiscriminationTesting : WinWindow
    {
        
        public wNondiscriminationTesting(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radNonDiscriminationTesting";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdNondiscriminationTesting
        {
            get
            {
                if ((this.mrdNondiscriminationTesting == null))
                {
                    this.mrdNondiscriminationTesting = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdNondiscriminationTesting.SearchProperties[WinRadioButton.PropertyNames.Name] = "Nondiscrimination testing";
                    this.mrdNondiscriminationTesting.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdNondiscriminationTesting;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdNondiscriminationTesting;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitExclusions : WinWindow
    {
        
        public wBenefitExclusions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lstBenefitExclusions";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public listBenefitExclusions listBenefitExclusions
        {
            get
            {
                if ((this.mlistBenefitExclusions == null))
                {
                    this.mlistBenefitExclusions = new listBenefitExclusions(this);
                }
                return this.mlistBenefitExclusions;
            }
        }
        #endregion
        
        #region Fields
        private listBenefitExclusions mlistBenefitExclusions;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class listBenefitExclusions : WinList
    {
        
        public listBenefitExclusions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Uncheck box to exclude these benefits (disability benefits automatically excluded" +
                ")";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkDthLiab
        {
            get
            {
                if ((this.mchkDthLiab == null))
                {
                    this.mchkDthLiab = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkDthLiab.SearchProperties[WinCheckBox.PropertyNames.Name] = "DthLiab";
                    this.mchkDthLiab.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkDthLiab;
            }
        }
        
        public WinCheckBox chkInacLiab
        {
            get
            {
                if ((this.mchkInacLiab == null))
                {
                    this.mchkInacLiab = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkInacLiab.SearchProperties[WinCheckBox.PropertyNames.Name] = "InacLiab";
                    this.mchkInacLiab.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkInacLiab;
            }
        }
        
        public WinCheckBox chkInactDIDLiab
        {
            get
            {
                if ((this.mchkInactDIDLiab == null))
                {
                    this.mchkInactDIDLiab = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkInactDIDLiab.SearchProperties[WinCheckBox.PropertyNames.Name] = "InactDIDLiab";
                    this.mchkInactDIDLiab.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkInactDIDLiab;
            }
        }
        
        public WinCheckBox chkRetLiab
        {
            get
            {
                if ((this.mchkRetLiab == null))
                {
                    this.mchkRetLiab = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkRetLiab.SearchProperties[WinCheckBox.PropertyNames.Name] = "RetLiab";
                    this.mchkRetLiab.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkRetLiab;
            }
        }
        
        public WinCheckBox chkWthDIDLiab
        {
            get
            {
                if ((this.mchkWthDIDLiab == null))
                {
                    this.mchkWthDIDLiab = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkWthDIDLiab.SearchProperties[WinCheckBox.PropertyNames.Name] = "WthDIDLiab";
                    this.mchkWthDIDLiab.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkWthDIDLiab;
            }
        }
        
        public WinCheckBox chkWthLiab
        {
            get
            {
                if ((this.mchkWthLiab == null))
                {
                    this.mchkWthLiab = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkWthLiab.SearchProperties[WinCheckBox.PropertyNames.Name] = "WthLiab";
                    this.mchkWthLiab.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkWthLiab;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkDthLiab;
        
        private WinCheckBox mchkInacLiab;
        
        private WinCheckBox mchkInactDIDLiab;
        
        private WinCheckBox mchkRetLiab;
        
        private WinCheckBox mchkWthDIDLiab;
        
        private WinCheckBox mchkWthLiab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCostMethod : WinWindow
    {
        
        public wCostMethod(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboCostMethod";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboCostMethod
        {
            get
            {
                if ((this.mcboCostMethod == null))
                {
                    this.mcboCostMethod = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboCostMethod.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboCostMethod;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboCostMethod;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wServiceForServiceProrate : WinWindow
    {
        
        public wServiceForServiceProrate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboServiceForServiceProrate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboServiceForServiceProrate
        {
            get
            {
                if ((this.mcboServiceForServiceProrate == null))
                {
                    this.mcboServiceForServiceProrate = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboServiceForServiceProrate.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboServiceForServiceProrate;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboServiceForServiceProrate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCompareToAccrued : WinWindow
    {
        
        public wCompareToAccrued(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkCompareToAccrued";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkCompareToAccrued
        {
            get
            {
                if ((this.mchkCompareToAccrued == null))
                {
                    this.mchkCompareToAccrued = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkCompareToAccrued.SearchProperties[WinCheckBox.PropertyNames.Name] = "Compare to accrued ";
                    this.mchkCompareToAccrued.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkCompareToAccrued;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkCompareToAccrued;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAllowNegativeNormalCost : WinWindow
    {
        
        public wAllowNegativeNormalCost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAllowNegativeNormalCost";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAllowNegativeNormalCost
        {
            get
            {
                if ((this.mchkAllowNegativeNormalCost == null))
                {
                    this.mchkAllowNegativeNormalCost = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAllowNegativeNormalCost.SearchProperties[WinCheckBox.PropertyNames.Name] = "Allow negative normal cost ";
                    this.mchkAllowNegativeNormalCost.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkAllowNegativeNormalCost;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAllowNegativeNormalCost;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStartAge_VIcon : WinWindow
    {
        
        public wStartAge_VIcon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnStartAge_V
        {
            get
            {
                if ((this.mbtnStartAge_V == null))
                {
                    this.mbtnStartAge_V = new WinButton(this);
                    #region Search Criteria
                    this.mbtnStartAge_V.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtnStartAge_V.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnStartAge_V;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnStartAge_V;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStartAge_CIcon : WinWindow
    {
        
        public wStartAge_CIcon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnStartAge_C
        {
            get
            {
                if ((this.mbtnStartAge_C == null))
                {
                    this.mbtnStartAge_C = new WinButton(this);
                    #region Search Criteria
                    this.mbtnStartAge_C.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtnStartAge_C.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnStartAge_C;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnStartAge_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommonTXT : WinWindow
    {
        
        public wCommonTXT(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_numEditConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt : WinEdit
    {
        
        public txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_numEditConstantEdit1
        {
            get
            {
                if ((this.mUI_numEditConstantEdit1 == null))
                {
                    this.mUI_numEditConstantEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUI_numEditConstantEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUI_numEditConstantEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUI_numEditConstantEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_numEditConstantEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommonComboBox : WinWindow
    {
        
        public wCommonComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cboVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUsePresentValueOfFutureSalary : WinWindow
    {
        
        public wUsePresentValueOfFutureSalary(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radPVFutureSalary";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdUsePresentValueOfFutureSalary
        {
            get
            {
                if ((this.mrdUsePresentValueOfFutureSalary == null))
                {
                    this.mrdUsePresentValueOfFutureSalary = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdUsePresentValueOfFutureSalary.SearchProperties[WinRadioButton.PropertyNames.Name] = "Use present value of future salary       ";
                    this.mrdUsePresentValueOfFutureSalary.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdUsePresentValueOfFutureSalary;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdUsePresentValueOfFutureSalary;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUsePresentValueOfFutureService : WinWindow
    {
        
        public wUsePresentValueOfFutureService(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radPVFutureService";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdUsePresentValueOfFutureService
        {
            get
            {
                if ((this.mrdUsePresentValueOfFutureService == null))
                {
                    this.mrdUsePresentValueOfFutureService = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdUsePresentValueOfFutureService.SearchProperties[WinRadioButton.PropertyNames.Name] = "Use present value of future service       ";
                    this.mrdUsePresentValueOfFutureService.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdUsePresentValueOfFutureService;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdUsePresentValueOfFutureService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProjectedPayToUseForCoveredPay : WinWindow
    {
        
        public wProjectedPayToUseForCoveredPay(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboProjectedSalaryDefinitionLibrary";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboProjectedPayToUseForCoveredPay
        {
            get
            {
                if ((this.mcboProjectedPayToUseForCoveredPay == null))
                {
                    this.mcboProjectedPayToUseForCoveredPay = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboProjectedPayToUseForCoveredPay.SearchProperties[WinComboBox.PropertyNames.Name] = "Additional calculation requests";
                    this.mcboProjectedPayToUseForCoveredPay.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboProjectedPayToUseForCoveredPay;
            }
        }
        
        public WinComboBox cboCA
        {
            get
            {
                if ((this.mcboCA == null))
                {
                    this.mcboCA = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboCA.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboCA;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboProjectedPayToUseForCoveredPay;
        
        private WinComboBox mcboCA;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAccumulationToUseForExpected : WinWindow
    {
        
        public wAccumulationToUseForExpected(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboAccumulationFormulaLibrary";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboAccumulationToUseForExpected
        {
            get
            {
                if ((this.mcboAccumulationToUseForExpected == null))
                {
                    this.mcboAccumulationToUseForExpected = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboAccumulationToUseForExpected.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboAccumulationToUseForExpected;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboAccumulationToUseForExpected;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludePVFutureSalaryService : WinWindow
    {
        
        public wIncludePVFutureSalaryService(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIncludeGainLossResultsFutureValuation";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkIncludePVFutureSalaryService
        {
            get
            {
                if ((this.mchkIncludePVFutureSalaryService == null))
                {
                    this.mchkIncludePVFutureSalaryService = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkIncludePVFutureSalaryService.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include PV Future Salary/Service/ Employee Contributions in gain/loss and future " +
                        "valuation results";
                    this.mchkIncludePVFutureSalaryService.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkIncludePVFutureSalaryService;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkIncludePVFutureSalaryService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStopPVFuture_VIcon : WinWindow
    {
        
        public wStopPVFuture_VIcon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnStopPVFuture_V
        {
            get
            {
                if ((this.mbtnStopPVFuture_V == null))
                {
                    this.mbtnStopPVFuture_V = new WinButton(this);
                    #region Search Criteria
                    this.mbtnStopPVFuture_V.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtnStopPVFuture_V.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnStopPVFuture_V;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnStopPVFuture_V;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStopPVFuture_CIcon : WinWindow
    {
        
        public wStopPVFuture_CIcon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnStopPVFuture_C
        {
            get
            {
                if ((this.mbtnStopPVFuture_C == null))
                {
                    this.mbtnStopPVFuture_C = new WinButton(this);
                    #region Search Criteria
                    this.mbtnStopPVFuture_C.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtnStopPVFuture_C.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnStopPVFuture_C;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnStopPVFuture_C;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBeginningOfTheYearPVFuture : WinWindow
    {
        
        public wBeginningOfTheYearPVFuture(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIncludeExitYearValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkBeginningOfTheYearPVFuture
        {
            get
            {
                if ((this.mchkBeginningOfTheYearPVFuture == null))
                {
                    this.mchkBeginningOfTheYearPVFuture = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkBeginningOfTheYearPVFuture.SearchProperties[WinCheckBox.PropertyNames.Name] = "Beginning of the year PV Future Salary/Service/Contributions";
                    this.mchkBeginningOfTheYearPVFuture.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkBeginningOfTheYearPVFuture;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkBeginningOfTheYearPVFuture;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCalculatePresentValueOfFuture : WinWindow
    {
        
        public wCalculatePresentValueOfFuture(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkCalculatePresentValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkCalculatePresentValueOfFuture
        {
            get
            {
                if ((this.mchkCalculatePresentValueOfFuture == null))
                {
                    this.mchkCalculatePresentValueOfFuture = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkCalculatePresentValueOfFuture.SearchProperties[WinCheckBox.PropertyNames.Name] = "Calculate present value of future salary/employee contribution n times a year";
                    this.mchkCalculatePresentValueOfFuture.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkCalculatePresentValueOfFuture;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkCalculatePresentValueOfFuture;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCalculatePresentValueOfFuture_txt : WinWindow
    {
        
        public wCalculatePresentValueOfFuture_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudContributionsPayableTimesAYear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtCalculatePresentValueOfFuture txtCalculatePresentValueOfFuture
        {
            get
            {
                if ((this.mtxtCalculatePresentValueOfFuture == null))
                {
                    this.mtxtCalculatePresentValueOfFuture = new txtCalculatePresentValueOfFuture(this);
                }
                return this.mtxtCalculatePresentValueOfFuture;
            }
        }
        #endregion
        
        #region Fields
        private txtCalculatePresentValueOfFuture mtxtCalculatePresentValueOfFuture;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtCalculatePresentValueOfFuture : WinEdit
    {
        
        public txtCalculatePresentValueOfFuture(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudContributionsPayaEdit1
        {
            get
            {
                if ((this.mUINudContributionsPayaEdit1 == null))
                {
                    this.mUINudContributionsPayaEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudContributionsPayaEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINudContributionsPayaEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINudContributionsPayaEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudContributionsPayaEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdditionalValuesToBeOutput_Grid : WinWindow
    {
        
        public wAdditionalValuesToBeOutput_Grid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprAdditionalValuesOutput";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMethodOverrides_Grid : WinWindow
    {
        
        public wMethodOverrides_Grid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprBenefitDefinition";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "Funding";
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wResultsForStatisticsForExpected_Grid : WinWindow
    {
        
        public wResultsForStatisticsForExpected_Grid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprPayoutProjectionResults";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "Results for statistics in Payout Projection";
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        
        public WinClient grid_IR
        {
            get
            {
                if ((this.mgrid_IR == null))
                {
                    this.mgrid_IR = new WinClient(this);
                    #region Search Criteria
                    this.mgrid_IR.SearchProperties[WinControl.PropertyNames.Name] = "Results for statistics in Payout Projection";
                    this.mgrid_IR.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid_IR.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid_IR;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        
        private WinClient mgrid_IR;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommonVIcon : WinWindow
    {
        
        public wCommonVIcon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnV
        {
            get
            {
                if ((this.mbtnV == null))
                {
                    this.mbtnV = new WinButton(this);
                    #region Search Criteria
                    this.mbtnV.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtnV.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnV;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnV;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommonCIcon : WinWindow
    {
        
        public wCommonCIcon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnC
        {
            get
            {
                if ((this.mbtnC == null))
                {
                    this.mbtnC = new WinButton(this);
                    #region Search Criteria
                    this.mbtnC.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtnC.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnC;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnC;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommonComboBox_FPGrid : WinWindow
    {
        
        public wCommonComboBox_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommonTXT_FPGrid : WinWindow
    {
        
        public wCommonTXT_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcc_VestingToUseForAgeFirstVested : WinWindow
    {
        
        public wAcc_VestingToUseForAgeFirstVested(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboVesting";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboAcc_VestingToUseForAgeFirstVested
        {
            get
            {
                if ((this.mcboAcc_VestingToUseForAgeFirstVested == null))
                {
                    this.mcboAcc_VestingToUseForAgeFirstVested = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboAcc_VestingToUseForAgeFirstVested.SearchProperties[WinComboBox.PropertyNames.Name] = "Vesting to use for age first vested";
                    this.mcboAcc_VestingToUseForAgeFirstVested.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboAcc_VestingToUseForAgeFirstVested;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboAcc_VestingToUseForAgeFirstVested;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcc_AverageWorkingLifeTime : WinWindow
    {
        
        public wAcc_AverageWorkingLifeTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAverageWorkingLifetime";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAcc_AverageWorkingLifeTime
        {
            get
            {
                if ((this.mchkAcc_AverageWorkingLifeTime == null))
                {
                    this.mchkAcc_AverageWorkingLifeTime = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAcc_AverageWorkingLifeTime.SearchProperties.Add(new PropertyExpression(WinCheckBox.PropertyNames.Name, "Average working lifetime –", PropertyExpressionOperator.Contains));
                    this.mchkAcc_AverageWorkingLifeTime.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkAcc_AverageWorkingLifeTime;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAcc_AverageWorkingLifeTime;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcc_AverageLifeTime : WinWindow
    {
        
        public wAcc_AverageLifeTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAverageLifetime";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAcc_AverageLifeTime
        {
            get
            {
                if ((this.mchkAcc_AverageLifeTime == null))
                {
                    this.mchkAcc_AverageLifeTime = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAcc_AverageLifeTime.SearchProperties.Add(new PropertyExpression(WinCheckBox.PropertyNames.Name, "Average lifetime –", PropertyExpressionOperator.Contains));
                    this.mchkAcc_AverageLifeTime.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkAcc_AverageLifeTime;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAcc_AverageLifeTime;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcc_AverageWorkingLifeTimeToVesting : WinWindow
    {
        
        public wAcc_AverageWorkingLifeTimeToVesting(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAverageWorkingLifetimeToVesting";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAcc_AverageWorkingLifeTimeToVesting
        {
            get
            {
                if ((this.mchkAcc_AverageWorkingLifeTimeToVesting == null))
                {
                    this.mchkAcc_AverageWorkingLifeTimeToVesting = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAcc_AverageWorkingLifeTimeToVesting.SearchProperties.Add(new PropertyExpression(WinCheckBox.PropertyNames.Name, "Average working lifetime tovesting -", PropertyExpressionOperator.Contains));
                    this.mchkAcc_AverageWorkingLifeTimeToVesting.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkAcc_AverageWorkingLifeTimeToVesting;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAcc_AverageWorkingLifeTimeToVesting;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcc_AverageWorkingLifeTimeForBenefitingEE : WinWindow
    {
        
        public wAcc_AverageWorkingLifeTimeForBenefitingEE(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAverageWorkingLifetimeBenefitingEmployees";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkAcc_AverageWorkingLifeTimeForBenefitingEE
        {
            get
            {
                if ((this.mchkAcc_AverageWorkingLifeTimeForBenefitingEE == null))
                {
                    this.mchkAcc_AverageWorkingLifeTimeForBenefitingEE = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkAcc_AverageWorkingLifeTimeForBenefitingEE.SearchProperties.Add(new PropertyExpression(WinCheckBox.PropertyNames.Name, "Average working lifetime for benefiting employees -", PropertyExpressionOperator.Contains));
                    this.mchkAcc_AverageWorkingLifeTimeForBenefitingEE.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkAcc_AverageWorkingLifeTimeForBenefitingEE;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkAcc_AverageWorkingLifeTimeForBenefitingEE;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcc_AdditionalCalRequest_ProjectedPayToUse : WinWindow
    {
        
        public wAcc_AdditionalCalRequest_ProjectedPayToUse(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboProjectedSalaryDefinitionLibrary";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboProjectedpayToUse
        {
            get
            {
                if ((this.mcboProjectedpayToUse == null))
                {
                    this.mcboProjectedpayToUse = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboProjectedpayToUse.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboProjectedpayToUse;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboProjectedpayToUse;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcc_AdditionalCalRequest_AccumulationToUse : WinWindow
    {
        
        public wAcc_AdditionalCalRequest_AccumulationToUse(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboAccumulationFormulaLibrary";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboAccumulationToUse
        {
            get
            {
                if ((this.mcboAccumulationToUse == null))
                {
                    this.mcboAccumulationToUse = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboAccumulationToUse.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboAccumulationToUse;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboAccumulationToUse;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAcc_AdditionalCalRequest_IncludeExitYearValue : WinWindow
    {
        
        public wAcc_AdditionalCalRequest_IncludeExitYearValue(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIncludeExitYearValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkIncludeExitYearValue
        {
            get
            {
                if ((this.mchkIncludeExitYearValue == null))
                {
                    this.mchkIncludeExitYearValue = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkIncludeExitYearValue.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include exit year value for present value of pay/service/employee contribution ";
                    this.mchkIncludeExitYearValue.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkIncludeExitYearValue;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkIncludeExitYearValue;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTab : WinWindow
    {
        
        public wTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "wsCanadaMethod";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIGoingConcernTabPage
        {
            get
            {
                if ((this.mUIGoingConcernTabPage == null))
                {
                    this.mUIGoingConcernTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIGoingConcernTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Going Concern";
                    this.mUIGoingConcernTabPage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIGoingConcernTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIGoingConcernTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNormalCostForCYTermination_CA : WinWindow
    {
        
        public wNormalCostForCYTermination_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNormalCostForCurrentYearTerm";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGrowIn_Age_CA : WinWindow
    {
        
        public wGrowIn_Age_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboAge";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Age";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGrowIn_Service_CA : WinWindow
    {
        
        public wGrowIn_Service_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboService";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Service";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMaxValue_StartAge_CA : WinWindow
    {
        
        public wMaxValue_StartAge_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboStartAge";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Start age for maximum value test";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMaxValue_StopAge_CA : WinWindow
    {
        
        public wMaxValue_StopAge_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboStopAge";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Stop age for maximum value test";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitsToInclude_FPGrid_GoingConcern : WinWindow
    {
        
        public wBenefitsToInclude_FPGrid_GoingConcern(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprBenefitsToInclude";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties.Add(new PropertyExpression(WinControl.PropertyNames.Name, "Benefits to include ", PropertyExpressionOperator.Contains));
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludeChangesInPVFutureEEGainLoss_CA : WinWindow
    {
        
        public wIncludeChangesInPVFutureEEGainLoss_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIncludeChangesPVFuture";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include changes in PV Future employee contributions in gain/loss results";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAccumulationToUseForExepctedPVOfEmployer_CA : WinWindow
    {
        
        public wAccumulationToUseForExepctedPVOfEmployer_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboAccumulationEmployerContrib";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Accumulation to use for expected and present value of employer contribution";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wScrollBar_CA : WinWindow
    {
        
        public wScrollBar_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ControlName, "MethodView", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wVerticalScrollBar wVerticalScrollBar
        {
            get
            {
                if ((this.mwVerticalScrollBar == null))
                {
                    this.mwVerticalScrollBar = new wVerticalScrollBar(this);
                }
                return this.mwVerticalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private wVerticalScrollBar mwVerticalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVerticalScrollBar : WinScrollBar
    {
        
        public wVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnDown
        {
            get
            {
                if ((this.mbtnDown == null))
                {
                    this.mbtnDown = new WinButton(this);
                    #region Search Criteria
                    this.mbtnDown.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    this.mbtnDown.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnDown;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnDown;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSolvency_AddtionalEligibilityCondition : WinWindow
    {
        
        public wSolvency_AddtionalEligibilityCondition(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboEligibilityGrowIn";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Additional eligibility condition for grow-in";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSolvency_PerformMaximumValueTest : WinWindow
    {
        
        public wSolvency_PerformMaximumValueTest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkTestMaxValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Perform maximum value test for deferred inactives";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitsToValueForSolvency_FPGrid : WinWindow
    {
        
        public wBenefitsToValueForSolvency_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprBenefitDefinition";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "Benefits to value for Solvency";
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSolvency_AdditionalOptionForExcessContribution : WinWindow
    {
        
        public wSolvency_AdditionalOptionForExcessContribution(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboAddOptionExcessConBenefits";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Additional option for excess contribution benefits";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSolvency_NumOfYearsIncrementalCost : WinWindow
    {
        
        public wSolvency_NumOfYearsIncrementalCost(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudYearsIncrementalCost";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt1 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt1(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt1 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt1 : WinEdit
    {
        
        public txt1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudYearsIncrementalCEdit1
        {
            get
            {
                if ((this.mUINudYearsIncrementalCEdit1 == null))
                {
                    this.mUINudYearsIncrementalCEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudYearsIncrementalCEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "A single text character";
                    this.mUINudYearsIncrementalCEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINudYearsIncrementalCEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudYearsIncrementalCEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCalculateGrowInAndMax_CA : WinWindow
    {
        
        public wCalculateGrowInAndMax_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radGrowInNMaxValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Calculate grow-in and maximum value";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCalculateMax_CA : WinWindow
    {
        
        public wCalculateMax_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radMaxValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Calculate maximum value";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNoGrowInOrMax_CA : WinWindow
    {
        
        public wNoGrowInOrMax_CA(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radNoGrowInOrMaxValue";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "No grow-in or maximum value calculations";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitsToValueForWindup_FPGrid : WinWindow
    {
        
        public wBenefitsToValueForWindup_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprBenefitDefinition";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "Benefits to value for Windup";
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMethodOverrides_BenefitDefinition : WinWindow
    {
        
        public wMethodOverrides_BenefitDefinition(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprBenefitDefinition";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wItemCbo : WinWindow
    {
        
        public wItemCbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public cbo cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new cbo(this);
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private cbo mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class cbo : WinComboBox
    {
        
        public cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton item
        {
            get
            {
                if ((this.mitem == null))
                {
                    this.mitem = new WinButton(this);
                    #region Search Criteria
                    this.mitem.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mitem.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mitem;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mitem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMethodOverrides_Formula : WinWindow
    {
        
        public wMethodOverrides_Formula(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprFormula";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddRow_BenefitDefinition : WinWindow
    {
        
        public wAddRow_BenefitDefinition(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddRowBenefitDefinition";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Add Row";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddRow_Formula : WinWindow
    {
        
        public wAddRow_Formula(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddRowFormula";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Add Row";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMeasurement_Current : WinWindow
    {
        
        public wMeasurement_Current(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkNDTMeasurementCurrent";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UICurrentCheckBox
        {
            get
            {
                if ((this.mUICurrentCheckBox == null))
                {
                    this.mUICurrentCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUICurrentCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Current";
                    this.mUICurrentCheckBox.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUICurrentCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUICurrentCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMeasurement_Currentandprio : WinWindow
    {
        
        public wMeasurement_Currentandprio(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkNDTMeasurementCurrentPrior";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UICurrentandpriorCheckBox
        {
            get
            {
                if ((this.mUICurrentandpriorCheckBox == null))
                {
                    this.mUICurrentandpriorCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUICurrentandpriorCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Current and prior";
                    this.mUICurrentandpriorCheckBox.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUICurrentandpriorCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUICurrentandpriorCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMeasurement_Currentpriorandfutu : WinWindow
    {
        
        public wMeasurement_Currentpriorandfutu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkNDTMeasurementCurrentPriorFuture";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UICurrentpriorandfuturCheckBox
        {
            get
            {
                if ((this.mUICurrentpriorandfuturCheckBox == null))
                {
                    this.mUICurrentpriorandfuturCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUICurrentpriorandfuturCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Current, prior, and future";
                    this.mUICurrentpriorandfuturCheckBox.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUICurrentpriorandfuturCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUICurrentpriorandfuturCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMeasurement_Allmeasurements : WinWindow
    {
        
        public wMeasurement_Allmeasurements(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkNDTMeasurementAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIAllmeasurementsCheckBox
        {
            get
            {
                if ((this.mUIAllmeasurementsCheckBox == null))
                {
                    this.mUIAllmeasurementsCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIAllmeasurementsCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "All measurements";
                    this.mUIAllmeasurementsCheckBox.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIAllmeasurementsCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIAllmeasurementsCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTesting_AveragePay : WinWindow
    {
        
        public wTesting_AveragePay(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDTAveragePay";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTesting_Usecurrentpayforcurr : WinWindow
    {
        
        public wTesting_Usecurrentpayforcurr(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkNDTUseCurrentPay";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chx
        {
            get
            {
                if ((this.mchx == null))
                {
                    this.mchx = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchx.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use current pay for current accrual rate";
                    this.mchx.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchx;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchx;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDB_Service : WinWindow
    {
        
        public wDB_Service(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDTService";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Testing";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPermitted_SocialSecurityCovered : WinWindow
    {
        
        public wPermitted_SocialSecurityCovered(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDTSSCC";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPermitted_FreshStartServ : WinWindow
    {
        
        public wPermitted_FreshStartServ(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDTFreshStartService";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Social Security Covered Compensation";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInclude_401KAnnualAddition : WinWindow
    {
        
        public wInclude_401KAnnualAddition(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDT401KAnnualAddition";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Include defined contribution";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInclude_401KBalance : WinWindow
    {
        
        public wInclude_401KBalance(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDT401KBalance";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "401(k)/(m) Annual Addition";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInclude_401KService : WinWindow
    {
        
        public wInclude_401KService(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDT401KService";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "401(k)/(m) Balance";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInclude_Non401KAnnualAddintion : WinWindow
    {
        
        public wInclude_Non401KAnnualAddintion(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDTNon401KAnnualAddition";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "401(k)/(m) Service";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInclude_Non401KBalance : WinWindow
    {
        
        public wInclude_Non401KBalance(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDTNon401KBalance";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Non 401(k)/(m) Annual Addition";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wInclude_Non401KService : WinWindow
    {
        
        public wInclude_Non401KService(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboNDTNon401KService";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Non 401(k)/(m) Balance";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValuation_TheEndof : WinWindow
    {
        
        public wValuation_TheEndof(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radNDTRetrospective";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "The end of the testing year";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdditional_EliigibilityWithin10Years : WinWindow
    {
        
        public wAdditional_EliigibilityWithin10Years(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboEliigibilityWithin10Years";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Eligibility for within 10 years of pensionable age";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCom_cbo_NL : WinWindow
    {
        
        public wCom_cbo_NL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISprBenefitDefinitionWindow : WinWindow
    {
        
        public UISprBenefitDefinitionWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprBenefitDefinition";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient UINormalcostforcurrentClient
        {
            get
            {
                if ((this.mUINormalcostforcurrentClient == null))
                {
                    this.mUINormalcostforcurrentClient = new WinClient(this);
                    #region Search Criteria
                    this.mUINormalcostforcurrentClient.SearchProperties[WinControl.PropertyNames.Name] = "Normal cost for current year terminations";
                    this.mUINormalcostforcurrentClient.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINormalcostforcurrentClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINormalcostforcurrentClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNormalCostforCY_UK : WinWindow
    {
        
        public wNormalCostforCY_UK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkNormalCostForCurrentYearTerm";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Normal cost for current year terminations";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPBGC4044Calculation : WinWindow
    {
        
        public wPBGC4044Calculation(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ckbPBGC4044Calc";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "PBGC 4044 calculation     ";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUseRetirementDecrements : WinWindow
    {
        
        public wUseRetirementDecrements(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ckbUseRetDecrements";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use retirement decrements";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTheBeginningOfThetTestingYear : WinWindow
    {
        
        public wTheBeginningOfThetTestingYear(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radNDTProspective";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "The beginning of the testing year";
                    this.mrd.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTheEndOfTheTestingYear : WinWindow
    {
        
        public wTheEndOfTheTestingYear(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radNDTRetrospective";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "The end of the testing year";
                    this.mrd.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTestingBasis_BenefitBasis : WinWindow
    {
        
        public wTestingBasis_BenefitBasis(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radNDTBenefitBasis";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Benefit basis";
                    this.mrd.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTestingBasis_ContributionBasis : WinWindow
    {
        
        public wTestingBasis_ContributionBasis(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radNDTContributionBasis";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Contribution basis";
                    this.mrd.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludeDBBenefits : WinWindow
    {
        
        public wIncludeDBBenefits(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIncludeDB";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include DB Benefits";
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludeDCBenefits : WinWindow
    {
        
        public wIncludeDCBenefits(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIncludeDC";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include DC Benefits";
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPermittedDis_UseFixedPer_rd : WinWindow
    {
        
        public wPermittedDis_UseFixedPer_rd(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radUseFixedPercentage";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Use fixed percentage";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPermittedDis_UseFixedPer_txt : WinWindow
    {
        
        public wPermittedDis_UseFixedPer_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudUseFixedPercentage";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UINudUseFixedPercentagEdit UINudUseFixedPercentagEdit
        {
            get
            {
                if ((this.mUINudUseFixedPercentagEdit == null))
                {
                    this.mUINudUseFixedPercentagEdit = new UINudUseFixedPercentagEdit(this);
                }
                return this.mUINudUseFixedPercentagEdit;
            }
        }
        
        public wTxt wTxt
        {
            get
            {
                if ((this.mwTxt == null))
                {
                    this.mwTxt = new wTxt(this);
                }
                return this.mwTxt;
            }
        }
        #endregion
        
        #region Fields
        private UINudUseFixedPercentagEdit mUINudUseFixedPercentagEdit;
        
        private wTxt mwTxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UINudUseFixedPercentagEdit : WinEdit
    {
        
        public UINudUseFixedPercentagEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudUseFixedPercentagEdit1
        {
            get
            {
                if ((this.mUINudUseFixedPercentagEdit1 == null))
                {
                    this.mUINudUseFixedPercentagEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudUseFixedPercentagEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "A single text character";
                    this.mUINudUseFixedPercentagEdit1.SearchProperties[WinEdit.PropertyNames.Instance] = "3";
                    this.mUINudUseFixedPercentagEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINudUseFixedPercentagEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudUseFixedPercentagEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTxt : WinEdit
    {
        
        public wTxt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
}
