// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RetirementStudio._UIMaps.PayAverageClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class PayAverage
    {
        
        #region Properties
        public wRetirementStudio wRetirementStudio
        {
            get
            {
                if ((this.mwRetirementStudio == null))
                {
                    this.mwRetirementStudio = new wRetirementStudio();
                }
                return this.mwRetirementStudio;
            }
        }
        #endregion
        
        #region Fields
        private wRetirementStudio mwRetirementStudio;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudio : WinWindow
    {
        
        public wRetirementStudio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wStandard wStandard
        {
            get
            {
                if ((this.mwStandard == null))
                {
                    this.mwStandard = new wStandard(this);
                }
                return this.mwStandard;
            }
        }
        
        public wCustomCode wCustomCode
        {
            get
            {
                if ((this.mwCustomCode == null))
                {
                    this.mwCustomCode = new wCustomCode(this);
                }
                return this.mwCustomCode;
            }
        }
        
        public wApplyAveragePayLimit wApplyAveragePayLimit
        {
            get
            {
                if ((this.mwApplyAveragePayLimit == null))
                {
                    this.mwApplyAveragePayLimit = new wApplyAveragePayLimit(this);
                }
                return this.mwApplyAveragePayLimit;
            }
        }
        
        public wApplyPayAverageFreezeDefinition wApplyPayAverageFreezeDefinition
        {
            get
            {
                if ((this.mwApplyPayAverageFreezeDefinition == null))
                {
                    this.mwApplyPayAverageFreezeDefinition = new wApplyPayAverageFreezeDefinition(this);
                }
                return this.mwApplyPayAverageFreezeDefinition;
            }
        }
        
        public wApplyAverageAtFutureAge wApplyAverageAtFutureAge
        {
            get
            {
                if ((this.mwApplyAverageAtFutureAge == null))
                {
                    this.mwApplyAverageAtFutureAge = new wApplyAverageAtFutureAge(this);
                }
                return this.mwApplyAverageAtFutureAge;
            }
        }
        
        public wStandard_PayProjectionToAverage wStandard_PayProjectionToAverage
        {
            get
            {
                if ((this.mwStandard_PayProjectionToAverage == null))
                {
                    this.mwStandard_PayProjectionToAverage = new wStandard_PayProjectionToAverage(this);
                }
                return this.mwStandard_PayProjectionToAverage;
            }
        }
        
        public wStandard_AveragingMethod wStandard_AveragingMethod
        {
            get
            {
                if ((this.mwStandard_AveragingMethod == null))
                {
                    this.mwStandard_AveragingMethod = new wStandard_AveragingMethod(this);
                }
                return this.mwStandard_AveragingMethod;
            }
        }
        
        public wStandard_M wStandard_M
        {
            get
            {
                if ((this.mwStandard_M == null))
                {
                    this.mwStandard_M = new wStandard_M(this);
                }
                return this.mwStandard_M;
            }
        }
        
        public wStandard_RoundingForYearOfHire wStandard_RoundingForYearOfHire
        {
            get
            {
                if ((this.mwStandard_RoundingForYearOfHire == null))
                {
                    this.mwStandard_RoundingForYearOfHire = new wStandard_RoundingForYearOfHire(this);
                }
                return this.mwStandard_RoundingForYearOfHire;
            }
        }
        
        public wStandard_DecimalPlacesForYearOfHire wStandard_DecimalPlacesForYearOfHire
        {
            get
            {
                if ((this.mwStandard_DecimalPlacesForYearOfHire == null))
                {
                    this.mwStandard_DecimalPlacesForYearOfHire = new wStandard_DecimalPlacesForYearOfHire(this);
                }
                return this.mwStandard_DecimalPlacesForYearOfHire;
            }
        }
        
        public wStandard_Include wStandard_Include
        {
            get
            {
                if ((this.mwStandard_Include == null))
                {
                    this.mwStandard_Include = new wStandard_Include(this);
                }
                return this.mwStandard_Include;
            }
        }
        
        public wStandard_DropForCalculations wStandard_DropForCalculations
        {
            get
            {
                if ((this.mwStandard_DropForCalculations == null))
                {
                    this.mwStandard_DropForCalculations = new wStandard_DropForCalculations(this);
                }
                return this.mwStandard_DropForCalculations;
            }
        }
        
        public wStandard_DropForCalculationAndPeriodConsidered wStandard_DropForCalculationAndPeriodConsidered
        {
            get
            {
                if ((this.mwStandard_DropForCalculationAndPeriodConsidered == null))
                {
                    this.mwStandard_DropForCalculationAndPeriodConsidered = new wStandard_DropForCalculationAndPeriodConsidered(this);
                }
                return this.mwStandard_DropForCalculationAndPeriodConsidered;
            }
        }
        
        public wApplyPayLimitBeforeAveraging wApplyPayLimitBeforeAveraging
        {
            get
            {
                if ((this.mwApplyPayLimitBeforeAveraging == null))
                {
                    this.mwApplyPayLimitBeforeAveraging = new wApplyPayLimitBeforeAveraging(this);
                }
                return this.mwApplyPayLimitBeforeAveraging;
            }
        }
        
        public wUseDtaItemForSolvencyAndPPF wUseDtaItemForSolvencyAndPPF
        {
            get
            {
                if ((this.mwUseDtaItemForSolvencyAndPPF == null))
                {
                    this.mwUseDtaItemForSolvencyAndPPF = new wUseDtaItemForSolvencyAndPPF(this);
                }
                return this.mwUseDtaItemForSolvencyAndPPF;
            }
        }
        
        public wApplyeDeductionBeforeAveraging wApplyeDeductionBeforeAveraging
        {
            get
            {
                if ((this.mwApplyeDeductionBeforeAveraging == null))
                {
                    this.mwApplyeDeductionBeforeAveraging = new wApplyeDeductionBeforeAveraging(this);
                }
                return this.mwApplyeDeductionBeforeAveraging;
            }
        }
        
        public wAdjustmentPeriod wAdjustmentPeriod
        {
            get
            {
                if ((this.mwAdjustmentPeriod == null))
                {
                    this.mwAdjustmentPeriod = new wAdjustmentPeriod(this);
                }
                return this.mwAdjustmentPeriod;
            }
        }
        
        public wApplyLegislatedSalaryCap wApplyLegislatedSalaryCap
        {
            get
            {
                if ((this.mwApplyLegislatedSalaryCap == null))
                {
                    this.mwApplyLegislatedSalaryCap = new wApplyLegislatedSalaryCap(this);
                }
                return this.mwApplyLegislatedSalaryCap;
            }
        }
        
        public wAdjustmentPeriodMonths wAdjustmentPeriodMonths
        {
            get
            {
                if ((this.mwAdjustmentPeriodMonths == null))
                {
                    this.mwAdjustmentPeriodMonths = new wAdjustmentPeriodMonths(this);
                }
                return this.mwAdjustmentPeriodMonths;
            }
        }
        
        public wAdjustmentMethod wAdjustmentMethod
        {
            get
            {
                if ((this.mwAdjustmentMethod == null))
                {
                    this.mwAdjustmentMethod = new wAdjustmentMethod(this);
                }
                return this.mwAdjustmentMethod;
            }
        }
        
        public wFreezePayAverageAtAge_V wFreezePayAverageAtAge_V
        {
            get
            {
                if ((this.mwFreezePayAverageAtAge_V == null))
                {
                    this.mwFreezePayAverageAtAge_V = new wFreezePayAverageAtAge_V(this);
                }
                return this.mwFreezePayAverageAtAge_V;
            }
        }
        
        public wFreezePayAverageAtAge_C wFreezePayAverageAtAge_C
        {
            get
            {
                if ((this.mwFreezePayAverageAtAge_C == null))
                {
                    this.mwFreezePayAverageAtAge_C = new wFreezePayAverageAtAge_C(this);
                }
                return this.mwFreezePayAverageAtAge_C;
            }
        }
        
        public wCommonCbo wCommonCbo
        {
            get
            {
                if ((this.mwCommonCbo == null))
                {
                    this.mwCommonCbo = new wCommonCbo(this);
                }
                return this.mwCommonCbo;
            }
        }
        
        public wLimitAmount wLimitAmount
        {
            get
            {
                if ((this.mwLimitAmount == null))
                {
                    this.mwLimitAmount = new wLimitAmount(this);
                }
                return this.mwLimitAmount;
            }
        }
        
        public wAnnualLimitIncrease wAnnualLimitIncrease
        {
            get
            {
                if ((this.mwAnnualLimitIncrease == null))
                {
                    this.mwAnnualLimitIncrease = new wAnnualLimitIncrease(this);
                }
                return this.mwAnnualLimitIncrease;
            }
        }
        
        public wUsePayAverageFromda wUsePayAverageFromda
        {
            get
            {
                if ((this.mwUsePayAverageFromda == null))
                {
                    this.mwUsePayAverageFromda = new wUsePayAverageFromda(this);
                }
                return this.mwUsePayAverageFromda;
            }
        }
        
        public wPayAverageFromData wPayAverageFromData
        {
            get
            {
                if ((this.mwPayAverageFromData == null))
                {
                    this.mwPayAverageFromData = new wPayAverageFromData(this);
                }
                return this.mwPayAverageFromData;
            }
        }
        
        public wStand_N wStand_N
        {
            get
            {
                if ((this.mwStand_N == null))
                {
                    this.mwStand_N = new wStand_N(this);
                }
                return this.mwStand_N;
            }
        }
        
        public wDeduction_V wDeduction_V
        {
            get
            {
                if ((this.mwDeduction_V == null))
                {
                    this.mwDeduction_V = new wDeduction_V(this);
                }
                return this.mwDeduction_V;
            }
        }
        
        public wDeduction_C wDeduction_C
        {
            get
            {
                if ((this.mwDeduction_C == null))
                {
                    this.mwDeduction_C = new wDeduction_C(this);
                }
                return this.mwDeduction_C;
            }
        }
        
        public wDeductionAnnualIncrease_V wDeductionAnnualIncrease_V
        {
            get
            {
                if ((this.mwDeductionAnnualIncrease_V == null))
                {
                    this.mwDeductionAnnualIncrease_V = new wDeductionAnnualIncrease_V(this);
                }
                return this.mwDeductionAnnualIncrease_V;
            }
        }
        
        public wDeductionAnnualIncrease_C wDeductionAnnualIncrease_C
        {
            get
            {
                if ((this.mwDeductionAnnualIncrease_C == null))
                {
                    this.mwDeductionAnnualIncrease_C = new wDeductionAnnualIncrease_C(this);
                }
                return this.mwDeductionAnnualIncrease_C;
            }
        }
        
        public wDeduction_cbo wDeduction_cbo
        {
            get
            {
                if ((this.mwDeduction_cbo == null))
                {
                    this.mwDeduction_cbo = new wDeduction_cbo(this);
                }
                return this.mwDeduction_cbo;
            }
        }
        
        public wDeduction_txt wDeduction_txt
        {
            get
            {
                if ((this.mwDeduction_txt == null))
                {
                    this.mwDeduction_txt = new wDeduction_txt(this);
                }
                return this.mwDeduction_txt;
            }
        }
        
        public wDeductionannualIncrease_txt wDeductionannualIncrease_txt
        {
            get
            {
                if ((this.mwDeductionannualIncrease_txt == null))
                {
                    this.mwDeductionannualIncrease_txt = new wDeductionannualIncrease_txt(this);
                }
                return this.mwDeductionannualIncrease_txt;
            }
        }
        
        public wDeduction_cbo_T wDeduction_cbo_T
        {
            get
            {
                if ((this.mwDeduction_cbo_T == null))
                {
                    this.mwDeduction_cbo_T = new wDeduction_cbo_T(this);
                }
                return this.mwDeduction_cbo_T;
            }
        }
        
        public wDeduction_T wDeduction_T
        {
            get
            {
                if ((this.mwDeduction_T == null))
                {
                    this.mwDeduction_T = new wDeduction_T(this);
                }
                return this.mwDeduction_T;
            }
        }
        
        public wDeductionAnnual_T wDeductionAnnual_T
        {
            get
            {
                if ((this.mwDeductionAnnual_T == null))
                {
                    this.mwDeductionAnnual_T = new wDeductionAnnual_T(this);
                }
                return this.mwDeductionAnnual_T;
            }
        }
        
        public wApplyAveragePayLimit_AnnualLimitIncrease_V wApplyAveragePayLimit_AnnualLimitIncrease_V
        {
            get
            {
                if ((this.mwApplyAveragePayLimit_AnnualLimitIncrease_V == null))
                {
                    this.mwApplyAveragePayLimit_AnnualLimitIncrease_V = new wApplyAveragePayLimit_AnnualLimitIncrease_V(this);
                }
                return this.mwApplyAveragePayLimit_AnnualLimitIncrease_V;
            }
        }
        
        public wApplyAveragePayLimit_LimitAmount_C wApplyAveragePayLimit_LimitAmount_C
        {
            get
            {
                if ((this.mwApplyAveragePayLimit_LimitAmount_C == null))
                {
                    this.mwApplyAveragePayLimit_LimitAmount_C = new wApplyAveragePayLimit_LimitAmount_C(this);
                }
                return this.mwApplyAveragePayLimit_LimitAmount_C;
            }
        }
        
        public wFinalSalaryFromData wFinalSalaryFromData
        {
            get
            {
                if ((this.mwFinalSalaryFromData == null))
                {
                    this.mwFinalSalaryFromData = new wFinalSalaryFromData(this);
                }
                return this.mwFinalSalaryFromData;
            }
        }
        
        public wProjectFPS wProjectFPS
        {
            get
            {
                if ((this.mwProjectFPS == null))
                {
                    this.mwProjectFPS = new wProjectFPS(this);
                }
                return this.mwProjectFPS;
            }
        }
        
        public wPayIncreaseAssumptionForProjection wPayIncreaseAssumptionForProjection
        {
            get
            {
                if ((this.mwPayIncreaseAssumptionForProjection == null))
                {
                    this.mwPayIncreaseAssumptionForProjection = new wPayIncreaseAssumptionForProjection(this);
                }
                return this.mwPayIncreaseAssumptionForProjection;
            }
        }
        #endregion
        
        #region Fields
        private wStandard mwStandard;
        
        private wCustomCode mwCustomCode;
        
        private wApplyAveragePayLimit mwApplyAveragePayLimit;
        
        private wApplyPayAverageFreezeDefinition mwApplyPayAverageFreezeDefinition;
        
        private wApplyAverageAtFutureAge mwApplyAverageAtFutureAge;
        
        private wStandard_PayProjectionToAverage mwStandard_PayProjectionToAverage;
        
        private wStandard_AveragingMethod mwStandard_AveragingMethod;
        
        private wStandard_M mwStandard_M;
        
        private wStandard_RoundingForYearOfHire mwStandard_RoundingForYearOfHire;
        
        private wStandard_DecimalPlacesForYearOfHire mwStandard_DecimalPlacesForYearOfHire;
        
        private wStandard_Include mwStandard_Include;
        
        private wStandard_DropForCalculations mwStandard_DropForCalculations;
        
        private wStandard_DropForCalculationAndPeriodConsidered mwStandard_DropForCalculationAndPeriodConsidered;
        
        private wApplyPayLimitBeforeAveraging mwApplyPayLimitBeforeAveraging;
        
        private wUseDtaItemForSolvencyAndPPF mwUseDtaItemForSolvencyAndPPF;
        
        private wApplyeDeductionBeforeAveraging mwApplyeDeductionBeforeAveraging;
        
        private wAdjustmentPeriod mwAdjustmentPeriod;
        
        private wApplyLegislatedSalaryCap mwApplyLegislatedSalaryCap;
        
        private wAdjustmentPeriodMonths mwAdjustmentPeriodMonths;
        
        private wAdjustmentMethod mwAdjustmentMethod;
        
        private wFreezePayAverageAtAge_V mwFreezePayAverageAtAge_V;
        
        private wFreezePayAverageAtAge_C mwFreezePayAverageAtAge_C;
        
        private wCommonCbo mwCommonCbo;
        
        private wLimitAmount mwLimitAmount;
        
        private wAnnualLimitIncrease mwAnnualLimitIncrease;
        
        private wUsePayAverageFromda mwUsePayAverageFromda;
        
        private wPayAverageFromData mwPayAverageFromData;
        
        private wStand_N mwStand_N;
        
        private wDeduction_V mwDeduction_V;
        
        private wDeduction_C mwDeduction_C;
        
        private wDeductionAnnualIncrease_V mwDeductionAnnualIncrease_V;
        
        private wDeductionAnnualIncrease_C mwDeductionAnnualIncrease_C;
        
        private wDeduction_cbo mwDeduction_cbo;
        
        private wDeduction_txt mwDeduction_txt;
        
        private wDeductionannualIncrease_txt mwDeductionannualIncrease_txt;
        
        private wDeduction_cbo_T mwDeduction_cbo_T;
        
        private wDeduction_T mwDeduction_T;
        
        private wDeductionAnnual_T mwDeductionAnnual_T;
        
        private wApplyAveragePayLimit_AnnualLimitIncrease_V mwApplyAveragePayLimit_AnnualLimitIncrease_V;
        
        private wApplyAveragePayLimit_LimitAmount_C mwApplyAveragePayLimit_LimitAmount_C;
        
        private wFinalSalaryFromData mwFinalSalaryFromData;
        
        private wProjectFPS mwProjectFPS;
        
        private wPayIncreaseAssumptionForProjection mwPayIncreaseAssumptionForProjection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard : WinWindow
    {
        
        public wStandard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnStandardDefinition";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdStandard
        {
            get
            {
                if ((this.mrdStandard == null))
                {
                    this.mrdStandard = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdStandard.SearchProperties[WinRadioButton.PropertyNames.Name] = "Standard";
                    this.mrdStandard.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdStandard.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdStandard;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdStandard;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomCode : WinWindow
    {
        
        public wCustomCode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCustomCode";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdCustomCode
        {
            get
            {
                if ((this.mrdCustomCode == null))
                {
                    this.mrdCustomCode = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdCustomCode.SearchProperties[WinRadioButton.PropertyNames.Name] = "Custom code";
                    this.mrdCustomCode.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdCustomCode.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdCustomCode;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdCustomCode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyAveragePayLimit : WinWindow
    {
        
        public wApplyAveragePayLimit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbApplyAveragePayLimit";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkApplyAveragePayLimit
        {
            get
            {
                if ((this.mchkApplyAveragePayLimit == null))
                {
                    this.mchkApplyAveragePayLimit = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkApplyAveragePayLimit.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply average pay limit";
                    this.mchkApplyAveragePayLimit.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkApplyAveragePayLimit.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkApplyAveragePayLimit;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkApplyAveragePayLimit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyPayAverageFreezeDefinition : WinWindow
    {
        
        public wApplyPayAverageFreezeDefinition(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbApplyPayAverageFreezeDefinition";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkApplyPayAverageFreezeDefinition
        {
            get
            {
                if ((this.mchkApplyPayAverageFreezeDefinition == null))
                {
                    this.mchkApplyPayAverageFreezeDefinition = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkApplyPayAverageFreezeDefinition.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply pay average freeze definition";
                    this.mchkApplyPayAverageFreezeDefinition.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkApplyPayAverageFreezeDefinition.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkApplyPayAverageFreezeDefinition;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkApplyPayAverageFreezeDefinition;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyAverageAtFutureAge : WinWindow
    {
        
        public wApplyAverageAtFutureAge(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkApplyAverageAtFutureAge";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkApplyAverageAtFutureAge
        {
            get
            {
                if ((this.mchkApplyAverageAtFutureAge == null))
                {
                    this.mchkApplyAverageAtFutureAge = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkApplyAverageAtFutureAge.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply average at future age";
                    this.mchkApplyAverageAtFutureAge.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkApplyAverageAtFutureAge.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkApplyAverageAtFutureAge;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkApplyAverageAtFutureAge;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard_PayProjectionToAverage : WinWindow
    {
        
        public wStandard_PayProjectionToAverage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboPayProjectionLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPayProjectionToAverage
        {
            get
            {
                if ((this.mcboPayProjectionToAverage == null))
                {
                    this.mcboPayProjectionToAverage = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPayProjectionToAverage.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboPayProjectionToAverage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboPayProjectionToAverage;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPayProjectionToAverage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard_AveragingMethod : WinWindow
    {
        
        public wStandard_AveragingMethod(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboMethodLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboAveragingMethod
        {
            get
            {
                if ((this.mcboAveragingMethod == null))
                {
                    this.mcboAveragingMethod = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboAveragingMethod.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboAveragingMethod.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboAveragingMethod;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboAveragingMethod;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard_M : WinWindow
    {
        
        public wStandard_M(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudMethodM";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtM txtM
        {
            get
            {
                if ((this.mtxtM == null))
                {
                    this.mtxtM = new txtM(this);
                }
                return this.mtxtM;
            }
        }
        #endregion
        
        #region Fields
        private txtM mtxtM;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtM : WinEdit
    {
        
        public txtM(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudMethodMEdit1
        {
            get
            {
                if ((this.mUINudMethodMEdit1 == null))
                {
                    this.mUINudMethodMEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudMethodMEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINudMethodMEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINudMethodMEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudMethodMEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard_RoundingForYearOfHire : WinWindow
    {
        
        public wStandard_RoundingForYearOfHire(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboRoundingForYearAfterHire";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboRoundingForYearOfHire
        {
            get
            {
                if ((this.mcboRoundingForYearOfHire == null))
                {
                    this.mcboRoundingForYearOfHire = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboRoundingForYearOfHire.SearchProperties[WinComboBox.PropertyNames.Name] = "Freeze pay average at age";
                    this.mcboRoundingForYearOfHire.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboRoundingForYearOfHire.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboRoundingForYearOfHire;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboRoundingForYearOfHire;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard_DecimalPlacesForYearOfHire : WinWindow
    {
        
        public wStandard_DecimalPlacesForYearOfHire(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudDecimalPlacesForYearOfHire";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtDecimalPlacesForYearOfHire txtDecimalPlacesForYearOfHire
        {
            get
            {
                if ((this.mtxtDecimalPlacesForYearOfHire == null))
                {
                    this.mtxtDecimalPlacesForYearOfHire = new txtDecimalPlacesForYearOfHire(this);
                }
                return this.mtxtDecimalPlacesForYearOfHire;
            }
        }
        #endregion
        
        #region Fields
        private txtDecimalPlacesForYearOfHire mtxtDecimalPlacesForYearOfHire;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtDecimalPlacesForYearOfHire : WinEdit
    {
        
        public txtDecimalPlacesForYearOfHire(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudDecimalPlacesForYEdit1
        {
            get
            {
                if ((this.mUINudDecimalPlacesForYEdit1 == null))
                {
                    this.mUINudDecimalPlacesForYEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudDecimalPlacesForYEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINudDecimalPlacesForYEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINudDecimalPlacesForYEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudDecimalPlacesForYEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard_Include : WinWindow
    {
        
        public wStandard_Include(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radInclude";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdInclude
        {
            get
            {
                if ((this.mrdInclude == null))
                {
                    this.mrdInclude = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdInclude.SearchProperties[WinRadioButton.PropertyNames.Name] = "Decimal places for year of hire";
                    this.mrdInclude.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdInclude.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdInclude;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdInclude;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard_DropForCalculations : WinWindow
    {
        
        public wStandard_DropForCalculations(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radDropforCalculations";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdDropForCalculations
        {
            get
            {
                if ((this.mrdDropForCalculations == null))
                {
                    this.mrdDropForCalculations = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdDropForCalculations.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdDropForCalculations.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdDropForCalculations;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdDropForCalculations;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStandard_DropForCalculationAndPeriodConsidered : WinWindow
    {
        
        public wStandard_DropForCalculationAndPeriodConsidered(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radDropForCalculationsandPeriod";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdDropForCalculationAndPeriodConsidered
        {
            get
            {
                if ((this.mrdDropForCalculationAndPeriodConsidered == null))
                {
                    this.mrdDropForCalculationAndPeriodConsidered = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdDropForCalculationAndPeriodConsidered.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdDropForCalculationAndPeriodConsidered.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdDropForCalculationAndPeriodConsidered;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdDropForCalculationAndPeriodConsidered;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyPayLimitBeforeAveraging : WinWindow
    {
        
        public wApplyPayLimitBeforeAveraging(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkApplyPayLimitBeforeAveraging";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply pay limit before averaging";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUseDtaItemForSolvencyAndPPF : WinWindow
    {
        
        public wUseDtaItemForSolvencyAndPPF(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkUseDataItemForSolvencyAndPPF";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use data item for solvency and PPF";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyeDeductionBeforeAveraging : WinWindow
    {
        
        public wApplyeDeductionBeforeAveraging(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkApplyDeductionBeforeAveraging";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply deduction before averaging";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdjustmentPeriod : WinWindow
    {
        
        public wAdjustmentPeriod(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkAdjustmentPeriod";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Adjustment period";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyLegislatedSalaryCap : WinWindow
    {
        
        public wApplyLegislatedSalaryCap(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbApplyAveragePayLimit";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply legislated salary cap";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdjustmentPeriodMonths : WinWindow
    {
        
        public wAdjustmentPeriodMonths(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudAdjustmentPeriod";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt : WinEdit
    {
        
        public txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudAdjustmentPeriodEdit1
        {
            get
            {
                if ((this.mUINudAdjustmentPeriodEdit1 == null))
                {
                    this.mUINudAdjustmentPeriodEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudAdjustmentPeriodEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "A single text character";
                    this.mUINudAdjustmentPeriodEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINudAdjustmentPeriodEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudAdjustmentPeriodEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdjustmentMethod : WinWindow
    {
        
        public wAdjustmentMethod(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboAdjustmentMethod";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Adjustment period";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFreezePayAverageAtAge_V : WinWindow
    {
        
        public wFreezePayAverageAtAge_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFreezePayAverageAtAge_C : WinWindow
    {
        
        public wFreezePayAverageAtAge_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommonCbo : WinWindow
    {
        
        public wCommonCbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cboVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLimitAmount : WinWindow
    {
        
        public wLimitAmount(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_numEditConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public Edit Edit
        {
            get
            {
                if ((this.mEdit == null))
                {
                    this.mEdit = new Edit(this);
                }
                return this.mEdit;
            }
        }
        #endregion
        
        #region Fields
        private Edit mEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Edit : WinEdit
    {
        
        public Edit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAnnualLimitIncrease : WinWindow
    {
        
        public wAnnualLimitIncrease(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_numEditRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public Edit1 Edit
        {
            get
            {
                if ((this.mEdit == null))
                {
                    this.mEdit = new Edit1(this);
                }
                return this.mEdit;
            }
        }
        #endregion
        
        #region Fields
        private Edit1 mEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Edit1 : WinEdit
    {
        
        public Edit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUsePayAverageFromda : WinWindow
    {
        
        public wUsePayAverageFromda(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkUsePayAverageForSolvency";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chx
        {
            get
            {
                if ((this.mchx == null))
                {
                    this.mchx = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchx.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use pay average from data for solvency and wind-up";
                    this.mchx.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchx;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchx;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayAverageFromData : WinWindow
    {
        
        public wPayAverageFromData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboAverageFromData";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Pay average from data";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wStand_N : WinWindow
    {
        
        public wStand_N(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudMethodN";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt1 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt1(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt1 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt1 : WinEdit
    {
        
        public txt1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudMethodNEdit1
        {
            get
            {
                if ((this.mUINudMethodNEdit1 == null))
                {
                    this.mUINudMethodNEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudMethodNEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINudMethodNEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINudMethodNEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudMethodNEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeduction_V : WinWindow
    {
        
        public wDeduction_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeduction_C : WinWindow
    {
        
        public wDeduction_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeductionAnnualIncrease_V : WinWindow
    {
        
        public wDeductionAnnualIncrease_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeductionAnnualIncrease_C : WinWindow
    {
        
        public wDeductionAnnualIncrease_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "%";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeduction_cbo : WinWindow
    {
        
        public wDeduction_cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cboVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeduction_txt : WinWindow
    {
        
        public wDeduction_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_numEditConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt2 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt2(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt2 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt2 : WinEdit
    {
        
        public txt2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_numEditConstantEdit1
        {
            get
            {
                if ((this.mUI_numEditConstantEdit1 == null))
                {
                    this.mUI_numEditConstantEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUI_numEditConstantEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUI_numEditConstantEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUI_numEditConstantEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_numEditConstantEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeductionannualIncrease_txt : WinWindow
    {
        
        public wDeductionannualIncrease_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_numEditRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt3 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt3(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt3 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt3 : WinEdit
    {
        
        public txt3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_numEditRateEdit1
        {
            get
            {
                if ((this.mUI_numEditRateEdit1 == null))
                {
                    this.mUI_numEditRateEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUI_numEditRateEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUI_numEditRateEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUI_numEditRateEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_numEditRateEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeduction_cbo_T : WinWindow
    {
        
        public wDeduction_cbo_T(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cboTableName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeduction_T : WinWindow
    {
        
        public wDeduction_T(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnTable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "T";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeductionAnnual_T : WinWindow
    {
        
        public wDeductionAnnual_T(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnTable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "T";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyAveragePayLimit_AnnualLimitIncrease_V : WinWindow
    {
        
        public wApplyAveragePayLimit_AnnualLimitIncrease_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyAveragePayLimit_LimitAmount_C : WinWindow
    {
        
        public wApplyAveragePayLimit_LimitAmount_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFinalSalaryFromData : WinWindow
    {
        
        public wFinalSalaryFromData(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboFinalSalaryFromData";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProjectFPS : WinWindow
    {
        
        public wProjectFPS(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdbProjectFPS";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Project FPS";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayIncreaseAssumptionForProjection : WinWindow
    {
        
        public wPayIncreaseAssumptionForProjection(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboPayIncreaseAssumptionForProjection";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
}
