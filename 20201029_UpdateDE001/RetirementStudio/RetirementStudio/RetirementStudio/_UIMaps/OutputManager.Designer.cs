// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RetirementStudio._UIMaps.OutputManagerClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class OutputManager
    {
        
        #region Properties
        public wRetirementStudio wRetirementStudio
        {
            get
            {
                if ((this.mwRetirementStudio == null))
                {
                    this.mwRetirementStudio = new wRetirementStudio();
                }
                return this.mwRetirementStudio;
            }
        }
        
        public wSaveAs_ wSaveAs_
        {
            get
            {
                if ((this.mwSaveAs_ == null))
                {
                    this.mwSaveAs_ = new wSaveAs_();
                }
                return this.mwSaveAs_;
            }
        }
        
        public wExtractSuccessfullyCreated_Popup wExtractSuccessfullyCreated_Popup
        {
            get
            {
                if ((this.mwExtractSuccessfullyCreated_Popup == null))
                {
                    this.mwExtractSuccessfullyCreated_Popup = new wExtractSuccessfullyCreated_Popup();
                }
                return this.mwExtractSuccessfullyCreated_Popup;
            }
        }
        
        public wAdobe wAdobe
        {
            get
            {
                if ((this.mwAdobe == null))
                {
                    this.mwAdobe = new wAdobe();
                }
                return this.mwAdobe;
            }
        }
        
        public wOutputManagerSetup wOutputManagerSetup
        {
            get
            {
                if ((this.mwOutputManagerSetup == null))
                {
                    this.mwOutputManagerSetup = new wOutputManagerSetup();
                }
                return this.mwOutputManagerSetup;
            }
        }
        
        public wExcel wExcel
        {
            get
            {
                if ((this.mwExcel == null))
                {
                    this.mwExcel = new wExcel();
                }
                return this.mwExcel;
            }
        }
        
        public wSaveAs_Excel wSaveAs_Excel
        {
            get
            {
                if ((this.mwSaveAs_Excel == null))
                {
                    this.mwSaveAs_Excel = new wSaveAs_Excel();
                }
                return this.mwSaveAs_Excel;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public wAdobeContentPreparation wAdobeContentPreparation
        {
            get
            {
                if ((this.mwAdobeContentPreparation == null))
                {
                    this.mwAdobeContentPreparation = new wAdobeContentPreparation();
                }
                return this.mwAdobeContentPreparation;
            }
        }
        
        public wSaveAs_Win7 wSaveAs_Win7
        {
            get
            {
                if ((this.mwSaveAs_Win7 == null))
                {
                    this.mwSaveAs_Win7 = new wSaveAs_Win7();
                }
                return this.mwSaveAs_Win7;
            }
        }
        
        public wSaveAs wSaveAs
        {
            get
            {
                if ((this.mwSaveAs == null))
                {
                    this.mwSaveAs = new wSaveAs();
                }
                return this.mwSaveAs;
            }
        }
        
        public wWaitDialog wWaitDialog
        {
            get
            {
                if ((this.mwWaitDialog == null))
                {
                    this.mwWaitDialog = new wWaitDialog();
                }
                return this.mwWaitDialog;
            }
        }
        
        public wExportToGlobe wExportToGlobe
        {
            get
            {
                if ((this.mwExportToGlobe == null))
                {
                    this.mwExportToGlobe = new wExportToGlobe();
                }
                return this.mwExportToGlobe;
            }
        }
        
        public wDataRequestExport wDataRequestExport
        {
            get
            {
                if ((this.mwDataRequestExport == null))
                {
                    this.mwDataRequestExport = new wDataRequestExport();
                }
                return this.mwDataRequestExport;
            }
        }
        
        public wExcel_1 wExcel_1
        {
            get
            {
                if ((this.mwExcel_1 == null))
                {
                    this.mwExcel_1 = new wExcel_1();
                }
                return this.mwExcel_1;
            }
        }
        
        public wReplaceExportedLiabSet wReplaceExportedLiabSet
        {
            get
            {
                if ((this.mwReplaceExportedLiabSet == null))
                {
                    this.mwReplaceExportedLiabSet = new wReplaceExportedLiabSet();
                }
                return this.mwReplaceExportedLiabSet;
            }
        }
        
        public wFVIndividualPopulationProjection wFVIndividualPopulationProjection
        {
            get
            {
                if ((this.mwFVIndividualPopulationProjection == null))
                {
                    this.mwFVIndividualPopulationProjection = new wFVIndividualPopulationProjection();
                }
                return this.mwFVIndividualPopulationProjection;
            }
        }
        #endregion
        
        #region Fields
        private wRetirementStudio mwRetirementStudio;
        
        private wSaveAs_ mwSaveAs_;
        
        private wExtractSuccessfullyCreated_Popup mwExtractSuccessfullyCreated_Popup;
        
        private wAdobe mwAdobe;
        
        private wOutputManagerSetup mwOutputManagerSetup;
        
        private wExcel mwExcel;
        
        private wSaveAs_Excel mwSaveAs_Excel;
        
        private UIItemWindow mUIItemWindow;
        
        private wAdobeContentPreparation mwAdobeContentPreparation;
        
        private wSaveAs_Win7 mwSaveAs_Win7;
        
        private wSaveAs mwSaveAs;
        
        private wWaitDialog mwWaitDialog;
        
        private wExportToGlobe mwExportToGlobe;
        
        private wDataRequestExport mwDataRequestExport;
        
        private wExcel_1 mwExcel_1;
        
        private wReplaceExportedLiabSet mwReplaceExportedLiabSet;
        
        private wFVIndividualPopulationProjection mwFVIndividualPopulationProjection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudio : WinWindow
    {
        
        public wRetirementStudio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wAllValuationSets_FPGrid wAllValuationSets_FPGrid
        {
            get
            {
                if ((this.mwAllValuationSets_FPGrid == null))
                {
                    this.mwAllValuationSets_FPGrid = new wAllValuationSets_FPGrid(this);
                }
                return this.mwAllValuationSets_FPGrid;
            }
        }
        
        public wSelectedValuationSets_FPGrid wSelectedValuationSets_FPGrid
        {
            get
            {
                if ((this.mwSelectedValuationSets_FPGrid == null))
                {
                    this.mwSelectedValuationSets_FPGrid = new wSelectedValuationSets_FPGrid(this);
                }
                return this.mwSelectedValuationSets_FPGrid;
            }
        }
        
        public wDoer wDoer
        {
            get
            {
                if ((this.mwDoer == null))
                {
                    this.mwDoer = new wDoer(this);
                }
                return this.mwDoer;
            }
        }
        
        public wChecker wChecker
        {
            get
            {
                if ((this.mwChecker == null))
                {
                    this.mwChecker = new wChecker(this);
                }
                return this.mwChecker;
            }
        }
        
        public wReviewer wReviewer
        {
            get
            {
                if ((this.mwReviewer == null))
                {
                    this.mwReviewer = new wReviewer(this);
                }
                return this.mwReviewer;
            }
        }
        
        public wSetup wSetup
        {
            get
            {
                if ((this.mwSetup == null))
                {
                    this.mwSetup = new wSetup(this);
                }
                return this.mwSetup;
            }
        }
        
        public wProcess wProcess
        {
            get
            {
                if ((this.mwProcess == null))
                {
                    this.mwProcess = new wProcess(this);
                }
                return this.mwProcess;
            }
        }
        
        public wToolbar wToolbar
        {
            get
            {
                if ((this.mwToolbar == null))
                {
                    this.mwToolbar = new wToolbar(this);
                }
                return this.mwToolbar;
            }
        }
        
        public wHome_Tab wHome_Tab
        {
            get
            {
                if ((this.mwHome_Tab == null))
                {
                    this.mwHome_Tab = new wHome_Tab(this);
                }
                return this.mwHome_Tab;
            }
        }
        
        public wReportClient wReportClient
        {
            get
            {
                if ((this.mwReportClient == null))
                {
                    this.mwReportClient = new wReportClient(this);
                }
                return this.mwReportClient;
            }
        }
        
        public wOutputManager_Tab wOutputManager_Tab
        {
            get
            {
                if ((this.mwOutputManager_Tab == null))
                {
                    this.mwOutputManager_Tab = new wOutputManager_Tab(this);
                }
                return this.mwOutputManager_Tab;
            }
        }
        
        public wLoading wLoading
        {
            get
            {
                if ((this.mwLoading == null))
                {
                    this.mwLoading = new wLoading(this);
                }
                return this.mwLoading;
            }
        }
        
        public wMainToolbar wMainToolbar
        {
            get
            {
                if ((this.mwMainToolbar == null))
                {
                    this.mwMainToolbar = new wMainToolbar(this);
                }
                return this.mwMainToolbar;
            }
        }
        
        public wGroup_None wGroup_None
        {
            get
            {
                if ((this.mwGroup_None == null))
                {
                    this.mwGroup_None = new wGroup_None(this);
                }
                return this.mwGroup_None;
            }
        }
        
        public wGroup_GroupbyStatusCodes wGroup_GroupbyStatusCodes
        {
            get
            {
                if ((this.mwGroup_GroupbyStatusCodes == null))
                {
                    this.mwGroup_GroupbyStatusCodes = new wGroup_GroupbyStatusCodes(this);
                }
                return this.mwGroup_GroupbyStatusCodes;
            }
        }
        
        public wGroup_SetupCustomGrouping wGroup_SetupCustomGrouping
        {
            get
            {
                if ((this.mwGroup_SetupCustomGrouping == null))
                {
                    this.mwGroup_SetupCustomGrouping = new wGroup_SetupCustomGrouping(this);
                }
                return this.mwGroup_SetupCustomGrouping;
            }
        }
        
        public wCustomGrouping_Major wCustomGrouping_Major
        {
            get
            {
                if ((this.mwCustomGrouping_Major == null))
                {
                    this.mwCustomGrouping_Major = new wCustomGrouping_Major(this);
                }
                return this.mwCustomGrouping_Major;
            }
        }
        
        public wExport wExport
        {
            get
            {
                if ((this.mwExport == null))
                {
                    this.mwExport = new wExport(this);
                }
                return this.mwExport;
            }
        }
        
        public wExportAlltoExcel wExportAlltoExcel
        {
            get
            {
                if ((this.mwExportAlltoExcel == null))
                {
                    this.mwExportAlltoExcel = new wExportAlltoExcel(this);
                }
                return this.mwExportAlltoExcel;
            }
        }
        
        public wSubTab wSubTab
        {
            get
            {
                if ((this.mwSubTab == null))
                {
                    this.mwSubTab = new wSubTab(this);
                }
                return this.mwSubTab;
            }
        }
        
        public tvNaviTree tvNaviTree
        {
            get
            {
                if ((this.mtvNaviTree == null))
                {
                    this.mtvNaviTree = new tvNaviTree(this);
                }
                return this.mtvNaviTree;
            }
        }
        
        public wBack wBack
        {
            get
            {
                if ((this.mwBack == null))
                {
                    this.mwBack = new wBack(this);
                }
                return this.mwBack;
            }
        }
        
        public wValuationYear wValuationYear
        {
            get
            {
                if ((this.mwValuationYear == null))
                {
                    this.mwValuationYear = new wValuationYear(this);
                }
                return this.mwValuationYear;
            }
        }
        
        public wCreateARateGroupForEachHCE wCreateARateGroupForEachHCE
        {
            get
            {
                if ((this.mwCreateARateGroupForEachHCE == null))
                {
                    this.mwCreateARateGroupForEachHCE = new wCreateARateGroupForEachHCE(this);
                }
                return this.mwCreateARateGroupForEachHCE;
            }
        }
        
        public wGroupRates wGroupRates
        {
            get
            {
                if ((this.mwGroupRates == null))
                {
                    this.mwGroupRates = new wGroupRates(this);
                }
                return this.mwGroupRates;
            }
        }
        
        public wForNormalAccrualRate wForNormalAccrualRate
        {
            get
            {
                if ((this.mwForNormalAccrualRate == null))
                {
                    this.mwForNormalAccrualRate = new wForNormalAccrualRate(this);
                }
                return this.mwForNormalAccrualRate;
            }
        }
        
        public wForMostValuableAccrualRate wForMostValuableAccrualRate
        {
            get
            {
                if ((this.mwForMostValuableAccrualRate == null))
                {
                    this.mwForMostValuableAccrualRate = new wForMostValuableAccrualRate(this);
                }
                return this.mwForMostValuableAccrualRate;
            }
        }
        
        public wHighlyCompensated wHighlyCompensated
        {
            get
            {
                if ((this.mwHighlyCompensated == null))
                {
                    this.mwHighlyCompensated = new wHighlyCompensated(this);
                }
                return this.mwHighlyCompensated;
            }
        }
        
        public wNonHighlyCompensated wNonHighlyCompensated
        {
            get
            {
                if ((this.mwNonHighlyCompensated == null))
                {
                    this.mwNonHighlyCompensated = new wNonHighlyCompensated(this);
                }
                return this.mwNonHighlyCompensated;
            }
        }
        
        public wView wView
        {
            get
            {
                if ((this.mwView == null))
                {
                    this.mwView = new wView(this);
                }
                return this.mwView;
            }
        }
        
        public wPlanAgregation_Treeview_Coverage wPlanAgregation_Treeview_Coverage
        {
            get
            {
                if ((this.mwPlanAgregation_Treeview_Coverage == null))
                {
                    this.mwPlanAgregation_Treeview_Coverage = new wPlanAgregation_Treeview_Coverage(this);
                }
                return this.mwPlanAgregation_Treeview_Coverage;
            }
        }
        
        public wPlanAgregation_TreeView_General wPlanAgregation_TreeView_General
        {
            get
            {
                if ((this.mwPlanAgregation_TreeView_General == null))
                {
                    this.mwPlanAgregation_TreeView_General = new wPlanAgregation_TreeView_General(this);
                }
                return this.mwPlanAgregation_TreeView_General;
            }
        }
        
        public wUpdateAggregation wUpdateAggregation
        {
            get
            {
                if ((this.mwUpdateAggregation == null))
                {
                    this.mwUpdateAggregation = new wUpdateAggregation(this);
                }
                return this.mwUpdateAggregation;
            }
        }
        
        public wNoAggregation wNoAggregation
        {
            get
            {
                if ((this.mwNoAggregation == null))
                {
                    this.mwNoAggregation = new wNoAggregation(this);
                }
                return this.mwNoAggregation;
            }
        }
        
        public wSamePlansIncluded wSamePlansIncluded
        {
            get
            {
                if ((this.mwSamePlansIncluded == null))
                {
                    this.mwSamePlansIncluded = new wSamePlansIncluded(this);
                }
                return this.mwSamePlansIncluded;
            }
        }
        
        public wPlansDiffer wPlansDiffer
        {
            get
            {
                if ((this.mwPlansDiffer == null))
                {
                    this.mwPlansDiffer = new wPlansDiffer(this);
                }
                return this.mwPlansDiffer;
            }
        }
        
        public wGroup_ReportBreaks wGroup_ReportBreaks
        {
            get
            {
                if ((this.mwGroup_ReportBreaks == null))
                {
                    this.mwGroup_ReportBreaks = new wGroup_ReportBreaks(this);
                }
                return this.mwGroup_ReportBreaks;
            }
        }
        
        public wVOGrouping_FPGrid wVOGrouping_FPGrid
        {
            get
            {
                if ((this.mwVOGrouping_FPGrid == null))
                {
                    this.mwVOGrouping_FPGrid = new wVOGrouping_FPGrid(this);
                }
                return this.mwVOGrouping_FPGrid;
            }
        }
        
        public wVOGrouping_VObyVObasis wVOGrouping_VObyVObasis
        {
            get
            {
                if ((this.mwVOGrouping_VObyVObasis == null))
                {
                    this.mwVOGrouping_VObyVObasis = new wVOGrouping_VObyVObasis(this);
                }
                return this.mwVOGrouping_VObyVObasis;
            }
        }
        
        public wExportAllCombinedReport wExportAllCombinedReport
        {
            get
            {
                if ((this.mwExportAllCombinedReport == null))
                {
                    this.mwExportAllCombinedReport = new wExportAllCombinedReport(this);
                }
                return this.mwExportAllCombinedReport;
            }
        }
        
        public wToolbar_btn wToolbar_btn
        {
            get
            {
                if ((this.mwToolbar_btn == null))
                {
                    this.mwToolbar_btn = new wToolbar_btn(this);
                }
                return this.mwToolbar_btn;
            }
        }
        
        public wBenefitCashFlow_NumberOfYears wBenefitCashFlow_NumberOfYears
        {
            get
            {
                if ((this.mwBenefitCashFlow_NumberOfYears == null))
                {
                    this.mwBenefitCashFlow_NumberOfYears = new wBenefitCashFlow_NumberOfYears(this);
                }
                return this.mwBenefitCashFlow_NumberOfYears;
            }
        }
        
        public wBenefitCashFlow_SplitbyBenefitTypeTranche wBenefitCashFlow_SplitbyBenefitTypeTranche
        {
            get
            {
                if ((this.mwBenefitCashFlow_SplitbyBenefitTypeTranche == null))
                {
                    this.mwBenefitCashFlow_SplitbyBenefitTypeTranche = new wBenefitCashFlow_SplitbyBenefitTypeTranche(this);
                }
                return this.mwBenefitCashFlow_SplitbyBenefitTypeTranche;
            }
        }
        
        public wExportAllCombinedReports wExportAllCombinedReports
        {
            get
            {
                if ((this.mwExportAllCombinedReports == null))
                {
                    this.mwExportAllCombinedReports = new wExportAllCombinedReports(this);
                }
                return this.mwExportAllCombinedReports;
            }
        }
        
        public wChklbLiabilities wChklbLiabilities
        {
            get
            {
                if ((this.mwChklbLiabilities == null))
                {
                    this.mwChklbLiabilities = new wChklbLiabilities(this);
                }
                return this.mwChklbLiabilities;
            }
        }
        
        public wICT_InterestRate wICT_InterestRate
        {
            get
            {
                if ((this.mwICT_InterestRate == null))
                {
                    this.mwICT_InterestRate = new wICT_InterestRate(this);
                }
                return this.mwICT_InterestRate;
            }
        }
        
        public wICT_Active_Lower wICT_Active_Lower
        {
            get
            {
                if ((this.mwICT_Active_Lower == null))
                {
                    this.mwICT_Active_Lower = new wICT_Active_Lower(this);
                }
                return this.mwICT_Active_Lower;
            }
        }
        
        public wICT_InActive_Lower wICT_InActive_Lower
        {
            get
            {
                if ((this.mwICT_InActive_Lower == null))
                {
                    this.mwICT_InActive_Lower = new wICT_InActive_Lower(this);
                }
                return this.mwICT_InActive_Lower;
            }
        }
        
        public wICT_Active_Upper wICT_Active_Upper
        {
            get
            {
                if ((this.mwICT_Active_Upper == null))
                {
                    this.mwICT_Active_Upper = new wICT_Active_Upper(this);
                }
                return this.mwICT_Active_Upper;
            }
        }
        
        public wICT_InActive_Upper wICT_InActive_Upper
        {
            get
            {
                if ((this.mwICT_InActive_Upper == null))
                {
                    this.mwICT_InActive_Upper = new wICT_InActive_Upper(this);
                }
                return this.mwICT_InActive_Upper;
            }
        }
        
        public wICT_LiabilityType wICT_LiabilityType
        {
            get
            {
                if ((this.mwICT_LiabilityType == null))
                {
                    this.mwICT_LiabilityType = new wICT_LiabilityType(this);
                }
                return this.mwICT_LiabilityType;
            }
        }
        
        public wICT_VObyVObasis wICT_VObyVObasis
        {
            get
            {
                if ((this.mwICT_VObyVObasis == null))
                {
                    this.mwICT_VObyVObasis = new wICT_VObyVObasis(this);
                }
                return this.mwICT_VObyVObasis;
            }
        }
        
        public wICT_GroupVOs wICT_GroupVOs
        {
            get
            {
                if ((this.mwICT_GroupVOs == null))
                {
                    this.mwICT_GroupVOs = new wICT_GroupVOs(this);
                }
                return this.mwICT_GroupVOs;
            }
        }
        
        public wICT_LastPageBtn wICT_LastPageBtn
        {
            get
            {
                if ((this.mwICT_LastPageBtn == null))
                {
                    this.mwICT_LastPageBtn = new wICT_LastPageBtn(this);
                }
                return this.mwICT_LastPageBtn;
            }
        }
        
        public wICT_content wICT_content
        {
            get
            {
                if ((this.mwICT_content == null))
                {
                    this.mwICT_content = new wICT_content(this);
                }
                return this.mwICT_content;
            }
        }
        
        public wTab wTab
        {
            get
            {
                if ((this.mwTab == null))
                {
                    this.mwTab = new wTab(this);
                }
                return this.mwTab;
            }
        }
        
        public wICT_VOGroup_Grid wICT_VOGroup_Grid
        {
            get
            {
                if ((this.mwICT_VOGroup_Grid == null))
                {
                    this.mwICT_VOGroup_Grid = new wICT_VOGroup_Grid(this);
                }
                return this.mwICT_VOGroup_Grid;
            }
        }
        
        public wGM_description wGM_description
        {
            get
            {
                if ((this.mwGM_description == null))
                {
                    this.mwGM_description = new wGM_description(this);
                }
                return this.mwGM_description;
            }
        }
        
        public wGM_ResultToBeIncluded wGM_ResultToBeIncluded
        {
            get
            {
                if ((this.mwGM_ResultToBeIncluded == null))
                {
                    this.mwGM_ResultToBeIncluded = new wGM_ResultToBeIncluded(this);
                }
                return this.mwGM_ResultToBeIncluded;
            }
        }
        
        public wGM_comm_cbo wGM_comm_cbo
        {
            get
            {
                if ((this.mwGM_comm_cbo == null))
                {
                    this.mwGM_comm_cbo = new wGM_comm_cbo(this);
                }
                return this.mwGM_comm_cbo;
            }
        }
        
        public wGM_ExportToExcel wGM_ExportToExcel
        {
            get
            {
                if ((this.mwGM_ExportToExcel == null))
                {
                    this.mwGM_ExportToExcel = new wGM_ExportToExcel(this);
                }
                return this.mwGM_ExportToExcel;
            }
        }
        
        public wGM_ExpsrtToExcel wGM_ExpsrtToExcel
        {
            get
            {
                if ((this.mwGM_ExpsrtToExcel == null))
                {
                    this.mwGM_ExpsrtToExcel = new wGM_ExpsrtToExcel(this);
                }
                return this.mwGM_ExpsrtToExcel;
            }
        }
        
        public wDR_grid wDR_grid
        {
            get
            {
                if ((this.mwDR_grid == null))
                {
                    this.mwDR_grid = new wDR_grid(this);
                }
                return this.mwDR_grid;
            }
        }
        
        public wDR_edit wDR_edit
        {
            get
            {
                if ((this.mwDR_edit == null))
                {
                    this.mwDR_edit = new wDR_edit(this);
                }
                return this.mwDR_edit;
            }
        }
        
        public wDR_UseReportBreaks wDR_UseReportBreaks
        {
            get
            {
                if ((this.mwDR_UseReportBreaks == null))
                {
                    this.mwDR_UseReportBreaks = new wDR_UseReportBreaks(this);
                }
                return this.mwDR_UseReportBreaks;
            }
        }
        
        public wDR_Process wDR_Process
        {
            get
            {
                if ((this.mwDR_Process == null))
                {
                    this.mwDR_Process = new wDR_Process(this);
                }
                return this.mwDR_Process;
            }
        }
        
        public wDR_ExportFormat wDR_ExportFormat
        {
            get
            {
                if ((this.mwDR_ExportFormat == null))
                {
                    this.mwDR_ExportFormat = new wDR_ExportFormat(this);
                }
                return this.mwDR_ExportFormat;
            }
        }
        
        public wExportAll wExportAll
        {
            get
            {
                if ((this.mwExportAll == null))
                {
                    this.mwExportAll = new wExportAll(this);
                }
                return this.mwExportAll;
            }
        }
        
        public wDR_Validate wDR_Validate
        {
            get
            {
                if ((this.mwDR_Validate == null))
                {
                    this.mwDR_Validate = new wDR_Validate(this);
                }
                return this.mwDR_Validate;
            }
        }
        
        public wIOE_SelectFields wIOE_SelectFields
        {
            get
            {
                if ((this.mwIOE_SelectFields == null))
                {
                    this.mwIOE_SelectFields = new wIOE_SelectFields(this);
                }
                return this.mwIOE_SelectFields;
            }
        }
        
        public wVerticalScrollBar wVerticalScrollBar
        {
            get
            {
                if ((this.mwVerticalScrollBar == null))
                {
                    this.mwVerticalScrollBar = new wVerticalScrollBar(this);
                }
                return this.mwVerticalScrollBar;
            }
        }
        
        public wExporttoExcel wExporttoExcel
        {
            get
            {
                if ((this.mwExporttoExcel == null))
                {
                    this.mwExporttoExcel = new wExporttoExcel(this);
                }
                return this.mwExporttoExcel;
            }
        }
        
        public wExporttoJson wExporttoJson
        {
            get
            {
                if ((this.mwExporttoJson == null))
                {
                    this.mwExporttoJson = new wExporttoJson(this);
                }
                return this.mwExporttoJson;
            }
        }
        
        public wIncludestochasticde wIncludestochasticde
        {
            get
            {
                if ((this.mwIncludestochasticde == null))
                {
                    this.mwIncludestochasticde = new wIncludestochasticde(this);
                }
                return this.mwIncludestochasticde;
            }
        }
        
        public wSetName_liabilitySetForGlobeExport wSetName_liabilitySetForGlobeExport
        {
            get
            {
                if ((this.mwSetName_liabilitySetForGlobeExport == null))
                {
                    this.mwSetName_liabilitySetForGlobeExport = new wSetName_liabilitySetForGlobeExport(this);
                }
                return this.mwSetName_liabilitySetForGlobeExport;
            }
        }
        #endregion
        
        #region Fields
        private wAllValuationSets_FPGrid mwAllValuationSets_FPGrid;
        
        private wSelectedValuationSets_FPGrid mwSelectedValuationSets_FPGrid;
        
        private wDoer mwDoer;
        
        private wChecker mwChecker;
        
        private wReviewer mwReviewer;
        
        private wSetup mwSetup;
        
        private wProcess mwProcess;
        
        private wToolbar mwToolbar;
        
        private wHome_Tab mwHome_Tab;
        
        private wReportClient mwReportClient;
        
        private wOutputManager_Tab mwOutputManager_Tab;
        
        private wLoading mwLoading;
        
        private wMainToolbar mwMainToolbar;
        
        private wGroup_None mwGroup_None;
        
        private wGroup_GroupbyStatusCodes mwGroup_GroupbyStatusCodes;
        
        private wGroup_SetupCustomGrouping mwGroup_SetupCustomGrouping;
        
        private wCustomGrouping_Major mwCustomGrouping_Major;
        
        private wExport mwExport;
        
        private wExportAlltoExcel mwExportAlltoExcel;
        
        private wSubTab mwSubTab;
        
        private tvNaviTree mtvNaviTree;
        
        private wBack mwBack;
        
        private wValuationYear mwValuationYear;
        
        private wCreateARateGroupForEachHCE mwCreateARateGroupForEachHCE;
        
        private wGroupRates mwGroupRates;
        
        private wForNormalAccrualRate mwForNormalAccrualRate;
        
        private wForMostValuableAccrualRate mwForMostValuableAccrualRate;
        
        private wHighlyCompensated mwHighlyCompensated;
        
        private wNonHighlyCompensated mwNonHighlyCompensated;
        
        private wView mwView;
        
        private wPlanAgregation_Treeview_Coverage mwPlanAgregation_Treeview_Coverage;
        
        private wPlanAgregation_TreeView_General mwPlanAgregation_TreeView_General;
        
        private wUpdateAggregation mwUpdateAggregation;
        
        private wNoAggregation mwNoAggregation;
        
        private wSamePlansIncluded mwSamePlansIncluded;
        
        private wPlansDiffer mwPlansDiffer;
        
        private wGroup_ReportBreaks mwGroup_ReportBreaks;
        
        private wVOGrouping_FPGrid mwVOGrouping_FPGrid;
        
        private wVOGrouping_VObyVObasis mwVOGrouping_VObyVObasis;
        
        private wExportAllCombinedReport mwExportAllCombinedReport;
        
        private wToolbar_btn mwToolbar_btn;
        
        private wBenefitCashFlow_NumberOfYears mwBenefitCashFlow_NumberOfYears;
        
        private wBenefitCashFlow_SplitbyBenefitTypeTranche mwBenefitCashFlow_SplitbyBenefitTypeTranche;
        
        private wExportAllCombinedReports mwExportAllCombinedReports;
        
        private wChklbLiabilities mwChklbLiabilities;
        
        private wICT_InterestRate mwICT_InterestRate;
        
        private wICT_Active_Lower mwICT_Active_Lower;
        
        private wICT_InActive_Lower mwICT_InActive_Lower;
        
        private wICT_Active_Upper mwICT_Active_Upper;
        
        private wICT_InActive_Upper mwICT_InActive_Upper;
        
        private wICT_LiabilityType mwICT_LiabilityType;
        
        private wICT_VObyVObasis mwICT_VObyVObasis;
        
        private wICT_GroupVOs mwICT_GroupVOs;
        
        private wICT_LastPageBtn mwICT_LastPageBtn;
        
        private wICT_content mwICT_content;
        
        private wTab mwTab;
        
        private wICT_VOGroup_Grid mwICT_VOGroup_Grid;
        
        private wGM_description mwGM_description;
        
        private wGM_ResultToBeIncluded mwGM_ResultToBeIncluded;
        
        private wGM_comm_cbo mwGM_comm_cbo;
        
        private wGM_ExportToExcel mwGM_ExportToExcel;
        
        private wGM_ExpsrtToExcel mwGM_ExpsrtToExcel;
        
        private wDR_grid mwDR_grid;
        
        private wDR_edit mwDR_edit;
        
        private wDR_UseReportBreaks mwDR_UseReportBreaks;
        
        private wDR_Process mwDR_Process;
        
        private wDR_ExportFormat mwDR_ExportFormat;
        
        private wExportAll mwExportAll;
        
        private wDR_Validate mwDR_Validate;
        
        private wIOE_SelectFields mwIOE_SelectFields;
        
        private wVerticalScrollBar mwVerticalScrollBar;
        
        private wExporttoExcel mwExporttoExcel;
        
        private wExporttoJson mwExporttoJson;
        
        private wIncludestochasticde mwIncludestochasticde;
        
        private wSetName_liabilitySetForGlobeExport mwSetName_liabilitySetForGlobeExport;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAllValuationSets_FPGrid : WinWindow
    {
        
        public wAllValuationSets_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spAllSets";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSelectedValuationSets_FPGrid : WinWindow
    {
        
        public wSelectedValuationSets_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spSelectedSets";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDoer : WinWindow
    {
        
        public wDoer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbDoer";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdDoer
        {
            get
            {
                if ((this.mrdDoer == null))
                {
                    this.mrdDoer = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdDoer.SearchProperties[WinRadioButton.PropertyNames.Name] = "Doer";
                    this.mrdDoer.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdDoer.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdDoer;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdDoer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wChecker : WinWindow
    {
        
        public wChecker(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbChecker";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdChecker
        {
            get
            {
                if ((this.mrdChecker == null))
                {
                    this.mrdChecker = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdChecker.SearchProperties[WinRadioButton.PropertyNames.Name] = "Checker";
                    this.mrdChecker.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdChecker;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdChecker;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wReviewer : WinWindow
    {
        
        public wReviewer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbReviewer";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdReviewer
        {
            get
            {
                if ((this.mrdReviewer == null))
                {
                    this.mrdReviewer = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdReviewer.SearchProperties[WinRadioButton.PropertyNames.Name] = "Reviewer";
                    this.mrdReviewer.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdReviewer;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdReviewer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSetup : WinWindow
    {
        
        public wSetup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSetup";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnSetup
        {
            get
            {
                if ((this.mbtnSetup == null))
                {
                    this.mbtnSetup = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSetup.SearchProperties[WinButton.PropertyNames.Name] = "Setup";
                    this.mbtnSetup.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnSetup;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSetup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wProcess : WinWindow
    {
        
        public wProcess(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnProcess";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnProcess
        {
            get
            {
                if ((this.mbtnProcess == null))
                {
                    this.mbtnProcess = new WinButton(this);
                    #region Search Criteria
                    this.mbtnProcess.SearchProperties[WinButton.PropertyNames.Name] = "Process";
                    this.mbtnProcess.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnProcess.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnProcess;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnProcess;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wToolbar : WinToolBar
    {
        
        public wToolbar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Toolstrip";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public miExport miExport
        {
            get
            {
                if ((this.mmiExport == null))
                {
                    this.mmiExport = new miExport(this);
                }
                return this.mmiExport;
            }
        }
        #endregion
        
        #region Fields
        private miExport mmiExport;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class miExport : WinMenuItem
    {
        
        public miExport(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinMenuItem.PropertyNames.Name, "Export", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.SearchConfigurations.Add(SearchConfiguration.VisibleOnly);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinMenuItem miPDF
        {
            get
            {
                if ((this.mmiPDF == null))
                {
                    this.mmiPDF = new WinMenuItem(this);
                    #region Search Criteria
                    this.mmiPDF.SearchProperties[WinMenuItem.PropertyNames.Name] = "Acrobat (PDF) file";
                    this.mmiPDF.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mmiPDF.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mmiPDF.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mmiPDF;
            }
        }
        
        public WinMenuItem miExcel
        {
            get
            {
                if ((this.mmiExcel == null))
                {
                    this.mmiExcel = new WinMenuItem(this);
                    #region Search Criteria
                    this.mmiExcel.SearchProperties[WinMenuItem.PropertyNames.Name] = "Excel";
                    this.mmiExcel.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mmiExcel.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mmiExcel.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mmiExcel;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mmiPDF;
        
        private WinMenuItem mmiExcel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHome_Tab : WinWindow
    {
        
        public wHome_Tab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MainWorkspace";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIOutputManagerTabPage
        {
            get
            {
                if ((this.mUIOutputManagerTabPage == null))
                {
                    this.mUIOutputManagerTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIOutputManagerTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Output Manager";
                    this.mUIOutputManagerTabPage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIOutputManagerTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIOutputManagerTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wReportClient : WinWindow
    {
        
        public wReportClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "16";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient clientReport
        {
            get
            {
                if ((this.mclientReport == null))
                {
                    this.mclientReport = new WinClient(this);
                    #region Search Criteria
                    this.mclientReport.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mclientReport.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mclientReport;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mclientReport;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOutputManager_Tab : WinWindow
    {
        
        public wOutputManager_Tab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabControl1";
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIMemberStatisticsTabPage
        {
            get
            {
                if ((this.mUIMemberStatisticsTabPage == null))
                {
                    this.mUIMemberStatisticsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIMemberStatisticsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Member Statistics";
                    this.mUIMemberStatisticsTabPage.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIMemberStatisticsTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIMemberStatisticsTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLoading : WinWindow
    {
        
        public wLoading(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ControlName, "Loading", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText UILoadingText
        {
            get
            {
                if ((this.mUILoadingText == null))
                {
                    this.mUILoadingText = new WinText(this);
                    #region Search Criteria
                    this.mUILoadingText.SearchProperties[WinText.PropertyNames.Name] = "Loading...";
                    this.mUILoadingText.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUILoadingText.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUILoadingText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUILoadingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMainToolbar : WinToolBar
    {
        
        public wMainToolbar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnClose
        {
            get
            {
                if ((this.mbtnClose == null))
                {
                    this.mbtnClose = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClose.SearchProperties[WinButton.PropertyNames.Name] = "toolStripButton1";
                    this.mbtnClose.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnClose;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGroup_None : WinWindow
    {
        
        public wGroup_None(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbNone";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdNone
        {
            get
            {
                if ((this.mrdNone == null))
                {
                    this.mrdNone = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdNone.SearchProperties[WinRadioButton.PropertyNames.Name] = "None";
                    this.mrdNone.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdNone;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdNone;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGroup_GroupbyStatusCodes : WinWindow
    {
        
        public wGroup_GroupbyStatusCodes(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbGroupByStatusCodes";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdGrroupbyStatusCodes
        {
            get
            {
                if ((this.mrdGrroupbyStatusCodes == null))
                {
                    this.mrdGrroupbyStatusCodes = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdGrroupbyStatusCodes.SearchProperties[WinRadioButton.PropertyNames.Name] = "Group by Status Codes";
                    this.mrdGrroupbyStatusCodes.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdGrroupbyStatusCodes.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdGrroupbyStatusCodes;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdGrroupbyStatusCodes;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGroup_SetupCustomGrouping : WinWindow
    {
        
        public wGroup_SetupCustomGrouping(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbCustomGrouping";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdSetupCustomGrouping
        {
            get
            {
                if ((this.mrdSetupCustomGrouping == null))
                {
                    this.mrdSetupCustomGrouping = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdSetupCustomGrouping.SearchProperties[WinRadioButton.PropertyNames.Name] = "Setup Custom Grouping";
                    this.mrdSetupCustomGrouping.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdSetupCustomGrouping.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdSetupCustomGrouping;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdSetupCustomGrouping;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomGrouping_Major : WinWindow
    {
        
        public wCustomGrouping_Major(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboMajorGrouping";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboMajor
        {
            get
            {
                if ((this.mcboMajor == null))
                {
                    this.mcboMajor = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboMajor.SearchProperties[WinComboBox.PropertyNames.Name] = "Grouping";
                    this.mcboMajor.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboMajor.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboMajor;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboMajor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExport : WinWindow
    {
        
        public wExport(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnExport";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnExport
        {
            get
            {
                if ((this.mbtnExport == null))
                {
                    this.mbtnExport = new WinButton(this);
                    #region Search Criteria
                    this.mbtnExport.SearchProperties[WinButton.PropertyNames.Name] = "Export";
                    this.mbtnExport.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnExport;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnExport;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExportAlltoExcel : WinWindow
    {
        
        public wExportAlltoExcel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ExportAllLinkLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtExportAlltoExcel txtExportAlltoExcel
        {
            get
            {
                if ((this.mtxtExportAlltoExcel == null))
                {
                    this.mtxtExportAlltoExcel = new txtExportAlltoExcel(this);
                }
                return this.mtxtExportAlltoExcel;
            }
        }
        #endregion
        
        #region Fields
        private txtExportAlltoExcel mtxtExportAlltoExcel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtExportAlltoExcel : WinText
    {
        
        public txtExportAlltoExcel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Export All to Excel";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkExportAlltoExcel
        {
            get
            {
                if ((this.mlinkExportAlltoExcel == null))
                {
                    this.mlinkExportAlltoExcel = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkExportAlltoExcel.SearchProperties[WinHyperlink.PropertyNames.Name] = "Export All to Excel";
                    this.mlinkExportAlltoExcel.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlinkExportAlltoExcel;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkExportAlltoExcel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSubTab : WinWindow
    {
        
        public wSubTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabControl1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage tabOutlierSummary
        {
            get
            {
                if ((this.mtabOutlierSummary == null))
                {
                    this.mtabOutlierSummary = new WinTabPage(this);
                    #region Search Criteria
                    this.mtabOutlierSummary.SearchProperties[WinTabPage.PropertyNames.Name] = "Outlier Summary ";
                    this.mtabOutlierSummary.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtabOutlierSummary.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtabOutlierSummary;
            }
        }
        
        public WinTabPage tabCheckingGroupStatistics
        {
            get
            {
                if ((this.mtabCheckingGroupStatistics == null))
                {
                    this.mtabCheckingGroupStatistics = new WinTabPage(this);
                    #region Search Criteria
                    this.mtabCheckingGroupStatistics.SearchProperties[WinTabPage.PropertyNames.Name] = "Checking Group Statistics";
                    this.mtabCheckingGroupStatistics.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtabCheckingGroupStatistics.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtabCheckingGroupStatistics;
            }
        }
        
        public WinTabPage tabMovementandRollForward
        {
            get
            {
                if ((this.mtabMovementandRollForward == null))
                {
                    this.mtabMovementandRollForward = new WinTabPage(this);
                    #region Search Criteria
                    this.mtabMovementandRollForward.SearchProperties[WinTabPage.PropertyNames.Name] = "Movement and Roll Forward Report";
                    this.mtabMovementandRollForward.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtabMovementandRollForward.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtabMovementandRollForward;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mtabOutlierSummary;
        
        private WinTabPage mtabCheckingGroupStatistics;
        
        private WinTabPage mtabMovementandRollForward;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tvNaviTree : WinWindow
    {
        
        public tvNaviTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trvLibraryExplorer";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tviIndividualOutput tviIndividualOutput
        {
            get
            {
                if ((this.mtviIndividualOutput == null))
                {
                    this.mtviIndividualOutput = new tviIndividualOutput(this);
                }
                return this.mtviIndividualOutput;
            }
        }
        #endregion
        
        #region Fields
        private tviIndividualOutput mtviIndividualOutput;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tviIndividualOutput : WinTreeItem
    {
        
        public tviIndividualOutput(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Individual Output";
            this.SearchProperties["Value"] = "0";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTreeItem tviNewIOEParameters1
        {
            get
            {
                if ((this.mtviNewIOEParameters1 == null))
                {
                    this.mtviNewIOEParameters1 = new WinTreeItem(this);
                    #region Search Criteria
                    this.mtviNewIOEParameters1.SearchProperties[WinTreeItem.PropertyNames.Name] = "NewIOEParameters1";
                    this.mtviNewIOEParameters1.SearchProperties["Value"] = "1";
                    this.mtviNewIOEParameters1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mtviNewIOEParameters1.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mtviNewIOEParameters1.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtviNewIOEParameters1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtviNewIOEParameters1;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mtviNewIOEParameters1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBack : WinWindow
    {
        
        public wBack(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lnkBack";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtBack txtBack
        {
            get
            {
                if ((this.mtxtBack == null))
                {
                    this.mtxtBack = new txtBack(this);
                }
                return this.mtxtBack;
            }
        }
        #endregion
        
        #region Fields
        private txtBack mtxtBack;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtBack : WinText
    {
        
        public txtBack(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Back";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink linkBack
        {
            get
            {
                if ((this.mlinkBack == null))
                {
                    this.mlinkBack = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlinkBack.SearchProperties[WinHyperlink.PropertyNames.Name] = "Back";
                    this.mlinkBack.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mlinkBack.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlinkBack;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlinkBack;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wValuationYear : WinWindow
    {
        
        public wValuationYear(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboValuationYear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboValuationYear
        {
            get
            {
                if ((this.mcboValuationYear == null))
                {
                    this.mcboValuationYear = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboValuationYear.SearchProperties.Add(new PropertyExpression(WinComboBox.PropertyNames.Name, "Valuation year", PropertyExpressionOperator.Contains));
                    this.mcboValuationYear.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcboValuationYear.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboValuationYear;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboValuationYear;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCreateARateGroupForEachHCE : WinWindow
    {
        
        public wCreateARateGroupForEachHCE(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkCreateRateGroupHCE";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkCreateARateGroupForEachHCE
        {
            get
            {
                if ((this.mchkCreateARateGroupForEachHCE == null))
                {
                    this.mchkCreateARateGroupForEachHCE = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkCreateARateGroupForEachHCE.SearchProperties[WinCheckBox.PropertyNames.Name] = "Create a rate group for each HCE";
                    this.mchkCreateARateGroupForEachHCE.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkCreateARateGroupForEachHCE.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkCreateARateGroupForEachHCE;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkCreateARateGroupForEachHCE;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGroupRates : WinWindow
    {
        
        public wGroupRates(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkGroupRates";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkGroupRates
        {
            get
            {
                if ((this.mchkGroupRates == null))
                {
                    this.mchkGroupRates = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkGroupRates.SearchProperties[WinCheckBox.PropertyNames.Name] = "Group rates";
                    this.mchkGroupRates.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchkGroupRates.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkGroupRates;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkGroupRates;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wForNormalAccrualRate : WinWindow
    {
        
        public wForNormalAccrualRate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudNormalAccrualRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtForNormalAccrualRate txtForNormalAccrualRate
        {
            get
            {
                if ((this.mtxtForNormalAccrualRate == null))
                {
                    this.mtxtForNormalAccrualRate = new txtForNormalAccrualRate(this);
                }
                return this.mtxtForNormalAccrualRate;
            }
        }
        #endregion
        
        #region Fields
        private txtForNormalAccrualRate mtxtForNormalAccrualRate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtForNormalAccrualRate : WinEdit
    {
        
        public txtForNormalAccrualRate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wForMostValuableAccrualRate : WinWindow
    {
        
        public wForMostValuableAccrualRate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudMostValuableAccrualRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtForMostValuableAccrualRate txtForMostValuableAccrualRate
        {
            get
            {
                if ((this.mtxtForMostValuableAccrualRate == null))
                {
                    this.mtxtForMostValuableAccrualRate = new txtForMostValuableAccrualRate(this);
                }
                return this.mtxtForMostValuableAccrualRate;
            }
        }
        #endregion
        
        #region Fields
        private txtForMostValuableAccrualRate mtxtForMostValuableAccrualRate;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtForMostValuableAccrualRate : WinEdit
    {
        
        public txtForMostValuableAccrualRate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHighlyCompensated : WinWindow
    {
        
        public wHighlyCompensated(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudHighlyCompensated";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtHighlyCompensated txtHighlyCompensated
        {
            get
            {
                if ((this.mtxtHighlyCompensated == null))
                {
                    this.mtxtHighlyCompensated = new txtHighlyCompensated(this);
                }
                return this.mtxtHighlyCompensated;
            }
        }
        #endregion
        
        #region Fields
        private txtHighlyCompensated mtxtHighlyCompensated;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtHighlyCompensated : WinEdit
    {
        
        public txtHighlyCompensated(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNonHighlyCompensated : WinWindow
    {
        
        public wNonHighlyCompensated(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudNonHighlyCompensated";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtNonHighlyCompensated txtNonHighlyCompensated
        {
            get
            {
                if ((this.mtxtNonHighlyCompensated == null))
                {
                    this.mtxtNonHighlyCompensated = new txtNonHighlyCompensated(this);
                }
                return this.mtxtNonHighlyCompensated;
            }
        }
        #endregion
        
        #region Fields
        private txtNonHighlyCompensated mtxtNonHighlyCompensated;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtNonHighlyCompensated : WinEdit
    {
        
        public txtNonHighlyCompensated(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wView : WinWindow
    {
        
        public wView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnView
        {
            get
            {
                if ((this.mbtnView == null))
                {
                    this.mbtnView = new WinButton(this);
                    #region Search Criteria
                    this.mbtnView.SearchProperties[WinButton.PropertyNames.Name] = "View";
                    this.mbtnView.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnView.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnView;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlanAgregation_Treeview_Coverage : WinWindow
    {
        
        public wPlanAgregation_Treeview_Coverage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Include results from other plans of this client for Coverage";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tviTreeView tviTreeView
        {
            get
            {
                if ((this.mtviTreeView == null))
                {
                    this.mtviTreeView = new tviTreeView(this);
                }
                return this.mtviTreeView;
            }
        }
        #endregion
        
        #region Fields
        private tviTreeView mtviTreeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tviTreeView : WinTree
    {
        
        public tviTreeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Include results from other plans of this client for Coverage";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIQAUSBenchmark017ExisCheckBoxTreeItem UIQAUSBenchmark017ExisCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIQAUSBenchmark017ExisCheckBoxTreeItem == null))
                {
                    this.mUIQAUSBenchmark017ExisCheckBoxTreeItem = new UIQAUSBenchmark017ExisCheckBoxTreeItem(this);
                }
                return this.mUIQAUSBenchmark017ExisCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQAUSBenchmark017ExisCheckBoxTreeItem mUIQAUSBenchmark017ExisCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIQAUSBenchmark017ExisCheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UIQAUSBenchmark017ExisCheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "QA US Benchmark 017 Existing DNT Plan";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIFundingValuationsCheckBoxTreeItem UIFundingValuationsCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIFundingValuationsCheckBoxTreeItem == null))
                {
                    this.mUIFundingValuationsCheckBoxTreeItem = new UIFundingValuationsCheckBoxTreeItem(this);
                }
                return this.mUIFundingValuationsCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFundingValuationsCheckBoxTreeItem mUIFundingValuationsCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFundingValuationsCheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UIFundingValuationsCheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "FundingValuations";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIRetroNDT2011CheckBoxTreeItem UIRetroNDT2011CheckBoxTreeItem
        {
            get
            {
                if ((this.mUIRetroNDT2011CheckBoxTreeItem == null))
                {
                    this.mUIRetroNDT2011CheckBoxTreeItem = new UIRetroNDT2011CheckBoxTreeItem(this);
                }
                return this.mUIRetroNDT2011CheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIRetroNDT2011CheckBoxTreeItem mUIRetroNDT2011CheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRetroNDT2011CheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UIRetroNDT2011CheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Retro NDT 2011";
            this.SearchProperties["Value"] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIBaselineCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIBaselineCheckBoxTreeItem == null))
                {
                    this.mUIBaselineCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIBaselineCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Baseline";
                    this.mUIBaselineCheckBoxTreeItem.SearchProperties["Value"] = "3";
                    this.mUIBaselineCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBaselineCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIBaselineCheckBoxTreeItem.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIBaselineCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIBaselineCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlanAgregation_TreeView_General : WinWindow
    {
        
        public wPlanAgregation_TreeView_General(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Include results from other plans of this client for General Test";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tviTreeView1 tviTreeView
        {
            get
            {
                if ((this.mtviTreeView == null))
                {
                    this.mtviTreeView = new tviTreeView1(this);
                }
                return this.mtviTreeView;
            }
        }
        #endregion
        
        #region Fields
        private tviTreeView1 mtviTreeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tviTreeView1 : WinTree
    {
        
        public tviTreeView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Include results from other plans of this client for General Test";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIQAUSBenchmark017ExisCheckBoxTreeItem1 UIQAUSBenchmark017ExisCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIQAUSBenchmark017ExisCheckBoxTreeItem == null))
                {
                    this.mUIQAUSBenchmark017ExisCheckBoxTreeItem = new UIQAUSBenchmark017ExisCheckBoxTreeItem1(this);
                }
                return this.mUIQAUSBenchmark017ExisCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQAUSBenchmark017ExisCheckBoxTreeItem1 mUIQAUSBenchmark017ExisCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIQAUSBenchmark017ExisCheckBoxTreeItem1 : WinCheckBoxTreeItem
    {
        
        public UIQAUSBenchmark017ExisCheckBoxTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "QA US Benchmark 017 Existing DNT Plan";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIFundingValuationsCheckBoxTreeItem1 UIFundingValuationsCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIFundingValuationsCheckBoxTreeItem == null))
                {
                    this.mUIFundingValuationsCheckBoxTreeItem = new UIFundingValuationsCheckBoxTreeItem1(this);
                }
                return this.mUIFundingValuationsCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFundingValuationsCheckBoxTreeItem1 mUIFundingValuationsCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFundingValuationsCheckBoxTreeItem1 : WinCheckBoxTreeItem
    {
        
        public UIFundingValuationsCheckBoxTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "FundingValuations";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIRetroNDT2011CheckBoxTreeItem1 UIRetroNDT2011CheckBoxTreeItem
        {
            get
            {
                if ((this.mUIRetroNDT2011CheckBoxTreeItem == null))
                {
                    this.mUIRetroNDT2011CheckBoxTreeItem = new UIRetroNDT2011CheckBoxTreeItem1(this);
                }
                return this.mUIRetroNDT2011CheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIRetroNDT2011CheckBoxTreeItem1 mUIRetroNDT2011CheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRetroNDT2011CheckBoxTreeItem1 : WinCheckBoxTreeItem
    {
        
        public UIRetroNDT2011CheckBoxTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Retro NDT 2011";
            this.SearchProperties["Value"] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIBaselineCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIBaselineCheckBoxTreeItem == null))
                {
                    this.mUIBaselineCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIBaselineCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Baseline";
                    this.mUIBaselineCheckBoxTreeItem.SearchProperties["Value"] = "3";
                    this.mUIBaselineCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBaselineCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIBaselineCheckBoxTreeItem.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIBaselineCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIBaselineCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wUpdateAggregation : WinWindow
    {
        
        public wUpdateAggregation(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnUpdate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btnUpdateAggregation
        {
            get
            {
                if ((this.mbtnUpdateAggregation == null))
                {
                    this.mbtnUpdateAggregation = new WinButton(this);
                    #region Search Criteria
                    this.mbtnUpdateAggregation.SearchProperties[WinButton.PropertyNames.Name] = "Update Aggregation";
                    this.mbtnUpdateAggregation.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnUpdateAggregation.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtnUpdateAggregation;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnUpdateAggregation;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNoAggregation : WinWindow
    {
        
        public wNoAggregation(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radNoAggregation";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdNoAggregation
        {
            get
            {
                if ((this.mrdNoAggregation == null))
                {
                    this.mrdNoAggregation = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdNoAggregation.SearchProperties[WinRadioButton.PropertyNames.Name] = "No aggregation";
                    this.mrdNoAggregation.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdNoAggregation.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdNoAggregation;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdNoAggregation;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSamePlansIncluded : WinWindow
    {
        
        public wSamePlansIncluded(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radPlansSame";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdSamePlansIncluded
        {
            get
            {
                if ((this.mrdSamePlansIncluded == null))
                {
                    this.mrdSamePlansIncluded = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdSamePlansIncluded.SearchProperties[WinRadioButton.PropertyNames.Name] = "Same plans included in coverage and general test";
                    this.mrdSamePlansIncluded.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdSamePlansIncluded.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdSamePlansIncluded;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdSamePlansIncluded;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlansDiffer : WinWindow
    {
        
        public wPlansDiffer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radPlansDiffer";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdPlansDiffer
        {
            get
            {
                if ((this.mrdPlansDiffer == null))
                {
                    this.mrdPlansDiffer = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdPlansDiffer.SearchProperties[WinRadioButton.PropertyNames.Name] = "Plans differ in coverage versus general test";
                    this.mrdPlansDiffer.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdPlansDiffer.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdPlansDiffer;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdPlansDiffer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGroup_ReportBreaks : WinWindow
    {
        
        public wGroup_ReportBreaks(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rdReportBreaks";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Report breaks";
                    this.mrd.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVOGrouping_FPGrid : WinWindow
    {
        
        public wVOGrouping_FPGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprVoByVoBasis";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVOGrouping_VObyVObasis : WinWindow
    {
        
        public wVOGrouping_VObyVObasis(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtVoByVoBasis";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "VO by VO basis";
                    this.mrd.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExportAllCombinedReport : WinWindow
    {
        
        public wExportAllCombinedReport(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "llblExportAllCombinedRpt";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt : WinText
    {
        
        public txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Export all combined reports";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink link
        {
            get
            {
                if ((this.mlink == null))
                {
                    this.mlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Export all combined reports";
                    this.mlink.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mlink.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wToolbar_btn : WinWindow
    {
        
        public wToolbar_btn(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "toolStrip1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public btnNextPage btnNextPage
        {
            get
            {
                if ((this.mbtnNextPage == null))
                {
                    this.mbtnNextPage = new btnNextPage(this);
                }
                return this.mbtnNextPage;
            }
        }
        #endregion
        
        #region Fields
        private btnNextPage mbtnNextPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class btnNextPage : WinToolBar
    {
        
        public btnNextPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Toolstrip";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Next Page";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitCashFlow_NumberOfYears : WinWindow
    {
        
        public wBenefitCashFlow_NumberOfYears(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "uneNumberOfYears";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt1 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt1(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt1 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt1 : WinEdit
    {
        
        public txt1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUneNumberOfYearsEdit1
        {
            get
            {
                if ((this.mUIUneNumberOfYearsEdit1 == null))
                {
                    this.mUIUneNumberOfYearsEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUneNumberOfYearsEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUIUneNumberOfYearsEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIUneNumberOfYearsEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUneNumberOfYearsEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wBenefitCashFlow_SplitbyBenefitTypeTranche : WinWindow
    {
        
        public wBenefitCashFlow_SplitbyBenefitTypeTranche(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkSplitByBenefitTypeTranche";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Split by Benefit Type & Tranche";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExportAllCombinedReports : WinWindow
    {
        
        public wExportAllCombinedReports(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "llblExportAllCombinedRpt";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt2 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt2(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt2 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt2 : WinText
    {
        
        public txt2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Export all combined reports";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink link
        {
            get
            {
                if ((this.mlink == null))
                {
                    this.mlink = new WinHyperlink(this);
                    #region Search Criteria
                    this.mlink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Export all combined reports";
                    this.mlink.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mlink.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mlink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink mlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wChklbLiabilities : WinWindow
    {
        
        public wChklbLiabilities(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chklbLiabilities";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wList wList
        {
            get
            {
                if ((this.mwList == null))
                {
                    this.mwList = new wList(this);
                }
                return this.mwList;
            }
        }
        #endregion
        
        #region Fields
        private wList mwList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wList : WinList
    {
        
        public wList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Number of years";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_InterestRate : WinWindow
    {
        
        public wICT_InterestRate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txt_InterestRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt3 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt3(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt3 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt3 : WinEdit
    {
        
        public txt3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxt_InterestRateEdit1
        {
            get
            {
                if ((this.mUITxt_InterestRateEdit1 == null))
                {
                    this.mUITxt_InterestRateEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxt_InterestRateEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUITxt_InterestRateEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUITxt_InterestRateEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxt_InterestRateEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_Active_Lower : WinWindow
    {
        
        public wICT_Active_Lower(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "une_CurrentActiveLB";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt4 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt4(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt4 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt4 : WinEdit
    {
        
        public txt4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUne_CurrentActiveLBEdit1
        {
            get
            {
                if ((this.mUIUne_CurrentActiveLBEdit1 == null))
                {
                    this.mUIUne_CurrentActiveLBEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUne_CurrentActiveLBEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUIUne_CurrentActiveLBEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIUne_CurrentActiveLBEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUne_CurrentActiveLBEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_InActive_Lower : WinWindow
    {
        
        public wICT_InActive_Lower(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "une_CurrentInactiveLB";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt5 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt5(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt5 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt5 : WinEdit
    {
        
        public txt5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUne_CurrentInactiveLEdit1
        {
            get
            {
                if ((this.mUIUne_CurrentInactiveLEdit1 == null))
                {
                    this.mUIUne_CurrentInactiveLEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUne_CurrentInactiveLEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "A single text character";
                    this.mUIUne_CurrentInactiveLEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIUne_CurrentInactiveLEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUne_CurrentInactiveLEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_Active_Upper : WinWindow
    {
        
        public wICT_Active_Upper(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "une_CurrentActiveUB";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt6 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt6(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt6 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt6 : WinEdit
    {
        
        public txt6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUne_CurrentActiveUBEdit1
        {
            get
            {
                if ((this.mUIUne_CurrentActiveUBEdit1 == null))
                {
                    this.mUIUne_CurrentActiveUBEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUne_CurrentActiveUBEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "A single text character";
                    this.mUIUne_CurrentActiveUBEdit1.SearchProperties[WinEdit.PropertyNames.Instance] = "2";
                    this.mUIUne_CurrentActiveUBEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIUne_CurrentActiveUBEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUne_CurrentActiveUBEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_InActive_Upper : WinWindow
    {
        
        public wICT_InActive_Upper(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "une_CurrentInactiveUB";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt7 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt7(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt7 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt7 : WinEdit
    {
        
        public txt7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUne_CurrentInactiveUEdit1
        {
            get
            {
                if ((this.mUIUne_CurrentInactiveUEdit1 == null))
                {
                    this.mUIUne_CurrentInactiveUEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUne_CurrentInactiveUEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUIUne_CurrentInactiveUEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIUne_CurrentInactiveUEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUne_CurrentInactiveUEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_LiabilityType : WinWindow
    {
        
        public wICT_LiabilityType(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboLiabilityTypes";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Liability type";
                    this.mcbo.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_VObyVObasis : WinWindow
    {
        
        public wICT_VObyVObasis(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtVoByVoBasis";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "VO by VO basis";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_GroupVOs : WinWindow
    {
        
        public wICT_GroupVOs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rbtGroupVOs";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rd
        {
            get
            {
                if ((this.mrd == null))
                {
                    this.mrd = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrd.SearchProperties[WinRadioButton.PropertyNames.Name] = "Group VO\'s";
                    this.mrd.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrd;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_LastPageBtn : WinWindow
    {
        
        public wICT_LastPageBtn(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "toolStrip1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public tool tool
        {
            get
            {
                if ((this.mtool == null))
                {
                    this.mtool = new tool(this);
                }
                return this.mtool;
            }
        }
        #endregion
        
        #region Fields
        private tool mtool;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class tool : WinToolBar
    {
        
        public tool(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Toolstrip";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Last Page";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_content : WinWindow
    {
        
        public wICT_content(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "16";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTab : WinWindow
    {
        
        public wTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MainWorkspace";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinTabPage tab
        {
            get
            {
                if ((this.mtab == null))
                {
                    this.mtab = new WinTabPage(this);
                    #region Search Criteria
                    this.mtab.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtab.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtab;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mtab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wICT_VOGroup_Grid : WinWindow
    {
        
        public wICT_VOGroup_Grid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprVOGroupView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGM_description : WinWindow
    {
        
        public wGM_description(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtDescription";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGM_ResultToBeIncluded : WinWindow
    {
        
        public wGM_ResultToBeIncluded(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprResultsIncluded";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGM_comm_cbo : WinWindow
    {
        
        public wGM_comm_cbo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGM_ExportToExcel : WinWindow
    {
        
        public wGM_ExportToExcel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnExportToExcel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Export to Excel";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wGM_ExpsrtToExcel : WinWindow
    {
        
        public wGM_ExpsrtToExcel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnExportToGlobe";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Export to Globe";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDR_grid : WinWindow
    {
        
        public wDR_grid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "sprCriteria";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinClient grid
        {
            get
            {
                if ((this.mgrid == null))
                {
                    this.mgrid = new WinClient(this);
                    #region Search Criteria
                    this.mgrid.SearchProperties[WinControl.PropertyNames.Name] = "Data Request Options";
                    this.mgrid.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mgrid;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mgrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDR_edit : WinWindow
    {
        
        public wDR_edit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textControl";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDR_UseReportBreaks : WinWindow
    {
        
        public wDR_UseReportBreaks(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkUserReportBreaks";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinCheckBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use Report Breaks";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDR_Process : WinWindow
    {
        
        public wDR_Process(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnProcess";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Process";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDR_ExportFormat : WinWindow
    {
        
        public wDR_ExportFormat(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboExportFormat";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExportAll : WinWindow
    {
        
        public wExportAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnExportAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Export All";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDR_Validate : WinWindow
    {
        
        public wDR_Validate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnValidate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Validate";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIOE_SelectFields : WinWindow
    {
        
        public wIOE_SelectFields(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tvFields";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIPBGC_Plan_TermCheckBoxTreeItem UIPBGC_Plan_TermCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIPBGC_Plan_TermCheckBoxTreeItem == null))
                {
                    this.mUIPBGC_Plan_TermCheckBoxTreeItem = new UIPBGC_Plan_TermCheckBoxTreeItem(this);
                }
                return this.mUIPBGC_Plan_TermCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPBGC_Plan_TermCheckBoxTreeItem mUIPBGC_Plan_TermCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIPBGC_Plan_TermCheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UIPBGC_Plan_TermCheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "PBGC_Plan_Term";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public UIProvisionOutputFieldCheckBoxTreeItem UIProvisionOutputFieldCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIProvisionOutputFieldCheckBoxTreeItem == null))
                {
                    this.mUIProvisionOutputFieldCheckBoxTreeItem = new UIProvisionOutputFieldCheckBoxTreeItem(this);
                }
                return this.mUIProvisionOutputFieldCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIProvisionOutputFieldCheckBoxTreeItem mUIProvisionOutputFieldCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIProvisionOutputFieldCheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UIProvisionOutputFieldCheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Provision Output Fields";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIPBGCDollarMaxCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIPBGCDollarMaxCheckBoxTreeItem == null))
                {
                    this.mUIPBGCDollarMaxCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIPBGCDollarMaxCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "PBGC Dollar Max";
                    this.mUIPBGCDollarMaxCheckBoxTreeItem.SearchProperties["Value"] = "2";
                    this.mUIPBGCDollarMaxCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPBGCDollarMaxCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIPBGCDollarMaxCheckBoxTreeItem.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUIPBGCDollarMaxCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIPBGCDollarMaxCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wVerticalScrollBar : WinScrollBar
    {
        
        public wVerticalScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "Vertical";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton pagedownButton
        {
            get
            {
                if ((this.mpagedownButton == null))
                {
                    this.mpagedownButton = new WinButton(this);
                    #region Search Criteria
                    this.mpagedownButton.SearchProperties[WinButton.PropertyNames.Name] = "Page down";
                    this.mpagedownButton.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mpagedownButton.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mpagedownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mpagedownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExporttoExcel : WinWindow
    {
        
        public wExporttoExcel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Export to Excel";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public link link
        {
            get
            {
                if ((this.mlink == null))
                {
                    this.mlink = new link(this);
                }
                return this.mlink;
            }
        }
        #endregion
        
        #region Fields
        private link mlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class link : WinText
    {
        
        public link(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Export to Excel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink sublink
        {
            get
            {
                if ((this.msublink == null))
                {
                    this.msublink = new WinHyperlink(this);
                    #region Search Criteria
                    this.msublink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Export to Excel";
                    this.msublink.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.msublink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink msublink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExporttoJson : WinWindow
    {
        
        public wExporttoJson(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Export to Json";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public link1 link
        {
            get
            {
                if ((this.mlink == null))
                {
                    this.mlink = new link1(this);
                }
                return this.mlink;
            }
        }
        #endregion
        
        #region Fields
        private link1 mlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class link1 : WinText
    {
        
        public link1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinText.PropertyNames.Name] = "Export to Json";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinHyperlink sublink
        {
            get
            {
                if ((this.msublink == null))
                {
                    this.msublink = new WinHyperlink(this);
                    #region Search Criteria
                    this.msublink.SearchProperties[WinHyperlink.PropertyNames.Name] = "Export to Json";
                    this.msublink.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.msublink;
            }
        }
        #endregion
        
        #region Fields
        private WinHyperlink msublink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIncludestochasticde : WinWindow
    {
        
        public wIncludestochasticde(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIncludeStochasticDecrement";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Include stochastic decrement details";
                    this.mchk.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSetName_liabilitySetForGlobeExport : WinWindow
    {
        
        public wSetName_liabilitySetForGlobeExport(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtSetName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinEdit(this);
                    #region Search Criteria
                    this.mtxt.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSaveAs_ : WinWindow
    {
        
        public wSaveAs_()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public wFileName wFileName
        {
            get
            {
                if ((this.mwFileName == null))
                {
                    this.mwFileName = new wFileName(this);
                }
                return this.mwFileName;
            }
        }
        
        public wSave wSave
        {
            get
            {
                if ((this.mwSave == null))
                {
                    this.mwSave = new wSave(this);
                }
                return this.mwSave;
            }
        }
        #endregion
        
        #region Fields
        private wFileName mwFileName;
        
        private wSave mwSave;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFileName : WinWindow
    {
        
        public wFileName(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFileName
        {
            get
            {
                if ((this.mtxtFileName == null))
                {
                    this.mtxtFileName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFileName.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mtxtFileName.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtFileName.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mtxtFileName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFileName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSave : WinWindow
    {
        
        public wSave(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton btnSave
        {
            get
            {
                if ((this.mbtnSave == null))
                {
                    this.mbtnSave = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSave.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mbtnSave.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnSave.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mbtnSave;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSave;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExtractSuccessfullyCreated_Popup : WinWindow
    {
        
        public wExtractSuccessfullyCreated_Popup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Extract Successfully Created";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Successfully Created");
            #endregion
        }
        
        #region Properties
        public wOK wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK : WinWindow
    {
        
        public wOK(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Extract Successfully Created");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnOK.WindowTitles.Add("Extract Successfully Created");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdobe : WinWindow
    {
        
        public wAdobe()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Adobe", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "AcrobatSDIWindow";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
            #endregion
        }
        
        #region Properties
        public wTitleBar wTitleBar
        {
            get
            {
                if ((this.mwTitleBar == null))
                {
                    this.mwTitleBar = new wTitleBar(this);
                }
                return this.mwTitleBar;
            }
        }
        
        public wMenuBar wMenuBar
        {
            get
            {
                if ((this.mwMenuBar == null))
                {
                    this.mwMenuBar = new wMenuBar(this);
                }
                return this.mwMenuBar;
            }
        }
        
        public wPage wPage
        {
            get
            {
                if ((this.mwPage == null))
                {
                    this.mwPage = new wPage(this);
                }
                return this.mwPage;
            }
        }
        #endregion
        
        #region Fields
        private wTitleBar mwTitleBar;
        
        private wMenuBar mwMenuBar;
        
        private wPage mwPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTitleBar : WinTitleBar
    {
        
        public wTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
            #endregion
        }
        
        #region Properties
        public WinButton btnClose
        {
            get
            {
                if ((this.mbtnClose == null))
                {
                    this.mbtnClose = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClose.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtnClose.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnClose.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
                    #endregion
                }
                return this.mbtnClose;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMenuBar : WinMenuBar
    {
        
        public wMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
            this.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
            #endregion
        }
        
        #region Properties
        public miFile miFile
        {
            get
            {
                if ((this.mmiFile == null))
                {
                    this.mmiFile = new miFile(this);
                }
                return this.mmiFile;
            }
        }
        #endregion
        
        #region Fields
        private miFile mmiFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class miFile : WinMenuItem
    {
        
        public miFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
            #endregion
        }
        
        #region Properties
        public miSaveAs miSaveAs
        {
            get
            {
                if ((this.mmiSaveAs == null))
                {
                    this.mmiSaveAs = new miSaveAs(this);
                }
                return this.mmiSaveAs;
            }
        }
        #endregion
        
        #region Fields
        private miSaveAs mmiSaveAs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class miSaveAs : WinMenuItem
    {
        
        public miSaveAs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
            #endregion
        }
        
        #region Properties
        public WinMenuItem miPDF
        {
            get
            {
                if ((this.mmiPDF == null))
                {
                    this.mmiPDF = new WinMenuItem(this);
                    #region Search Criteria
                    this.mmiPDF.SearchProperties[WinMenuItem.PropertyNames.Name] = "PDF... Shift+Ctrl+S";
                    this.mmiPDF.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mmiPDF.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
                    #endregion
                }
                return this.mmiPDF;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mmiPDF;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPage : WinWindow
    {
        
        public wPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AVScrollView";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "AVL_AVView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
            #endregion
        }
        
        #region Properties
        public clientPage clientPage
        {
            get
            {
                if ((this.mclientPage == null))
                {
                    this.mclientPage = new clientPage(this);
                }
                return this.mclientPage;
            }
        }
        #endregion
        
        #region Fields
        private clientPage mclientPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class clientPage : WinClient
    {
        
        public clientPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "AVScrollView";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
            #endregion
        }
        
        #region Properties
        public WinWindow wPageView
        {
            get
            {
                if ((this.mwPageView == null))
                {
                    this.mwPageView = new WinWindow(this);
                    #region Search Criteria
                    this.mwPageView.SearchProperties[WinWindow.PropertyNames.Name] = "AVPageView";
                    this.mwPageView.SearchProperties[WinWindow.PropertyNames.ClassName] = "AVL_AVView";
                    this.mwPageView.WindowTitles.Add("cuitDemo.PDF - Adobe Reader");
                    #endregion
                }
                return this.mwPageView;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mwPageView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOutputManagerSetup : WinWindow
    {
        
        public wOutputManagerSetup()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Output Manager Setup";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Output Manager Setup");
            #endregion
        }
        
        #region Properties
        public wAddAll wAddAll
        {
            get
            {
                if ((this.mwAddAll == null))
                {
                    this.mwAddAll = new wAddAll(this);
                }
                return this.mwAddAll;
            }
        }
        
        public wAdd wAdd
        {
            get
            {
                if ((this.mwAdd == null))
                {
                    this.mwAdd = new wAdd(this);
                }
                return this.mwAdd;
            }
        }
        
        public wShowSubtotalBreaks wShowSubtotalBreaks
        {
            get
            {
                if ((this.mwShowSubtotalBreaks == null))
                {
                    this.mwShowSubtotalBreaks = new wShowSubtotalBreaks(this);
                }
                return this.mwShowSubtotalBreaks;
            }
        }
        
        public wOK1 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK1(this);
                }
                return this.mwOK;
            }
        }
        
        public wSetupOfScenarioPack wSetupOfScenarioPack
        {
            get
            {
                if ((this.mwSetupOfScenarioPack == null))
                {
                    this.mwSetupOfScenarioPack = new wSetupOfScenarioPack(this);
                }
                return this.mwSetupOfScenarioPack;
            }
        }
        
        public wRemoveAll wRemoveAll
        {
            get
            {
                if ((this.mwRemoveAll == null))
                {
                    this.mwRemoveAll = new wRemoveAll(this);
                }
                return this.mwRemoveAll;
            }
        }
        #endregion
        
        #region Fields
        private wAddAll mwAddAll;
        
        private wAdd mwAdd;
        
        private wShowSubtotalBreaks mwShowSubtotalBreaks;
        
        private wOK1 mwOK;
        
        private wSetupOfScenarioPack mwSetupOfScenarioPack;
        
        private wRemoveAll mwRemoveAll;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAddAll : WinWindow
    {
        
        public wAddAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Output Manager Setup");
            #endregion
        }
        
        #region Properties
        public WinButton btnAddAll
        {
            get
            {
                if ((this.mbtnAddAll == null))
                {
                    this.mbtnAddAll = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAddAll.SearchProperties[WinButton.PropertyNames.Name] = "Add All >>";
                    this.mbtnAddAll.WindowTitles.Add("Output Manager Setup");
                    #endregion
                }
                return this.mbtnAddAll;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAddAll;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdd : WinWindow
    {
        
        public wAdd(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddOne";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Output Manager Setup");
            #endregion
        }
        
        #region Properties
        public WinButton btnAdd
        {
            get
            {
                if ((this.mbtnAdd == null))
                {
                    this.mbtnAdd = new WinButton(this);
                    #region Search Criteria
                    this.mbtnAdd.SearchProperties[WinButton.PropertyNames.Name] = "Add >";
                    this.mbtnAdd.WindowTitles.Add("Output Manager Setup");
                    #endregion
                }
                return this.mbtnAdd;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnAdd;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wShowSubtotalBreaks : WinWindow
    {
        
        public wShowSubtotalBreaks(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboSubtotalBreaks";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Output Manager Setup");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboShowSubtotalBreaks
        {
            get
            {
                if ((this.mcboShowSubtotalBreaks == null))
                {
                    this.mcboShowSubtotalBreaks = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboShowSubtotalBreaks.SearchProperties[WinComboBox.PropertyNames.Name] = "Show subtotal breaks for:";
                    this.mcboShowSubtotalBreaks.WindowTitles.Add("Output Manager Setup");
                    #endregion
                }
                return this.mcboShowSubtotalBreaks;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboShowSubtotalBreaks;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK1 : WinWindow
    {
        
        public wOK1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Output Manager Setup");
            #endregion
        }
        
        #region Properties
        public WinButton btnOK
        {
            get
            {
                if ((this.mbtnOK == null))
                {
                    this.mbtnOK = new WinButton(this);
                    #region Search Criteria
                    this.mbtnOK.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtnOK.WindowTitles.Add("Output Manager Setup");
                    #endregion
                }
                return this.mbtnOK;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSetupOfScenarioPack : WinWindow
    {
        
        public wSetupOfScenarioPack(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lbValuationSets";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Output Manager Setup");
            #endregion
        }
        
        #region Properties
        public WinList listSetupOfScenarioPack
        {
            get
            {
                if ((this.mlistSetupOfScenarioPack == null))
                {
                    this.mlistSetupOfScenarioPack = new WinList(this);
                    #region Search Criteria
                    this.mlistSetupOfScenarioPack.SearchProperties[WinList.PropertyNames.Name] = "Setup of Scenario Pack";
                    this.mlistSetupOfScenarioPack.WindowTitles.Add("Output Manager Setup");
                    #endregion
                }
                return this.mlistSetupOfScenarioPack;
            }
        }
        #endregion
        
        #region Fields
        private WinList mlistSetupOfScenarioPack;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRemoveAll : WinWindow
    {
        
        public wRemoveAll(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRemoveAll";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Output Manager Setup");
            #endregion
        }
        
        #region Properties
        public WinButton btnRemoveAll
        {
            get
            {
                if ((this.mbtnRemoveAll == null))
                {
                    this.mbtnRemoveAll = new WinButton(this);
                    #region Search Criteria
                    this.mbtnRemoveAll.SearchProperties[WinButton.PropertyNames.Name] = "<< Remove All";
                    this.mbtnRemoveAll.WindowTitles.Add("Output Manager Setup");
                    #endregion
                }
                return this.mbtnRemoveAll;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnRemoveAll;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExcel : WinWindow
    {
        
        public wExcel()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Excel", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "XLMAIN";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Microsoft Excel - 4ceb74b7-8e9a-4388-a714-bdf9a512e015-68.xls  [Shared]");
            this.WindowTitles.Add("Microsoft Excel - FundingCalculator.xls  [Shared]");
            #endregion
        }
        
        #region Properties
        public wTitleBar1 wTitleBar
        {
            get
            {
                if ((this.mwTitleBar == null))
                {
                    this.mwTitleBar = new wTitleBar1(this);
                }
                return this.mwTitleBar;
            }
        }
        
        public wMenuBar1 wMenuBar
        {
            get
            {
                if ((this.mwMenuBar == null))
                {
                    this.mwMenuBar = new wMenuBar1(this);
                }
                return this.mwMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private wTitleBar1 mwTitleBar;
        
        private wMenuBar1 mwMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wTitleBar1 : WinTitleBar
    {
        
        public wTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Microsoft Excel - 4ceb74b7-8e9a-4388-a714-bdf9a512e015-68.xls  [Shared]");
            this.WindowTitles.Add("Microsoft Excel - FundingCalculator.xls  [Shared]");
            #endregion
        }
        
        #region Properties
        public WinButton btnClose
        {
            get
            {
                if ((this.mbtnClose == null))
                {
                    this.mbtnClose = new WinButton(this);
                    #region Search Criteria
                    this.mbtnClose.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mbtnClose.WindowTitles.Add("Microsoft Excel - FundingCalculator.xls  [Shared]");
                    #endregion
                }
                return this.mbtnClose;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMenuBar1 : WinMenuBar
    {
        
        public wMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Worksheet Menu Bar";
            this.WindowTitles.Add("Microsoft Excel - 4ceb74b7-8e9a-4388-a714-bdf9a512e015-68.xls  [Shared]");
            #endregion
        }
        
        #region Properties
        public miFile1 miFile
        {
            get
            {
                if ((this.mmiFile == null))
                {
                    this.mmiFile = new miFile1(this);
                }
                return this.mmiFile;
            }
        }
        #endregion
        
        #region Fields
        private miFile1 mmiFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class miFile1 : WinMenuItem
    {
        
        public miFile1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Microsoft Excel - 4ceb74b7-8e9a-4388-a714-bdf9a512e015-68.xls  [Shared]");
            #endregion
        }
        
        #region Properties
        public WinMenuItem miSaveAs
        {
            get
            {
                if ((this.mmiSaveAs == null))
                {
                    this.mmiSaveAs = new WinMenuItem(this);
                    #region Search Criteria
                    this.mmiSaveAs.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As...";
                    this.mmiSaveAs.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mmiSaveAs.WindowTitles.Add("Microsoft Excel - 4ceb74b7-8e9a-4388-a714-bdf9a512e015-68.xls  [Shared]");
                    #endregion
                }
                return this.mmiSaveAs;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mmiSaveAs;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSaveAs_Excel : WinWindow
    {
        
        public wSaveAs_Excel()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Save", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public diagSaveAs diagSaveAs
        {
            get
            {
                if ((this.mdiagSaveAs == null))
                {
                    this.mdiagSaveAs = new diagSaveAs(this);
                }
                return this.mdiagSaveAs;
            }
        }
        
        public wFileName1 wFileName
        {
            get
            {
                if ((this.mwFileName == null))
                {
                    this.mwFileName = new wFileName1(this);
                }
                return this.mwFileName;
            }
        }
        #endregion
        
        #region Fields
        private diagSaveAs mdiagSaveAs;
        
        private wFileName1 mwFileName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class diagSaveAs : WinControl
    {
        
        public diagSaveAs(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Save", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton btnSave
        {
            get
            {
                if ((this.mbtnSave == null))
                {
                    this.mbtnSave = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSave.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mbtnSave.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mbtnSave;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSave;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFileName1 : WinWindow
    {
        
        public wFileName1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFileName
        {
            get
            {
                if ((this.mtxtFileName == null))
                {
                    this.mtxtFileName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFileName.SearchProperties.Add(new PropertyExpression(WinEdit.PropertyNames.Name, "name", PropertyExpressionOperator.Contains));
                    this.mtxtFileName.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtFileName.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mtxtFileName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFileName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "ExportDropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinMenu UIExportDropDownMenu
        {
            get
            {
                if ((this.mUIExportDropDownMenu == null))
                {
                    this.mUIExportDropDownMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUIExportDropDownMenu.SearchProperties[WinMenu.PropertyNames.Name] = "ExportDropDown";
                    #endregion
                }
                return this.mUIExportDropDownMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUIExportDropDownMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAdobeContentPreparation : WinWindow
    {
        
        public wAdobeContentPreparation()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Content Preparation Progress";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Content Preparation Progress");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "GroupBox";
            this.WindowTitles.Add("Content Preparation Progress");
            #endregion
        }
        
        #region Properties
        public UIItemGroup UIItemGroup
        {
            get
            {
                if ((this.mUIItemGroup == null))
                {
                    this.mUIItemGroup = new UIItemGroup(this);
                }
                return this.mUIItemGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIItemGroup mUIItemGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemGroup : WinGroup
    {
        
        public UIItemGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Content Preparation Progress");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Content Preparation Progress");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSaveAs_Win7 : WinWindow
    {
        
        public wSaveAs_Win7()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UISaveAsTitleBar
        {
            get
            {
                if ((this.mUISaveAsTitleBar == null))
                {
                    this.mUISaveAsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISaveAsTitleBar.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveAsTitleBar;
            }
        }
        
        public paneDetails paneDetails
        {
            get
            {
                if ((this.mpaneDetails == null))
                {
                    this.mpaneDetails = new paneDetails(this);
                }
                return this.mpaneDetails;
            }
        }
        
        public wSave1 wSave
        {
            get
            {
                if ((this.mwSave == null))
                {
                    this.mwSave = new wSave1(this);
                }
                return this.mwSave;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUISaveAsTitleBar;
        
        private paneDetails mpaneDetails;
        
        private wSave1 mwSave;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class paneDetails : WinPane
    {
        
        public paneDetails(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox txtFileName
        {
            get
            {
                if ((this.mtxtFileName == null))
                {
                    this.mtxtFileName = new WinComboBox(this);
                    #region Search Criteria
                    this.mtxtFileName.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mtxtFileName.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxtFileName.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mtxtFileName;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mtxtFileName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSave1 : WinWindow
    {
        
        public wSave1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton btnSave
        {
            get
            {
                if ((this.mbtnSave == null))
                {
                    this.mbtnSave = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSave.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mbtnSave.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnSave.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mbtnSave;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSave;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSaveAs : WinWindow
    {
        
        public wSaveAs()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Save", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public wSave2 wSave
        {
            get
            {
                if ((this.mwSave == null))
                {
                    this.mwSave = new wSave2(this);
                }
                return this.mwSave;
            }
        }
        
        public wCancel wCancel
        {
            get
            {
                if ((this.mwCancel == null))
                {
                    this.mwCancel = new wCancel(this);
                }
                return this.mwCancel;
            }
        }
        
        public wFileName2 wFileName
        {
            get
            {
                if ((this.mwFileName == null))
                {
                    this.mwFileName = new wFileName2(this);
                }
                return this.mwFileName;
            }
        }
        #endregion
        
        #region Fields
        private wSave2 mwSave;
        
        private wCancel mwCancel;
        
        private wFileName2 mwFileName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSave2 : WinWindow
    {
        
        public wSave2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton btnSave
        {
            get
            {
                if ((this.mbtnSave == null))
                {
                    this.mbtnSave = new WinButton(this);
                    #region Search Criteria
                    this.mbtnSave.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mbtnSave.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtnSave.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mbtnSave;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnSave;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCancel : WinWindow
    {
        
        public wCancel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton btnCancel
        {
            get
            {
                if ((this.mbtnCancel == null))
                {
                    this.mbtnCancel = new WinButton(this);
                    #region Search Criteria
                    this.mbtnCancel.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mbtnCancel.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mbtnCancel;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtnCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFileName2 : WinWindow
    {
        
        public wFileName2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit txtFileName
        {
            get
            {
                if ((this.mtxtFileName == null))
                {
                    this.mtxtFileName = new WinEdit(this);
                    #region Search Criteria
                    this.mtxtFileName.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mtxtFileName.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mtxtFileName;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mtxtFileName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wWaitDialog : WinWindow
    {
        
        public wWaitDialog()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio - Output Manager - Parameter Print";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Retirement Studio - Output Manager - Parameter Print");
            #endregion
        }
        
        #region Properties
        public wOK2 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK2(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK2 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK2 : WinWindow
    {
        
        public wOK2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio - Output Manager - Parameter Print");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Retirement Studio - Output Manager - Parameter Print");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExportToGlobe : WinWindow
    {
        
        public wExportToGlobe()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wOK3 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK3(this);
                }
                return this.mwOK;
            }
        }
        
        public wOK_notcomplete wOK_notcomplete
        {
            get
            {
                if ((this.mwOK_notcomplete == null))
                {
                    this.mwOK_notcomplete = new wOK_notcomplete(this);
                }
                return this.mwOK_notcomplete;
            }
        }
        
        public UITheExporttoGlobeiscoWindow UITheExporttoGlobeiscoWindow
        {
            get
            {
                if ((this.mUITheExporttoGlobeiscoWindow == null))
                {
                    this.mUITheExporttoGlobeiscoWindow = new UITheExporttoGlobeiscoWindow(this);
                }
                return this.mUITheExporttoGlobeiscoWindow;
            }
        }
        #endregion
        
        #region Fields
        private wOK3 mwOK;
        
        private wOK_notcomplete mwOK_notcomplete;
        
        private UITheExporttoGlobeiscoWindow mUITheExporttoGlobeiscoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK3 : WinWindow
    {
        
        public wOK3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK_notcomplete : WinWindow
    {
        
        public wOK_notcomplete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITheExporttoGlobeiscoWindow : WinWindow
    {
        
        public UITheExporttoGlobeiscoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinText UITheExporttoGlobeiscoText
        {
            get
            {
                if ((this.mUITheExporttoGlobeiscoText == null))
                {
                    this.mUITheExporttoGlobeiscoText = new WinText(this);
                    #region Search Criteria
                    this.mUITheExporttoGlobeiscoText.SearchProperties[WinText.PropertyNames.Name] = "The Export to Globe is complete. You can now import the results into Mercer Globe" +
                        ".";
                    this.mUITheExporttoGlobeiscoText.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUITheExporttoGlobeiscoText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUITheExporttoGlobeiscoText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDataRequestExport : WinWindow
    {
        
        public wDataRequestExport()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Export Successfully";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Export Successfully");
            #endregion
        }
        
        #region Properties
        public wOK4 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK4(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wOK4 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK4 : WinWindow
    {
        
        public wOK4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Export Successfully");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.WindowTitles.Add("Export Successfully");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wExcel_1 : WinWindow
    {
        
        public wExcel_1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Excel", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "XLMAIN";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Microsoft Excel - TestCaseResults_049862497.xlsx  [Read-Only]");
            #endregion
        }
        
        #region Properties
        public wRibbon wRibbon
        {
            get
            {
                if ((this.mwRibbon == null))
                {
                    this.mwRibbon = new wRibbon(this);
                }
                return this.mwRibbon;
            }
        }
        #endregion
        
        #region Fields
        private wRibbon mwRibbon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRibbon : WinControl
    {
        
        public wRibbon(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Microsoft Excel - TestCaseResults_049862497.xlsx  [Read-Only]");
            #endregion
        }
        
        #region Properties
        public WinButton tabFile
        {
            get
            {
                if ((this.mtabFile == null))
                {
                    this.mtabFile = new WinButton(this);
                    #region Search Criteria
                    this.mtabFile.SearchProperties[WinButton.PropertyNames.Name] = "File Tab";
                    this.mtabFile.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtabFile.WindowTitles.Add("Microsoft Excel - TestCaseResults_049862497.xlsx  [Read-Only]");
                    #endregion
                }
                return this.mtabFile;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mtabFile;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wReplaceExportedLiabSet : WinWindow
    {
        
        public wReplaceExportedLiabSet()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Replace Exported Liability Set";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Replace Exported Liability Set");
            #endregion
        }
        
        #region Properties
        public wMsg wMsg
        {
            get
            {
                if ((this.mwMsg == null))
                {
                    this.mwMsg = new wMsg(this);
                }
                return this.mwMsg;
            }
        }
        
        public wOK5 wOK
        {
            get
            {
                if ((this.mwOK == null))
                {
                    this.mwOK = new wOK5(this);
                }
                return this.mwOK;
            }
        }
        #endregion
        
        #region Fields
        private wMsg mwMsg;
        
        private wOK5 mwOK;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wMsg : WinWindow
    {
        
        public wMsg(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Replace Exported Liability Set");
            #endregion
        }
        
        #region Properties
        public WinText txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new WinText(this);
                    #region Search Criteria
                    this.mtxt.SearchProperties[WinText.PropertyNames.Name] = "A liability set with this name has already been exported. Do youwant to replace t" +
                        "he existing liability set?";
                    this.mtxt.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mtxt.WindowTitles.Add("Replace Exported Liability Set");
                    #endregion
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private WinText mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wOK5 : WinWindow
    {
        
        public wOK5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Replace Exported Liability Set");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mbtn.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mbtn.WindowTitles.Add("Replace Exported Liability Set");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFVIndividualPopulationProjection : WinWindow
    {
        
        public wFVIndividualPopulationProjection()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Future Valuation Individual", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Individual Output Results Available");
            #endregion
        }
        
        #region Properties
        public wNewExport wNewExport
        {
            get
            {
                if ((this.mwNewExport == null))
                {
                    this.mwNewExport = new wNewExport(this);
                }
                return this.mwNewExport;
            }
        }
        
        public wPreviousResults wPreviousResults
        {
            get
            {
                if ((this.mwPreviousResults == null))
                {
                    this.mwPreviousResults = new wPreviousResults(this);
                }
                return this.mwPreviousResults;
            }
        }
        #endregion
        
        #region Fields
        private wNewExport mwNewExport;
        
        private wPreviousResults mwPreviousResults;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wNewExport : WinWindow
    {
        
        public wNewExport(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnNewExport";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Individual Output Results Available");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "New Export";
                    this.mbtn.WindowTitles.Add("Future Valuation Individual Output Results Available");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPreviousResults : WinWindow
    {
        
        public wPreviousResults(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPreviousResults";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Future Valuation Individual Output Results Available");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "Previous Results";
                    this.mbtn.WindowTitles.Add("Future Valuation Individual Output Results Available");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
}
