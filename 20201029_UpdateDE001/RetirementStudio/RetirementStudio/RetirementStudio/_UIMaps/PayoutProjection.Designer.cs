// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RetirementStudio._UIMaps.PayoutProjectionClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class PayoutProjection
    {
        
        #region Properties
        public wRetirementStudio wRetirementStudio
        {
            get
            {
                if ((this.mwRetirementStudio == null))
                {
                    this.mwRetirementStudio = new wRetirementStudio();
                }
                return this.mwRetirementStudio;
            }
        }
        #endregion
        
        #region Fields
        private wRetirementStudio mwRetirementStudio;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wRetirementStudio : WinWindow
    {
        
        public wRetirementStudio()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Retirement Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public wHistory wHistory
        {
            get
            {
                if ((this.mwHistory == null))
                {
                    this.mwHistory = new wHistory(this);
                }
                return this.mwHistory;
            }
        }
        
        public wPresentYear wPresentYear
        {
            get
            {
                if ((this.mwPresentYear == null))
                {
                    this.mwPresentYear = new wPresentYear(this);
                }
                return this.mwPresentYear;
            }
        }
        
        public wCustomCode wCustomCode
        {
            get
            {
                if ((this.mwCustomCode == null))
                {
                    this.mwCustomCode = new wCustomCode(this);
                }
                return this.mwCustomCode;
            }
        }
        
        public wLegislatedPayLimitDefinition wLegislatedPayLimitDefinition
        {
            get
            {
                if ((this.mwLegislatedPayLimitDefinition == null))
                {
                    this.mwLegislatedPayLimitDefinition = new wLegislatedPayLimitDefinition(this);
                }
                return this.mwLegislatedPayLimitDefinition;
            }
        }
        
        public wPlanPayLimitDefinition wPlanPayLimitDefinition
        {
            get
            {
                if ((this.mwPlanPayLimitDefinition == null))
                {
                    this.mwPlanPayLimitDefinition = new wPlanPayLimitDefinition(this);
                }
                return this.mwPlanPayLimitDefinition;
            }
        }
        
        public wHistory_DataFieldContainingPayHistory wHistory_DataFieldContainingPayHistory
        {
            get
            {
                if ((this.mwHistory_DataFieldContainingPayHistory == null))
                {
                    this.mwHistory_DataFieldContainingPayHistory = new wHistory_DataFieldContainingPayHistory(this);
                }
                return this.mwHistory_DataFieldContainingPayHistory;
            }
        }
        
        public wHistory_PayIncreaseAssumption wHistory_PayIncreaseAssumption
        {
            get
            {
                if ((this.mwHistory_PayIncreaseAssumption == null))
                {
                    this.mwHistory_PayIncreaseAssumption = new wHistory_PayIncreaseAssumption(this);
                }
                return this.mwHistory_PayIncreaseAssumption;
            }
        }
        
        public wHistory_UseOnlyDataFields wHistory_UseOnlyDataFields
        {
            get
            {
                if ((this.mwHistory_UseOnlyDataFields == null))
                {
                    this.mwHistory_UseOnlyDataFields = new wHistory_UseOnlyDataFields(this);
                }
                return this.mwHistory_UseOnlyDataFields;
            }
        }
        
        public wHistory_ValuationYearPlus_rd wHistory_ValuationYearPlus_rd
        {
            get
            {
                if ((this.mwHistory_ValuationYearPlus_rd == null))
                {
                    this.mwHistory_ValuationYearPlus_rd = new wHistory_ValuationYearPlus_rd(this);
                }
                return this.mwHistory_ValuationYearPlus_rd;
            }
        }
        
        public wHistory_ValuationYearPlus_txt wHistory_ValuationYearPlus_txt
        {
            get
            {
                if ((this.mwHistory_ValuationYearPlus_txt == null))
                {
                    this.mwHistory_ValuationYearPlus_txt = new wHistory_ValuationYearPlus_txt(this);
                }
                return this.mwHistory_ValuationYearPlus_txt;
            }
        }
        
        public wHistory_SpecifiedYear_rd wHistory_SpecifiedYear_rd
        {
            get
            {
                if ((this.mwHistory_SpecifiedYear_rd == null))
                {
                    this.mwHistory_SpecifiedYear_rd = new wHistory_SpecifiedYear_rd(this);
                }
                return this.mwHistory_SpecifiedYear_rd;
            }
        }
        
        public wHistory_SpecifedYear_txt wHistory_SpecifedYear_txt
        {
            get
            {
                if ((this.mwHistory_SpecifedYear_txt == null))
                {
                    this.mwHistory_SpecifedYear_txt = new wHistory_SpecifedYear_txt(this);
                }
                return this.mwHistory_SpecifedYear_txt;
            }
        }
        
        public wHistory_ApplyEGTRRALimits wHistory_ApplyEGTRRALimits
        {
            get
            {
                if ((this.mwHistory_ApplyEGTRRALimits == null))
                {
                    this.mwHistory_ApplyEGTRRALimits = new wHistory_ApplyEGTRRALimits(this);
                }
                return this.mwHistory_ApplyEGTRRALimits;
            }
        }
        
        public wFunctionOfOtherProjections wFunctionOfOtherProjections
        {
            get
            {
                if ((this.mwFunctionOfOtherProjections == null))
                {
                    this.mwFunctionOfOtherProjections = new wFunctionOfOtherProjections(this);
                }
                return this.mwFunctionOfOtherProjections;
            }
        }
        
        public wApplyDeduction wApplyDeduction
        {
            get
            {
                if ((this.mwApplyDeduction == null))
                {
                    this.mwApplyDeduction = new wApplyDeduction(this);
                }
                return this.mwApplyDeduction;
            }
        }
        
        public wDeduction_V wDeduction_V
        {
            get
            {
                if ((this.mwDeduction_V == null))
                {
                    this.mwDeduction_V = new wDeduction_V(this);
                }
                return this.mwDeduction_V;
            }
        }
        
        public wDeduction_C wDeduction_C
        {
            get
            {
                if ((this.mwDeduction_C == null))
                {
                    this.mwDeduction_C = new wDeduction_C(this);
                }
                return this.mwDeduction_C;
            }
        }
        
        public wDeduction_T wDeduction_T
        {
            get
            {
                if ((this.mwDeduction_T == null))
                {
                    this.mwDeduction_T = new wDeduction_T(this);
                }
                return this.mwDeduction_T;
            }
        }
        
        public wDeductionAnnualIncrease_V wDeductionAnnualIncrease_V
        {
            get
            {
                if ((this.mwDeductionAnnualIncrease_V == null))
                {
                    this.mwDeductionAnnualIncrease_V = new wDeductionAnnualIncrease_V(this);
                }
                return this.mwDeductionAnnualIncrease_V;
            }
        }
        
        public wDeductionAnnualIncrease_P wDeductionAnnualIncrease_P
        {
            get
            {
                if ((this.mwDeductionAnnualIncrease_P == null))
                {
                    this.mwDeductionAnnualIncrease_P = new wDeductionAnnualIncrease_P(this);
                }
                return this.mwDeductionAnnualIncrease_P;
            }
        }
        
        public wDeductionAnnualIncrease_T wDeductionAnnualIncrease_T
        {
            get
            {
                if ((this.mwDeductionAnnualIncrease_T == null))
                {
                    this.mwDeductionAnnualIncrease_T = new wDeductionAnnualIncrease_T(this);
                }
                return this.mwDeductionAnnualIncrease_T;
            }
        }
        
        public wCommon_cbo_V wCommon_cbo_V
        {
            get
            {
                if ((this.mwCommon_cbo_V == null))
                {
                    this.mwCommon_cbo_V = new wCommon_cbo_V(this);
                }
                return this.mwCommon_cbo_V;
            }
        }
        
        public wCommon_txt_C wCommon_txt_C
        {
            get
            {
                if ((this.mwCommon_txt_C == null))
                {
                    this.mwCommon_txt_C = new wCommon_txt_C(this);
                }
                return this.mwCommon_txt_C;
            }
        }
        
        public wCommon_txt_P wCommon_txt_P
        {
            get
            {
                if ((this.mwCommon_txt_P == null))
                {
                    this.mwCommon_txt_P = new wCommon_txt_P(this);
                }
                return this.mwCommon_txt_P;
            }
        }
        
        public wCommon_cbo_T wCommon_cbo_T
        {
            get
            {
                if ((this.mwCommon_cbo_T == null))
                {
                    this.mwCommon_cbo_T = new wCommon_cbo_T(this);
                }
                return this.mwCommon_cbo_T;
            }
        }
        
        public wPresentYear_UseCurrentYearPayRateFrom wPresentYear_UseCurrentYearPayRateFrom
        {
            get
            {
                if ((this.mwPresentYear_UseCurrentYearPayRateFrom == null))
                {
                    this.mwPresentYear_UseCurrentYearPayRateFrom = new wPresentYear_UseCurrentYearPayRateFrom(this);
                }
                return this.mwPresentYear_UseCurrentYearPayRateFrom;
            }
        }
        
        public wApplypaylimitafterdeduction wApplypaylimitafterdeduction
        {
            get
            {
                if ((this.mwApplypaylimitafterdeduction == null))
                {
                    this.mwApplypaylimitafterdeduction = new wApplypaylimitafterdeduction(this);
                }
                return this.mwApplypaylimitafterdeduction;
            }
        }
        
        public wLimitAmount_C wLimitAmount_C
        {
            get
            {
                if ((this.mwLimitAmount_C == null))
                {
                    this.mwLimitAmount_C = new wLimitAmount_C(this);
                }
                return this.mwLimitAmount_C;
            }
        }
        
        public wAnnualLimitIncrease_P wAnnualLimitIncrease_P
        {
            get
            {
                if ((this.mwAnnualLimitIncrease_P == null))
                {
                    this.mwAnnualLimitIncrease_P = new wAnnualLimitIncrease_P(this);
                }
                return this.mwAnnualLimitIncrease_P;
            }
        }
        
        public wAnnualLimitIncrease_V wAnnualLimitIncrease_V
        {
            get
            {
                if ((this.mwAnnualLimitIncrease_V == null))
                {
                    this.mwAnnualLimitIncrease_V = new wAnnualLimitIncrease_V(this);
                }
                return this.mwAnnualLimitIncrease_V;
            }
        }
        
        public wApplySalaryMinimum wApplySalaryMinimum
        {
            get
            {
                if ((this.mwApplySalaryMinimum == null))
                {
                    this.mwApplySalaryMinimum = new wApplySalaryMinimum(this);
                }
                return this.mwApplySalaryMinimum;
            }
        }
        
        public wIgnoreYearsWithHours wIgnoreYearsWithHours
        {
            get
            {
                if ((this.mwIgnoreYearsWithHours == null))
                {
                    this.mwIgnoreYearsWithHours = new wIgnoreYearsWithHours(this);
                }
                return this.mwIgnoreYearsWithHours;
            }
        }
        
        public wPlan_V wPlan_V
        {
            get
            {
                if ((this.mwPlan_V == null))
                {
                    this.mwPlan_V = new wPlan_V(this);
                }
                return this.mwPlan_V;
            }
        }
        
        public wPlan_C wPlan_C
        {
            get
            {
                if ((this.mwPlan_C == null))
                {
                    this.mwPlan_C = new wPlan_C(this);
                }
                return this.mwPlan_C;
            }
        }
        
        public wPlan_Annual_V wPlan_Annual_V
        {
            get
            {
                if ((this.mwPlan_Annual_V == null))
                {
                    this.mwPlan_Annual_V = new wPlan_Annual_V(this);
                }
                return this.mwPlan_Annual_V;
            }
        }
        
        public wPlan_Annual_P wPlan_Annual_P
        {
            get
            {
                if ((this.mwPlan_Annual_P == null))
                {
                    this.mwPlan_Annual_P = new wPlan_Annual_P(this);
                }
                return this.mwPlan_Annual_P;
            }
        }
        
        public wApplyD_Deduction_V wApplyD_Deduction_V
        {
            get
            {
                if ((this.mwApplyD_Deduction_V == null))
                {
                    this.mwApplyD_Deduction_V = new wApplyD_Deduction_V(this);
                }
                return this.mwApplyD_Deduction_V;
            }
        }
        
        public wApplyD_Deduction_C wApplyD_Deduction_C
        {
            get
            {
                if ((this.mwApplyD_Deduction_C == null))
                {
                    this.mwApplyD_Deduction_C = new wApplyD_Deduction_C(this);
                }
                return this.mwApplyD_Deduction_C;
            }
        }
        
        public wApplyD_Annual_V wApplyD_Annual_V
        {
            get
            {
                if ((this.mwApplyD_Annual_V == null))
                {
                    this.mwApplyD_Annual_V = new wApplyD_Annual_V(this);
                }
                return this.mwApplyD_Annual_V;
            }
        }
        
        public wApplyD_Annual_P wApplyD_Annual_P
        {
            get
            {
                if ((this.mwApplyD_Annual_P == null))
                {
                    this.mwApplyD_Annual_P = new wApplyD_Annual_P(this);
                }
                return this.mwApplyD_Annual_P;
            }
        }
        
        public wApplyP_LimitA_V wApplyP_LimitA_V
        {
            get
            {
                if ((this.mwApplyP_LimitA_V == null))
                {
                    this.mwApplyP_LimitA_V = new wApplyP_LimitA_V(this);
                }
                return this.mwApplyP_LimitA_V;
            }
        }
        
        public wApplyP_LimitA_C wApplyP_LimitA_C
        {
            get
            {
                if ((this.mwApplyP_LimitA_C == null))
                {
                    this.mwApplyP_LimitA_C = new wApplyP_LimitA_C(this);
                }
                return this.mwApplyP_LimitA_C;
            }
        }
        
        public wApplyP_Annual_V wApplyP_Annual_V
        {
            get
            {
                if ((this.mwApplyP_Annual_V == null))
                {
                    this.mwApplyP_Annual_V = new wApplyP_Annual_V(this);
                }
                return this.mwApplyP_Annual_V;
            }
        }
        
        public wApplyP_Annual_P wApplyP_Annual_P
        {
            get
            {
                if ((this.mwApplyP_Annual_P == null))
                {
                    this.mwApplyP_Annual_P = new wApplyP_Annual_P(this);
                }
                return this.mwApplyP_Annual_P;
            }
        }
        
        public wSalaryMiniMultipl wSalaryMiniMultipl
        {
            get
            {
                if ((this.mwSalaryMiniMultipl == null))
                {
                    this.mwSalaryMiniMultipl = new wSalaryMiniMultipl(this);
                }
                return this.mwSalaryMiniMultipl;
            }
        }
        
        public wPlanPayLimitMulti wPlanPayLimitMulti
        {
            get
            {
                if ((this.mwPlanPayLimitMulti == null))
                {
                    this.mwPlanPayLimitMulti = new wPlanPayLimitMulti(this);
                }
                return this.mwPlanPayLimitMulti;
            }
        }
        
        public wPayLimitAfterDedu wPayLimitAfterDedu
        {
            get
            {
                if ((this.mwPayLimitAfterDedu == null))
                {
                    this.mwPayLimitAfterDedu = new wPayLimitAfterDedu(this);
                }
                return this.mwPayLimitAfterDedu;
            }
        }
        
        public wHoursThreshold wHoursThreshold
        {
            get
            {
                if ((this.mwHoursThreshold == null))
                {
                    this.mwHoursThreshold = new wHoursThreshold(this);
                }
                return this.mwHoursThreshold;
            }
        }
        
        public wIgnore_DataFieldContaining wIgnore_DataFieldContaining
        {
            get
            {
                if ((this.mwIgnore_DataFieldContaining == null))
                {
                    this.mwIgnore_DataFieldContaining = new wIgnore_DataFieldContaining(this);
                }
                return this.mwIgnore_DataFieldContaining;
            }
        }
        #endregion
        
        #region Fields
        private wHistory mwHistory;
        
        private wPresentYear mwPresentYear;
        
        private wCustomCode mwCustomCode;
        
        private wLegislatedPayLimitDefinition mwLegislatedPayLimitDefinition;
        
        private wPlanPayLimitDefinition mwPlanPayLimitDefinition;
        
        private wHistory_DataFieldContainingPayHistory mwHistory_DataFieldContainingPayHistory;
        
        private wHistory_PayIncreaseAssumption mwHistory_PayIncreaseAssumption;
        
        private wHistory_UseOnlyDataFields mwHistory_UseOnlyDataFields;
        
        private wHistory_ValuationYearPlus_rd mwHistory_ValuationYearPlus_rd;
        
        private wHistory_ValuationYearPlus_txt mwHistory_ValuationYearPlus_txt;
        
        private wHistory_SpecifiedYear_rd mwHistory_SpecifiedYear_rd;
        
        private wHistory_SpecifedYear_txt mwHistory_SpecifedYear_txt;
        
        private wHistory_ApplyEGTRRALimits mwHistory_ApplyEGTRRALimits;
        
        private wFunctionOfOtherProjections mwFunctionOfOtherProjections;
        
        private wApplyDeduction mwApplyDeduction;
        
        private wDeduction_V mwDeduction_V;
        
        private wDeduction_C mwDeduction_C;
        
        private wDeduction_T mwDeduction_T;
        
        private wDeductionAnnualIncrease_V mwDeductionAnnualIncrease_V;
        
        private wDeductionAnnualIncrease_P mwDeductionAnnualIncrease_P;
        
        private wDeductionAnnualIncrease_T mwDeductionAnnualIncrease_T;
        
        private wCommon_cbo_V mwCommon_cbo_V;
        
        private wCommon_txt_C mwCommon_txt_C;
        
        private wCommon_txt_P mwCommon_txt_P;
        
        private wCommon_cbo_T mwCommon_cbo_T;
        
        private wPresentYear_UseCurrentYearPayRateFrom mwPresentYear_UseCurrentYearPayRateFrom;
        
        private wApplypaylimitafterdeduction mwApplypaylimitafterdeduction;
        
        private wLimitAmount_C mwLimitAmount_C;
        
        private wAnnualLimitIncrease_P mwAnnualLimitIncrease_P;
        
        private wAnnualLimitIncrease_V mwAnnualLimitIncrease_V;
        
        private wApplySalaryMinimum mwApplySalaryMinimum;
        
        private wIgnoreYearsWithHours mwIgnoreYearsWithHours;
        
        private wPlan_V mwPlan_V;
        
        private wPlan_C mwPlan_C;
        
        private wPlan_Annual_V mwPlan_Annual_V;
        
        private wPlan_Annual_P mwPlan_Annual_P;
        
        private wApplyD_Deduction_V mwApplyD_Deduction_V;
        
        private wApplyD_Deduction_C mwApplyD_Deduction_C;
        
        private wApplyD_Annual_V mwApplyD_Annual_V;
        
        private wApplyD_Annual_P mwApplyD_Annual_P;
        
        private wApplyP_LimitA_V mwApplyP_LimitA_V;
        
        private wApplyP_LimitA_C mwApplyP_LimitA_C;
        
        private wApplyP_Annual_V mwApplyP_Annual_V;
        
        private wApplyP_Annual_P mwApplyP_Annual_P;
        
        private wSalaryMiniMultipl mwSalaryMiniMultipl;
        
        private wPlanPayLimitMulti mwPlanPayLimitMulti;
        
        private wPayLimitAfterDedu mwPayLimitAfterDedu;
        
        private wHoursThreshold mwHoursThreshold;
        
        private wIgnore_DataFieldContaining mwIgnore_DataFieldContaining;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistory : WinWindow
    {
        
        public wHistory(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radHistory";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdHistory
        {
            get
            {
                if ((this.mrdHistory == null))
                {
                    this.mrdHistory = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdHistory.SearchProperties[WinRadioButton.PropertyNames.Name] = "History";
                    this.mrdHistory.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdHistory;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdHistory;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPresentYear : WinWindow
    {
        
        public wPresentYear(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radPresentYear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdPresentYear
        {
            get
            {
                if ((this.mrdPresentYear == null))
                {
                    this.mrdPresentYear = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdPresentYear.SearchProperties[WinRadioButton.PropertyNames.Name] = "Present year";
                    this.mrdPresentYear.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdPresentYear;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdPresentYear;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCustomCode : WinWindow
    {
        
        public wCustomCode(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCustomCode";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdCustomCode
        {
            get
            {
                if ((this.mrdCustomCode == null))
                {
                    this.mrdCustomCode = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdCustomCode.SearchProperties[WinRadioButton.PropertyNames.Name] = "Custom code";
                    this.mrdCustomCode.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdCustomCode;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdCustomCode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLegislatedPayLimitDefinition : WinWindow
    {
        
        public wLegislatedPayLimitDefinition(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkLegislatedPay";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkLegislatedPayLimitDefinition
        {
            get
            {
                if ((this.mchkLegislatedPayLimitDefinition == null))
                {
                    this.mchkLegislatedPayLimitDefinition = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkLegislatedPayLimitDefinition.SearchProperties[WinCheckBox.PropertyNames.Name] = "Legislated pay limit definition";
                    this.mchkLegislatedPayLimitDefinition.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkLegislatedPayLimitDefinition;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkLegislatedPayLimitDefinition;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlanPayLimitDefinition : WinWindow
    {
        
        public wPlanPayLimitDefinition(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPlanPayLimit";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkPlanPayLimitDefinition
        {
            get
            {
                if ((this.mchkPlanPayLimitDefinition == null))
                {
                    this.mchkPlanPayLimitDefinition = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkPlanPayLimitDefinition.SearchProperties[WinCheckBox.PropertyNames.Name] = "Plan pay limit definition";
                    this.mchkPlanPayLimitDefinition.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkPlanPayLimitDefinition;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkPlanPayLimitDefinition;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistory_DataFieldContainingPayHistory : WinWindow
    {
        
        public wHistory_DataFieldContainingPayHistory(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboPayHistory";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboDataFieldContainingPayHistory
        {
            get
            {
                if ((this.mcboDataFieldContainingPayHistory == null))
                {
                    this.mcboDataFieldContainingPayHistory = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboDataFieldContainingPayHistory.SearchProperties[WinComboBox.PropertyNames.Name] = "Pay increase assumption";
                    this.mcboDataFieldContainingPayHistory.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboDataFieldContainingPayHistory;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboDataFieldContainingPayHistory;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistory_PayIncreaseAssumption : WinWindow
    {
        
        public wHistory_PayIncreaseAssumption(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboSalaryProjectionAssumptionLabel";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cboPayIncreaseAssumption
        {
            get
            {
                if ((this.mcboPayIncreaseAssumption == null))
                {
                    this.mcboPayIncreaseAssumption = new WinComboBox(this);
                    #region Search Criteria
                    this.mcboPayIncreaseAssumption.SearchProperties[WinComboBox.PropertyNames.Name] = "Project from present year";
                    this.mcboPayIncreaseAssumption.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcboPayIncreaseAssumption;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcboPayIncreaseAssumption;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistory_UseOnlyDataFields : WinWindow
    {
        
        public wHistory_UseOnlyDataFields(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkUseDataFields";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkUseOnlyDataFields
        {
            get
            {
                if ((this.mchkUseOnlyDataFields == null))
                {
                    this.mchkUseOnlyDataFields = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkUseOnlyDataFields.SearchProperties[WinCheckBox.PropertyNames.Name] = "Use only data fields for years before valuation";
                    this.mchkUseOnlyDataFields.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkUseOnlyDataFields;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkUseOnlyDataFields;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistory_ValuationYearPlus_rd : WinWindow
    {
        
        public wHistory_ValuationYearPlus_rd(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radSalaryLimitsValuationPlusYears";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdValuationYearPlus
        {
            get
            {
                if ((this.mrdValuationYearPlus == null))
                {
                    this.mrdValuationYearPlus = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdValuationYearPlus.SearchProperties[WinRadioButton.PropertyNames.Name] = "Valuation year plus";
                    this.mrdValuationYearPlus.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdValuationYearPlus;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdValuationYearPlus;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistory_ValuationYearPlus_txt : WinWindow
    {
        
        public wHistory_ValuationYearPlus_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudSalaryLimitsValuationPlusYears";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtValuationYearPlus txtValuationYearPlus
        {
            get
            {
                if ((this.mtxtValuationYearPlus == null))
                {
                    this.mtxtValuationYearPlus = new txtValuationYearPlus(this);
                }
                return this.mtxtValuationYearPlus;
            }
        }
        #endregion
        
        #region Fields
        private txtValuationYearPlus mtxtValuationYearPlus;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtValuationYearPlus : WinEdit
    {
        
        public txtValuationYearPlus(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudSalaryLimitsValuaEdit1
        {
            get
            {
                if ((this.mUINudSalaryLimitsValuaEdit1 == null))
                {
                    this.mUINudSalaryLimitsValuaEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudSalaryLimitsValuaEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINudSalaryLimitsValuaEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINudSalaryLimitsValuaEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudSalaryLimitsValuaEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistory_SpecifiedYear_rd : WinWindow
    {
        
        public wHistory_SpecifiedYear_rd(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radSalaryLimitsYear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdSpecifiedYear
        {
            get
            {
                if ((this.mrdSpecifiedYear == null))
                {
                    this.mrdSpecifiedYear = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdSpecifiedYear.SearchProperties[WinRadioButton.PropertyNames.Name] = "Specified year";
                    this.mrdSpecifiedYear.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdSpecifiedYear;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdSpecifiedYear;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistory_SpecifedYear_txt : WinWindow
    {
        
        public wHistory_SpecifedYear_txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nudSalaryLimitsYear";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txtSpecifiedYear txtSpecifiedYear
        {
            get
            {
                if ((this.mtxtSpecifiedYear == null))
                {
                    this.mtxtSpecifiedYear = new txtSpecifiedYear(this);
                }
                return this.mtxtSpecifiedYear;
            }
        }
        #endregion
        
        #region Fields
        private txtSpecifiedYear mtxtSpecifiedYear;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txtSpecifiedYear : WinEdit
    {
        
        public txtSpecifiedYear(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINudSalaryLimitsYearEdit1
        {
            get
            {
                if ((this.mUINudSalaryLimitsYearEdit1 == null))
                {
                    this.mUINudSalaryLimitsYearEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINudSalaryLimitsYearEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINudSalaryLimitsYearEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINudSalaryLimitsYearEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINudSalaryLimitsYearEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHistory_ApplyEGTRRALimits : WinWindow
    {
        
        public wHistory_ApplyEGTRRALimits(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkApplyEGTRRALimitsRetroactively";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chkApplyEGTRRALimits
        {
            get
            {
                if ((this.mchkApplyEGTRRALimits == null))
                {
                    this.mchkApplyEGTRRALimits = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchkApplyEGTRRALimits.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply EGTRRA limits retroactively";
                    this.mchkApplyEGTRRALimits.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchkApplyEGTRRALimits;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchkApplyEGTRRALimits;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wFunctionOfOtherProjections : WinWindow
    {
        
        public wFunctionOfOtherProjections(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radFunction";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinRadioButton rdFunctionOfOtherProjections
        {
            get
            {
                if ((this.mrdFunctionOfOtherProjections == null))
                {
                    this.mrdFunctionOfOtherProjections = new WinRadioButton(this);
                    #region Search Criteria
                    this.mrdFunctionOfOtherProjections.SearchProperties[WinRadioButton.PropertyNames.Name] = "Function of other projections";
                    this.mrdFunctionOfOtherProjections.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mrdFunctionOfOtherProjections.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mrdFunctionOfOtherProjections;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mrdFunctionOfOtherProjections;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyDeduction : WinWindow
    {
        
        public wApplyDeduction(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkDeduction";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply deduction";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeduction_V : WinWindow
    {
        
        public wDeduction_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeduction_C : WinWindow
    {
        
        public wDeduction_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeduction_T : WinWindow
    {
        
        public wDeduction_T(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnTable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "T";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeductionAnnualIncrease_V : WinWindow
    {
        
        public wDeductionAnnualIncrease_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeductionAnnualIncrease_P : WinWindow
    {
        
        public wDeductionAnnualIncrease_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "%";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wDeductionAnnualIncrease_T : WinWindow
    {
        
        public wDeductionAnnualIncrease_T(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnTable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "T";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommon_cbo_V : WinWindow
    {
        
        public wCommon_cbo_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cboVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommon_txt_C : WinWindow
    {
        
        public wCommon_txt_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_numEditConstant";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt : WinEdit
    {
        
        public txt(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_numEditConstantEdit1
        {
            get
            {
                if ((this.mUI_numEditConstantEdit1 == null))
                {
                    this.mUI_numEditConstantEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUI_numEditConstantEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUI_numEditConstantEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUI_numEditConstantEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_numEditConstantEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommon_txt_P : WinWindow
    {
        
        public wCommon_txt_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_numEditRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt1 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt1(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt1 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt1 : WinEdit
    {
        
        public txt1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_numEditRateEdit1
        {
            get
            {
                if ((this.mUI_numEditRateEdit1 == null))
                {
                    this.mUI_numEditRateEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUI_numEditRateEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "A single text character";
                    this.mUI_numEditRateEdit1.SearchProperties[WinEdit.PropertyNames.Instance] = "2";
                    this.mUI_numEditRateEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUI_numEditRateEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_numEditRateEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wCommon_cbo_T : WinWindow
    {
        
        public wCommon_cbo_T(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cboTableName";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPresentYear_UseCurrentYearPayRateFrom : WinWindow
    {
        
        public wPresentYear_UseCurrentYearPayRateFrom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboPayRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Pay increase assumption";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplypaylimitafterdeduction : WinWindow
    {
        
        public wApplypaylimitafterdeduction(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkPayLimitAfterDeduction";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply pay limit after deduction";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wLimitAmount_C : WinWindow
    {
        
        public wLimitAmount_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAnnualLimitIncrease_P : WinWindow
    {
        
        public wAnnualLimitIncrease_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnRate";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "%";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wAnnualLimitIncrease_V : WinWindow
    {
        
        public wAnnualLimitIncrease_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplySalaryMinimum : WinWindow
    {
        
        public wApplySalaryMinimum(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkSalaryMinimum";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Apply salary minimum";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIgnoreYearsWithHours : WinWindow
    {
        
        public wIgnoreYearsWithHours(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkIgnoreYears";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox chk
        {
            get
            {
                if ((this.mchk == null))
                {
                    this.mchk = new WinCheckBox(this);
                    #region Search Criteria
                    this.mchk.SearchProperties[WinCheckBox.PropertyNames.Name] = "Ignore years with hours less than threshold";
                    this.mchk.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mchk;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mchk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlan_V : WinWindow
    {
        
        public wPlan_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlan_C : WinWindow
    {
        
        public wPlan_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlan_Annual_V : WinWindow
    {
        
        public wPlan_Annual_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlan_Annual_P : WinWindow
    {
        
        public wPlan_Annual_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnRate";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "%";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyD_Deduction_V : WinWindow
    {
        
        public wApplyD_Deduction_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyD_Deduction_C : WinWindow
    {
        
        public wApplyD_Deduction_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyD_Annual_V : WinWindow
    {
        
        public wApplyD_Annual_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyD_Annual_P : WinWindow
    {
        
        public wApplyD_Annual_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnRate";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "%";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyP_LimitA_V : WinWindow
    {
        
        public wApplyP_LimitA_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyP_LimitA_C : WinWindow
    {
        
        public wApplyP_LimitA_C(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnConstant";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyP_Annual_V : WinWindow
    {
        
        public wApplyP_Annual_V(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnVariable";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "7";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "V";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wApplyP_Annual_P : WinWindow
    {
        
        public wApplyP_Annual_P(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnRate";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinButton btn
        {
            get
            {
                if ((this.mbtn == null))
                {
                    this.mbtn = new WinButton(this);
                    #region Search Criteria
                    this.mbtn.SearchProperties[WinButton.PropertyNames.Name] = "%";
                    this.mbtn.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mbtn;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mbtn;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wSalaryMiniMultipl : WinWindow
    {
        
        public wSalaryMiniMultipl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "numSalaryMiniMultiplier";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt2 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt2(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt2 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt2 : WinEdit
    {
        
        public txt2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINumSalaryMiniMultiplEdit1
        {
            get
            {
                if ((this.mUINumSalaryMiniMultiplEdit1 == null))
                {
                    this.mUINumSalaryMiniMultiplEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINumSalaryMiniMultiplEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINumSalaryMiniMultiplEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINumSalaryMiniMultiplEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINumSalaryMiniMultiplEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPlanPayLimitMulti : WinWindow
    {
        
        public wPlanPayLimitMulti(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "numPlanPayLimitMultiplier";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt3 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt3(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt3 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt3 : WinEdit
    {
        
        public txt3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINumPlanPayLimitMultiEdit1
        {
            get
            {
                if ((this.mUINumPlanPayLimitMultiEdit1 == null))
                {
                    this.mUINumPlanPayLimitMultiEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINumPlanPayLimitMultiEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINumPlanPayLimitMultiEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINumPlanPayLimitMultiEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINumPlanPayLimitMultiEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wPayLimitAfterDedu : WinWindow
    {
        
        public wPayLimitAfterDedu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "numPayLimitAfterDeductionMultiplier";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt4 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt4(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt4 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt4 : WinEdit
    {
        
        public txt4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINumPayLimitAfterDeduEdit1
        {
            get
            {
                if ((this.mUINumPayLimitAfterDeduEdit1 == null))
                {
                    this.mUINumPayLimitAfterDeduEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINumPayLimitAfterDeduEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINumPayLimitAfterDeduEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINumPayLimitAfterDeduEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINumPayLimitAfterDeduEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wHoursThreshold : WinWindow
    {
        
        public wHoursThreshold(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "numHours";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public txt5 txt
        {
            get
            {
                if ((this.mtxt == null))
                {
                    this.mtxt = new txt5(this);
                }
                return this.mtxt;
            }
        }
        #endregion
        
        #region Fields
        private txt5 mtxt;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class txt5 : WinEdit
    {
        
        public txt5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UINumHoursEdit1
        {
            get
            {
                if ((this.mUINumHoursEdit1 == null))
                {
                    this.mUINumHoursEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUINumHoursEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "Text area";
                    this.mUINumHoursEdit1.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mUINumHoursEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINumHoursEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class wIgnore_DataFieldContaining : WinWindow
    {
        
        public wIgnore_DataFieldContaining(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboHoursHistory";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Retirement Studio");
            #endregion
        }
        
        #region Properties
        public WinComboBox cbo
        {
            get
            {
                if ((this.mcbo == null))
                {
                    this.mcbo = new WinComboBox(this);
                    #region Search Criteria
                    this.mcbo.SearchProperties[WinComboBox.PropertyNames.Name] = "Hours threshold";
                    this.mcbo.WindowTitles.Add("Retirement Studio");
                    #endregion
                }
                return this.mcbo;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mcbo;
        #endregion
    }
}
