using System;
using System.IO;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Windows.Input;
using System.Windows.Forms;
using System.Drawing;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;

using RetirementStudio._Config;
using RetirementStudio._Libraries;
using RetirementStudio._UIMaps;
using RetirementStudio._UIMaps.FarPointClasses;
using RetirementStudio._UIMaps.MainClasses;
using RetirementStudio._UIMaps.DataClasses;
using RetirementStudio._UIMaps.ParticipantDataSetClasses;
using RetirementStudio._UIMaps.AssumptionsClasses;
using RetirementStudio._UIMaps.InterestRateClasses;
using RetirementStudio._UIMaps.PayIncreaseClasses;
using RetirementStudio._UIMaps.OtherDemographicAssumptionsClasses;
using RetirementStudio._UIMaps.MortalityDecrementClasses;
using RetirementStudio._UIMaps.ServiceClasses;
using RetirementStudio._UIMaps.EligibilitiesClasses;
using RetirementStudio._UIMaps.PayoutProjectionClasses;
using RetirementStudio._UIMaps.PayAverageClasses;
using RetirementStudio._UIMaps.VestingClasses;
using RetirementStudio._UIMaps.ActuarialEquivalenceClasses;
using RetirementStudio._UIMaps.ConversionFactorsClasses;
using RetirementStudio._UIMaps.FormOfPaymentClasses;
using RetirementStudio._UIMaps.Item415LimitsClasses;
using RetirementStudio._UIMaps.PlanDefinitionClasses;
using RetirementStudio._UIMaps.MethodsClasses;
using RetirementStudio._UIMaps.TestCaseLibraryClasses;
using RetirementStudio._UIMaps.OutputManagerClasses;
using RetirementStudio._UIMaps.AssetsClasses;
using RetirementStudio._UIMaps.FundingInformationClasses;
using RetirementStudio._UIMaps.FundingInformation_PYR_PreliminaryResultsClasses;
using RetirementStudio._UIMaps.FundingInformation_FTAPsClasses;
using RetirementStudio._UIMaps.FundingInformation_ShortfallClasses;
using RetirementStudio._UIMaps.FundingInformation_ContributionSummaryClasses;
using RetirementStudio._UIMaps.OtherEconomicAssumptionClasses;
using RetirementStudio._UIMaps.FromToAgeClasses;
using RetirementStudio._UIMaps.FAEFormulaClasses;
using RetirementStudio._UIMaps.EarlyRetirementFactorClasses;
using RetirementStudio._UIMaps.BenefitElectionsClasses;
using RetirementStudio._UIMaps.TableManagerClasses;
using RetirementStudio._UIMaps.UnitFormulaClasses;


// CA Screens
using RetirementStudio._UIMaps.DefinedBenefitLimitIncreaseClasses;


// DE Screens
using RetirementStudio._UIMaps.AssumedRetirementAgeClasses;
using RetirementStudio._UIMaps.ContractualRetirementAgeClasses;
using RetirementStudio._UIMaps.JubileeBenefitClasses;
using RetirementStudio._UIMaps.PlanDefinition_DEClasses;
using RetirementStudio._UIMaps.SocialSecurityContributionRatesClasses;
using RetirementStudio._UIMaps.ServiceSelectionClasses;
using RetirementStudio._UIMaps.ProjectAndProrateClasses;
using RetirementStudio._UIMaps.CostOfLivingAdjustmentsClasses;
using RetirementStudio._UIMaps.FormOfPayment_DEClasses;
using RetirementStudio._UIMaps.IndividualOuputFieldDefinitionClasses;
using RetirementStudio._UIMaps.Methods_DEClasses;
using RetirementStudio._UIMaps.ReportBreaksClasses;
using RetirementStudio._UIMaps.BreakFieldTextSubstitutionClasses;
using RetirementStudio._UIMaps.ContributionsBasedFormulaClasses;
using RetirementStudio._UIMaps.FutureValuationOptionClasses;
using RetirementStudio._UIMaps.PayCreditClasses;
using RetirementStudio._UIMaps.ActuarialReportClasses;
using RetirementStudio._UIMaps.SocialSecurityContributionCeilingsClasses;
using RetirementStudio._UIMaps.OneYearProjectionClasses;
using RetirementStudio._UIMaps.SocialSecurityClasses;
using RetirementStudio._UIMaps.VersorgungsausgleichClasses;
using RetirementStudio._UIMaps.CashBalanceClasses;
using RetirementStudio._UIMaps.UserDefinedProjectionAClasses;
using System.Threading;



namespace RetirementStudio._TestScripts._TestScripts_DE
{
    /// <summary>
    /// Summary description for DE010_CN
    /// </summary>
    [CodedUITest]
    public class DE010_CN
    {
        public DE010_CN()
        {
            Config.eEnv = _TestingEnv.QA1;
            Config.eCountry = _Country.DE;
            Config.sClientName = "QA DE Benchmark 010 Create New";
            Config.sPlanName = "QA DE Benchmark 010 Create New Plan";
            Config.sDataCenter = "Franklin";
            Config.bDownloadReports_PDF = false;
            Config.bDownloadReports_EXCEL = true;
            Config.bCompareReports = true;

        }

        #region Report Output Directory


        public string sOutputPension_Conversion2010 = "";

        public string sOutputPension_Valuation2011_Baseline = "";
        public string sOutputPension_Valuation2011_ConstantNumberOfPlanMembers = "";
        public string sOutputPension_Valuation2011_IndividualBeneficiaryMethod = "";
        public string sOutputPension_Valuation2011_MultiplePasses = "";
        public string sOutputPension_Valuation2012_Baseline = "";
        public string sOutputPension_Valuation2012_MethodScreenChange = "";
        public string sOutputPension_Valuation2012_SecondMethodScreenChance = "";
        public string sOutputPension_Valuation2012_V67Enhancements = "";

        public string sOutputJubilee_Conversion2010 = "";
        public string sOutputJubilee_Valuation2011_Baseline = "";
        public string sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers = "";
        public string sOutputJubilee_Valuation2012_Baseline = "";
        public string sOutputJubilee_Valuation2012_TradeEAN = "";
        public string sOutputJubilee_Valuation2012_TradePUC = "";
        public string sOutputJubilee_Valuation2012_V67Enhancements = "";
        public string sOutputJubilee_Valuation2012_V69Enhancements = "";

        public string sOutput_Data2013 = "";


        public string sOutputPension_Conversion2010_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Conversion2010\";
        public string sOutputJubilee_Conversion2010_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Jubilee_Conversion2010\";

        public string sOutputPension_Valuation2011_Baseline_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Valuation2011_Baseline\";
        public string sOutputPension_Valuation2011_ConstantNumberOfPlanMembers_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Valuation2011_ConstantNumberOfPlanMembers\";
        public string sOutputPension_Valuation2011_IndividualBeneficiaryMethod_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Valuation2011_IndividualBeneficiaryMethod\";
        public string sOutputPension_Valuation2011_MultiplePasses_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Valuation2011_MultiplePasses\";

        public string sOutputPension_Valuation2012_Baseline_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Valuation2012_Baseline\";
        public string sOutputPension_Valuation2012_MethodScreenChange_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Valuation2012_MethodScreenChange\";
        public string sOutputPension_Valuation2012_SecondMethodScreenChance_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Valuation2012_SecondMethodScreenChance\";
        public string sOutputPension_Valuation2012_V67Enhancements_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Valuation2012_V67Enhancements\";

        public string sOutputJubilee_Valuation2011_Baseline_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Jubilee_Valuation2011_Baseline\";
        public string sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Jubilee_Valuation2011_ConstantNumberOfPlanMembers\";

        public string sOutputJubilee_Valuation2012_Baseline_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Jubilee_Valuation2012_Baseline\";
        public string sOutputJubilee_Valuation2012_TradeEAN_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Jubilee_Valuation2012_TradeEAN\";
        public string sOutputJubilee_Valuation2012_TradePUC_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Jubilee_Valuation2012_TradePUC\";
        public string sOutputJubilee_Valuation2012_V67Enhancements_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Jubilee_Valuation2012_V67Enhancements\";

        public string sOutputJubilee_Valuation2012_V69Enhancements_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Jubilee_Valuation2012_V69Enhancements\";

        public string sOutput_Data2013_Prod = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\Production\7.3.2_20181204_E\Data2013\";



        public void GenerateReportOuputDir()
        {

            pMain._SetLanguageAndRegional();

            _BenchmarkUser sCurrentUser = _gLib._ReturnCurrentUser();

            if (sCurrentUser.ToString() == "Others")
            {
                _gLib._MsgBox("Warning !!!", "Your are NOT allowed to create folders in R: drive, Please contact Cindy or Webber if you have to!");
                Environment.Exit(0);
            }
            else
            {
                string sMainDir = @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK REPORTS\QA_DE_Benchmark_010\CreateNew";
                string sPostFix = _gLib._ReturnDateStampYYYYMMDD() + "_" + Config.eEnv.ToString();

                ////  _gLib._MsgBoxYesNo("Are you sure to create folders under below directory ?", sMainDir);

                sOutputPension_Conversion2010 = _gLib._CreateDirectory(sMainDir + "\\Conversion 2010\\" + sPostFix + "\\");
                sOutputPension_Valuation2011_Baseline = _gLib._CreateDirectory(sMainDir + "\\Valuation 2011\\Baseline\\" + sPostFix + "\\");
                sOutputPension_Valuation2011_ConstantNumberOfPlanMembers = _gLib._CreateDirectory(sMainDir + "\\Valuation 2011\\ConstantNumberOfPlanMembers\\" + sPostFix + "\\");
                sOutputPension_Valuation2011_IndividualBeneficiaryMethod = _gLib._CreateDirectory(sMainDir + "\\Valuation 2011\\IndividualBeneficiaryMethod\\" + sPostFix + "\\");
                sOutputPension_Valuation2011_MultiplePasses = _gLib._CreateDirectory(sMainDir + "\\Valuation 2011\\MultiplePasses\\" + sPostFix + "\\");
                sOutputPension_Valuation2012_Baseline = _gLib._CreateDirectory(sMainDir + "\\Valuation 2012\\Baseline\\" + sPostFix + "\\");
                sOutputPension_Valuation2012_MethodScreenChange = _gLib._CreateDirectory(sMainDir + "\\Valuation 2012\\MethodScreenChange\\" + sPostFix + "\\");
                sOutputPension_Valuation2012_SecondMethodScreenChance = _gLib._CreateDirectory(sMainDir + "\\Valuation 2012\\SecondMethodScreenChance\\" + sPostFix + "\\");
                sOutputPension_Valuation2012_V67Enhancements = _gLib._CreateDirectory(sMainDir + "\\Valuation 2012\\V67Enhancements\\" + sPostFix + "\\");

                sOutputJubilee_Conversion2010 = _gLib._CreateDirectory(sMainDir + "\\Jubilee Conversion 2010\\" + sPostFix + "\\");
                sOutputJubilee_Valuation2011_Baseline = _gLib._CreateDirectory(sMainDir + "\\Jubilee Valuation 2011\\Baseline\\" + sPostFix + "\\");
                sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers = _gLib._CreateDirectory(sMainDir + "\\Jubilee Valuation 2011\\ConstantNumberOfPlanMembers\\" + sPostFix + "\\");
                sOutputJubilee_Valuation2012_Baseline = _gLib._CreateDirectory(sMainDir + "\\Jubilee Valuation 2012\\Baseline\\" + sPostFix + "\\");
                sOutputJubilee_Valuation2012_TradeEAN = _gLib._CreateDirectory(sMainDir + "\\Jubilee Valuation 2012\\TradeEAN\\" + sPostFix + "\\");
                sOutputJubilee_Valuation2012_TradePUC = _gLib._CreateDirectory(sMainDir + "\\Jubilee Valuation 2012\\TradePUC\\" + sPostFix + "\\");
                sOutputJubilee_Valuation2012_V67Enhancements = _gLib._CreateDirectory(sMainDir + "\\Jubilee Valuation 2012\\V67Enhancements\\" + sPostFix + "\\");
                sOutputJubilee_Valuation2012_V69Enhancements = _gLib._CreateDirectory(sMainDir + "\\Jubilee Valuation 2012\\V69Enhancements\\" + sPostFix + "\\");

                sOutput_Data2013 = _gLib._CreateDirectory(sMainDir + "\\Data Valuation2013\\" + sPostFix + "\\");

            }

            string sContent = "";
            sContent = sContent + "sOutputPension_Conversion2010 = @\"" + sOutputPension_Conversion2010 + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputPension_Valuation2011_Baseline = @\"" + sOutputPension_Valuation2011_Baseline + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputPension_Valuation2011_ConstantNumberOfPlanMembers = @\"" + sOutputPension_Valuation2011_ConstantNumberOfPlanMembers + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputPension_Valuation2011_IndividualBeneficiaryMethod = @\"" + sOutputPension_Valuation2011_IndividualBeneficiaryMethod + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputPension_Valuation2011_MultiplePasses = @\"" + sOutputPension_Valuation2011_MultiplePasses + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputPension_Valuation2012_Baseline = @\"" + sOutputPension_Valuation2012_Baseline + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputPension_Valuation2012_MethodScreenChange = @\"" + sOutputPension_Valuation2012_MethodScreenChange + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputPension_Valuation2012_SecondMethodScreenChance = @\"" + sOutputPension_Valuation2012_SecondMethodScreenChance + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputPension_Valuation2012_V67Enhancements = @\"" + sOutputPension_Valuation2012_V67Enhancements + "\";" + Environment.NewLine + Environment.NewLine;

            sContent = sContent + "sOutputJubilee_Conversion2010 = @\"" + sOutputJubilee_Conversion2010 + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputJubilee_Valuation2011_Baseline = @\"" + sOutputJubilee_Valuation2011_Baseline + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers = @\"" + sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputJubilee_Valuation2012_Baseline = @\"" + sOutputJubilee_Valuation2012_Baseline + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputJubilee_Valuation2012_TradeEAN = @\"" + sOutputJubilee_Valuation2012_TradeEAN + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputJubilee_Valuation2012_TradePUC = @\"" + sOutputJubilee_Valuation2012_TradePUC + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputJubilee_Valuation2012_V67Enhancements = @\"" + sOutputJubilee_Valuation2012_V67Enhancements + "\";" + Environment.NewLine;
            sContent = sContent + "sOutputJubilee_Valuation2012_V69Enhancements = @\"" + sOutputJubilee_Valuation2012_V69Enhancements + "\";" + Environment.NewLine;

            sContent = sContent + "sOutput_Data2013 = @\"" + sOutput_Data2013 + "\";" + Environment.NewLine;

            _gLib._PrintReportDirectory(sContent);

        }


        #endregion



        #region Fields
        ////private Dictionary<string, string> dic = new Dictionary<string, string>();
        public FutureValuationOption pFutureValuationOption = new FutureValuationOption();
        public UserDefinedProjectionA pUserDefinedProjectionA = new UserDefinedProjectionA();
        public CashBalance pCashBalance = new CashBalance();
        public Versorgungsausgleich pVersorgungsausgleich = new Versorgungsausgleich();
        public SocialSecurity pSocialSecurity = new SocialSecurity();
        public OneYearProjection pOneYearProjection = new OneYearProjection();
        public SocialSecurityContributionCeilings pSocialSecurityContributionCeilings = new SocialSecurityContributionCeilings();
        public ActuarialReport pActuarialReport = new ActuarialReport();
        public PayCredit pPayCredit = new PayCredit();
        public MyDictionary dic = new MyDictionary();
        public ContributionsBasedFormula pContributionsBasedFormula = new ContributionsBasedFormula();
        public FarPoint _fp = new FarPoint();
        public GenericLib_Win _gLib = new GenericLib_Win();
        public Main pMain = new Main();
        public Data pData = new Data();
        public ParticipantDataSet pParticipantDataSet = new ParticipantDataSet();
        public Assumptions pAssumptions = new Assumptions();
        public InterestRate pInterestRate = new InterestRate();
        public PayIncrease pPayIncrease = new PayIncrease();
        public OtherDemographicAssumptions pOtherDemographicAssumptions = new OtherDemographicAssumptions();
        public MortalityDecrement pMortalityDecrement = new MortalityDecrement();
        public Service pService = new Service();
        public Eligibilities pEligibilities = new Eligibilities();
        public PayoutProjection pPayoutProjection = new PayoutProjection();
        public PayAverage pPayAverage = new PayAverage();
        public Vesting pVesting = new Vesting();
        public ActuarialEquivalence pActuarialEquivalence = new ActuarialEquivalence();
        public ConversionFactors pConversionFactors = new ConversionFactors();
        public FormOfPayment pFormOfPayment = new FormOfPayment();
        public Item415Limits p415Limits = new Item415Limits();
        public PlanDefinition pPlanDefinition = new PlanDefinition();
        public Methods pMethods = new Methods();
        public TestCaseLibrary pTestCaseLibrary = new TestCaseLibrary();
        public OutputManager pOutputManager = new OutputManager();
        public Assets pAssets = new Assets();
        public FundingInformation pFundingInformation = new FundingInformation();
        public FundingInformation_PYR_PreliminaryResults pFundingInformation_PYR_PreliminaryResults = new FundingInformation_PYR_PreliminaryResults();
        public FundingInformation_FTAPs pFundingInformation_FTAPs = new FundingInformation_FTAPs();
        public FundingInformation_Shortfall pFundingInformation_Shortfall = new FundingInformation_Shortfall();
        public FundingInformation_ContributionSummary pFundingInformation_ContributionSummary = new FundingInformation_ContributionSummary();
        public OtherEconomicAssumption pOtherEconomicAssumption = new OtherEconomicAssumption();
        public FromToAge pFromToAge = new FromToAge();
        public FAEFormula pFAEFormula = new FAEFormula();
        public EarlyRetirementFactor pEarlyRetirementFactor = new EarlyRetirementFactor();
        public BenefitElections pBenefitElections = new BenefitElections();

        public DefinedBenefitLimitIncrease pDefinedBenefitLimitIncrease = new DefinedBenefitLimitIncrease();
        public AssumedRetirementAge pAssumedRetirementAge = new AssumedRetirementAge();
        public ContractualRetirementAge pContractualRetirementAge = new ContractualRetirementAge();
        public JubileeBenefit pJubileeBenefit = new JubileeBenefit();
        public PlanDefinition_DE pPlanDefinition_DE = new PlanDefinition_DE();
        public TableManager pTableManager = new TableManager();
        public UnitFormula pUnitFormula = new UnitFormula();
        public SocialSecurityContributionRates pSocialSecurityContributionRates = new SocialSecurityContributionRates();
        public ServiceSelection pServiceSelection = new ServiceSelection();
        public ProjectAndProrate pProjectAndProrate = new ProjectAndProrate();
        public CostOfLivingAdjustments pCostOfLivingAdjustments = new CostOfLivingAdjustments();
        public FormOfPayment_DE pFormOfPayment_DE = new FormOfPayment_DE();
        public IndividualOuputFieldDefinition pIndividualOuputFieldDefinition = new IndividualOuputFieldDefinition();
        public Methods_DE pMethods_DE = new Methods_DE();
        public ReportBreaks pReportBreaks = new ReportBreaks();
        public BreakFieldTextSubstitution pBreakFieldTextSubstitution = new BreakFieldTextSubstitution();

        #endregion


        [TestMethod]
        [Timeout(100 * 60 * 60 * 1000)]
        public void test_DE010_CN()
        {

            ////////// utlimate


            #region MultiThreads


            Thread thrd_Pension_Conversion2010 = new Thread(() => new DE010_CN().t_CompareRpt_Pension_Conversion2010(sOutputPension_Conversion2010));
            Thread thrd_Pension_Valuation2011_Baseline = new Thread(() => new DE010_CN().t_CompareRpt_Pension_Valuation2011_Baseline(sOutputPension_Valuation2011_Baseline));
            Thread thrd_Pension_Valuation2011_ConstantNumberOfPlanMembers = new Thread(() => new DE010_CN().t_CompareRpt_Pension_Valuation2011_ConstantNumberOfPlanMembers(sOutputPension_Valuation2011_ConstantNumberOfPlanMembers));
            Thread thrd_Pension_Valuation2011_IndividualBeneficiaryMethod = new Thread(() => new DE010_CN().t_CompareRpt_Pension_Valuation2011_IndividualBeneficiaryMethod(sOutputPension_Valuation2011_IndividualBeneficiaryMethod));
            Thread thrd_Pension_Valuation2011_MultiplePasses = new Thread(() => new DE010_CN().t_CompareRpt_Pension_Valuation2011_MultiplePasses(sOutputPension_Valuation2011_MultiplePasses));
            Thread thrd_Pension_Valuation2012_Baseline = new Thread(() => new DE010_CN().t_CompareRpt_Pension_Valuation2012_Baseline(sOutputPension_Valuation2012_Baseline));
            Thread thrd_Pension_Valuation2012_MethodScreenChange = new Thread(() => new DE010_CN().t_CompareRpt_Pension_Valuation2012_MethodScreenChange(sOutputPension_Valuation2012_MethodScreenChange));
            Thread thrd_Pension_Valuation2012_SecondMethodScreenChance = new Thread(() => new DE010_CN().t_CompareRpt_Pension_Valuation2012_SecondMethodScreenChance(sOutputPension_Valuation2012_SecondMethodScreenChance));
            Thread thrd_Jubilee_Conversion2010 = new Thread(() => new DE010_CN().t_CompareRpt_Jubilee_Conversion2010(sOutputJubilee_Conversion2010));
            Thread thrd_Jubilee_Valuation2011_Baseline = new Thread(() => new DE010_CN().t_CompareRpt_Jubilee_Valuation2011_Baseline(sOutputJubilee_Valuation2011_Baseline));
            Thread thrd_Jubilee_Valuation2011_ConstantNumberOfPlanMembers = new Thread(() => new DE010_CN().t_CompareRpt_Jubilee_Valuation2011_ConstantNumberOfPlanMembers(sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers));
            Thread thrd_Jubilee_Valuation2012_Baseline = new Thread(() => new DE010_CN().t_CompareRpt_Jubilee_Valuation2012_Baseline(sOutputJubilee_Valuation2012_Baseline));
            Thread thrd_Jubilee_Valuation2012_TradeEAN = new Thread(() => new DE010_CN().t_CompareRpt_Jubilee_Valuation2012_TradeEAN(sOutputJubilee_Valuation2012_TradeEAN));
            Thread thrd_Jubilee_Valuation2012_TradePUC = new Thread(() => new DE010_CN().t_CompareRpt_Jubilee_Valuation2012_TradePUC(sOutputJubilee_Valuation2012_TradePUC));
            Thread thrd_Jubilee_Valuation2012_V67Enhancements = new Thread(() => new DE010_CN().t_CompareRpt_Jubilee_Valuation2012_V67Enhancements(sOutputJubilee_Valuation2012_V67Enhancements));
            Thread thrd_Jubilee_Valuation2012_V69Enhancements = new Thread(() => new DE010_CN().t_CompareRpt_Jubilee_Valuation2012_V69Enhancements(sOutputJubilee_Valuation2012_V69Enhancements));

            #endregion

            

            this.GenerateReportOuputDir();


            #region Create client

            pMain._Initialize();

            pMain._DeleteClientIfExists(Config.sClientName, Config.iTimeout / 10);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("TypeClientName", "");
            dic.Add("TreeViewClientName", "");
            dic.Add("AddClient", "Click");
            dic.Add("Title", "");
            dic.Add("DeleteClient", "");
            dic.Add("AddPlan", "");
            pMain._PopVerify_PMTool(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CustomClient", "True");
            dic.Add("MetrixClient", "");
            dic.Add("ClientName", Config.sClientName);
            dic.Add("ClientCode", "QADE010");
            dic.Add("FiscalYearEnd", "12/31");
            dic.Add("MeasurementDate", "12/31");
            dic.Add("Notes", "Client Owner: Heinzman Stefan" + Environment.NewLine + "German Futur Val Benchmark" + Environment.NewLine
                + "Date Created:" + _gLib._ReturnDateStampYYYYMMDD() + Environment.NewLine + Environment.NewLine + "DO NOT TOUCH - BENCHMARK CLIENT");
            dic.Add("DataCenter", Config.sDataCenter);
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_PMTool_Client(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("TypeClientName", "");
            dic.Add("TreeViewClientName", Config.sClientName);
            dic.Add("AddClient", "");
            dic.Add("Title", "");
            dic.Add("DeleteClient", "");
            dic.Add("AddPlan", "Click");
            pMain._PopVerify_PMTool(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Country", "Germany");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_PMTool_CountrySelection(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("TeilbereichName", Config.sPlanName);
            dic.Add("DefaultValuationDate", "31.12");
            dic.Add("Memo", "");
            dic.Add("Confidential", "");
            dic.Add("PublicSectorProjection", "");
            dic.Add("OK", "Click");
            pMain._PopVerify_PMTool_TeilbereichAlle(dic);


            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            pMain._HomeTreeViewSelect(0, dic);



            _gLib._MsgBox("Mannual Interaction", "Please mannually click on plan: " + Config.sClientName + ">>" + Config.sPlanName);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("AddVOtoRegistry", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EnterVOShortName", "DECO01");
            dic.Add("ConfirmVOShortName", "DECO01");
            dic.Add("VOLongName", "Deferred Compensation");
            dic.Add("VOClass", "");
            dic.Add("FundingVehicle", "");
            dic.Add("TypeOfPromise", "Defined Benefit with Contribution");
            dic.Add("Sponsor", "Employee");
            dic.Add("PSVCoverage", "True");
            dic.Add("ExculdeWidowers", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("InternationalAccounting", "");
            dic.Add("Apply30g", "true");
            dic.Add("OK", "Click");
            pMain._PopVerify_CreateNewVO(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("AddVOtoRegistry", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EnterVOShortName", "JUBI01");
            dic.Add("ConfirmVOShortName", "JUBI01");
            dic.Add("VOLongName", "Jubilee");
            dic.Add("VOClass", "Jubilee");
            dic.Add("FundingVehicle", "");
            dic.Add("TypeOfPromise", "");
            dic.Add("Sponsor", "");
            dic.Add("PSVCoverage", "");
            dic.Add("ExculdeWidowers", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("InternationalAccounting", "");
            dic.Add("Apply30g", "");
            dic.Add("OK", "Click");
            pMain._PopVerify_CreateNewVO(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("AddVOtoRegistry", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EnterVOShortName", "PENS01");
            dic.Add("ConfirmVOShortName", "PENS01");
            dic.Add("VOLongName", "Fix Amount per Year of Service");
            dic.Add("VOClass", "");
            dic.Add("FundingVehicle", "");
            dic.Add("TypeOfPromise", "");
            dic.Add("Sponsor", "");
            dic.Add("PSVCoverage", "true");
            dic.Add("ExculdeWidowers", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("InternationalAccounting", "");
            dic.Add("Apply30g", "");
            dic.Add("OK", "Click");
            pMain._PopVerify_CreateNewVO(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("AddVOtoRegistry", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EnterVOShortName", "PENS02");
            dic.Add("ConfirmVOShortName", "PENS02");
            dic.Add("VOLongName", "Final Average Earnings");
            dic.Add("VOClass", "");
            dic.Add("FundingVehicle", "");
            dic.Add("TypeOfPromise", "");
            dic.Add("Sponsor", "");
            dic.Add("PSVCoverage", "true");
            dic.Add("ExculdeWidowers", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("InternationalAccounting", "");
            dic.Add("Apply30g", "");
            dic.Add("OK", "Click");
            pMain._PopVerify_CreateNewVO(dic);

            #endregion


            #region Data - Conversion2010

            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "ParticipantData");
            pMain._HomeTreeViewSelect(0, dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "Conversion 2010");
            dic.Add("EffectiveDate", "31.12.2010");
            dic.Add("Parent", "");
            dic.Add("RSC", "");
            dic.Add("Shared", "True");
            dic.Add("GeneralUse", "True");
            dic.Add("Conversion", "");
            dic.Add("CopyDataService", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_DataServicePropeties(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Conversion 2010");
            dic.Add("CheckPopup", "False");
            pMain._PopVerify_Home_RightPane(dic);


            pData._ts_UpdateIncludedVOs("DECO01", true);
            pData._ts_UpdateIncludedVOs("JUBI01", true);
            pData._ts_UpdateIncludedVOs("PENS01", true);
            pData._ts_UpdateIncludedVOs("PENS02", true);


            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Upload Data");
            pData._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\Input_DECO_2010.xls");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\Input_JUBI_2010.xls");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\Input_PENS01_2010_including VOsuffix.xls");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\Input_PENS02_2010_including VOsuffix.xls");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\NewIndividualMethodPeople.xls");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);



            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Current View");
            pData._TreeViewSelect(dic);


            pData._CV_Initialize("Personal Information", "Legacy System Results", 1, 0, "LegacyTaxAL");
            pData._CV_Initialize("Personal Information", "Last Year", 1, 0, "LYOverwriteResults");
            pData._CV_Initialize("Personal Information", "Classification Codes", 1, 0, "SubsidiaryCode");
            pData._CV_Initialize("Personal Information", "DB Information", 1, 0, "MembershipDate1");

            pData._CV_ExpandPersonalInformation();

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Category", "Pay");
            dic.Add("Label", "Pay1");
            dic.Add("DisplayName", "");
            dic.Add("VariesbyVO", "");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._CV_AddSingleLabel(dic, false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Category", "Pay");
            dic.Add("Label", "JubiSalary");
            dic.Add("DisplayName", "");
            dic.Add("VariesbyVO", "");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._CV_AddSingleLabel(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Category", "Pay");
            dic.Add("Label", "SVSalary");
            dic.Add("DisplayName", "");
            dic.Add("VariesbyVO", "");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._CV_AddSingleLabel(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Category", "DC Information");
            dic.Add("Label", "EeContribRate1Custom");
            dic.Add("DisplayName", "");
            dic.Add("VariesbyVO", "");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._CV_AddSingleLabel(dic, true);



            pData._CV_ClickEdit("CashTransfer", false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("DistributionFlag", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("NewDeficit", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);

            pData._CV_ClickEdit("PensionPromiseDate", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("SubDivisionCode", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYOverwriteResults", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYBenefit1DB", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYBookReserve", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYDeficit", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYInactiveBenefitCurrentYear", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYLumpSumBenefitRetAssumedRetAge", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYNewDistribution", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYOutstandingDistribution", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYPension", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYPensionBenefitRetAssumedRetAge", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);

            pData._CV_ClickEdit("LYPremiumTax", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYPV", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYTeilwert", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYTeilwertNY", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYValuationSalary", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYTradeAL", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LYTradeNC", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LegacyTaxAL", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LegacyTaxNC", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LegacyBookReserve", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LegacyTradeAL", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LegacyTradeNC", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LegacyIntAccountingPBOAL", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LegacyIntAccountingPBONC", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LegacyIntAccountingABOAL", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);


            pData._CV_ClickEdit("LegacyIntAccountingABONC", true, 8);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Label", "");
            dic.Add("DisplayName", "");
            dic.Add("SelectAnExistingWHField", "");
            dic.Add("ExistingWHField", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "");
            dic.Add("FieldLength", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_CV_AddLabel(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "Upload PENS01 Data");
            dic.Add("FileType", "");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "Input_PENS01_2010_includingVOsuffix.xls");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);


            pData._SelectTab("Mapping");

            pData._IP_Mapping_Initialize("Personal Information", "Personal Information", 1, 0, 1, "IsEligible_VOParent");
            pData._IP_Mapping_Initialize("Personal Information", "Pay", 2, 13, 1, "Pay1");
            pData._IP_Mapping_Initialize("Personal Information", "Pay1", 3, 13, 1, "Pay1CurrentYear");

            pData._IP_Mapping_MapField("Pay1CurrentYear", "PayCurrentYear", 0, true);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "Upload PENS01 Data");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "Unload PENS02 Data");
            dic.Add("FileType", "Excel file");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "Input_PENS02_2010_includingVOsuffix.xls");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);


            pData._SelectTab("Mapping");

            pData._IP_Mapping_Initialize("Personal Information", "Personal Information", 1, 0, 1, "IsEligible_VOParent");
            pData._IP_Mapping_Initialize("Personal Information", "Pay", 2, 13, 1, "Pay1");
            pData._IP_Mapping_Initialize("Personal Information", "Pay1", 3, 13, 1, "Pay1CurrentYear");

            pData._IP_Mapping_MapField("Pay1CurrentYear", "PayCurrentYear", 0, true);



            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "Upload PENS01 Data");
            pData._TreeViewSelect(dic);

            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            dic.Add("WarehouseFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "105");
            dic.Add("Unique_UniqueMatch_Num", "0");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "0");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "Click");
            dic.Add("Unique_UniqueMatch", "");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "New");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of New");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "All 'UniqueNoMatch' records have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "Upload Deferred Compensation");
            dic.Add("FileType", "Excel file");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "Input_DECO_2010.xls");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);


            pData._SelectTab("Mapping");

            pData._IP_Mapping_Initialize("Personal Information", "DC Information", 1, 0, 1, "EeContribRate1");
            pData._IP_Mapping_MapField("EeContribRate1Custom", "EeContribRate1", 0, true);


            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            dic.Add("WarehouseFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "0");
            dic.Add("Unique_UniqueMatch_Num", "19");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "86");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "Click");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "Matched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Matched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "All 'UniqueUniqueMatch' records have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "Click");
            dic.Add("AcceptAllRecordsAs_What", "Unmatched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Unmatched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Once the matching results have been processed, all the Import parameters for this file will become read-only. Do you wish to proceed?");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "The matching results have now been processed. All the Import parameters for this file are now read-only.");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "Unload Jubilee Data");
            dic.Add("FileType", "Excel file");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "Input_JUBI_2010.xls");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);


            pData._SelectTab("Mapping");

            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            dic.Add("WarehouseFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "0");
            dic.Add("Unique_UniqueMatch_Num", "89");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "16");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "Click");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "Matched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Matched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "All 'UniqueUniqueMatch' records have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "Click");
            dic.Add("AcceptAllRecordsAs_What", "Unmatched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Unmatched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "The matching results have now been processed. All the Import parameters for this file are now read-only.");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("MenuItem", "Add new derivation group");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "IsEligible and Pay stuff");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "IsEligible_PENS02");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Classification Codes");
            dic.Add("Level_3", "PenFlag");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(PENFlag_C=\"PENS02\", 1, 0)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Filters");
            pData._TreeViewSelect(dic);

            pData._FL_Grid("Custom", 10, false);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddFilter", "Click");
            dic.Add("DeleteHighlightedFilter", "");
            pData._PopVerify_Filters(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "Pensionsordnung2");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "IsEligible_VOParent");
            dic.Add("Level_4", "IsEligible_PENS02");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(IsEligible_PENS02_C=1, TRUE, FALSE)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("Level_3", "(4)IsEligible and Pay stuff");
            pData._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Pay1CurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Classification Codes");
            dic.Add("Level_3", "SalariedFlag");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "Pensionsordnung2");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(SalariedFlag_C=0, Pay1CurrentYear_C*12.5, Pay1CurrentYear_C)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "3");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "ATZ");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=0");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "4");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "SubDivisionCode_PENS02");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=\"PENS\"");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "5");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "USC");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "ParticipantStatus");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "PayStatus");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "HealthStatus");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "AliveStatus");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=DeriveUSC(ParticipantStatus_C, PayStatus_C, HealthStatus_C, AliveStatus_C)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "6");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "LYUSC");
            dic.Add("DerivedField_SearchFromIndex", "130");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYParticipantStatus");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYPayStatus");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYHealthStatus");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYAliveStatus");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=DeriveUSC(LYParticipantStatus_C, LYPayStatus_C, LYHealthStatus_C, LYAliveStatus_C)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "7");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "IsEligible_PENS01");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Classification Codes");
            dic.Add("Level_3", "PenFlag");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(PENFlag_C=\"PENS01\", 1, 0)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "8");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "SubDivisionCode_PENS01");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=\"PENS\"");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "9");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "IsEligible_DECO01");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "DC Information");
            dic.Add("Level_3", "EeContribRate1Custom");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "DC Information");
            dic.Add("Level_3", "EeAccountBalance1");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(OR(EeAccountBalance1_C>0, EeContribRate1Custom_C>0), 1, 0)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "10");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "IsEligible_JUBI01");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "USC");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Classification Codes");
            dic.Add("Level_3", "JubFlag");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(AND(JubFlag_C=\"JUB01\", USC_C=10), 1, 0)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "11");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Pay1CurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "Pensionsordnung2");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=ROUND(Pay1CurrentYear_C/12.5,2)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Conversion 2010");
            dic.Add("Level_2", "Snapshots");
            dic.Add("MenuItem", "Add new snapshot");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            pData._TreeViewSelect_Snapshots(dic, true);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYInactiveBenefitCurrentYearTrade");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYPremiumTrade");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYTeilwertNYTrade");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYTeilwertTrade");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Administration");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "Unload 2010");
            dic.Add("UseLatestDate", "");
            dic.Add("Preview", "Click");
            dic.Add("PublishSnapshot", "Click");
            dic.Add("CreateExtract", "");
            pData._PopVerify_Snapshots(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "click");
            pData._PopVerify_SP_Snapshots_Popup(dic);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion


            #region Pension - Conversion2010

            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "PensionValuations");
            pMain._HomeTreeViewSelect(0, dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ConversionService", "True");
            dic.Add("Name", "Conversion 2010");
            dic.Add("Parent", "");
            dic.Add("ParentFinalValuationSet", "");
            dic.Add("PlanYearBeginningIn", "");
            dic.Add("FiscalYearEndingIn_Accounting", "");
            dic.Add("FirstYearPlanUnderPPA", "");
            dic.Add("PlanYearEndingIn_DE", "2010");
            dic.Add("RSC", "");
            dic.Add("LocalMarket", "");
            dic.Add("Shared", "True");
            dic.Add("SelectAllVO", "click");
            dic.Add("DeselectAll", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_ServicePropeties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Conversion 2010");
            pMain._PopVerify_Home_RightPane(dic);


            pMain._SelectTab("Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Data");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Participant DataSet");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "Click");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "Unload 2010");
            dic.Add("OK", "Click");
            dic.Add("RetainThePreviousUnload", "");
            dic.Add("SpecifyANewSnapshotRetainingPrevious", "");
            dic.Add("SpecifyANewSnapshotRevertingAllFields", "");
            dic.Add("SpecifyANewUnload", "");
            dic.Add("SelectSnapshotOption_OK", "");
            pParticipantDataSet._PopVerify_SelectSnapshotDefinition(dic);


            pParticipantDataSet._Initialzie();

            dic.Clear();
            dic.Add("Level_1", "DC Information");
            dic.Add("Level_2", "EeContribRate1");
            dic.Add("Data", "EeContribRate1Custom");
            pParticipantDataSet._MapField(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "Click");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Conversion 2010");

            string sTable_DECOConversionTable_M = "";
            string sTable_DECOConversionTable_F = "";


            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "100,000000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "93,900000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "88,900000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "84,200000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "79,700000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "75,500000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "71,500000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "67,700000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "64,000000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "60,600000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "57,400000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "54,400000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "51,600000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "48,900000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "46,400000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "44,000000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "41,700000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "39,600000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "37,600000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "35,700000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "33,900000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "32,200000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "30,600000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "29,100000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "27,700000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "26,400000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "25,100000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "23,900000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "22,700000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "21,700000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "20,600000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "19,600000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "18,700000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "17,800000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "17,000000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "16,200000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "15,400000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "14,700000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "14,000000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "13,400000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "12,800000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "12,300000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "11,800000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "11,300000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "10,900000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "10,500000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "9,800000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "9,200000" + Environment.NewLine;

            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "8,700000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "8,200000" + Environment.NewLine;
            sTable_DECOConversionTable_M = sTable_DECOConversionTable_M + "7,600000" + Environment.NewLine;



            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "0,000000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "93,900000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "88,900000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "84,200000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "79,700000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "75,500000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "71,500000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "67,700000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "64,000000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "60,600000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "57,400000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "54,400000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "51,600000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "48,900000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "46,400000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "44,000000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "41,700000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "39,600000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "37,600000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "35,700000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "33,900000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "32,200000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "30,600000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "29,100000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "27,700000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "26,400000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "25,100000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "23,900000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "22,700000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "21,700000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "20,600000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "19,600000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "18,700000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "17,800000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "17,000000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "16,200000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "15,400000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "14,700000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "14,000000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "13,400000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "12,800000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "12,300000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "11,800000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "11,300000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "10,900000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "10,500000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "9,800000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "9,200000" + Environment.NewLine;

            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "8,700000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "8,200000" + Environment.NewLine;
            sTable_DECOConversionTable_F = sTable_DECOConversionTable_F + "7,600000" + Environment.NewLine;


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "DECOConversionTable");
            dic.Add("Type", "General");
            dic.Add("Description", "");
            dic.Add("Ultimate", "true");
            dic.Add("Generational", "");
            dic.Add("TwoDimensional", "");
            dic.Add("Index1_Index", "Age");
            dic.Add("Index1_From", "15");
            dic.Add("Index1_To", "65");
            dic.Add("Extend", "");
            dic.Add("Zero", "true");
            dic.Add("SameRatesUsed", "");
            dic.Add("Format", "");
            dic.Add("DecimalPlaces", "");
            dic.Add("OK", "Click");
            dic.Add("sUnisexRates", "");
            dic.Add("sMaleRates", sTable_DECOConversionTable_M);
            dic.Add("sFemaleRates", sTable_DECOConversionTable_F);
            pMain._ts_AddTable(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Assumptions");


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Assumed Retirement Age");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Calculate", "True");
            dic.Add("FromData", "");
            dic.Add("CustomCode", "");
            pAssumedRetirementAge._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FromData", "True");
            dic.Add("CustomCode", "");
            dic.Add("AssumedRetirementAge_V", "Click");
            dic.Add("AssumedRetirementAge_C", "");
            dic.Add("AssumedRetirementAge_cbo", "AssumedRetirementAge");
            dic.Add("AssumedRetirementAge_txt", "");
            pAssumedRetirementAge._PopVerify_FromData(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Assumed Retirement Age");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Calculate", "True");
            dic.Add("FromData", "");
            dic.Add("CustomCode", "");
            pAssumedRetirementAge._PopVerify_Main(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Assumed Retirement Age");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Calculate", "True");
            dic.Add("FromData", "");
            dic.Add("CustomCode", "");
            pAssumedRetirementAge._PopVerify_Main(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "True");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "click");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "5,15");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Alt Trade Proj Int");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "true");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "");
            dic.Add("Rate", "Trade interest rate (7 years)");
            dic.Add("AsOfDate", "");
            pInterestRate._PopVerify_PrescribedRates(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "True");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "click");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "5,0");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Pay Increase");
            dic.Add("MenuItem", "Add Pay Increase");
            pAssumptions._TreeViewRightSelect(dic, "AsPI_PayIncreaseRate");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Pay Increase");
            dic.Add("Level_3", "AsPI_PayIncreaseRate");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Pay Increase");
            dic.Add("Level_3", "AsPI_PayIncreaseRate");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "Click");
            dic.Add("btnT", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "");
            dic.Add("btnT", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Pay Increase");
            dic.Add("Level_3", "AsPI_PayIncreaseRate");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "Click");
            dic.Add("btnT", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "");
            dic.Add("btnT", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Cost of Living Increase");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Cost of Living Increase");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "Click");
            dic.Add("btnT", "");
            dic.Add("txtRate", "2,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "");
            dic.Add("btnT", "");
            dic.Add("txtRate", "2,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Cost of Living Increase");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "Click");
            dic.Add("btnT", "");
            dic.Add("txtRate", "2,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "");
            dic.Add("btnT", "");
            dic.Add("txtRate", "2,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            dic.Add("AsOfDate", "");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            dic.Add("AsOfDate", "");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            dic.Add("AsOfDate", "");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);



            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "");
            dic.Add("AdjustFactorrFromNextToGross", "");
            dic.Add("TaxTariff", "2010");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "");
            dic.Add("AdjustFactorrFromNextToGross", "");
            dic.Add("TaxTariff", "2010");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "");
            dic.Add("AdjustFactorrFromNextToGross", "");
            dic.Add("TaxTariff", "2010");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);



            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Withdrawal Decrement");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Withdrawal Decrement");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Withdrawal Decrement");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "DECO");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Withdrawal Decrement");
            dic.Add("Level_3", "DECO");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.VOShortName=\"DECO01\"");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Withdrawal Decrement");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "DECO");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Withdrawal Decrement");
            dic.Add("Level_3", "DECO");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.VOShortName=\"DECO01\"");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            pMain._Home_ToolbarClick_Top(true);

            #region  Common Update Code for DE - Update Assumptions

            pMain._SelectTab("Assumptions");

            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Demographic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("cboPrescribedRates", "Heubeck 2005 G");
            dic.Add("ApplyPercentMarriedAt", "");
            dic.Add("btnPercentMarried_Percent", "");
            dic.Add("btnPercentMarried_T", "");
            dic.Add("txtPercentMarried_M", "");
            dic.Add("txtPercentMarried_F", "");
            dic.Add("cboPercentMarried", "");
            dic.Add("btnDifferenceInSpouseAge_CIcon", "");
            dic.Add("btnDifferenceInSpouseAge_TIcon", "");
            dic.Add("txtDifferenceInSpouseAge_M", "");
            dic.Add("txtDifferenceInSpouseAge_F", "");
            dic.Add("cboDifferenceInSpouseAge", "");
            dic.Add("DifferenceInOrphanAge", "");
            dic.Add("NumberOfChildren", "");
            pOtherDemographicAssumptions._PopVerify_OtherDemographicAssumptions(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Demographic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("cboPrescribedRates", "Heubeck 2005 G");
            dic.Add("ApplyPercentMarriedAt", "");
            dic.Add("btnPercentMarried_Percent", "");
            dic.Add("btnPercentMarried_T", "");
            dic.Add("txtPercentMarried_M", "");
            dic.Add("txtPercentMarried_F", "");
            dic.Add("cboPercentMarried", "");
            dic.Add("btnDifferenceInSpouseAge_CIcon", "");
            dic.Add("btnDifferenceInSpouseAge_TIcon", "");
            dic.Add("txtDifferenceInSpouseAge_M", "");
            dic.Add("txtDifferenceInSpouseAge_F", "");
            dic.Add("cboDifferenceInSpouseAge", "");
            dic.Add("DifferenceInOrphanAge", "");
            dic.Add("NumberOfChildren", "");
            pOtherDemographicAssumptions._PopVerify_OtherDemographicAssumptions(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Demographic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("cboPrescribedRates", "Heubeck 2005 G");
            dic.Add("ApplyPercentMarriedAt", "");
            dic.Add("btnPercentMarried_Percent", "");
            dic.Add("btnPercentMarried_T", "");
            dic.Add("txtPercentMarried_M", "");
            dic.Add("txtPercentMarried_F", "");
            dic.Add("cboPercentMarried", "");
            dic.Add("btnDifferenceInSpouseAge_CIcon", "");
            dic.Add("btnDifferenceInSpouseAge_TIcon", "");
            dic.Add("txtDifferenceInSpouseAge_M", "");
            dic.Add("txtDifferenceInSpouseAge_F", "");
            dic.Add("cboDifferenceInSpouseAge", "");
            dic.Add("DifferenceInOrphanAge", "");
            dic.Add("NumberOfChildren", "");
            pOtherDemographicAssumptions._PopVerify_OtherDemographicAssumptions(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Mortality Decrement");
            dic.Add("Level_3", "USC40");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Mortality Decrement");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Mortality Decrement");
            dic.Add("Level_3", "USC40");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Mortality Decrement");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Mortality Decrement");
            dic.Add("Level_3", "USC40");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Mortality Decrement");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);



            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Disability Decrement");
            dic.Add("Level_3", "USC40");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Other", "True");
            dic.Add("Adjustments", "");
            dic.Add("RetWithdrawDis", "ZERODIS");
            dic.Add("Service", "");
            dic.Add("AdjustmentOperator", "");
            dic.Add("Adjustment_C", "");
            dic.Add("Adjustment_P", "");
            dic.Add("Adjustment_T", "");
            dic.Add("Adjustment_txt", "");
            dic.Add("Adjustment_Tcbo", "");
            dic.Add("Adjustment_Tcbo_extend", "");
            pAssumptions._PopVerify_Assmp_Decrement_Parameters(dic);



            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Disability Decrement");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Disability Decrement");
            dic.Add("Level_3", "USC40");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Other", "True");
            dic.Add("Adjustments", "");
            dic.Add("RetWithdrawDis", "ZERODIS");
            dic.Add("Service", "");
            dic.Add("AdjustmentOperator", "");
            dic.Add("Adjustment_C", "");
            dic.Add("Adjustment_P", "");
            dic.Add("Adjustment_T", "");
            dic.Add("Adjustment_txt", "");
            dic.Add("Adjustment_Tcbo", "");
            dic.Add("Adjustment_Tcbo_extend", "");
            pAssumptions._PopVerify_Assmp_Decrement_Parameters(dic);



            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Disability Decrement");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Disability Decrement");
            dic.Add("Level_3", "USC40");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Other", "True");
            dic.Add("Adjustments", "");
            dic.Add("RetWithdrawDis", "ZERODIS");
            dic.Add("Service", "");
            dic.Add("AdjustmentOperator", "");
            dic.Add("Adjustment_C", "");
            dic.Add("Adjustment_P", "");
            dic.Add("Adjustment_T", "");
            dic.Add("Adjustment_txt", "");
            dic.Add("Adjustment_Tcbo", "");
            dic.Add("Adjustment_Tcbo_extend", "");
            pAssumptions._PopVerify_Assmp_Decrement_Parameters(dic);

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Disability Decrement");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);

            pMain._Home_ToolbarClick_Top(true);

            #endregion


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Provisions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Provisions");


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_PensionableService");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_PensionableService");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_ServiceForProration");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_ServiceForProration");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceAtValuationDate", "");
            dic.Add("ServiceAsAFunction", "");
            dic.Add("RulesBasedService", "");
            dic.Add("CustomCode", "");
            dic.Add("ForInternationalAccounting_DE", "true");
            dic.Add("ForTrade_DE", "true");
            dic.Add("UseServiceCa", "");
            pService._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_V", "");
            dic.Add("ServiceStarts_C", "");
            dic.Add("ServiceStarts_cbo", "");
            dic.Add("ServiceStarts_txt", "");
            dic.Add("ServiceStarts_FixedDate", "");
            dic.Add("ServiceStarts_Date", "HireDate1");
            dic.Add("ServiceEnds_V", "");
            dic.Add("ServiceEnds_C", "");
            dic.Add("ServiceEnds_cbo", "");
            dic.Add("ServiceEnds_txt", "");
            dic.Add("ServiceEnds_FixedDate", "");
            dic.Add("ServiceEnds_Date", "");
            pService._PopVerify_RulesBasedService_UseServiceCap_DE(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_ServiceForWaitingPeriod");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_ServiceForWaitingPeriod");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_V", "");
            dic.Add("ServiceStarts_C", "");
            dic.Add("ServiceStarts_cbo", "");
            dic.Add("ServiceStarts_txt", "");
            dic.Add("ServiceStarts_FixedDate", "");
            dic.Add("ServiceStarts_Date", "HireDate1");
            dic.Add("ServiceEnds_V", "");
            dic.Add("ServiceEnds_C", "");
            dic.Add("ServiceEnds_cbo", "");
            dic.Add("ServiceEnds_txt", "");
            dic.Add("ServiceEnds_FixedDate", "");
            dic.Add("ServiceEnds_Date", "");
            pService._PopVerify_RulesBasedService_UseServiceCap_DE(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            dic.Add("MenuItem", "Add From/To Age");
            pAssumptions._TreeViewRightSelect(dic, "FTA_WaitingPeriodOver");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            dic.Add("Level_5", "FTA_WaitingPeriodOver");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("InsertRow", "");
            dic.Add("AddRow", "");
            dic.Add("iRow", "1");
            dic.Add("SSNRA_Exists", "false");
            dic.Add("SSNRA", "");
            dic.Add("FixedAge", "15");
            dic.Add("YearOfService", "0");
            dic.Add("RuleOf", "");
            dic.Add("DateConstant", "");
            dic.Add("DateField", "");
            dic.Add("ServiceBasedOn", "SVC_ServiceForWaitingPeriod");
            dic.Add("AgeBasedOn", "");
            dic.Add("Comparison", "");
            pFromToAge._StandardTable_NotUS(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            dic.Add("MenuItem", "Add From/To Age");
            pAssumptions._TreeViewRightSelect(dic, "FTA_PensionPromise");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            dic.Add("Level_5", "FTA_PensionPromise");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("InsertRow", "");
            dic.Add("AddRow", "");
            dic.Add("iRow", "1");
            dic.Add("SSNRA_Exists", "false");
            dic.Add("SSNRA", "");
            dic.Add("FixedAge", "");
            dic.Add("YearOfService", "");
            dic.Add("RuleOf", "");
            dic.Add("DateConstant", "");
            dic.Add("DateField", "PensionPromiseDate");
            dic.Add("ServiceBasedOn", "");
            dic.Add("AgeBasedOn", "");
            dic.Add("Comparison", "");
            pFromToAge._StandardTable_NotUS(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Eligibilities");
            dic.Add("MenuItem", "Add Eligibilities");
            pAssumptions._TreeViewRightSelect(dic, "EL_WaitingPeriod");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Eligibilities");
            dic.Add("Level_5", "EL_WaitingPeriod");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Formula", "$Age>= $FTA_WaitingPeriodOver");
            dic.Add("Validate", "Click");
            pEligibilities._PopVerify_Eligibilities(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Eligibilities");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Projection");
            dic.Add("MenuItem", "Add Pay Projection");
            pAssumptions._TreeViewRightSelect(dic, "PP_ProjectedPay");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Projection");
            dic.Add("Level_5", "PP_ProjectedPay");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("History", "");
            dic.Add("PresentYear", "true");
            dic.Add("FunctionOfOtherProjections", "");
            dic.Add("CustomCode", "");
            dic.Add("PlanPayLimitDefinition", "");
            dic.Add("ApplyDeduction", "");
            dic.Add("LegislatedPayLimitDefinition", "");
            pPayoutProjection._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("UseCurrentYearPayRateFrom", "Pay1CurrentYear");
            dic.Add("PayIncreaseAssumption", "AsPI_PayIncreaseRate");
            pPayoutProjection._PopVerify_PresentYear(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("MenuItem", "Add Pay Average");
            pAssumptions._TreeViewRightSelect(dic, "PA_AveragePay");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("Level_5", "PA_AveragePay");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "True");
            dic.Add("CustomCode", "");
            dic.Add("ApplyAveragePayLimit", "");
            dic.Add("ApplyPayAverageFreezeDefinition", "");
            dic.Add("ApplyAverageAtFutureAge", "");
            pPayAverage._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayProjectionToAverage", "PP_ProjectedPay");
            dic.Add("AveragingMethod", "");
            dic.Add("M", "1");
            dic.Add("RoundingForYearOfHire", "");
            dic.Add("DecimalPlacesForYearOfHire", "");
            dic.Add("Include", "");
            dic.Add("DropForCalculations", "");
            dic.Add("DropForCalculationAndPeriodConsidered", "");
            pPayAverage._PopVerify_Standard(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Participant Info");
            pAssumptions._Collapse(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Pay Credit");
            dic.Add("MenuItem", "Add Pay Credit");
            pAssumptions._TreeViewRightSelect(dic, "PC_Contribution");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Pay Credit");
            dic.Add("Level_6", "PC_Contribution");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "Round($emp.EeContribRate1/100,2)");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Contributions Based Formula");
            dic.Add("MenuItem", "Add Contributions Based Formula");
            pAssumptions._TreeViewRightSelect(dic, "CBF_Account");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Contributions Based Formula");
            dic.Add("Level_6", "CBF_Account");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SimpleLinearization", "");
            dic.Add("FormulaCalculated", "");
            dic.Add("PreDefinedAmount", "True");
            dic.Add("AccountBalance", "EeAccountBalance1");
            dic.Add("PriodYear", "true");
            dic.Add("StartAge", "FTA_PensionPromise");
            dic.Add("PreDefinedAmount_cbo", "PC_Contribution");
            dic.Add("TransformationRate_Percent", "");
            dic.Add("TransformationRate_Rate", "");
            dic.Add("TransformationRate_T", "click");
            dic.Add("TransformationRate_T_cbo", "DECOConversionTable");
            pContributionsBasedFormula._ContributionsBasedFormula(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("MenuItem", "Add Custom Formula B");
            pAssumptions._TreeViewRightSelect(dic, "CFB_FinalBenefit");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$CBF_Account");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "DefVestedFixed");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("Level_7", "DefVestedFixed");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$emp.Benefit1DB");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$_DefVestedFixed");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Vesting");
            dic.Add("MenuItem", "Add Vesting");
            pAssumptions._TreeViewRightSelect(dic, "VST_LegalVesting");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Vesting");
            dic.Add("Level_5", "VST_LegalVesting");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Cost of Living Adjustments");
            dic.Add("MenuItem", "Add Cost of Living Adjustments");
            pAssumptions._TreeViewRightSelect(dic, "COLA_CostOfLivingAdjustment");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Cost of Living Adjustments");
            dic.Add("Level_5", "COLA_CostOfLivingAdjustment");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("MinandMaxCOLAPerAnnum", "true");
            dic.Add("COLA_After_V", "");
            dic.Add("COLA_After_Percent", "");
            dic.Add("COLA_After_T", "");
            dic.Add("Rate_cbo", "");
            dic.Add("Rate_cbo_V", "");
            pCostOfLivingAdjustments._PopVerify_Main(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("COLABegin_Active_PaymentsFrom", "");
            dic.Add("COLABegin_Active_PaymentsFrom_txt", "");
            dic.Add("COLABegin_Active_Age", "");
            dic.Add("COLABegin_Active_Date", "");
            dic.Add("COLADuring_V", "");
            dic.Add("COLADuring_P", "");
            dic.Add("COLADuring_T", "");
            dic.Add("COLADuring_Rate_cbo", "");
            dic.Add("COLADuring_Rate_txt", "");
            dic.Add("COLAAfter_V", "");
            dic.Add("COLAAfter_P", "");
            dic.Add("COLAAfter_T", "");
            dic.Add("COLAAfter_Rate_cbo", "");
            dic.Add("COLAAfter_Rate_txt", "");
            dic.Add("COLAAfter_Minimum_Percent", "1,0");
            pCostOfLivingAdjustments._PopVerify_CostOfLivingAdjustments_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("COLABegin_Active_PaymentsFrom", "");
            dic.Add("COLABegin_Active_PaymentsFrom_txt", "");
            dic.Add("COLABegin_Active_Age", "15");
            dic.Add("COLABegin_Active_Date", ".  .");
            dic.Add("COLADuring_V", "");
            dic.Add("COLADuring_P", "");
            dic.Add("COLADuring_T", "");
            dic.Add("COLADuring_Rate_cbo", "");
            dic.Add("COLADuring_Rate_txt", "");
            dic.Add("COLAAfter_V", "Click");
            dic.Add("COLAAfter_P", "");
            dic.Add("COLAAfter_T", "");
            dic.Add("COLAAfter_Rate_cbo", "CostOfLivingIncreaseAssumption");
            dic.Add("COLAAfter_Rate_txt", "");
            pCostOfLivingAdjustments._PopVerify_CostOfLivingAdjustments_DE(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Early Retirement Factors");
            dic.Add("MenuItem", "Add Early Retirement Factors");
            pAssumptions._TreeViewRightSelect(dic, "ERF_EarlyRetirementFactor");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Early Retirement Factors");
            dic.Add("Level_5", "ERF_EarlyRetirementFactor");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            pEarlyRetirementFactor._TBL_ReductionDefinition(1, "60", "0,500");

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_StraightLife");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_StraightLife");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Spouse");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Spouse");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Spouse's");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("SurviDECO01rPercentOrAmount_V", "");
            dic.Add("SurviDECO01rPercentOrAmount_P", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("SurvivorPercentOrAmount_V", "Click");
            dic.Add("SurvivorPercentOrAmount_cbo", "Beneficiary1Percent1");
            dic.Add("SurviDECO01rPercentOrAmount_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Reversionary");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Reversionary");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Reversionary");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("SurviDECO01rPercentOrAmount_V", "");
            dic.Add("SurviDECO01rPercentOrAmount_P", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("SurvivorPercentOrAmount_V", "Click");
            dic.Add("SurvivorPercentOrAmount_cbo", "Beneficiary1Percent1");
            dic.Add("SurviDECO01rPercentOrAmount_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Orphans");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Orphans");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Immediate orphan annuity");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "click");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "click");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "Click");
            dic.Add("LastPaymentAge_txt", "18");
            dic.Add("MaximumPaymentAge_txt", "25");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_LumpSum");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_LumpSum");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Lump sum");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Insurance");


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Insurance");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Insurance");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);




            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "OldAgePension");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "ERF_EarlyRetirementFactor");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Retirement");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "OldAgeRev");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgeRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "ERF_EarlyRetirementFactor");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Reversionary");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Retirement");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "DisabilityPension");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "DisabilityPension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Disability");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "DisabilityRev");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "DisabilityRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Reversionary");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Disability");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "SpousePension");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "SpousePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Spouse");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Death");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);





            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "Pensioner");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "In pay inactives");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Not Decrement-Based");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "NewSubGroup1");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("Level_6", "NewSubGroup1");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Orphans");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "Waisen");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.AliveStatus=\"NO\"");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "PensionerRev");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "PensionerRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "In pay inactives");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Reversionary");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Not Decrement-Based");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Benefit Definition");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_PensionableService");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_PensionableService");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_Age_V", "");
            dic.Add("ServiceStarts_Age_C", "click");
            dic.Add("ServiceStarts_Age_cbo", "");
            dic.Add("ServiceStarts_Age_txt", "25");
            dic.Add("ServiceStarts_FixedDate", "");
            dic.Add("Date", "");
            dic.Add("RoundingRule", "");
            dic.Add("ServiceIncreasement_V", "");
            dic.Add("ServiceIncreasement_C", "");
            dic.Add("ServiceIncreasement_cbo", "");
            dic.Add("ServiceIncreasement_txt", "");
            pService._PopVerify_RulesBasedService(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_Date", "");
            dic.Add("CalculationMethod", "");
            dic.Add("RoundingPeriod", "Years");
            dic.Add("RoundingMethod", "Completed");
            pService._PopVerify_RulesBasedService_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_ServiceForProration");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_ServiceForProration");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceAtValuationDate", "");
            dic.Add("ServiceAsAFunction", "");
            dic.Add("RulesBasedService", "");
            dic.Add("CustomCode", "");
            dic.Add("ForInternationalAccounting_DE", "true");
            dic.Add("ForTrade_DE", "true");
            dic.Add("UseServiceCa", "");
            pService._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_V", "");
            dic.Add("ServiceStarts_C", "");
            dic.Add("ServiceStarts_cbo", "");
            dic.Add("ServiceStarts_txt", "");
            dic.Add("ServiceStarts_FixedDate", "");
            dic.Add("ServiceStarts_Date", "HireDate1");
            dic.Add("ServiceEnds_V", "");
            dic.Add("ServiceEnds_C", "");
            dic.Add("ServiceEnds_cbo", "");
            dic.Add("ServiceEnds_txt", "");
            dic.Add("ServiceEnds_FixedDate", "");
            dic.Add("ServiceEnds_Date", "");
            pService._PopVerify_RulesBasedService_UseServiceCap_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_Date", "");
            dic.Add("CalculationMethod", "");
            dic.Add("RoundingPeriod", "Months");
            dic.Add("RoundingMethod", "Nearest");
            pService._PopVerify_RulesBasedService_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_ServiceForWaitingPeriod");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_ServiceForWaitingPeriod");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_V", "");
            dic.Add("ServiceStarts_C", "click");
            dic.Add("ServiceStarts_cbo", "");
            dic.Add("ServiceStarts_txt", "25");
            dic.Add("ServiceStarts_FixedDate", "");
            dic.Add("ServiceStarts_Date", "HireDate1");
            dic.Add("ServiceEnds_V", "");
            dic.Add("ServiceEnds_C", "");
            dic.Add("ServiceEnds_cbo", "");
            dic.Add("ServiceEnds_txt", "");
            dic.Add("ServiceEnds_FixedDate", "");
            dic.Add("ServiceEnds_Date", "");
            pService._PopVerify_RulesBasedService_UseServiceCap_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_Date", "");
            dic.Add("CalculationMethod", "");
            dic.Add("RoundingPeriod", "Years");
            dic.Add("RoundingMethod", "Completed");
            pService._PopVerify_RulesBasedService_DE(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            dic.Add("MenuItem", "Add From/To Age");
            pAssumptions._TreeViewRightSelect(dic, "FTA_WaitingPeriodOver");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            dic.Add("Level_5", "FTA_WaitingPeriodOver");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("InsertRow", "");
            dic.Add("AddRow", "");
            dic.Add("iRow", "1");
            dic.Add("SSNRA_Exists", "false");
            dic.Add("SSNRA", "");
            dic.Add("FixedAge", "15");
            dic.Add("YearOfService", "5");
            dic.Add("RuleOf", "");
            dic.Add("DateConstant", "");
            dic.Add("DateField", "");
            dic.Add("ServiceBasedOn", "SVC_ServiceForWaitingPeriod");
            dic.Add("AgeBasedOn", "");
            dic.Add("Comparison", "");
            pFromToAge._StandardTable_NotUS(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Eligibilities");
            dic.Add("MenuItem", "Add Eligibilities");
            pAssumptions._TreeViewRightSelect(dic, "EL_WaitingPeriod");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Eligibilities");
            dic.Add("Level_5", "EL_WaitingPeriod");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Formula", "$Age>= $FTA_WaitingPeriodOver");
            dic.Add("Validate", "Click");
            pEligibilities._PopVerify_Eligibilities(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Eligibilities");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Projection");
            dic.Add("MenuItem", "Add Pay Projection");
            pAssumptions._TreeViewRightSelect(dic, "PP_ProjectedPay");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Projection");
            dic.Add("Level_5", "PP_ProjectedPay");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("History", "");
            dic.Add("PresentYear", "true");
            dic.Add("FunctionOfOtherProjections", "");
            dic.Add("CustomCode", "");
            dic.Add("PlanPayLimitDefinition", "");
            dic.Add("ApplyDeduction", "");
            dic.Add("LegislatedPayLimitDefinition", "");
            pPayoutProjection._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("UseCurrentYearPayRateFrom", "Pay1CurrentYear");
            dic.Add("PayIncreaseAssumption", "AsPI_PayIncreaseRate");
            pPayoutProjection._PopVerify_PresentYear(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("MenuItem", "Add Pay Average");
            pAssumptions._TreeViewRightSelect(dic, "PA_AveragePay");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("Level_5", "PA_AveragePay");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "True");
            dic.Add("CustomCode", "");
            dic.Add("ApplyAveragePayLimit", "");
            dic.Add("ApplyPayAverageFreezeDefinition", "");
            dic.Add("ApplyAverageAtFutureAge", "");
            pPayAverage._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayProjectionToAverage", "PP_ProjectedPay");
            dic.Add("AveragingMethod", "");
            dic.Add("M", "1");
            dic.Add("RoundingForYearOfHire", "");
            dic.Add("DecimalPlacesForYearOfHire", "");
            dic.Add("Include", "");
            dic.Add("DropForCalculations", "");
            dic.Add("DropForCalculationAndPeriodConsidered", "");
            pPayAverage._PopVerify_Standard(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("Level_5", "PA_AveragePay");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "UVAmitVerlauf");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("Level_5", "PA_AveragePay");
            dic.Add("Level_6", "UVAmitVerlauf");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$emp.PayAtTermination");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.ParticipantStatus=\"IN\" and $emp.PayStatus=\"DEF\"");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Participant Info");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "FAE Formula");
            dic.Add("MenuItem", "Add FAE Formula");
            pAssumptions._TreeViewRightSelect(dic, "FAE_PlanFormula");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "FAE Formula");
            dic.Add("Level_6", "FAE_PlanFormula");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "");
            dic.Add("CustomCode", "");
            dic.Add("ServiceProrateFormula", "");
            dic.Add("ServiceProrateReduction", "");
            dic.Add("PayAverage", "PA_AveragePay");
            dic.Add("Service", "SVC_PensionableService");
            dic.Add("ServiceLimitTo", "35");
            dic.Add("StopAccrualAt_V", "");
            dic.Add("StopAccrualAt_C", "");
            dic.Add("StopAccrualAt_cbo", "");
            dic.Add("StopAccrualAt_TXT", "");
            dic.Add("RateTiersBasedOn", "Service");
            dic.Add("NumberOfRateTiers", "3");
            dic.Add("IntegrationType", "Excess");
            dic.Add("NumberOfBreakPoints", "");
            pFAEFormula._PopVerify_Standard(dic);


            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("btnC", "");
            dic.Add("btnV", "");
            dic.Add("sData2", "");
            dic.Add("sData3", "4");
            dic.Add("sData4", "5");
            dic.Add("sData5", "35");
            pFAEFormula._TBL_Excess_With3Tires_DE010(dic);


            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("btnC", "");
            dic.Add("btnV", "click");
            dic.Add("sData2", "_SocSecContribCeiling");
            dic.Add("sData3", "0,0");
            dic.Add("sData4", "0,03");
            dic.Add("sData5", "0,003");
            pFAEFormula._TBL_Excess_With3Tires_DE010(dic);



            dic.Clear();
            dic.Add("iRow", "3");
            dic.Add("btnC", "");
            dic.Add("btnV", "");
            dic.Add("sData2", "");
            dic.Add("sData3", "0,0");
            dic.Add("sData4", "0,09");
            dic.Add("sData5", "0,009");
            pFAEFormula._TBL_Excess_With3Tires_DE010(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("MenuItem", "Add Custom Formula B");
            pAssumptions._TreeViewRightSelect(dic, "CFB_FinalBenefit");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$FAE_PlanFormula * $emp.ParttimeAverage");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "DefVestedFixed");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("Level_7", "DefVestedFixed");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$emp.Benefit1DB");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$_DefVestedFixed");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("MenuItem", "Add Custom Formula B");
            pAssumptions._TreeViewRightSelect(dic, "CFB_LumpSum");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_LumpSum");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "Round($PP_ProjectedPay/12*3.5, 2)");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_LumpSum");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "Tarifmitarbeiter");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_LumpSum");
            dic.Add("Level_7", "Tarifmitarbeiter");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "Round($PP_ProjectedPay/12.5*3.5, 2)");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.SalariedFlag=0");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Vesting");
            dic.Add("MenuItem", "Add Vesting");
            pAssumptions._TreeViewRightSelect(dic, "VST_LegalVesting");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Vesting");
            dic.Add("Level_5", "VST_LegalVesting");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Cost of Living Adjustments");
            dic.Add("MenuItem", "Add Cost of Living Adjustments");
            pAssumptions._TreeViewRightSelect(dic, "COLA_CostOfLivingAdjustment");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Cost of Living Adjustments");
            dic.Add("Level_5", "COLA_CostOfLivingAdjustment");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("COLABegin_Active_PaymentsFrom", "");
            dic.Add("COLABegin_Active_Age", "15");
            dic.Add("COLABegin_Active_Date", ".  .");
            dic.Add("COLADuring_V", "");
            dic.Add("COLADuring_P", "");
            dic.Add("COLADuring_T", "");
            dic.Add("COLADuring_Rate_cbo", "");
            dic.Add("COLADuring_Rate_txt", "");
            dic.Add("COLAAfter_V", "Click");
            dic.Add("COLAAfter_P", "");
            dic.Add("COLAAfter_T", "");
            dic.Add("COLAAfter_Rate_cbo", "CostOfLivingIncreaseAssumption");
            dic.Add("COLAAfter_Rate_txt", "");
            pCostOfLivingAdjustments._PopVerify_CostOfLivingAdjustments_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Early Retirement Factors");
            dic.Add("MenuItem", "Add Early Retirement Factors");
            pAssumptions._TreeViewRightSelect(dic, "ERF_EarlyRetirementFactor");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Early Retirement Factors");
            dic.Add("Level_5", "ERF_EarlyRetirementFactor");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            pEarlyRetirementFactor._TBL_ReductionDefinition(1, "60", "0,400");

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_StraightLife");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_StraightLife");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Spouse");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Spouse");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Spouse's");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("SurvivorPercentOrAmount_V", "Click");
            dic.Add("SurvivorPercentOrAmount_cbo", "Beneficiary1Percent1");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Reversionary");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Reversionary");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Reversionary");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("SurvivorPercentOrAmount_V", "Click");
            dic.Add("SurvivorPercentOrAmount_cbo", "Beneficiary1Percent1");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Orphans");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Orphans");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Immediate orphan annuity");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "click");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "click");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "click");
            dic.Add("SurviPENS02rPercentOrAmount_V", "");
            dic.Add("SurviPENS02rPercentOrAmount_cbo", "");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "18");
            dic.Add("MaximumPaymentAge_txt", "25");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_LumpSum");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_LumpSum");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Lump sum");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("SurviPENS02rPercentOrAmount_V", "");
            dic.Add("SurviPENS02rPercentOrAmount_cbo", "");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Insurance");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Insurance");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Insurance");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("SurviPENS02rPercentOrAmount_V", "");
            dic.Add("SurviPENS02rPercentOrAmount_cbo", "");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "OldAgePension");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "ERF_EarlyRetirementFactor");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Retirement");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "OldAgeRev");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgeRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "ERF_EarlyRetirementFactor");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Reversionary");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Retirement");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "DisabilityPension");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "DisabilityPension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Disability");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "DisabilityRev");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "DisabilityRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Reversionary");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Disability");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "SpousePension");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "SpousePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "click");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "click");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "click");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "click");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "click");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "3");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Spouse");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Death");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "SpousePension");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "DefVested");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "SpousePension");
            dic.Add("Level_6", "DefVested");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Spouse");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$_DefVested");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "SpouseLump");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "SpouseLump");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "false");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_LumpSum");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "true");
            dic.Add("Decrement", "Death");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "Pensioner");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "In pay inactives");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Not Decrement-Based");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "NewSubGroup1");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("Level_6", "NewSubGroup1");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Orphans");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "Waisen");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.AliveStatus=\"NO\"");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "PensionerRev");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "PensionerRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "In pay inactives");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Reversionary");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Not Decrement-Based");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_PensionableService");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_PensionableService");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_Date", "");
            dic.Add("CalculationMethod", "");
            dic.Add("RoundingPeriod", "Years");
            dic.Add("RoundingMethod", "Completed");
            pService._PopVerify_RulesBasedService_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_ServiceForProration");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_ServiceForProration");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceAtValuationDate", "");
            dic.Add("ServiceAsAFunction", "");
            dic.Add("RulesBasedService", "");
            dic.Add("CustomCode", "");
            dic.Add("ForInternationalAccounting_DE", "true");
            dic.Add("ForTrade_DE", "true");
            dic.Add("UseServiceCa", "");
            pService._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_V", "");
            dic.Add("ServiceStarts_C", "");
            dic.Add("ServiceStarts_cbo", "");
            dic.Add("ServiceStarts_txt", "");
            dic.Add("ServiceStarts_FixedDate", "");
            dic.Add("ServiceStarts_Date", "HireDate1");
            dic.Add("ServiceEnds_V", "");
            dic.Add("ServiceEnds_C", "");
            dic.Add("ServiceEnds_cbo", "");
            dic.Add("ServiceEnds_txt", "");
            dic.Add("ServiceEnds_FixedDate", "");
            dic.Add("ServiceEnds_Date", "");
            pService._PopVerify_RulesBasedService_UseServiceCap_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_Date", "");
            dic.Add("CalculationMethod", "");
            dic.Add("RoundingPeriod", "Months");
            dic.Add("RoundingMethod", "Nearest");
            pService._PopVerify_RulesBasedService_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_ServiceForWaitingPeriod");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_ServiceForWaitingPeriod");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_V", "");
            dic.Add("ServiceStarts_C", "");
            dic.Add("ServiceStarts_cbo", "");
            dic.Add("ServiceStarts_txt", "");
            dic.Add("ServiceStarts_FixedDate", "");
            dic.Add("ServiceStarts_Date", "HireDate1");
            dic.Add("ServiceEnds_V", "");
            dic.Add("ServiceEnds_C", "");
            dic.Add("ServiceEnds_cbo", "");
            dic.Add("ServiceEnds_txt", "");
            dic.Add("ServiceEnds_FixedDate", "");
            dic.Add("ServiceEnds_Date", "");
            pService._PopVerify_RulesBasedService_UseServiceCap_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_Date", "");
            dic.Add("CalculationMethod", "");
            dic.Add("RoundingPeriod", "Years");
            dic.Add("RoundingMethod", "Completed");
            pService._PopVerify_RulesBasedService_DE(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            dic.Add("MenuItem", "Add From/To Age");
            pAssumptions._TreeViewRightSelect(dic, "FTA_WaitingPeriodOver");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            dic.Add("Level_5", "FTA_WaitingPeriodOver");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("InsertRow", "");
            dic.Add("AddRow", "");
            dic.Add("iRow", "1");
            dic.Add("SSNRA_Exists", "false");
            dic.Add("SSNRA", "");
            dic.Add("FixedAge", "15");
            dic.Add("YearOfService", "0");
            dic.Add("RuleOf", "");
            dic.Add("DateConstant", "");
            dic.Add("DateField", "");
            dic.Add("ServiceBasedOn", "SVC_ServiceForWaitingPeriod");
            dic.Add("AgeBasedOn", "");
            dic.Add("Comparison", "");
            pFromToAge._StandardTable_NotUS(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Eligibilities");
            dic.Add("MenuItem", "Add Eligibilities");
            pAssumptions._TreeViewRightSelect(dic, "EL_WaitingPeriod");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Eligibilities");
            dic.Add("Level_5", "EL_WaitingPeriod");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Formula", "$Age>= $FTA_WaitingPeriodOver");
            dic.Add("Validate", "Click");
            pEligibilities._PopVerify_Eligibilities(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "From/To Age");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Eligibilities");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Projection");
            dic.Add("MenuItem", "Add Pay Projection");
            pAssumptions._TreeViewRightSelect(dic, "PP_ProjectedPay");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Projection");
            dic.Add("Level_5", "PP_ProjectedPay");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("History", "");
            dic.Add("PresentYear", "true");
            dic.Add("FunctionOfOtherProjections", "");
            dic.Add("CustomCode", "");
            dic.Add("PlanPayLimitDefinition", "");
            dic.Add("ApplyDeduction", "");
            dic.Add("LegislatedPayLimitDefinition", "");
            pPayoutProjection._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("UseCurrentYearPayRateFrom", "Pay1CurrentYear");
            dic.Add("PayIncreaseAssumption", "AsPI_PayIncreaseRate");
            pPayoutProjection._PopVerify_PresentYear(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("MenuItem", "Add Pay Average");
            pAssumptions._TreeViewRightSelect(dic, "PA_AveragePay");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("Level_5", "PA_AveragePay");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "True");
            dic.Add("CustomCode", "");
            dic.Add("ApplyAveragePayLimit", "");
            dic.Add("ApplyPayAverageFreezeDefinition", "");
            dic.Add("ApplyAverageAtFutureAge", "");
            pPayAverage._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayProjectionToAverage", "PP_ProjectedPay");
            dic.Add("AveragingMethod", "");
            dic.Add("M", "1");
            dic.Add("RoundingForYearOfHire", "");
            dic.Add("DecimalPlacesForYearOfHire", "");
            dic.Add("Include", "");
            dic.Add("DropForCalculations", "");
            dic.Add("DropForCalculationAndPeriodConsidered", "");
            pPayAverage._PopVerify_Standard(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("Level_5", "PA_AveragePay");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "DefVestedCalculated");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Average");
            dic.Add("Level_5", "PA_AveragePay");
            dic.Add("Level_6", "DefVestedCalculated");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$emp.PayAtTermination");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$_DefVestedCalculate");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Unit Formula");
            dic.Add("MenuItem", "Add Unit Formula");
            pAssumptions._TreeViewRightSelect(dic, "UF_PlanFormula");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Unit Formula");
            dic.Add("Level_6", "UF_PlanFormula");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Service", "SVC_PensionableService");
            dic.Add("LimitServiceTo", "45");
            dic.Add("StopAccrualAt_V", "");
            dic.Add("StopAccuralAt_C", "");
            dic.Add("StopAccuralAt_cbo", "");
            dic.Add("StopAccuralAt_txt", "");
            dic.Add("RateTiersBasedOn", "Service");
            dic.Add("NumberOfRateTiers", "4");
            dic.Add("ToServiceInSameTier", "true");
            pUnitFormula._PopVerify_Standard(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("iCol", "1");
            dic.Add("iRowMax", "2");
            dic.Add("iColMax", "4");
            dic.Add("sData", "9");
            dic.Add("bPayCredit", "");
            pUnitFormula._FormulaTable(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("iCol", "2");
            dic.Add("iRowMax", "2");
            dic.Add("iColMax", "4");
            dic.Add("sData", "10");
            dic.Add("bPayCredit", "");
            pUnitFormula._FormulaTable(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("iCol", "3");
            dic.Add("iRowMax", "2");
            dic.Add("iColMax", "4");
            dic.Add("sData", "25");
            dic.Add("bPayCredit", "");
            pUnitFormula._FormulaTable(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("iCol", "4");
            dic.Add("iRowMax", "2");
            dic.Add("iColMax", "4");
            dic.Add("sData", "45");
            dic.Add("bPayCredit", "");
            pUnitFormula._FormulaTable(dic);


            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("iCol", "2");
            dic.Add("iRowMax", "2");
            dic.Add("iColMax", "4");
            dic.Add("sData", "1200,00");
            dic.Add("bPayCredit", "");
            pUnitFormula._FormulaTable(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("iCol", "3");
            dic.Add("iRowMax", "2");
            dic.Add("iColMax", "4");
            dic.Add("sData", "120,00");
            dic.Add("bPayCredit", "");
            pUnitFormula._FormulaTable(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("iCol", "4");
            dic.Add("iRowMax", "2");
            dic.Add("iColMax", "4");
            dic.Add("sData", "60,00");
            dic.Add("bPayCredit", "");
            pUnitFormula._FormulaTable(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("MenuItem", "Add Custom Formula B");
            pAssumptions._TreeViewRightSelect(dic, "CFB_FinalBenefit");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$UF_PlanFormula * $emp.ParttimeAverage");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "DefVestedFixed");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("Level_7", "DefVestedFixed");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$emp.Benefit1DB");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$_DefVestedFixed");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Vesting");
            dic.Add("MenuItem", "Add Vesting");
            pAssumptions._TreeViewRightSelect(dic, "VST_LegalVesting");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Vesting");
            dic.Add("Level_5", "VST_LegalVesting");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Cost of Living Adjustments");
            dic.Add("MenuItem", "Add Cost of Living Adjustments");
            pAssumptions._TreeViewRightSelect(dic, "COLA_CostOfLivingAdjustment");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Cost of Living Adjustments");
            dic.Add("Level_5", "COLA_CostOfLivingAdjustment");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("COLABegin_Active_PaymentsFrom", "");
            dic.Add("COLABegin_Active_Age", "15");
            dic.Add("COLABegin_Active_Date", ".  .");
            dic.Add("COLADuring_V", "");
            dic.Add("COLADuring_P", "");
            dic.Add("COLADuring_T", "");
            dic.Add("COLADuring_Rate_cbo", "");
            dic.Add("COLADuring_Rate_txt", "");
            dic.Add("COLAAfter_V", "Click");
            dic.Add("COLAAfter_P", "");
            dic.Add("COLAAfter_T", "");
            dic.Add("COLAAfter_Rate_cbo", "CostOfLivingIncreaseAssumption");
            dic.Add("COLAAfter_Rate_txt", "");
            pCostOfLivingAdjustments._PopVerify_CostOfLivingAdjustments_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Early Retirement Factors");
            dic.Add("MenuItem", "Add Early Retirement Factors");
            pAssumptions._TreeViewRightSelect(dic, "ERF_EarlyRetirementFactor");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Early Retirement Factors");
            dic.Add("Level_5", "ERF_EarlyRetirementFactor");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            pEarlyRetirementFactor._TBL_ReductionDefinition(1, "60", "0,500");

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_StraightLife");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_StraightLife");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Spouse");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Spouse");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Spouse's");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("SurvivorPercentOrAmount_V", "Click");
            dic.Add("SurvivorPercentOrAmount_cbo", "Beneficiary1Percent1");
            dic.Add("SurviPENS02rPercentOrAmount_V", "");
            dic.Add("SurviPENS02rPercentOrAmount_cbo", "");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Reversionary");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Reversionary");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Reversionary");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("SurvivorPercentOrAmount_V", "Click");
            dic.Add("SurvivorPercentOrAmount_cbo", "Beneficiary1Percent1");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Orphans");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Orphans");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Immediate orphan annuity");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "click");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "click");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "click");
            dic.Add("SurviPENS02rPercentOrAmount_V", "");
            dic.Add("SurviPENS02rPercentOrAmount_cbo", "");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "18");
            dic.Add("MaximumPaymentAge_txt", "25");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_LumpSum");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_LumpSum");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Lump sum");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("SurviPENS02rPercentOrAmount_V", "");
            dic.Add("SurviPENS02rPercentOrAmount_cbo", "");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("MenuItem", "Add Form of Payment");
            pAssumptions._TreeViewRightSelect(dic, "FOP_Insurance");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_Insurance");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "Insurance");
            dic.Add("NumOfPayPerYear_V", "");
            dic.Add("NumOfPayPerYear_C", "");
            dic.Add("NumOfPayPerYear_cbo", "");
            dic.Add("NumOfPayPerYear_txt", "");
            dic.Add("LastPaymentAge_V", "");
            dic.Add("LastPaymentAge_C", "");
            dic.Add("MaximumPaymentAge_V", "");
            dic.Add("MaximumPaymentAge_C", "");
            dic.Add("SurviPENS02rPercentOrAmount_V", "");
            dic.Add("SurviPENS02rPercentOrAmount_cbo", "");
            dic.Add("btnSurviPENS02rPercentOrAmount_Percent", "");
            dic.Add("SurviPENS02rPercentOrAmount_txt", "");
            dic.Add("cboSurviPENS02rPercentOrAmount_PercentOrAmount", "");
            dic.Add("LastPaymentAge_txt", "");
            dic.Add("MaximumPaymentAge_txt", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "OldAgePension");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "ERF_EarlyRetirementFactor");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Retirement");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "OldAgeRev");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgeRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "ERF_EarlyRetirementFactor");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Reversionary");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Retirement");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "DisabilityPension");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "DisabilityPension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Disability");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "DisabilityRev");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "DisabilityRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Reversionary");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Disability");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "SpousePension");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "SpousePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "Actives and deferreds");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Spouse");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Death");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "Pensioner");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "In pay inactives");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Not Decrement-Based");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "NewSubGroup1");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("Level_6", "NewSubGroup1");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Orphans");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "Waisen");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.AliveStatus=\"NO\"");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "PensionerRev");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "PensionerRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "True");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "True");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "In pay inactives");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_Reversionary");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "Not Decrement-Based");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Methods");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "click");
            dic.Add("iRow", "1");
            dic.Add("VOShortName", "PENS02");
            dic.Add("BenefitDefinition", "SpouseLump");
            dic.Add("PSVCoverage", "True");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("IntAcctng", "");
            pMethods_DE._Table_BenefitsToExclude(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "");
            dic.Add("iRow", "1");
            dic.Add("VOShortName", "DECO01");
            dic.Add("BenefitDefinition", "OldAgePension");
            dic.Add("Trade", "True");
            dic.Add("IntAcctng", "True");
            dic.Add("PUCOverride", "Traditional Unit Credit");
            dic.Add("TUCOverride", "No Override");
            pMethods_DE._MethodOverrieds_Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "click");
            dic.Add("iRow", "2");
            dic.Add("VOShortName", "DECO01");
            dic.Add("BenefitDefinition", "OldAgeRev");
            dic.Add("Trade", "True");
            dic.Add("IntAcctng", "True");
            dic.Add("PUCOverride", "Traditional Unit Credit");
            dic.Add("TUCOverride", "No Override");
            pMethods_DE._MethodOverrieds_Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "click");
            dic.Add("iRow", "3");
            dic.Add("VOShortName", "DECO01");
            dic.Add("BenefitDefinition", "DisabilityPension");
            dic.Add("Trade", "True");
            dic.Add("IntAcctng", "True");
            dic.Add("PUCOverride", "Traditional Unit Credit");
            dic.Add("TUCOverride", "No Override");
            pMethods_DE._MethodOverrieds_Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "click");
            dic.Add("iRow", "4");
            dic.Add("VOShortName", "DECO01");
            dic.Add("BenefitDefinition", "DisabilityRev");
            dic.Add("Trade", "True");
            dic.Add("IntAcctng", "True");
            dic.Add("PUCOverride", "Traditional Unit Credit");
            dic.Add("TUCOverride", "No Override");
            pMethods_DE._MethodOverrieds_Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "click");
            dic.Add("iRow", "5");
            dic.Add("VOShortName", "DECO01");
            dic.Add("BenefitDefinition", "SpousePension");
            dic.Add("Trade", "True");
            dic.Add("IntAcctng", "True");
            dic.Add("PUCOverride", "Traditional Unit Credit");
            dic.Add("TUCOverride", "No Override");
            pMethods_DE._MethodOverrieds_Table(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CostMethod", "");
            dic.Add("ServiceForServiceProrate", "");
            dic.Add("CompareToAccrue", "");
            dic.Add("AllowNegativeNormalCost", "");
            dic.Add("ProjectedpayToUse", "");
            dic.Add("ProjectedpayToUse_CA", "");
            dic.Add("AccumulationToUse", "");
            dic.Add("IncludeExitYearValue", "");
            dic.Add("CalculatePresentValueOfFuture", "");
            dic.Add("CalculatePresentValueOfFuture_txt", "");
            dic.Add("VestingToUseForAgeFirstVested", "");
            dic.Add("AverageWorkingLifeTime", "true");
            dic.Add("AverageLifeTime", "true");
            dic.Add("AverageWorkingLifeTimeToVesting", "true");
            dic.Add("AverageWorkingLifeTimeForBenefitingEE", "true");
            pMethods._PopVerify_Methods_Accounting(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BenficiaryMethod", "Data field");
            dic.Add("DataFieldIndicating", "Beneficiary1Type");
            dic.Add("UseCollectivePremium", "");
            pMethods_DE._BenficiaryMethod_VO_Table(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CheckDeferredVested", "");
            dic.Add("UseDeprecatedCOLAMethod", "True");
            pMethods_DE._PopVerify_Methods_DE(dic);


            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Test Case");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Test Case Library");

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"09/01/1975\" And $emp.VOShortName=\"PENS01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"09/01/1975\" And $emp.VOShortName=\"DECO01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"10/03/1968\" And $emp.VOShortName=\"PENS02\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Conversion 2010");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "True");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true);


            pMain._SelectTab("Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_Others(sOutputPension_Conversion2010, "Liability Summary", "Conversion", true, true);
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Member Statistics", "Conversion", true, true);
                pOutputManager._ExportReport_Others(sOutputPension_Conversion2010, "Conversion Diagnostic", "Conversion", true, true);
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Detailed Results", "Conversion", true, true);
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Valuation Summary", "Conversion", true, true);
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Valuation Summary for Excel Export", "Conversion", true, true);
                pOutputManager._ExportReport_Others(sOutputPension_Conversion2010, "Individual Output", "Conversion", true, true);
                pOutputManager._ExportReport_Others(sOutputPension_Conversion2010, "Parameter Summary", "Conversion", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Conversion2010, "Test Cases", "Conversion", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Conversion2010, "Payout Projection", "Conversion", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Conversion2010, "Member Statistics", "Conversion", true, false, 0, new string[1] { "ALL" });
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Conversion2010, "Payout Projection", "Conversion", true, true, dic);
            }


            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_Others(sOutputPension_Conversion2010, "Liability Summary", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Member Statistics", "Conversion", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Conversion2010, "Member Statistics", "Conversion", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Others(sOutputPension_Conversion2010, "Conversion Diagnostic", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Test Case List", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Detailed Results", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Detailed Results by Plan Def", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Valuation Summary", "Conversion", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Conversion2010, "Valuation Summary", "Conversion", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Common(sOutputPension_Conversion2010, "Valuation Summary for Excel Export", "Conversion", false, true);
                pOutputManager._ExportReport_Others(sOutputPension_Conversion2010, "Individual Output", "Conversion", false, true);
                pOutputManager._ExportReport_Others(sOutputPension_Conversion2010, "IOE", "Conversion", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Conversion2010, "Payout Projection", "Conversion", false, true);
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Conversion2010, "Payout Projection", "Conversion", false, true, dic);
            }

            thrd_Pension_Conversion2010.Start();

            pOutputManager._ExportReport_Others(sOutputPension_Conversion2010, "Parameter Print", "Conversion", true, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Conversion2010, "Valuation Summary", "Conversion", true, false, 0, new string[1] { "ALL" });


            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            pMain._SelectTab("Conversion 2010");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            #endregion



            #region Data - Valuation2011

            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "ParticipantData");
            pMain._HomeTreeViewSelect(0, dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "Valuation 2011");
            dic.Add("EffectiveDate", "31.12.2011");
            dic.Add("Parent", "Conversion 2010");
            dic.Add("RSC", "");
            dic.Add("Shared", "True");
            dic.Add("GeneralUse", "");
            dic.Add("Conversion", "");
            dic.Add("CopyDataService", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_DataServicePropeties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation 2011");
            dic.Add("CheckPopup", "False");
            pMain._PopVerify_Home_RightPane(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation 2011");
            dic.Add("Level_2", "Current View");
            pData._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Category", "Custom Fields");
            dic.Add("Label", "SaveEmployeeIDNumber");
            dic.Add("DisplayName", "");
            dic.Add("VariesbyVO", "");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "Integer");
            dic.Add("FieldLength", "9");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._CV_AddSingleLabel(dic, false);


            dic.Clear();
            dic.Add("Level_1", "Valuation 2011");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "Upload PENS01 Data");
            dic.Add("Level_4", "Unload PENS02 Data");
            dic.Add("MenuItem", "Remove file");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation 2011");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "Upload PENS01 Data");
            dic.Add("MenuItem", "Remove file");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation 2011");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "Upload Deferred Compensation");
            dic.Add("MenuItem", "Remove file");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation 2011");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "Unload Jubilee Data");
            dic.Add("MenuItem", "Remove file");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation 2011");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "New Individual People");
            dic.Add("FileType", "Excel file");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "NewIndividualMethodPeople.xls");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);


            pData._SelectTab("Mapping");

            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Pre Matching Derivations");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "EmployeeIDNumber");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectInputFields", "click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Custom Fields");
            dic.Add("Level_3", "SaveEmployeeIDNumber");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=SaveEmployeeIDNumber");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            dic.Add("WarehouseFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "0");
            dic.Add("Unique_UniqueMatch_Num", "25");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "80");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "Click");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "Matched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Matched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "All 'UniqueUniqueMatch' records have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "Click");
            dic.Add("AcceptAllRecordsAs_What", "Unmatched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Unmatched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Once the matching results have been processed, all the Import parameters for this file will become read-only. Do you wish to proceed?");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "The matching results have now been processed. All the Import parameters for this file are now read-only.");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Valuation 2011");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("Level_3", "IsEligible and Pay stuff");
            dic.Add("MenuItem", "Remove Derivation Group");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation 2011");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("MenuItem", "Add new derivation group");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "Salary/Pay");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Pay1CurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=Pay1CurrentYear_P");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "SVSalaryCurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "SVSalary");
            dic.Add("Level_5", "SVSalaryCurrentYear");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=SVSalaryCurrentYear_P");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "3");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "JubiSalaryCurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "JubiSalary");
            dic.Add("Level_5", "JubiSalaryCurrentYear");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=JubiSalaryCurrentYear_P");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Valuation 2011");
            dic.Add("Level_2", "Snapshots");
            dic.Add("MenuItem", "Add new snapshot");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            pData._TreeViewSelect_Snapshots(dic, true);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYInactiveBenefitCurrentYearTrade");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYInactiveBenefitCurrentYearTrade");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYPremiumTrade");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYTeilwertNYTrade");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Last Year");
            dic.Add("Level_3", "LYTeilwertTrade");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Administration");
            pData._TreeViewSelect_Snapshots(dic, false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "FinalSnapshot");
            dic.Add("UseLatestDate", "");
            dic.Add("Preview", "Click");
            dic.Add("PublishSnapshot", "Click");
            dic.Add("CreateExtract", "");
            pData._PopVerify_Snapshots(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "click");
            pData._PopVerify_SP_Snapshots_Popup(dic);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion



            #region Pension RF - Valuation2011 - Baseline


            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "PensionValuations");
            pMain._HomeTreeViewSelect(0, dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ConversionService", "");
            dic.Add("Name", "Valuation 2011");
            dic.Add("Parent", "Conversion 2010");
            dic.Add("ParentFinalValuationSet", "");
            dic.Add("PlanYearBeginningIn", "");
            dic.Add("FiscalYearEndingIn_Accounting", "");
            dic.Add("FirstYearPlanUnderPPA", "");
            dic.Add("PlanYearEndingIn_DE", "2011");
            dic.Add("RSC", "");
            dic.Add("LocalMarket", "");
            dic.Add("Shared", "True");
            dic.Add("SelectAllVO", "Click");
            dic.Add("DeselectAll", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_ServicePropeties(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation 2011");
            pMain._PopVerify_Home_RightPane(dic);


            pMain._SelectTab("Valuation 2011");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Roll Forward");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "True");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);



            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Data");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Participant DataSet");

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("DataEffectiveDate", "31.12.2011");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("CompareData", "");
            dic.Add("ImportDataandApplyMapping", "");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "click");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("CompareData", "");
            dic.Add("ImportDataandApplyMapping", "");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "FinalSnapshot");
            dic.Add("OK", "Click");
            dic.Add("RetainThePreviousUnload", "");
            dic.Add("SpecifyANewSnapshotRetainingPrevious", "True");
            dic.Add("SpecifyANewSnapshotRevertingAllFields", "");
            dic.Add("SpecifyANewUnload", "");
            dic.Add("SelectSnapshotOption_OK", "Click");
            pParticipantDataSet._PopVerify_SelectSnapshotDefinition(dic);


            pParticipantDataSet._Initialzie();

            dic.Clear();
            dic.Add("Level_1", "DC Information");
            dic.Add("Level_2", "EeContribRate1");
            dic.Add("Data", "EeContribRate1Custom");
            pParticipantDataSet._MapField(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "Click");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            pMain._SelectTab("Participant DataSet");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "true");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "");
            dic.Add("Rate", "Trade interest rate (7 years)");
            dic.Add("AsOfDate", "31.12.2011");
            pInterestRate._PopVerify_PrescribedRates(dic);

            pMain._Home_ToolbarClick_Top(true);



            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Methods");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BenficiaryMethod", "Collective method");
            dic.Add("DataFieldIndicating", "");
            dic.Add("UseCollectivePremium", "");
            pMethods_DE._BenficiaryMethod_VO_Table(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Test Case");
            pMain._FlowTreeRightSelect(dic);



            pMain._SelectTab("Test Case Library");

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"09/01/1975\" And $emp.VOShortName=\"PENS01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"09/01/1975\" And $emp.VOShortName=\"DECO01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"10/03/1968\" And $emp.VOShortName=\"PENS02\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "True");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "True");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "true");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);

            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2011");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "true");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);



            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Liab");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);



            if (Config.bDownloadReports_PDF)
            {

                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Reconciliation to Prior Year", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Detailed Results", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Member Statistics", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Member Statistics", "RollForward", true, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Status Reconciliation", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Individual Checking Template", "RollForward", true, true, 0, new string[3] { "DECO01", "PENS01", "PENS02" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Valuation Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Valuation Summary for Excel Export", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Individual Output", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Test Cases", "Conversion", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Payout Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "FAS Expected Benefit Pmts", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "FAS Expected Benefit Pmts", "RollForward", true, true, 0, new string[1] { "ALL" });
                ////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Liability Set for Globe Export", "RollForward", true, true, 0, new string[1] { "ALL" });
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Payout Projection", "RollForward", true, true, dic);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Future Valuation Population Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Future Valuation Parameter Print", "RollForward", true, true);

            }


            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Reconciliation to Prior Year", "RollForward", false, true);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Reconciliation to Prior Year by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Detailed Results", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Detailed Results by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Member Statistics", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Status Reconciliation", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Individual Checking Template", "RollForward", false, true, 0, new string[3] { "DECO01", "PENS01", "PENS02" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Valuation Summary", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Valuation Summary for Excel Export", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Individual Output", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_Baseline, "IOE", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Payout Projection", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "FAS Expected Benefit Pmts", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Member Statistics", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Valuation Summary", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "FAS Expected Benefit Pmts", "RollForward", false, true, 0, new string[1] { "ALL" });
                ////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Liability Set for Globe Export", "RollForward", false, true, 0, new string[1] { "ALL" });
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Payout Projection", "RollForward", false, true, dic);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Future Valuation Population Projection", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Future Valuation Summary", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Future Valuation Liabilities by Group", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Future Valuation Liabilities by Year", "RollForward", false, true, 0, new string[1] { "ALL" });
                ////////////pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2011_Baseline, "RollForward", false, true);
            }

            thrd_Pension_Valuation2011_Baseline.Start();

            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Valuation Summary", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Future Valuation Summary", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2011_Baseline, "RollForward", true, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Future Valuation Liabilities by Group", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Future Valuation Liabilities by Year", "RollForward", true, true, 0, new string[1] { "ALL" });


            thrd_Pension_Valuation2011_Baseline.Start();

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            pMain._SelectTab("Valuation 2011");
            pMain._Home_ToolbarClick_Top(true);

            #endregion





            #region Pension RF - Valuation2011 - IndividualBeneficiaryMethod


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "IndividualBeneficiaryMethod");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);



            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Methods");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BenficiaryMethod", "Data field");
            dic.Add("DataFieldIndicating", "");
            dic.Add("UseCollectivePremium", "");
            pMethods_DE._BenficiaryMethod_VO_Table(dic);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "True");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Liab");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);



            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Payout Projection", "RollForward", true, true);
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Payout Projection", "RollForward", true, true, dic);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "FAS Expected Benefit Pmts", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Reconciliation to Baseline", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Liabilities Detailed Results", "RollForward", true, true);
                //////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Liability Set for Globe Export", "RollForward", true, false, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Future Valuation Population Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Future Valuation Parameter Print", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Future Valuation Liabilities by Group", "RollForward", true, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Future Valuation Liabilities by Year", "RollForward", true, true, 0, new string[1] { "ALL" });
            }

            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Valuation Summary", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Others(sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "IOE", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Payout Projection", "RollForward", false, true);
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Payout Projection", "RollForward", false, true, dic);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "FAS Expected Benefit Pmts", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Reconciliation to Baseline", "RollForward", false, true);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Reconciliation to Baseline by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Test Cases", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Liabilities Detailed Results", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Liabilities Detailed Results by Plan Def", "RollForward", false, true);
                ////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Liability Set for Globe Export", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Future Valuation Population Projection", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Future Valuation Summary", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Future Valuation Liabilities by Group", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Future Valuation Liabilities by Year", "RollForward", false, true, 0, new string[1] { "ALL" });
                ////////////////pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "RollForward", false, true);
            }


            thrd_Pension_Valuation2011_IndividualBeneficiaryMethod.Start();


            pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Valuation Summary", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "Future Valuation Summary", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2011_IndividualBeneficiaryMethod, "RollForward", true, true);


            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            pMain._SelectTab("Valuation 2011");
            pMain._Home_ToolbarClick_Top(true);

            #endregion

            #region Pension RF - Valuation2011 - Constant Number of Plan Members

            pMain._SelectTab("Valuation 2011");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "Constant Number of Plan Members");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("West", "");
            dic.Add("East", "");
            dic.Add("WestEast_FromData", "");
            dic.Add("Knappschaft", "");
            dic.Add("RV_FromData", "");
            dic.Add("HealthInsuranceWest_cbo_T", "SocSecHealthInsWestPrelim");
            dic.Add("RVWest_cbo_T", "SocSecRVWestPrelim");
            dic.Add("IncreaseRate_P", "");
            dic.Add("IncreaseRate_txt", "");
            dic.Add("ValuationAge", "");
            pSocialSecurityContributionCeilings._SocialSecurityContributionRates(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("West", "");
            dic.Add("East", "");
            dic.Add("WestEast_FromData", "");
            dic.Add("Knappschaft", "");
            dic.Add("RV_FromData", "");
            dic.Add("HealthInsuranceWest_cbo_T", "SocSecHealthInsWestPrelim");
            dic.Add("RVWest_cbo_T", "SocSecRVWestPrelim");
            dic.Add("IncreaseRate_P", "click");
            dic.Add("IncreaseRate_txt", "");
            dic.Add("LastTableEntry", "true");
            pSocialSecurityContributionCeilings._SocialSecurityContributionRates(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("West", "");
            dic.Add("East", "");
            dic.Add("WestEast_FromData", "");
            dic.Add("Knappschaft", "");
            dic.Add("RV_FromData", "");
            dic.Add("HealthInsuranceWest_cbo_T", "");
            dic.Add("RVWest_cbo_T", "");
            dic.Add("IncreaseRate_P", "");
            dic.Add("IncreaseRate_txt", "");
            dic.Add("LastTableEntry", "true");
            pSocialSecurityContributionCeilings._SocialSecurityContributionRates(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Future Valuation Options");
            pMain._FlowTreeRightSelect(dic);

            pFutureValuationOption._SelectTab("Population size");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ModelPopulationSizePerParticipantGroup", "");
            dic.Add("iRowNum", "1");
            dic.Add("ParticipantGroup", "");
            dic.Add("PopulationSizeOption", "Growth rate %");
            dic.Add("iColName", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._PropulationSize(dic);

            for (int i = 2011; i <= 2030; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("iRowNum", "1");
                dic.Add("ParticipantGroup", "");
                dic.Add("PopulationSizeOption", "");
                dic.Add("iColName", (i - 2011 + 2).ToString());
                dic.Add("iColValue", "0,00");
                pFutureValuationOption._PropulationSize(dic);
            }


            pFutureValuationOption._SelectTab("New entrants");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"6/30/1989\" AND $emp.VOShortName=\"PENS01\"");
            dic.Add("iResultRow", "1");
            pFutureValuationOption._AddTestCase(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"9/1/1975\" AND $emp.VOShortName=\"PENS02\"");
            dic.Add("iResultRow", "1");
            pFutureValuationOption._AddTestCase(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAllFromLibrary", "");
            dic.Add("iRowNum", "1");
            dic.Add("VOShortName", "PENS01");
            dic.Add("iColNum", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "187");
            dic.Add("iColumn", "2");
            dic.Add("sColumn", "NewEntrantID");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "10");
            dic.Add("sColumn", "MaritalStatus");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "20");
            dic.Add("sColumn", "BeneficiaryIDNumber");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "100");
            dic.Add("sColumn", "LYParticipantStatusResult");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "110");
            dic.Add("sColumn", "LYInactiveBenefitCurrentYearResult");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "150");
            dic.Add("sColumn", "LYPensionBenRetAgePBOResult");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "176");
            dic.Add("sColumn", "participantConsolidatedCodeId");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);


            ////////////////set weight = 50,00   col = 6
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Weight");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "50,00");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////////Service (HireDate1) = 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (HireDate1)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////////Service (MembershipDate1) = 0,50   -27
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (MembershipDate1)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////Service (PensionableServiceDate) = 0,50   -54
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (PensionableServiceDate)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////////Service (PensionPromiseDate) = 0,50   -55
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (PensionPromiseDate)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////////Service (WaitingPeriodStartDate) = 0,50 -70
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (WaitingPeriodStartDate)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);



            //// line 2
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAllFromLibrary", "");
            dic.Add("iRowNum", "2");
            dic.Add("VOShortName", "PENS02");
            dic.Add("iColNum", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary(dic);


            ////////////////set weight = 50,00    -6
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Weight");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "50,00");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////Service (HireDate1) = 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (HireDate1)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////////MaritalStatus = M   -9
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "MaritalStatus");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "M");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  Age(Beneficiary1BirthDate = 36,33   -20
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Age (Beneficiary1BirthDate)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "36,33");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  Beneficiary1Gender = F   -21
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Beneficiary1Gender");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "F");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  Beneficiary1Type= 1   -26
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Beneficiary1Type");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  Service (MembershipDate1) = 0,50   -27
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (MembershipDate1)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  Service (PensionableServiceDate) = 0,50   -54
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (PensionableServiceDate)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  Service (PensionPromiseDate) = 0,50   -55
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (PensionPromiseDate)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  Service (WaitingPeriodStartDate) = 0,50    -70
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (WaitingPeriodStartDate)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  PenFlag = PENS01   -74
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "PenFlag");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "PENS01");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  SubDivisionCode = blank   -82
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "SubDivisionCode");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  SaveEmployeeIDNumber = "113580100"    -91
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "SaveEmployeeIDNumber");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "113580100");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  LYBookReserveResult = "5237,000"   -105
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYBookReserveResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "5237,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  LYNewDistributionResult = "3492,000"    -113
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYNewDistributionResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "3492,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  LYPensionBenefitRetAssumedRetAge= "blank"    -118
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPensionBenefitRetAssumedRetAge");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  LYPensionBenefitRetAssumedRetAgeResult = "4340,260"   -119
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPensionBenefitRetAssumedRetAgeResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "4340,260");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  LYPremiumTax= "0,000   -120
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPremiumTax");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////////  LYPremiumTaxResult = "704,000"   -122
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPremiumTaxResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "704,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  LYPV= "0,000   -126
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPV");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  LYPVResult = "14682,480"   -127
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPVResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "14682,480");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  LYTeilwert = "0,000"    -128
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPVResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LYTeilwertResult = "5237,000"   -129
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTeilwertResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "5237,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LYTeilwertNYResult = "6302,000"   -131
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTeilwertNYResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "6302,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LYTradeALResult = "1608,000"    -135
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTradeALResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1608,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LYTradeNCResult = "1517,000"    -137
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTradeNCResult");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1517,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// EeContribRate1 = "1000,00"    -153
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "EeContribRate1");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1000,00");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// EeAccountBalance1 = blank
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "EeAccountBalance1");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LegacyTaxAL = "5237,000"   -158
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTaxAL");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "5237,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LegacyTaxNC = "704,000"   -159
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTaxNC");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "704,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LegacyBookReserve = "5237,000"   -160
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyBookReserve");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "5237,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LegacyTradeAL = "1418,000"   -161
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTradeAL");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1418,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LegacyTradeNC = "1336,000"    -162
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTradeNC");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1336,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LegacyIntAccountingPBOAL = "1494,000"   -163
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingPBOAL");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1494,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ///////////////  LegacyIntAccountingPBONC = "1410,000"   -164
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingPBONC");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1410,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////// LegacyIntAccountingABOAL = "1494,000"   -165
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingABOAL");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1494,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            /////////////// LegacyIntAccountingABONC = "1410,000"    -166
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingABOAL");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1410,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////''' ImportName = "New Individual People"    -167
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "ImportName");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "New Individual People");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "click");
            pFutureValuationOption._PopVerify_OK(dic);




            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "True");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "Val Liab");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardisedMethod", "");
            dic.Add("CustomisedApproach", "");
            dic.Add("RunFVPopulationProjection", "Click");
            pMain._PopVerify_FVPopulationProjectionRunOption(dic);



            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "True");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "True");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);



            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Liab");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);



            if (Config.bDownloadReports_PDF)
            {
                ///////////////////// confirmed from shane, webber never need this
                ////////////////////pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Individual Output", "RollForward", true, true);
                ////////////////////pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Payout Projection", "RollForward", true, true);
                ////////////////////dic.Clear();
                ////////////////////dic.Add("Group_ReportBreak", "True");
                ////////////////////pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Payout Projection", "RollForward", true, true, dic);
                ////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "FAS Expected Benefit Pmts", "RollForward", false, true, 0, new string[1] { "ALL" });
                ////////////////////pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Reconciliation to Baseline", "RollForward", true, true);
                ////////////////////pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Liabilities Detailed Results", "RollForward", true, true);
                //////////////////////////////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Liability Set for Globe Export", "RollForward", true, false, 0, new string[1] { "ALL" });
                ////////////////////pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Liability Scenario", "RollForward", true, true);
                ////////////////////pOutputManager._ExportReport_Others(sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "IOE", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Parameter Print", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Population Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Parameter Print", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Liabilities by Group", "RollForward", true, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Liabilities by Year", "RollForward", true, true, 0, new string[1] { "ALL" });
            }


            if (Config.bDownloadReports_EXCEL)
            {
                ///////////////////// confirmed from shane, webber never need thispOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Valuation Summary", "RollForward", false, true, 0, new string[1] { "ALL" });
                ////////////////pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Individual Output", "RollForward", false, true);
                ////////////////pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Payout Projection", "RollForward", false, true);
                ////////////////dic.Clear();
                ////////////////dic.Add("Group_ReportBreak", "True");
                ////////////////pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Payout Projection", "RollForward", false, true, dic);
                ////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "FAS Expected Benefit Pmts", "RollForward", false, true, 0, new string[1] { "ALL" });
                ////////////////pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Reconciliation to Baseline", "RollForward", false, true);
                ////////////////pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Reconciliation to Baseline by Plan Def", "RollForward", false, true);
                ////////////////pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Test Cases", "RollForward", true, true);
                ////////////////pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Liabilities Detailed Results", "RollForward", false, true);
                ////////////////pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Liabilities Detailed Results by Plan Def", "RollForward", false, true);
                ////////////////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Liability Set for Globe Export", "RollForward", false, false, 0, new string[1] { "ALL" });
                ////////////////pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Liability Scenario", "RollForward", false, true);
                ////////////////pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Liability Scenario by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Population Projection", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Summary", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Liabilities by Group", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Liabilities by Year", "RollForward", false, true, 0, new string[1] { "ALL" });
                ////////////////pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "RollForward", false, true);
            }

            thrd_Pension_Valuation2011_ConstantNumberOfPlanMembers.Start();


            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Valuation Summary", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Summary", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers, "RollForward", true, true);


            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            pMain._SelectTab("Valuation 2011");
            pMain._Home_ToolbarClick_Top(true);

            #endregion

            #region Pension RF - Valuation2011 - Multiple Passes


            pMain._SelectTab("Valuation 2011");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "Multiple Passes");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "4");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Future Valuation Options");
            pMain._FlowTreeRightSelect(dic);


            pFutureValuationOption._SelectTab("Population size");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ModelPopulationSizePerParticipantGroup", "");
            dic.Add("iRowNum", "1");
            dic.Add("ParticipantGroup", "");
            dic.Add("PopulationSizeOption", "Growth rate %");
            dic.Add("iColName", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._PropulationSize(dic);


            for (int i = 2011; i <= 2030; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("ModelPopulationSizePerParticipantGroup", "");
                dic.Add("iRowNum", "1");
                dic.Add("ParticipantGroup", "");
                dic.Add("PopulationSizeOption", "");
                dic.Add("iColName", (i - 2011 + 2).ToString());
                dic.Add("iColValue", "0,00");
                pFutureValuationOption._PropulationSize(dic);
            }



            pFutureValuationOption._SelectTab("New entrants");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("UsingRates_P", "click");
            dic.Add("UsingRates_T", "");
            dic.Add("UsingRates_txt", "3,0");
            dic.Add("UsingRates_cbo", "");
            pFutureValuationOption._NewEntrants_UsingRates(dic);


            pFutureValuationOption._SelectTab("Projection years");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EveryYearForTheFirst", "");
            dic.Add("AndEvery", "");
            dic.Add("UpToincludingProjectionYear", "");
            dic.Add("ProjectionYears", "");
            dic.Add("NumberOfRuns", "3");
            dic.Add("FundingUpdateDate_UK", "");
            pFutureValuationOption._ProjectionYears(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "click");
            pFutureValuationOption._PopVerify_OK(dic);


            pMain._SelectTab("Valuation 2011");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "true");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "4");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "4");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "4");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "True");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "4");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Liab");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "4");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "Future Valuation Parameter Print", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "Future Valuation Population Projection", "RollForward", true, true);
            }

            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "Future Valuation Population Projection", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "Future Valuation Summary", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "Future Valuation Liabilities by Group", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "Future Valuation Liabilities by Year", "RollForward", false, true, 0, new string[1] { "ALL" });
                ////////////////////pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "RollForward", false, true);
            }


            thrd_Pension_Valuation2011_MultiplePasses.Start();


            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "Future Valuation Summary", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "Future Valuation Liabilities by Group", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "Future Valuation Liabilities by Year", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2011_MultiplePasses, "RollForward", true, true);



            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);

            pMain._SelectTab("Valuation 2011");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion



            #region Jubilee - Conversion2010


            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "JubileeValuations");
            pMain._HomeTreeViewSelect(0, dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ConversionService", "");
            dic.Add("Name", "Jubilee Conversion 2010");
            dic.Add("Parent", "");
            dic.Add("ParentFinalValuationSet", "");
            dic.Add("PlanYearBeginningIn", "");
            dic.Add("FiscalYearEndingIn_Accounting", "");
            dic.Add("FirstYearPlanUnderPPA", "");
            dic.Add("PlanYearEndingIn_DE", "2010");
            dic.Add("RSC", "");
            dic.Add("LocalMarket", "");
            dic.Add("Shared", "True");
            dic.Add("SelectAllVO", "Click");
            dic.Add("DeselectAll", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_ServicePropeties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Jubilee Conversion 2010");
            dic.Add("CheckPopup", "False");
            pMain._PopVerify_Home_RightPane(dic);


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Data");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Participant DataSet");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "Click");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "Unload 2010");
            dic.Add("OK", "Click");
            dic.Add("RetainThePreviousUnload", "");
            dic.Add("SpecifyANewSnapshotRetainingPrevious", "");
            dic.Add("SpecifyANewSnapshotRevertingAllFields", "");
            dic.Add("SpecifyANewUnload", "");
            dic.Add("SelectSnapshotOption_OK", "");
            pParticipantDataSet._PopVerify_SelectSnapshotDefinition(dic);


            pParticipantDataSet._Initialzie();

            dic.Clear();
            dic.Add("Level_1", "DC Information");
            dic.Add("Level_2", "EeContribRate1");
            dic.Add("Level_3", "");
            dic.Add("Level_4", "");
            dic.Add("Data", "EeContribRate1Custom");
            pParticipantDataSet._MapField(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "Click");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Jubilee Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Assumptions");


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Assumed Retirement Age");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FromData", "");
            dic.Add("CustomCode", "");
            dic.Add("AssumedRetirementAge_V", "Click");
            dic.Add("AssumedRetirementAge_C", "");
            dic.Add("AssumedRetirementAge_cbo", "AssumedRetirementAge");
            dic.Add("AssumedRetirementAge_txt", "");
            pAssumedRetirementAge._PopVerify_FromData(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Assumed Retirement Age");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Calculate", "True");
            dic.Add("FromData", "");
            dic.Add("CustomCode", "");
            pAssumedRetirementAge._PopVerify_Main(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Assumed Retirement Age");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Calculate", "True");
            dic.Add("FromData", "");
            dic.Add("CustomCode", "");
            pAssumedRetirementAge._PopVerify_Main(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "True");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "5,0");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Pay Increase");
            dic.Add("MenuItem", "Add Pay Increase");
            pAssumptions._TreeViewRightSelect(dic, "AsPI_PayIncreaseRate");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Pay Increase");
            dic.Add("Level_3", "AsPI_PayIncreaseRate");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Pay Increase");
            dic.Add("Level_3", "AsPI_PayIncreaseRate");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "");
            dic.Add("btnT", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Pay Increase");
            dic.Add("Level_3", "AsPI_PayIncreaseRate");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("btnV", "");
            dic.Add("btnPercent", "");
            dic.Add("btnT", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pPayIncrease._PopVerify_PayIncrease(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "click");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "click");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "3,0");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            dic.Add("AsOfDate", "");
            dic.Add("SocialSecurityContributionRateKnappschaft_Employer", "9,95");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            dic.Add("AsOfDate", "");
            dic.Add("SocialSecurityContributionRateKnappschaft_Employer", "9,95");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            dic.Add("AsOfDate", "");
            dic.Add("SocialSecurityContributionRateKnappschaft_Employer", "9,95");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);



            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "252,00");
            dic.Add("AdjustFactorrFromNextToGross", "1,00");
            dic.Add("TaxTariff", "2010");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "252,00");
            dic.Add("AdjustFactorrFromNextToGross", "1,00");
            dic.Add("TaxTariff", "2010");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "252,00");
            dic.Add("AdjustFactorrFromNextToGross", "1,00");
            dic.Add("TaxTariff", "2010");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Jubilee Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Provisions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Provisions");


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Projection");
            dic.Add("MenuItem", "Add Pay Projection");
            pAssumptions._TreeViewRightSelect(dic, "PP_JubileeSalary");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Pay Projection");
            dic.Add("Level_5", "PP_JubileeSalary");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataFieldContainingPayHistory", "Pay1");
            dic.Add("PayIncreaseAssumption", "AsPI_PayIncreaseRate");
            dic.Add("UseOnlyDataFields", "");
            dic.Add("rdValuationYearPlus", "");
            dic.Add("txtValuationYearPlus", "");
            dic.Add("rdSpecifiedYear", "");
            dic.Add("txtSpecifiedYear", "");
            dic.Add("ApplyEGTRRALimits", "");
            pPayoutProjection._PopVerify_History(dic);

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Participant Info");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("MenuItem", "Add Jubilee Benefit");
            pAssumptions._TreeViewRightSelect(dic, "JB_Salary");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("Level_6", "JB_Salary");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FixedAmount", "");
            dic.Add("SalaryBased", "True");
            dic.Add("SalaryDefinition", "PP_JubileeSalary");
            dic.Add("DevideBy_V", "");
            dic.Add("DevideBy_C", "Click");
            dic.Add("DevideBy_cbo", "");
            dic.Add("DevideBy_txt", "12,00000000");
            pJubileeBenefit._PopVerify_SalaryBased(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("Level_6", "JB_Salary");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "Tarifmitarbeiter");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("Level_6", "JB_Salary");
            dic.Add("Level_7", "Tarifmitarbeiter");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FixedAmount", "");
            dic.Add("SalaryBased", "True");
            dic.Add("SalaryDefinition", "PP_JubileeSalary");
            dic.Add("DevideBy_V", "");
            dic.Add("DevideBy_C", "Click");
            dic.Add("DevideBy_cbo", "");
            dic.Add("DevideBy_txt", "12,50000000");
            pJubileeBenefit._PopVerify_SalaryBased(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.SalariedFlag=0");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("MenuItem", "Add Jubilee Benefit");
            pAssumptions._TreeViewRightSelect(dic, "JB_FixAmount");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("Level_6", "JB_FixAmount");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FixedAmount", "");
            dic.Add("SalaryBased", "");
            dic.Add("JubileeAmount_V", "");
            dic.Add("JubileeAmount_C", "click");
            dic.Add("JubileeAmount_cbo", "");
            dic.Add("JubileeAmount_txt", "90,00");
            dic.Add("NetAmtUsingTotal", "");
            dic.Add("NetAmtUsingSystem", "");
            dic.Add("YearSalary", "");
            dic.Add("TaxClass", "");
            dic.Add("GrossAmount", "");
            dic.Add("FinalAmount", "click");
            pJubileeBenefit._PopVerify_FixedAmount(dic);

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "Jubi20");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi20");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("YearsOfServiceForJubi", "20");
            dic.Add("BasedOn", "");
            dic.Add("YearlySalary", "PP_JubileeSalary");
            dic.Add("ApplyPercentMarried", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("JubileeBenefit", "holiday");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("JubileeBenefit", "JB_Salary");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("JubileeBenefit", "JB_FixAmount");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "Jubi30");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi30");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("YearsOfServiceForJubi", "30");
            dic.Add("BasedOn", "");
            dic.Add("YearlySalary", "PP_JubileeSalary");
            dic.Add("ApplyPercentMarried", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("JubileeBenefit", "holiday");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("JubileeBenefit", "JB_Salary");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("JubileeBenefit", "JB_FixAmount");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("JubileeBenefit", "");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "Jubi40");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi40");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("YearsOfServiceForJubi", "40");
            dic.Add("BasedOn", "");
            dic.Add("YearlySalary", "PP_JubileeSalary");
            dic.Add("ApplyPercentMarried", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("JubileeBenefit", "holiday");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("JubileeBenefit", "JB_Salary");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "3,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("JubileeBenefit", "JB_FixAmount");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            pMain._Home_ToolbarClick_Top(true);



            pMain._SelectTab("Jubilee Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Test Case");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Test Case Library");

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"10.03.1968\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Jubilee Conversion 2010");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "True");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "True");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "JubiSalaryCurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "JUBI01");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);

            pMain._SelectTab("Jubilee Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);


            pMain._EnterpriseRun("Group Job Successfully Complete", true);


            pMain._SelectTab("Jubilee Conversion 2010");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Valuation Summary", "Conversion", true, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Conversion2010, "Valuation Summary", "Conversion", true, true, 0, new string[1] { "ALL" });


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_Others(sOutputJubilee_Conversion2010, "Liability Summary", "Conversion", true, true);
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Member Statistics", "Conversion", true, true);
                pOutputManager._ExportReport_Others(sOutputJubilee_Conversion2010, "Conversion Diagnostic", "Conversion", true, true);
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Test Case List", "Conversion", true, true);
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Detailed Results", "Conversion", true, true);
                pOutputManager._ExportReport_Others(sOutputJubilee_Conversion2010, "Parameter Print", "Conversion", true, true);
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Valuation Summary for Excel Export", "Conversion", true, true);
                pOutputManager._ExportReport_Others(sOutputJubilee_Conversion2010, "Individual Output", "Conversion", true, true);
                pOutputManager._ExportReport_Others(sOutputJubilee_Conversion2010, "Parameter Summary", "Conversion", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Conversion2010, "Test Cases", "Conversion", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Conversion2010, "Payout Projection", "Conversion", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Conversion2010, "Member Statistics", "Conversion", true, false, 0, new string[1] { "ALL" });
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputJubilee_Conversion2010, "Payout Projection", "Conversion", true, true, dic);

            }

            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_Others(sOutputJubilee_Conversion2010, "Liability Summary", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Member Statistics", "Conversion", false, true);
                pOutputManager._ExportReport_Others(sOutputJubilee_Conversion2010, "Conversion Diagnostic", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Test Case List", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Detailed Results", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Detailed Results by Plan Def", "Conversion", false, true);
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Valuation Summary", "Conversion", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Conversion2010, "Valuation Summary", "Conversion", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Common(sOutputJubilee_Conversion2010, "Valuation Summary for Excel Export", "Conversion", false, true);
                pOutputManager._ExportReport_Others(sOutputJubilee_Conversion2010, "Individual Output", "Conversion", false, true);
                pOutputManager._ExportReport_Others(sOutputJubilee_Conversion2010, "IOE", "Conversion", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Conversion2010, "Payout Projection", "Conversion", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Conversion2010, "Member Statistics", "Conversion", false, true, 0, new string[1] { "ALL" });
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputJubilee_Conversion2010, "Payout Projection", "Conversion", false, true, dic);
            }


            thrd_Jubilee_Conversion2010.Start();

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Jubilee Conversion 2010");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion


            #region Jubilee RF - Valuation2011 - Baseline


            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "JubileeValuations");
            pMain._HomeTreeViewSelect(0, dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ConversionService", "false");
            dic.Add("Name", "Valuation 2011");
            dic.Add("Parent", "");
            dic.Add("ParentFinalValuationSet", "");
            dic.Add("PlanYearBeginningIn", "");
            dic.Add("FiscalYearEndingIn_Accounting", "");
            dic.Add("FirstYearPlanUnderPPA", "");
            dic.Add("PlanYearEndingIn_DE", "2011");
            dic.Add("RSC", "true");
            dic.Add("LocalMarket", "");
            dic.Add("Shared", "");
            dic.Add("SelectAllVO", "Click");
            dic.Add("DeselectAll", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_ServicePropeties(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation 2011");
            dic.Add("CheckPopup", "False");
            pMain._PopVerify_Home_RightPane(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Roll Forward");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "True");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Data");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "Click");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "FinalSnapshot");
            dic.Add("OK", "Click");
            dic.Add("RetainThePreviousUnload", "");
            dic.Add("SpecifyANewSnapshotRetainingPrevious", "true");
            dic.Add("SpecifyANewSnapshotRevertingAllFields", "");
            dic.Add("SpecifyANewUnload", "");
            dic.Add("SelectSnapshotOption_OK", "click");
            pParticipantDataSet._PopVerify_SelectSnapshotDefinition(dic);


            pParticipantDataSet._Initialzie();

            dic.Clear();
            dic.Add("Level_1", "DC Information");
            dic.Add("Level_2", "EeContribRate1");
            dic.Add("Data", "EeContribRate1Custom");
            pParticipantDataSet._MapField(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "Click");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            pMain._SelectTab("Participant DataSet");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "true");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "");
            dic.Add("Rate", "");
            dic.Add("AsOfDate", "31.12.2011");
            pInterestRate._PopVerify_PrescribedRates(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Test Case");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Test Case Library");

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"10.03.1968\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            pMain._SelectTab("Valuation 2011");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "True");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "True");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "JubiSalaryCurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "JUBI01");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "JUBI01");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Liab");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            if (Config.bDownloadReports_PDF)
            {

                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Reconciliation to Prior Year", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Detailed Results", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Member Statistics", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Status Reconciliation", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Individual Checking Template", "RollForward", true, true, 0, new string[1] { "JUBI01" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Valuation Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Individual Output", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Parameter Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Test Cases", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Payout Projection", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Member Statistics", "RollForward", true, true, 0, new string[1] { "ALL" });
                ////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Liability Set for Globe Export", "RollForward", true, false, 0, new string[1] { "ALL" });
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Payout Projection", "RollForward", true, true, dic);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Future Valuation Population Projection", "RollForward", true, false);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Future Valuation Parameter Print", "RollForward", true, false);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Future Valuation Liabilities by Group", "RollForward", true, false, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Future Valuation Liabilities by Year", "RollForward", true, false, 0, new string[1] { "ALL" });
            }


            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Reconciliation to Prior Year", "RollForward", false, true);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Reconciliation to Prior Year by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Detailed Results", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Detailed Results by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Member Statistics", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Member Statistics", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Status Reconciliation", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Individual Checking Template", "RollForward", false, true, 0, new string[1] { "JUBI01" });
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Test Cases", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Valuation Summary", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Valuation Summary", "RollForward", false, true, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Valuation Summary for Excel Export", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Individual Output", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "IOE", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Payout Projection", "RollForward", false, true);
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Payout Projection", "RollForward", false, true, dic);
                //////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Liability Set for Globe Export", "RollForward", false, false, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Future Valuation Population Projection", "RollForward", false, false);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Future Valuation Summary", "RollForward", false, false, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Future Valuation Liabilities by Group", "RollForward", false, false, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Future Valuation Liabilities by Year", "RollForward", false, false, 0, new string[1] { "ALL" });
                ////////////pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "RollForward", false, false);
            }


            thrd_Jubilee_Valuation2011_Baseline.Start();


            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Valuation Summary", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "Future Valuation Summary", "RollForward", true, false, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputJubilee_Valuation2011_Baseline, "RollForward", true, false);



            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion

            #region Jubilee RF - Valuation2011 - Constant Number of Plan Members


            pMain._SelectTab("Valuation 2011");
            pMain._Home_ToolbarClick_Top(true);

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "Constant Number of Plan Members");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("FundingInformation_AddNew", "True");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            pMain._SelectTab("Valuation 2011");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("West", "");
            dic.Add("East", "");
            dic.Add("WestEast_FromData", "");
            dic.Add("Knappschaft", "");
            dic.Add("RV_FromData", "");
            dic.Add("HealthInsuranceWest_cbo_T", "SocSecHealthInsWestPrelim");
            dic.Add("RVWest_cbo_T", "SocSecRVWestPrelim");
            dic.Add("IncreaseRate_P", "");
            dic.Add("IncreaseRate_txt", "");
            dic.Add("ValuationAge", "");
            dic.Add("LastTableEntry", "");
            pSocialSecurityContributionCeilings._SocialSecurityContributionRates(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("West", "");
            dic.Add("East", "");
            dic.Add("WestEast_FromData", "");
            dic.Add("Knappschaft", "");
            dic.Add("RV_FromData", "");
            dic.Add("HealthInsuranceWest_cbo_T", "SocSecHealthInsWestPrelim");
            dic.Add("RVWest_cbo_T", "SocSecRVWestPrelim");
            dic.Add("IncreaseRate_P", "");
            dic.Add("IncreaseRate_txt", "");
            dic.Add("ValuationAge", "");
            dic.Add("LastTableEntry", "true");
            pSocialSecurityContributionCeilings._SocialSecurityContributionRates(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "JubiSalaryCurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "JUBI01");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2011");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "Pay1CurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "JUBI01");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Liab");


            pMain._SelectTab("Valuation 2011");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Liability Scenario", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Valuation Summary for Excel Export", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Individual Output", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Parameter Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Payout Projection", "RollForward", true, true);
                ////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Liability Set for Globe Export", "RollForward", true, false, 0, new string[1] { "ALL" });
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Payout Projection", "RollForward", true, false, dic);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Reconciliation to Baseline", "RollForward", true, false);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Liabilities Detailed Results", "RollForward", true, false);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Population Projection", "RollForward", true, false);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Parameter Print", "RollForward", true, false);

            }


            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Liability Scenario", "RollForward", false, true);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Liability Scenario by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Valuation Summary", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Valuation Summary for Excel Export", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Individual Output", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Test Cases", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "IOE", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Payout Projection", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Valuation Summary", "RollForward", false, true, 0, new string[1] { "ALL" });
                //////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Liability Set for Globe Export", "RollForward", false, false, 0, new string[1] { "ALL" });
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Payout Projection", "RollForward", false, true, dic);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Reconciliation to Baseline", "RollForward", false, false);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Reconciliation to Baseline by Plan Def", "RollForward", false, false);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Liabilities Detailed Results", "RollForward", false, false);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Liabilities Detailed Results by Plan Def", "RollForward", false, false);

                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Population Projection", "RollForward", false, false);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Summary", "RollForward", false, false, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Liabilities by Group", "RollForward", false, false, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Liabilities by Year", "RollForward", false, false, 0, new string[1] { "ALL" });
                ////////////////pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "RollForward", false, false);

            }

            thrd_Jubilee_Valuation2011_ConstantNumberOfPlanMembers.Start();


            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Valuation Summary", "RollForward", true, true, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Summary", "RollForward", true, false, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "RollForward", true, false);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Liabilities by Group", "RollForward", true, false, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers, "Future Valuation Liabilities by Year", "RollForward", true, false, 0, new string[1] { "ALL" });



            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2011");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion



            #region Data - Valuation2012


            pMain._SelectTab("Home");

            _gLib._MsgBox("Mannual Interaction", "Please mannually click on plan: " + Config.sClientName + ">>" + Config.sPlanName);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("AddVOtoRegistry", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EnterVOShortName", "CashBal01");
            dic.Add("ConfirmVOShortName", "CashBal01");
            dic.Add("VOLongName", "CashBalancePlan");
            dic.Add("VOClass", "");
            dic.Add("FundingVehicle", "");
            dic.Add("TypeOfPromise", "Defined Benefit with Contribution");
            dic.Add("Sponsor", "");
            dic.Add("PSVCoverage", "True");
            dic.Add("ExculdeWidowers", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("InternationalAccounting", "");
            dic.Add("Apply30g", "true");
            dic.Add("OK", "Click");
            pMain._PopVerify_CreateNewVO(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("AddVOtoRegistry", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EnterVOShortName", "SF01");
            dic.Add("ConfirmVOShortName", "SF01");
            dic.Add("VOLongName", "SupportFund");
            dic.Add("VOClass", "");
            dic.Add("FundingVehicle", "Support Fund");
            dic.Add("TypeOfPromise", "");
            dic.Add("Sponsor", "");
            dic.Add("PSVCoverage", "True");
            dic.Add("ExculdeWidowers", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("InternationalAccounting", "");
            dic.Add("Apply30g", "");
            dic.Add("OK", "Click");
            pMain._PopVerify_CreateNewVO(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("AddVOtoRegistry", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EnterVOShortName", "JUBI02");
            dic.Add("ConfirmVOShortName", "JUBI02");
            dic.Add("VOLongName", "jubilee02");
            dic.Add("VOClass", "jubilee");
            dic.Add("FundingVehicle", "");
            dic.Add("TypeOfPromise", "");
            dic.Add("Sponsor", "");
            dic.Add("PSVCoverage", "");
            dic.Add("ExculdeWidowers", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("InternationalAccounting", "");
            dic.Add("Apply30g", "");
            dic.Add("OK", "Click");
            pMain._PopVerify_CreateNewVO(dic);



            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "ParticipantData");
            pMain._HomeTreeViewSelect(0, dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "Valuation2012");
            dic.Add("EffectiveDate", "31.12.2012");
            dic.Add("Parent", "Valuation 2011");
            dic.Add("RSC", "");
            dic.Add("Shared", "True");
            dic.Add("GeneralUse", "True");
            dic.Add("Conversion", "");
            dic.Add("CopyDataService", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_DataServicePropeties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation2012");
            dic.Add("CheckPopup", "False");
            pMain._PopVerify_Home_RightPane(dic);


            pData._ts_UpdateIncludedVOs("CashBal01", true);
            pData._ts_UpdateIncludedVOs("DECO01", true);
            pData._ts_UpdateIncludedVOs("JUBI01", true);
            pData._ts_UpdateIncludedVOs("JUBI02", true);
            pData._ts_UpdateIncludedVOs("PENS01", true);
            pData._ts_UpdateIncludedVOs("PENS02", true);
            pData._ts_UpdateIncludedVOs("SF01", true);


            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Upload Data");
            pData._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\Data2012.xlsx");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Current View");
            pData._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Category", "Custom Fields");
            dic.Add("Label", "WhatIsTested");
            dic.Add("DisplayName", "");
            dic.Add("VariesbyVO", "");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "Text");
            dic.Add("FieldLength", "40");
            dic.Add("DecimalPlaces", "");
            dic.Add("FromDate", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._CV_AddSingleLabel(dic, false);


            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "New Individual People");
            dic.Add("MenuItem", "Remove file");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "New 2012 data PENS01");
            dic.Add("FileType", "Excel file");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "Data2012.xlsx");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "");
            dic.Add("FileType", "");
            dic.Add("Browse", "");
            dic.Add("SingleTabPerRecordFile_cbo", "PENS01");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);



            pData._SelectTab("Pre Matching Derivations");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Pay1CurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=ROUND(Pay1CurrentYear*1.05,2)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "New 2012 data PENS01");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "PENS02");
            dic.Add("FileType", "Excel file");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "Data2012.xlsx");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "");
            dic.Add("FileType", "");
            dic.Add("Browse", "");
            dic.Add("SingleTabPerRecordFile_cbo", "PENS02");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Pre Matching Derivations");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Pay1CurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=ROUND(Pay1CurrentYear*1.05,2)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "New 2012 data PENS01");
            pData._TreeViewSelect(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            dic.Add("WarehouseFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "4");
            dic.Add("Unique_UniqueMatch_Num", "104");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "1");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "Click");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "Matched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Matched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "Click");
            dic.Add("Unique_UniqueMatch", "");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "New");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of New");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "Click");
            dic.Add("AcceptAllRecordsAs_What", "Gone");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Gone");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Once the matching results have been processed, all the Import parameters for this file will become read-only. Do you wish to proceed?");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "The matching results have now been processed. All the Import parameters for this file are now read-only.");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "new CashBal plan 2012");
            dic.Add("FileType", "Excel file");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "Data2012.xlsx");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "");
            dic.Add("FileType", "");
            dic.Add("Browse", "");
            dic.Add("SingleTabPerRecordFile_cbo", "CashBal");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            dic.Add("WarehouseFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "");
            dic.Add("Unique_UniqueMatch_Num", "29");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "79");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "Click");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "Matched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Matched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "All 'UniqueUniqueMatch' records have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Once the matching results have been processed, all the Import parameters for this file will become read-only. Do you wish to proceed?");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "The matching results have now been processed. All the Import parameters for this file are now read-only.");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "new SupportFund");
            dic.Add("FileType", "Excel file");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "Data2012.xlsx");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "");
            dic.Add("FileType", "");
            dic.Add("Browse", "");
            dic.Add("SingleTabPerRecordFile_cbo", "SupFund01");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);


            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            dic.Add("WarehouseFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "23");
            dic.Add("Unique_UniqueMatch_Num", "0");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "108");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "Click");
            dic.Add("Unique_UniqueMatch", "");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "New");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of New");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "All 'UniqueNoMatch' records have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Once the matching results have been processed, all the Import parameters for this file will become read-only. Do you wish to proceed?");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "The matching results have now been processed. All the Import parameters for this file are now read-only.");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("Level_3", "Salary/Pay");
            dic.Add("MenuItem", "Remove Derivation Group");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("MenuItem", "Add new derivation group");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "VO DECO01");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "EeContribRate1Custom");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=ROUND(Pay1CurrentYear_C/10,2)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("MenuItem", "Add new derivation group");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "VO JUBI02");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "IsEligible_JUBI02");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "IsEligible_VOParent");
            dic.Add("Level_4", "IsEligible_JUBI01");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "Active Member");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IsEligible_JUBI01_C");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "PensionPromiseDate_JUBI02");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "DB Information");
            dic.Add("Level_3", "PensionPromiseDate_VOParent");
            dic.Add("Level_4", "PensionPromiseDate_JUBI01");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=PensionPromiseDate_JUBI01_C");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Snapshots");
            dic.Add("Level_3", "Unload 2010");
            dic.Add("MenuItem", "Remove snapshot");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Snapshots");
            dic.Add("Level_3", "FinalSnapshot");
            dic.Add("MenuItem", "Remove snapshot");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Snapshots");
            dic.Add("MenuItem", "Add new snapshot");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            pData._TreeViewSelect_Snapshots(dic, true);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "2012 Snapshot");
            dic.Add("UseLatestDate", "");
            dic.Add("Preview", "click");
            dic.Add("PublishSnapshot", "Click");
            dic.Add("CreateExtract", "");
            pData._PopVerify_Snapshots(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "click");
            pData._PopVerify_SP_Snapshots_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Valuation2012");
            dic.Add("Level_2", "Snapshots");
            dic.Add("MenuItem", "Add new snapshot");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            pData._TreeViewSelect_Snapshots(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "2012 Jubilee Snapshot");
            dic.Add("UseLatestDate", "true");
            dic.Add("Preview", "click");
            dic.Add("PublishSnapshot", "Click");
            dic.Add("CreateExtract", "");
            pData._PopVerify_Snapshots(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "click");
            pData._PopVerify_SP_Snapshots_Popup(dic);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion


            #region Pension RF - Valuation 2012 - Baseline


            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "PensionValuations");
            pMain._HomeTreeViewSelect(0, dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ConversionService", "");
            dic.Add("Name", "Valuation 2012");
            dic.Add("Parent", "Valuation 2011");
            dic.Add("ParentFinalValuationSet", "");
            dic.Add("PlanYearBeginningIn", "");
            dic.Add("FiscalYearEndingIn_Accounting", "");
            dic.Add("FirstYearPlanUnderPPA", "");
            dic.Add("PlanYearEndingIn_DE", "2012");
            dic.Add("RSC", "");
            dic.Add("LocalMarket", "");
            dic.Add("Shared", "True");
            dic.Add("SelectAllVO", "Click");
            dic.Add("DeselectAll", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_ServicePropeties(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation 2012");
            pMain._PopVerify_Home_RightPane(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Roll Forward");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "True");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Data");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Participant DataSet");

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("DataEffectiveDate", "31.12.2012");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("CompareData", "");
            dic.Add("ImportDataandApplyMapping", "");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "click");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("CompareData", "");
            dic.Add("ImportDataandApplyMapping", "");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "2012 Snapshot");
            dic.Add("OK", "Click");
            dic.Add("RetainThePreviousUnload", "");
            dic.Add("SpecifyANewSnapshotRetainingPrevious", "True");
            dic.Add("SpecifyANewSnapshotRevertingAllFields", "");
            dic.Add("SpecifyANewUnload", "");
            dic.Add("SelectSnapshotOption_OK", "Click");
            pParticipantDataSet._PopVerify_SelectSnapshotDefinition(dic);


            pParticipantDataSet._Initialzie();

            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "ImportName");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "");
            pParticipantDataSet._SetFieldProperty(dic);

            dic.Clear();
            dic.Add("Level_1", "Custom Fields");
            dic.Add("Level_2", "SaveEmployeeIDNumber");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "");
            pParticipantDataSet._SetFieldProperty(dic);

            dic.Clear();
            dic.Add("Level_1", "Custom Fields");
            dic.Add("Level_2", "WhatIsTested");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "");
            pParticipantDataSet._SetFieldProperty(dic);

            dic.Clear();
            dic.Add("Level_1", "DC Information");
            dic.Add("Level_2", "EeContribRate1Custom");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "");
            pParticipantDataSet._SetFieldProperty(dic);


            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "Pay1");
            dic.Add("Level_4", "Pay1CurrentYear");
            pParticipantDataSet._Navigate(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "Pay1");
            dic.Add("Level_4", "Pay1CurrentYear");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "true");
            pParticipantDataSet._SetFieldProperty(dic);

            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "Pay1");
            dic.Add("Level_4", "Pay1PriorYear1");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "true");
            pParticipantDataSet._SetFieldProperty(dic);

            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "Pay1");
            dic.Add("Level_4", "Pay1PriorYear2");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "true");
            pParticipantDataSet._SetFieldProperty(dic);

            pParticipantDataSet._ExpandOrCollapseFirstLevel("Personal Information");


            ////// find and return the joint of pay 
            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "JubiSalary");
            dic.Add("ReturnPosLevel", "2");
            Mouse.Click(pParticipantDataSet.wRetirementStudio.wFPGrid.grid, pParticipantDataSet._Navigate(dic, false));


            pParticipantDataSet._ExpandOrCollapseFirstLevel("Personal Information");


            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "JubiSalary");
            dic.Add("Level_4", "JubiSalaryCurrentYear");
            pParticipantDataSet._Navigate(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "JubiSalary");
            dic.Add("Level_4", "JubiSalaryCurrentYear");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "true");
            pParticipantDataSet._SetFieldProperty(dic);

            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "JubiSalary");
            dic.Add("Level_4", "JubiSalaryPriorYear1");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "true");
            pParticipantDataSet._SetFieldProperty(dic);

            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "JubiSalary");
            dic.Add("Level_4", "JubiSalaryPriorYear2");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "true");
            pParticipantDataSet._SetFieldProperty(dic);



            pParticipantDataSet._ExpandOrCollapseFirstLevel("Personal Information");


            //// find and return the joint of pay 
            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "JubiSalary");
            dic.Add("ReturnPosLevel", "2");
            Mouse.Click(pParticipantDataSet.wRetirementStudio.wFPGrid.grid, pParticipantDataSet._Navigate(dic, false));


            pParticipantDataSet._ExpandOrCollapseFirstLevel("Personal Information");

            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "SVSalary");
            dic.Add("Level_4", "SVSalaryCurrentYear");
            pParticipantDataSet._Navigate(dic, true, false);


            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "SVSalary");
            dic.Add("Level_4", "SVSalaryCurrentYear");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "true");
            pParticipantDataSet._SetFieldProperty(dic);

            Keyboard.SendKeys("{Up}");


            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "SVSalary");
            dic.Add("Level_4", "SVSalaryPriorYear1");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "true");
            pParticipantDataSet._SetFieldProperty(dic);

            dic.Clear();
            dic.Add("Level_1", "Personal Information");
            dic.Add("Level_2", "Pay");
            dic.Add("Level_3", "SVSalary");
            dic.Add("Level_4", "SVSalaryPriorYear2");
            dic.Add("bIsIncludeInReport_Disabled", "false");
            dic.Add("bIncludeInReport", "true");
            dic.Add("sComparisonType", "");
            dic.Add("bALL", "");
            dic.Add("bACT", "");
            dic.Add("bDEF", "");
            dic.Add("bPEN", "");
            dic.Add("bServiceFirstSubItem", "");
            dic.Add("bContinueWithoutCollapse", "true");
            pParticipantDataSet._SetFieldProperty(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "Click");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            pMain._SelectTab("Participant DataSet");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Custom Rates");
            dic.Add("MenuItem", "Add Custom Rates");
            pAssumptions._TreeViewRightSelect(dic, "CR_CustomRate1");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Custom Rates");
            dic.Add("Level_3", "CR_CustomRate1");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "5,5555");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            dic.Add("AsOfDate", "");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);


            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Assumed Retirement Age");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Calculate", "True");
            dic.Add("FromData", "");
            dic.Add("CustomCode", "");
            pAssumedRetirementAge._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Fruhestmogliches", "");
            dic.Add("Regelaltersgrenze", "true");
            dic.Add("ContractualRetureentAge", "");
            dic.Add("OverwriteWithIndividual_V", "");
            dic.Add("OverwriteWithIndividual_cbo", "");
            dic.Add("OverwriteWithIndividual_C", "");
            dic.Add("OverwriteWithIndividual_txt", "");
            pAssumedRetirementAge._PopVerify_Calculate(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "");
            dic.Add("AsOfDate", "31.12.2012");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Custom Rates");
            dic.Add("Level_3", "CR_CustomRate1");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "5,5555");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("West", "");
            dic.Add("East", "");
            dic.Add("WestEast_FromData", "True");
            dic.Add("Knappschaft", "");
            dic.Add("RV_FromData", "");
            dic.Add("HealthInsuranceWest_cbo_T", "");
            dic.Add("RVWest_cbo_T", "");
            dic.Add("IncreaseRate_P", "");
            dic.Add("IncreaseRate_txt", "");
            dic.Add("ValuationAge", "");
            dic.Add("LastTableEntry", "");
            pSocialSecurityContributionCeilings._SocialSecurityContributionRates(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            dic.Add("AsOfDate", "");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "");
            dic.Add("AdjustFactorrFromNextToGross", "");
            dic.Add("TaxTariff", "2014");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "One Year Projection");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Actives_txt", "1,333333");
            dic.Add("Pensions_txt", "2,333333");
            dic.Add("Deferred_txt", "3,333333");
            pOneYearProjection._OneYearProjection(dic);



            pAssumptions._TreeView_SelectTab("IntAccounting");


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "true");
            dic.Add("Rate", "");
            pInterestRate._PopVerify_PrescribedRates(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AsOfDate", "");
            dic.Add("ForActuarialEquivalence", "");
            dic.Add("ForwardRate", "");
            dic.Add("SpotRate", "Click");
            dic.Add("AddRow", "Click");
            pInterestRate._PopVerify_TimeBased(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("NumberOfYears", "3");
            dic.Add("Rate", "5,00000000");
            pInterestRate._TimeBased_Table_DE(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AsOfDate", "");
            dic.Add("ForActuarialEquivalence", "");
            dic.Add("ForwardRate", "");
            dic.Add("SpotRate", "");
            dic.Add("AddRow", "Click");
            pInterestRate._PopVerify_TimeBased(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("NumberOfYears", "5");
            dic.Add("Rate", "4,50000000");
            pInterestRate._TimeBased_Table_DE(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AsOfDate", "");
            dic.Add("ForActuarialEquivalence", "");
            dic.Add("ForwardRate", "");
            dic.Add("SpotRate", "");
            dic.Add("AddRow", "Click");
            pInterestRate._PopVerify_TimeBased(dic);

            dic.Clear();
            dic.Add("iRow", "3");
            dic.Add("NumberOfYears", "10");
            dic.Add("Rate", "4,00000000");
            pInterestRate._TimeBased_Table_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AsOfDate", "");
            dic.Add("ForActuarialEquivalence", "");
            dic.Add("ForwardRate", "");
            dic.Add("SpotRate", "");
            dic.Add("AddRow", "Click");
            pInterestRate._PopVerify_TimeBased(dic);

            dic.Clear();
            dic.Add("iRow", "4");
            dic.Add("NumberOfYears", "15");
            dic.Add("Rate", "3,50000000");
            pInterestRate._TimeBased_Table_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AsOfDate", "");
            dic.Add("ForActuarialEquivalence", "");
            dic.Add("ForwardRate", "");
            dic.Add("SpotRate", "");
            dic.Add("AddRow", "Click");
            pInterestRate._PopVerify_TimeBased(dic);

            dic.Clear();
            dic.Add("iRow", "5");
            dic.Add("NumberOfYears", "20");
            dic.Add("Rate", "3,00000000");
            pInterestRate._TimeBased_Table_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("Other", "True");
            dic.Add("AsOfDate", "");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Methods");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("CostMethod", "Entry Age Normal (modified)");
            dic.Add("MembershipDate", "MembershipDate1");
            dic.Add("AnnualIncreaseRate", "AsPI_PayIncreaseRate");
            dic.Add("EarliestEntryAgeMethod", "");
            dic.Add("EarliestEntryAge_txt", "15");
            dic.Add("AllowNegativeNormal", "");
            pMethods_DE._Table_TradeLiability(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Provisions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Provisions");


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Social Security");
            dic.Add("MenuItem", "Add Social Security");
            pAssumptions._TreeViewRightSelect(dic, "NewSocialSecurity1");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Social Security");
            dic.Add("Level_6", "NewSocialSecurity1");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SaveThisBenefit", "true");
            dic.Add("Method_Salary", "PP_ProjectedPay");
            dic.Add("SSCC_Increase", "AsPI_PayIncreaseRate");
            dic.Add("AktuellerRentenwert_Increase", "CostOfLivingIncreaseAssumption");
            dic.Add("VorlDurchs_Increase", "CostOfLivingIncreaseAssumption");
            pSocialSecurity._SocialSecurity(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Versorgungsausgleich");
            dic.Add("MenuItem", "Add Versorgungsausgleich");
            pAssumptions._TreeViewRightSelect(dic, "newVAFormula");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Versorgungsausgleich");
            dic.Add("Level_6", "newVAFormula");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Reductionamount", "VABenefit1DB");
            dic.Add("Reductionage_txt", "65");
            dic.Add("Benefitformula", "CFB_FinalBenefit");
            pVersorgungsausgleich._Versorgungsausgleich(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "True");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "True");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "");
            dic.Add("SingleFormulaOrBenefit_cbo", "");
            dic.Add("Function", "$CFB_FinalBenefit+$NewSocialSecurity1_SSRET");
            dic.Add("Validate", "click");
            dic.Add("VersorgungsausgleichAdjustment_cbo", "newVAFormula");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "ERF_EarlyRetirementFactor");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "DisabilityPension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "True");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "True");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Function", "$CFB_FinalBenefit+$NewSocialSecurity1_SSDIS");
            dic.Add("Validate", "click");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("VersorgungsausgleichAdjustment_cbo", "newVAFormula");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "SpousePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "True");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "True");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Function", "$CFB_FinalBenefit+$NewSocialSecurity1_SSDTH");
            dic.Add("Validate", "click");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("VersorgungsausgleichAdjustment_cbo", "newVAFormula");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            dic.Add("Level_3", "Benefit Definition");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS02");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            dic.Add("MenuItem", "Copy VO From");
            pAssumptions._TreeViewRightSelect(dic, "");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Client", Config.sClientName);
            dic.Add("Plan", Config.sPlanName);
            dic.Add("ServiceInstance", "");
            dic.Add("ValuationNode", "");
            dic.Add("VOShortName", "PENS02");
            dic.Add("OK", "click");
            pMain._PopVerify_CopyProvisionSet_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("MenuItem", "Add Override Definition");
            pAssumptions._TreeViewRightSelect(dic, "NewOverrideDefinition1");


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition1");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "IntAcc");
            dic.Add("IntlAccountingABO", "True");
            dic.Add("IntlAccountingPBO", "True");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition1");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "Trade");
            dic.Add("IntlAccountingABO", "");
            dic.Add("IntlAccountingPBO", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "True");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition1");
            dic.Add("Level_6", "AllOthers");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PSVSupportFundContributionBasisActivesAndDeferreds");
            dic.Add("Expression", "$_PSVSupportFundContributionBasisActivesAndDeferreds+4000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PSVSupportFundContributionBasisPensioners");
            dic.Add("Expression", "$_PSVSupportFundContributionBasisPensioners+3000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_SupportFundMaximumAllocation");
            dic.Add("Expression", "$_SupportFundMaximumAllocation+2000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_SupportFundMaximumLevel");
            dic.Add("Expression", "$_SupportFundMaximumLevel+1000");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition1");
            dic.Add("Level_6", "AllOthers");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "OverwriteMale");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition1");
            dic.Add("Level_6", "AllOthers");
            dic.Add("Level_7", "OverwriteMale");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PSVSupportFundContributionBasisActivesAndDeferreds");
            dic.Add("Expression", "$_PSVSupportFundContributionBasisActivesAndDeferreds+4000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PSVSupportFundContributionBasisPensioners");
            dic.Add("Expression", "$_PSVSupportFundContributionBasisPensioners+3000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_SupportFundMaximumAllocation");
            dic.Add("Expression", "$_SupportFundMaximumAllocation+2000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_SupportFundMaximumLevel");
            dic.Add("Expression", "$_SupportFundMaximumLevel+1000");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "OverwriteMale");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.Gender=\"M\"");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Pay Credit");
            dic.Add("Level_6", "PC_Contribution");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "Round($emp.EeContribRate1Custom/100,2)");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "DECO01");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("MenuItem", "Copy VO From");
            pAssumptions._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Client", Config.sClientName);
            dic.Add("Plan", Config.sPlanName);
            dic.Add("ServiceInstance", "");
            dic.Add("ValuationNode", "");
            dic.Add("VOShortName", "DECO01");
            dic.Add("OK", "click");
            pMain._PopVerify_CopyProvisionSet_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Pay Credit");
            dic.Add("Level_6", "PC_Contribution");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "True");
            dic.Add("CustomCode", "");
            pPayAverage._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ProjectedSalary", "PP_ProjectedPay");
            dic.Add("ServiceBasedOn", "SVC_PensionableService");
            pPayCredit._PopVerify_Standard(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "");
            dic.Add("CustomCode", "");
            dic.Add("ServiceProrateFormula", "");
            dic.Add("ServiceProrateReduction", "");
            dic.Add("PayAverage", "");
            dic.Add("Service", "");
            dic.Add("ServiceLimitTo", "");
            dic.Add("StopAccrualAt_V", "");
            dic.Add("StopAccrualAt_C", "");
            dic.Add("StopAccrualAt_cbo", "");
            dic.Add("StopAccrualAt_TXT", "");
            dic.Add("RateTiersBasedOn", "Service");
            dic.Add("NumberOfRateTiers", "2");
            dic.Add("IntegrationType", "Excess");
            dic.Add("NumberOfBreakPoints", "");
            pFAEFormula._PopVerify_Standard(dic);


            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("btnC", "");
            dic.Add("btnV", "");
            dic.Add("sData2", "");
            dic.Add("sData3", "20");
            dic.Add("sData4", "50");
            pFAEFormula._TBL_Excess_MoreThanOneTires(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("btnC", "");
            dic.Add("btnV", "Click");
            dic.Add("sData2", "_SocSecContribCeiling");
            dic.Add("sData3", "1,0");
            dic.Add("sData4", "2,0");
            pFAEFormula._TBL_Excess_MoreThanOneTires(dic);

            dic.Clear();
            dic.Add("iRow", "3");
            dic.Add("btnC", "");
            dic.Add("btnV", "");
            dic.Add("sData2", "");
            dic.Add("sData3", "3,0");
            dic.Add("sData4", "5,0");
            pFAEFormula._TBL_Excess_MoreThanOneTires(dic);


            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Assumptions");

            pAssumptions._TreeView_SelectTab("IntAccounting");


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Custom Rates");
            dic.Add("Level_3", "CR_CustomRate1");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "");
            dic.Add("PercentIcon", "");
            dic.Add("TIcon", "");
            dic.Add("txtRate", "5,5555");
            dic.Add("cboRate", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);



            pMain._SelectTab("Provisions");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Cash Balance");
            dic.Add("MenuItem", "Add Cash Balance");
            pAssumptions._TreeViewRightSelect(dic, "CB_CashBalance");


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Cash Balance");
            dic.Add("Level_6", "CB_CashBalance");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SimpleLinearization", "");
            dic.Add("LinearizationWithBreakpoint", "true");
            dic.Add("HistoricalValuations", "");
            dic.Add("CustomCode", "");
            pCashBalance._Main(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AccountBalance", "ErAccountBalance1");
            dic.Add("PriodYear", "true");
            dic.Add("BreakPoint_C", "click");
            dic.Add("BreakPoint_txt", "0,00");
            dic.Add("BreakPointAge", "$HireAge");
            dic.Add("PayCredits_PayCredits", "PC_Contribution");
            dic.Add("InterestCredit_RateOnBalance_TheSame", "");
            dic.Add("InterestCredit_RateOnBalance_Difference", "true");
            pCashBalance._LinearizationWithBreakpoint(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("ForAges", "");
            dic.Add("Rates", "CR_CustomRate1");
            dic.Add("CreditingPeriod", "");
            dic.Add("CreditingFrequency", "");
            pCashBalance._LinearizationWithBreakpoint_tbl(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("ForAges", "");
            dic.Add("Rates", "#1#");
            dic.Add("CreditingPeriod", "");
            dic.Add("CreditingFrequency", "");
            pCashBalance._LinearizationWithBreakpoint_tbl(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$CB_CashBalance");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Versorgungsausgleich");
            dic.Add("MenuItem", "Add Versorgungsausgleich");
            pAssumptions._TreeViewRightSelect(dic, "newVAFormula");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Versorgungsausgleich");
            dic.Add("Level_6", "newVAFormula");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Reductionamount", "VABenefit1DB");
            dic.Add("Reductionage_txt", "");
            dic.Add("Benefitformula", "CFB_FinalBenefit");
            pVersorgungsausgleich._Versorgungsausgleich(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "True");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ParticipantType", "");
            dic.Add("SingleFormulaOrBenefit_cbo", "");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_LumpSum");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("VersorgungsausgleichAdjustment_cbo", "newVAFormula");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Benefit Definition");
            pAssumptions._Collapse(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("MenuItem", "Add Override Definition");
            pAssumptions._TreeViewRightSelect(dic, "NewOverrideDefinition2");


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition2");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "IntAcc");
            dic.Add("IntlAccountingABO", "True");
            dic.Add("IntlAccountingPBO", "True");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition2");
            dic.Add("Level_6", "IntAcc");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_ABO_AL");
            dic.Add("Expression", "$_ABO_AL+500");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_ABO_NC");
            dic.Add("Expression", "$_ABO_NC+500");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PBO_AL");
            dic.Add("Expression", "$_PBO_AL+500");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PBO_NC");
            dic.Add("Expression", "$_PBO_NC+500");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition2");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "Trade");
            dic.Add("IntlAccountingABO", "");
            dic.Add("IntlAccountingPBO", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "True");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition2");
            dic.Add("Level_6", "Trade");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_ModTeilwert");
            dic.Add("Expression", "$_ModTeilwert+2000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Trade_AL");
            dic.Add("Expression", "$_Trade_AL+2000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PR_TradeModEAN_Total");
            dic.Add("Expression", "$_PR_TradeModEAN+2000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Trade_NC");
            dic.Add("Expression", "$_Trade_NC+2000");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "NewOverrideDefinition2");
            dic.Add("Level_6", "AllOthers");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_BookReserve");
            dic.Add("Expression", "$_BookReserve+1000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PSV_Contribution_Basis");
            dic.Add("Expression", "$_PSV_Contribution_Basis+1000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_TeilwertNY");
            dic.Add("Expression", "$_TeilwertNY+1000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Teilwert_PSV");
            dic.Add("Expression", "$_Teilwert_PSV+1000");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            pAssumptions._Collapse(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Methods");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "click");
            dic.Add("iRow", "6");
            dic.Add("isDisableTrade", "true");
            dic.Add("VOShortName", "CashBal01");
            dic.Add("BenefitDefinition", "OldAgePension");
            dic.Add("Trade", "");
            dic.Add("IntAcctng", "True");
            dic.Add("PUCOverride", "Traditional Unit Credit");
            dic.Add("TUCOverride", "No Override");
            pMethods_DE._MethodOverrieds_Table(dic);


            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Provisions");


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "True");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("VersorgungsausgleichAdjustment_cbo", "VABenefit1DB");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "StoppingBenefit");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Pensioner");
            dic.Add("Level_6", "StoppingBenefit");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit_cbo", "Benefit1DB");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "click");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "click");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "click");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "click");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "click");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "Click");
            dic.Add("BenefitCommencementAge_cbo", "StartDate1");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "60");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("VestingDefinition", "");
            dic.Add("VersorgungsausgleichAdjustment_cbo", "VABenefit1DB");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.SalariedFlag=1");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Versorgungsausgleich");
            dic.Add("MenuItem", "Add Versorgungsausgleich");
            pAssumptions._TreeViewRightSelect(dic, "newVAFormula");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Versorgungsausgleich");
            dic.Add("Level_6", "newVAFormula");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Reductionamount", "VABenefit1DB");
            dic.Add("Reductionage_txt", "");
            dic.Add("Benefitformula", "CFB_FinalBenefit");
            pVersorgungsausgleich._Versorgungsausgleich(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Form of Payment");
            dic.Add("Level_5", "FOP_StraightLife");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType", "");
            dic.Add("NumOfPayPerYear_C", "click");
            dic.Add("btnGuaranteePeriod_V", "click");
            dic.Add("GuaranteePeriod_cbo", "YearsCertain1");
            dic.Add("btnGuaranteePeriod_C", "");
            dic.Add("cboGuaranteePeriod_YearMonth", "");
            pFormOfPayment_DE._PopVerify_FormOfPayment(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "True");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("VersorgungsausgleichAdjustment_cbo", "newVAFormula");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "manNumberofPayments");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("Level_6", "manNumberofPayments");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "True");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit_cbo", "CFB_FinalBenefit");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "click");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "click");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "click");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "click");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "click");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "click");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "60");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "COLA_CostOfLivingAdjustment");
            dic.Add("EarlyRetirement", "ERF_EarlyRetirementFactor");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "VST_LegalVesting");
            dic.Add("VersorgungsausgleichAdjustment_cbo", "newVAFormula");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);


            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.SalariedFlag=1");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "SpousePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "True");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("VersorgungsausgleichAdjustment_cbo", "newVAFormula");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            pMain._Home_ToolbarClick_Top(true);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Report Breaks");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BreakFields", "SubsidiaryCode");
            dic.Add("TextSubstitution", "");
            dic.Add("Remove", "");
            dic.Add("OK", "");
            pReportBreaks._PopVerify_ReportBreaks(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("BreakFields", "VOShortName");
            dic.Add("TextSubstitution", "click");
            dic.Add("Remove", "");
            dic.Add("OK", "");
            pReportBreaks._PopVerify_ReportBreaks(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("Reomve", "");
            pReportBreaks._BreakFieldTextSubstitution_SelectBreakFields(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BreakFieldValue", "Sub2");
            dic.Add("SubstitutionText", "Sub2Text");
            dic.Add("Remove", "");
            dic.Add("OK", "");
            pReportBreaks._BreakFieldTextSubstitution_TextSubstitution(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("BreakFieldValue", "Sub1");
            dic.Add("SubstitutionText", "Sub1Text");
            dic.Add("Remove", "");
            dic.Add("OK", "");
            pReportBreaks._BreakFieldTextSubstitution_TextSubstitution(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("BreakFieldValue", "Sub3");
            dic.Add("SubstitutionText", "Sub3Text");
            dic.Add("Remove", "");
            dic.Add("OK", "click");
            pReportBreaks._BreakFieldTextSubstitution_TextSubstitution(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("BreakFields", "");
            dic.Add("TextSubstitution", "");
            dic.Add("Remove", "");
            dic.Add("OK", "click");
            pReportBreaks._PopVerify_ReportBreaks(dic);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Test Case");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"09.01.1975\" and $emp.VOShortName=\"PENS01\" and $emp.ParticipantStatus=\"IN\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=10 and $emp.VOShortName=\"PENS01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=100 and $emp.VOShortName=\"DECO01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=11 and $emp.VOShortName=\"PENS01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=116 and $emp.VOShortName=\"CashBal01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=13 and $emp.VOShortName=\"DECO01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=131 and $emp.VOShortName=\"CashBal01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=142 and $emp.VOShortName=\"PENS01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=17 and $emp.VOShortName=\"DECO01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=2012104 and $emp.VOShortName=\"SF01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=2012105 and $emp.VOShortName=\"SF01\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=7 and $emp.VOShortName=\"PENS02\"");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "True");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_ProjectedPay");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "True");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "true");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true);

            pMain._Home_ToolbarClick_Top(true);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Actuarial Report");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pActuarialReport._SelectTab("General");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ShowLYLiabilitiesInLastYear", "");
            dic.Add("MecerLocation", "Stuttgart");
            dic.Add("NameToBePrintedOnReportLeft", "Martin Holzwarth");
            dic.Add("AcademicTitleOfPersonLeft", "Grandmaster");
            dic.Add("NameToBePrintedOnReportRight", "Stefan Heinzmann");
            dic.Add("AcademicTitleOfPersonRight", "Master");
            dic.Add("ExtensionOfUndersigningPersonRight", "+49 711 23716 0");
            dic.Add("LocationOfUndersigningPersonRight", "Stuttgart");
            dic.Add("DoNotAttachTermsAndConditions", "");
            pActuarialReport._General(dic);


            pActuarialReport._SelectTab("Subsidiary Information");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ClientLongName", "");
            dic.Add("ClientLongName_txt", "");
            dic.Add("ClientShortName", "");
            dic.Add("ClientShortName_txt", "");
            dic.Add("ClientCode", "");
            dic.Add("AddressLine1", "true");
            dic.Add("AddressLine1_txt", "Calwer Straße 11");
            dic.Add("City", "true");
            dic.Add("City_txt", "Stuttgart");
            dic.Add("PostalCode", "true");
            dic.Add("PostalCode_txt", "7111");
            dic.Add("Country", "true");
            dic.Add("Country_txt", "Deutschland");
            pActuarialReport._SubsidiaryInformation(dic);


            pActuarialReport._SelectTab("Report Contents");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Copy", "click");
            dic.Add("CopyAStandLayout", "true");
            dic.Add("Template", "Benchmark_DirProm");
            dic.Add("OK", "click");
            pActuarialReport._ManageIndividualListingLayouts(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Copy", "click");
            dic.Add("CopyAStandLayout", "true");
            dic.Add("Template", "DirectPromise_2013");
            dic.Add("OK", "click");
            pActuarialReport._ManageIndividualListingLayouts(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Copy", "click");
            dic.Add("CopyAStandLayout", "");
            dic.Add("Template", "Copy of DirectPromise_2013");
            dic.Add("OK", "click");
            pActuarialReport._ManageIndividualListingLayouts(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iListing", "1");
            pActuarialReport._TemplateandIndividualListing_AddColumn(dic);



            ///////// according to email to change from 2013 to 2015

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("ReportSetName", "DPNormal");
            dic.Add("ReportType", "Direct Promise");
            dic.Add("ReportTemplate", "2015_DEDirectPromise");
            dic.Add("Listing1", "DirectPromise_2013");
            dic.Add("Listing2", "Benchmark_DirProm");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("ReportSetName", "DPAccounting");
            dic.Add("ReportType", "Direct Promise");
            dic.Add("ReportTemplate", "2015_DEDirectPromiseAccountingBasis");
            dic.Add("Listing1", "Copy of DirectPromise_2013");
            dic.Add("Listing2", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("ReportSetName", "IFRSGer");
            dic.Add("ReportType", "IFRS");
            dic.Add("ReportTemplate", "2015_DEIFRSGerman");
            dic.Add("Listing1", "IFRS default");
            dic.Add("Listing2", "Benchmark_DirProm");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("ReportSetName", "IFRSEng");
            dic.Add("ReportType", "IFRS");
            dic.Add("ReportTemplate", "2015_DEIFRSEnglish");
            dic.Add("Listing1", "");
            dic.Add("Listing2", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "5");
            dic.Add("ReportSetName", "OENYEARTWNY");
            dic.Add("ReportType", "Direct Promise");
            dic.Add("ReportTemplate", "2015_DEOneYearProjectionRF");
            dic.Add("Listing1", "");
            dic.Add("Listing2", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "6");
            dic.Add("ReportSetName", "PensIncr");
            dic.Add("ReportType", "Direct Promise");
            dic.Add("ReportTemplate", "2015_DEPensionIncrease");
            dic.Add("Listing1", "");
            dic.Add("Listing2", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "7");
            dic.Add("ReportSetName", "ONEYEARRF");
            dic.Add("ReportType", "Direct Promise");
            dic.Add("ReportTemplate", "2015_DEOneYearProjectionTWNY");
            dic.Add("Listing1", "");
            dic.Add("Listing2", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "8");
            dic.Add("ReportSetName", "DPPSV");
            dic.Add("ReportType", "Direct Promise");
            dic.Add("ReportTemplate", "2015_DirectPromisePSV");
            dic.Add("Listing1", "");
            dic.Add("Listing2", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "9");
            dic.Add("ReportSetName", "SF");
            dic.Add("ReportType", "Support Fund");
            dic.Add("ReportTemplate", "2015_DESupportFund");
            dic.Add("Listing1", "Support fund default");
            dic.Add("Listing2", "Benchmark_DirProm");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "10");
            dic.Add("ReportSetName", "SFAccounting");
            dic.Add("ReportType", "Support Fund");
            dic.Add("ReportTemplate", "2015_DESupportFundAccountingBasis");
            dic.Add("Listing1", "");
            dic.Add("Listing2", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "11");
            dic.Add("ReportSetName", "SFPSV");
            dic.Add("ReportType", "Support Fund");
            dic.Add("ReportTemplate", "2015_DESupportFundPSV");
            dic.Add("Listing1", "");
            dic.Add("Listing2", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "12");
            dic.Add("ReportSetName", "USGAAP");
            dic.Add("ReportType", "IFRS");
            dic.Add("ReportTemplate", "2015_DEUSGAAPEnglish");
            dic.Add("Listing1", "");
            dic.Add("Listing2", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("VOShortName", "PENS01");
            dic.Add("VOZusammenfassung", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 1.docx");
            dic.Add("VOSummary", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 1.docx");
            pActuarialReport._ReportContents_VOSummaries(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("VOShortName", "DECO01");
            dic.Add("VOZusammenfassung", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 2.docx");
            dic.Add("VOSummary", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 2.docx");
            pActuarialReport._ReportContents_VOSummaries(dic);

            pMain._Home_ToolbarClick_Top(true);



            pActuarialReport._SelectTab("Tax and Trade");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DirectPromise", "true");
            dic.Add("SupportFund", "true");
            dic.Add("NameOfSupportFund", "");
            dic.Add("NumberOfReports", "6");
            pActuarialReport._TaxAndTrade(dic);


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Break field1 value");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "Sub1");
                dic.Add("sFieldType", "txt");
                pActuarialReport._TaxAndTrade_TBL(dic);
            }

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field1 value");
            dic.Add("iCol", "3");
            dic.Add("sData", "Sub2");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            for (int i = 4; i <= 6; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Break field1 value");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "Sub1");
                dic.Add("sFieldType", "txt");
                pActuarialReport._TaxAndTrade_TBL(dic);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "CashBal01");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "2");
            dic.Add("sData", "PENS01");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "3");
            dic.Add("sData", "CashBal01");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "4");
            dic.Add("sData", "PENS02");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "5");
            dic.Add("sData", "DECO01");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "6");
            dic.Add("sData", "SF01");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Direct Promise Report Set 1");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "DPNormal");
                dic.Add("sFieldType", "LIST");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Direct Promise Report Set 1");
            dic.Add("iCol", "3");
            dic.Add("sData", "DPAccounting");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            for (int i = 4; i <= 5; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Direct Promise Report Set 1");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "DPNormal");
                dic.Add("sFieldType", "LIST");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Direct Promise Report Set 2");
            dic.Add("iCol", "1");
            dic.Add("sData", "DPAccounting");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Direct Promise Report Set 2");
            dic.Add("iCol", "2");
            dic.Add("sData", "PensIncr");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Direct Promise Report Set 3");
            dic.Add("iCol", "1");
            dic.Add("sData", "OENYEARTWNY");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Direct Promise Report Set 3");
            dic.Add("iCol", "2");
            dic.Add("sData", "DPPSV");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Direct Promise Report Set 4");
            dic.Add("iCol", "1");
            dic.Add("sData", "ONEYEARRF");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Direct Promise Special Aspects German");
            dic.Add("iCol", "3");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 1.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Direct Promise Special Aspects English");
            dic.Add("iCol", "4");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 2.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            for (int i = 1; i <= 6; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Run Date");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "01.12.2012");
                dic.Add("sFieldType", "date");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 6; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Run date of last year's report");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "01.12.2011");
                dic.Add("sFieldType", "date");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Benefit Type Name");
            dic.Add("iCol", "3");
            dic.Add("sData", "Sterbegelder");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Benefit Type Name");
            dic.Add("iCol", "4");
            dic.Add("sData", "Krankheitsbeihilfen");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Benefit Type Name");
            dic.Add("iCol", "5");
            dic.Add("sData", "Überbrückungsgelder");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Benefit Type Name");
            dic.Add("iCol", "6");
            dic.Add("sData", "Deputate");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            for (int i = 1; i <= 6; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Inventory Date");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "31.10.2012");
                dic.Add("sFieldType", "date");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show only basic liabilities (Tax)");
            dic.Add("iCol", "4");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Reconciliation report is required");
            dic.Add("iCol", "2");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show only basic liabilities (Trade)");
            dic.Add("iCol", "4");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show complete reconcilation of pension expense for Trade");
            dic.Add("iCol", "2");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "IntAcc is part of report");
            dic.Add("iCol", "3");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "IFRS is part of report");
            dic.Add("iCol", "3");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "US is part of report");
            dic.Add("iCol", "3");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show alternate interest rate IntAcc result");
            dic.Add("iCol", "3");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Alternate Interest Rate IntAcc");
            dic.Add("iCol", "3");
            dic.Add("sData", "0,55%");
            dic.Add("sFieldType", "text");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show alternate COLA rate result");
            dic.Add("iCol", "3");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Alternate COLA rate");
            dic.Add("iCol", "3");
            dic.Add("sData", "11,23%");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            ////////////dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate interest rate");
            dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate interest rate IntAcc");
            dic.Add("iCol", "3");
            dic.Add("sData", "77777,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////dic.Add("InformationByBreak", "Current service cost under alternate interest rate");
            dic.Add("InformationByBreak", "Current service cost under alternate interest rate IntAcc");
            dic.Add("iCol", "3");
            dic.Add("sData", "777,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate COLA rate");
            dic.Add("iCol", "3");
            dic.Add("sData", "88888,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Current service cost under alternate COLA rate");
            dic.Add("iCol", "3");
            dic.Add("sData", "888,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Next year's expected benefit payments under alternate COLA rate");
            dic.Add("iCol", "3");
            dic.Add("sData", "55555,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Presentation of minimum book reserve is required");
            dic.Add("iCol", "1");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Shareholding managers");
            dic.Add("iCol", "2");
            dic.Add("sData", "Only shareholding managers");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing withdrawal treatment");
            dic.Add("iCol", "2");
            dic.Add("sData", "Client Specific");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing withdrawal treatment");
            dic.Add("iCol", "3");
            dic.Add("sData", "Percentage");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing withdrawal treatment");
            dic.Add("iCol", "4");
            dic.Add("sData", "Heubeck");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing beneficiary methods");
            dic.Add("iCol", "3");
            dic.Add("sData", "Collective");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing beneficiary methods");
            dic.Add("iCol", "4");
            dic.Add("sData", "Individual");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing beneficiary methods");
            dic.Add("iCol", "5");
            dic.Add("sData", "Dependent on marital status");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing chosen assumed retirement age (trade)");
            dic.Add("iCol", "3");
            ////////////dic.Add("sData", "RV-AAG07+ATZ");
            dic.Add("sData", "Flex-AAG07+ATZ");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing chosen assumed retirement age (trade)");
            dic.Add("iCol", "4");
            dic.Add("sData", "Age 65");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing chosen assumed retirement age (tax)");
            dic.Add("iCol", "2");
            dic.Add("sData", "Regel-AAG07 minus 2 years");
            dic.Add("sFieldType", "List");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////dic.Add("InformationByBreak", "Liabilities applying BilMoG as of previous year");
            dic.Add("InformationByBreak", "LY Liabilities applying § 253 Abs.2 HGB (BilMoG)");
            dic.Add("iCol", "1");
            dic.Add("sData", "123456");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////dic.Add("InformationByBreak", "Liabilities applying BilMoG as of previous year");
            dic.Add("InformationByBreak", "LY Liabilities applying § 253 Abs.2 HGB (BilMoG)");
            dic.Add("iCol", "2");
            dic.Add("sData", "4444444");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////dic.Add("InformationByBreak", "LY Book Reserve Trade");
            dic.Add("InformationByBreak", "LY Book Reserve Trade applying § 253 Abs.2 HGB (BilMoG)");
            dic.Add("iCol", "1");
            dic.Add("sData", "234567");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest cost current year");
            dic.Add("iCol", "1");
            dic.Add("sData", "567");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show interest cost following year");
            dic.Add("iCol", "1");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest cost following year");
            dic.Add("iCol", "1");
            dic.Add("sData", "678");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest cost following year");
            dic.Add("iCol", "2");
            dic.Add("sData", "12345");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transition amount liabilities when BilMoG was first applied");
            dic.Add("iCol", "1");
            dic.Add("sData", "88888");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transition amount liabilities when BilMoG was first applied");
            dic.Add("iCol", "2");
            dic.Add("sData", "333333");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Number of years from BilMoG transition date");
            dic.Add("iCol", "1");
            dic.Add("sData", "4");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Amortisation amount or period for BilMoG transition");
            dic.Add("iCol", "2");
            dic.Add("sData", "9999");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Pensions paid this year (incl. from assets)");
            dic.Add("iCol", "1");
            dic.Add("sData", "2222,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Pensions paid this year (incl. from assets)");
            dic.Add("iCol", "2");
            dic.Add("sData", "33333,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers from liabilities (Tax)");
            dic.Add("iCol", "2");
            dic.Add("sData", "4545");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers to liabilities (Tax)");
            dic.Add("iCol", "2");
            dic.Add("sData", "3434");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers from liabilities (Trade)");
            dic.Add("iCol", "2");
            dic.Add("sData", "5656");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers to liabilities (Trade)");
            dic.Add("iCol", "2");
            dic.Add("sData", "7878");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Effect of change in interest rate");
            dic.Add("iCol", "1");
            dic.Add("sData", "-333");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Effect of change in interest rate");
            dic.Add("iCol", "2");
            dic.Add("sData", "2222");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Assets applying BilMoG as of previous year");
            dic.Add("iCol", "1");
            dic.Add("sData", "7878,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Assets applying BilMoG as of previous year");
            dic.Add("iCol", "2");
            dic.Add("sData", "555555,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transition amount assets when BilMoG was first applied");
            dic.Add("iCol", "2");
            dic.Add("sData", "444444");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Assets applying BilMoG current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "550000");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Positive part of net trade book reserve");
            dic.Add("iCol", "2");
            dic.Add("sData", "111111");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Payments from assets in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "1111");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Contributions to assets in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "3333");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers from assets in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "2222");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers to assets in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "6666");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Asset return in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "7777");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Do not create PSV Coverage Certificate");
            dic.Add("iCol", "3");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Minimum membership age for Krankheitsbeihilfen");
            dic.Add("iCol", "4");
            dic.Add("sData", "40");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show formulae for Lump sum?");
            dic.Add("iCol", "1");
            dic.Add("sData", "yes");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Are there deferred compensation promises?");
            dic.Add("iCol", "1");
            dic.Add("sData", "no");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Guaranteed cola rate");
            dic.Add("iCol", "1");
            dic.Add("sData", "1");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Alternate projection rate");
            dic.Add("iCol", "1");
            dic.Add("sData", "3.33");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate projection rate");
            dic.Add("iCol", "1");
            dic.Add("sData", "333333");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Service cost under alternate projection rate");
            dic.Add("iCol", "1");
            dic.Add("sData", "333");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Next year´s expected benefit under alternate COLA rate");
            dic.Add("iCol", "3");
            dic.Add("sData", "78999");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Treatment of BAG-Urteil zur Altersgrenze 65");
            dic.Add("iCol", "3");
            dic.Add("sData", "1");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Date when BilMoG interest rate has been determined");
            dic.Add("iCol", "2");
            dic.Add("sData", "30.11.2012");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Date when BilMoG interest rate has been determined");
            dic.Add("iCol", "3");
            dic.Add("sData", "31.10.2012");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////////dic.Add("InformationByBreak", "Turnover rates are independent from gender?");
            dic.Add("InformationByBreak", "Direct Promise Break Parameter 14 (obsolete)");
            dic.Add("iCol", "4");
            dic.Add("sData", "yes");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Data comes from Pension Admin?");
            dic.Add("iCol", "4");
            dic.Add("sData", "yes");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Additional report information");
            dic.Add("iCol", "3");
            dic.Add("sData", "Additional report info");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "LY Book Reserve Tax");
            dic.Add("iCol", "2");
            dic.Add("sData", "987654");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Turnover rate table is in attachment A 1 ?");
            dic.Add("iCol", "4");
            dic.Add("sData", "yes");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support Fund Report Set 1");
            dic.Add("iCol", "6");
            dic.Add("sData", "SF");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support Fund Report Set 2");
            dic.Add("iCol", "6");
            dic.Add("sData", "SFAccounting");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support Fund Report Set 3");
            dic.Add("iCol", "6");
            dic.Add("sData", "SFPSV");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support Fund Special Aspects German");
            dic.Add("iCol", "1");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 1.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support Fund Special Aspects German");
            dic.Add("iCol", "6");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 1.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support Fund Special Aspects English");
            dic.Add("iCol", "1");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 2.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support Fund Special Aspects English");
            dic.Add("iCol", "6");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 2.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Run date");
            dic.Add("iCol", "6");
            dic.Add("sData", "01.01.2012");
            dic.Add("sFieldType", "date");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Run date of last year's report");
            dic.Add("iCol", "6");
            dic.Add("sData", "01.01.2011");
            dic.Add("sFieldType", "date");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Inventory Date");
            dic.Add("iCol", "6");
            dic.Add("sData", "31.12.2012");
            dic.Add("sFieldType", "date");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show allowed assets");
            dic.Add("iCol", "6");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show allowed allocations");
            dic.Add("iCol", "6");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show trade liabilities");
            dic.Add("iCol", "6");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "IntAcc is part of report");
            dic.Add("iCol", "6");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "IFRS is part of report");
            dic.Add("iCol", "6");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "US is part of report");
            dic.Add("iCol", "6");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing beneficiary methods");
            dic.Add("iCol", "4");
            dic.Add("sData", "From methods");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Pensions paid in current year");
            dic.Add("iCol", "6");
            dic.Add("sData", "56789,00");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Company paid salary in current year");
            dic.Add("iCol", "6");
            dic.Add("sData", "1234567,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Company paid salary prior year 1");
            dic.Add("iCol", "6");
            dic.Add("sData", "111111");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Company paid salary prior year 2");
            dic.Add("iCol", "6");
            dic.Add("sData", "222222");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Temporary benefits paid in current year");
            dic.Add("iCol", "6");
            dic.Add("sData", "54321,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Sum of temporary benefits paid in last five years");
            dic.Add("iCol", "6");
            dic.Add("sData", "654321,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Maximum allocation for temporary benefits");
            dic.Add("iCol", "6");
            dic.Add("sData", "6666,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Sum of temporary benefits paid in the last ten years");
            dic.Add("iCol", "6");
            dic.Add("sData", "765432,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Possible allocations omitted in previous years");
            dic.Add("iCol", "6");
            dic.Add("sData", "5432,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Sum of allocations for temporary benefits made in the last five years");
            dic.Add("iCol", "6");
            dic.Add("sData", "654321,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support fund assets before applying any possible allocation");
            dic.Add("iCol", "6");
            dic.Add("sData", "99999,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Do not create PSV Coverage Certificate");
            dic.Add("iCol", "4");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show formulae for Lump Sum?");
            dic.Add("iCol", "6");
            dic.Add("sData", "yes");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Guaranteed cola rate");
            dic.Add("iCol", "6");
            dic.Add("sData", "0.0111");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Alternate projection rate");
            dic.Add("iCol", "6");
            dic.Add("sData", "0.0222");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate projection rate");
            dic.Add("iCol", "6");
            dic.Add("sData", "667788");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Service cost under alternate projection rate");
            dic.Add("iCol", "6");
            dic.Add("sData", "678");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Next year´s expected benefit under alternate COLA rate");
            dic.Add("iCol", "6");
            dic.Add("sData", "5678");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Treatment of \"BAG-Urteil\" zur Altersgrenze 65");
            dic.Add("iCol", "6");
            dic.Add("sData", "1");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Date when BilMoG interest rate has been determined");
            dic.Add("iCol", "6");
            dic.Add("sData", "30.11.2012");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            ////////////dic.Add("InformationByBreak", "Turnover rates are independent from gender?");
            dic.Add("InformationByBreak", "Support Fund Break Parameter 10 (obsolete)");
            dic.Add("iCol", "6");
            dic.Add("sData", "yes");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Additional report information");
            dic.Add("iCol", "6");
            dic.Add("sData", "dditional Report Information");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Data comes from Pension Admin?");
            dic.Add("iCol", "6");
            dic.Add("sData", "yes");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Turnover rate table is in attachment A 1 ?");
            dic.Add("iCol", "6");
            dic.Add("sData", "yes");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            pMain._Home_ToolbarClick_Top(true);



            pActuarialReport._SelectTab("IntAcc");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DirectPromise", "");
            dic.Add("SupportFund", "");
            dic.Add("NameOfSupportFund", "");
            dic.Add("NumberOfReports", "3");
            pActuarialReport._TaxAndTrade(dic);


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Break field1 value");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "Sub1");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._IntAcc_TBL(dic);
            }

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field1 value");
            dic.Add("iCol", "3");
            dic.Add("sData", "Sub2");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._IntAcc_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "PENS01");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "2");
            dic.Add("sData", "CashBal01");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "3");
            dic.Add("sData", "SF01");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._IntAcc_TBL(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "IFRS Report Set 1");
            dic.Add("iCol", "1");
            dic.Add("sData", "IFRSGer");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "IFRS Report Set 1");
            dic.Add("iCol", "2");
            dic.Add("sData", "IFRSEng");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "IFRS Report Set 1");
            dic.Add("iCol", "3");
            dic.Add("sData", "USGAAP");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._IntAcc_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "IFRS Report Set 2");
            dic.Add("iCol", "1");
            dic.Add("sData", "IFRSEng");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._IntAcc_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "IFRS Report Set 3");
            dic.Add("iCol", "1");
            dic.Add("sData", "USGAAP");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._IntAcc_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Special Aspects German");
            dic.Add("iCol", "1");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 1.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._IntAcc_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Special Aspects English");
            dic.Add("iCol", "1");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Pension\Anhang 2.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._IntAcc_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest Rate");
            dic.Add("iCol", "1");
            dic.Add("sData", "5,00%");
            dic.Add("sFieldType", "txt");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest Rate");
            dic.Add("iCol", "2");
            dic.Add("sData", "5,00%");
            dic.Add("sFieldType", "txt");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest Rate");
            dic.Add("iCol", "3");
            dic.Add("sData", "5,00%");
            dic.Add("sFieldType", "txt");
            pActuarialReport._IntAcc_TBL(dic, true);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Actuarial Report");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Future Valuation Options");
            pMain._FlowTreeRightSelect(dic);


            pFutureValuationOption._SelectTab("Participant grouping");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("GroupingByStatusCodes", "");
            dic.Add("CustomGroupingByBreakField", "");
            dic.Add("CustomGroupingByBreakField_Cbo", "");
            dic.Add("CustomGroupingBySelectionCriteria", "true");
            dic.Add("AddRow", "click");
            dic.Add("iRowNum", "1");
            dic.Add("Group", "Group1");
            dic.Add("SelectionCriteria", "$emp.VOShortName=\"PENS01\" or $emp.VOShortName=\"PENS02\"");
            dic.Add("Remove", "");
            dic.Add("Validate", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            pFutureValuationOption._ParticipantGrouping(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("GroupingByStatusCodes", "");
            dic.Add("CustomGroupingByBreakField", "");
            dic.Add("CustomGroupingByBreakField_Cbo", "");
            dic.Add("CustomGroupingBySelectionCriteria", "");
            dic.Add("AddRow", "click");
            dic.Add("iRowNum", "2");
            dic.Add("Group", "Group2");
            dic.Add("SelectionCriteria", "$emp.VOShortName=\"SF01\"");
            dic.Add("Remove", "");
            dic.Add("Validate", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            pFutureValuationOption._ParticipantGrouping(dic);


            pFutureValuationOption._SelectTab("Population size");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ModelPopulationSizePerParticipantGroup", "true");
            dic.Add("iRowNum", "1");
            dic.Add("ParticipantGroup", "");
            dic.Add("PopulationSizeOption", "Growth rate %");
            dic.Add("iColName", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._PropulationSize(dic);


            for (int i = 2012; i <= 2031; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("ModelPopulationSizePerParticipantGroup", "");
                dic.Add("iRowNum", "1");
                dic.Add("ParticipantGroup", "");
                dic.Add("PopulationSizeOption", "");
                dic.Add("iColName", (i - 2012 + 2).ToString());
                dic.Add("iColValue", "1,00");
                pFutureValuationOption._PropulationSize(dic);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ModelPopulationSizePerParticipantGroup", "");
            dic.Add("iRowNum", "3");
            dic.Add("ParticipantGroup", "");
            dic.Add("PopulationSizeOption", "Growth rate %");
            dic.Add("iColName", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._PropulationSize(dic);

            for (int i = 2012; i <= 2020; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("ModelPopulationSizePerParticipantGroup", "");
                dic.Add("iRowNum", "3");
                dic.Add("ParticipantGroup", "");
                dic.Add("PopulationSizeOption", "");
                dic.Add("iColName", (i - 2012 + 2).ToString());
                dic.Add("iColValue", "1,00");
                pFutureValuationOption._PropulationSize(dic);
            }


            pFutureValuationOption._SelectTab("New entrants");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=11 AND $emp.VOShortName=\"PENS01\"");
            dic.Add("iResultRow", "1");
            pFutureValuationOption._AddTestCase(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAllFromLibrary", "");
            dic.Add("iRowNum", "1");
            dic.Add("ParticipantGroup", "");
            dic.Add("iColNum", "");
            dic.Add("VOShortName", "PENS01");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "196");
            dic.Add("iColumn", "2");
            dic.Add("sColumn", "NewEntrantID");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "5");
            dic.Add("sColumn", "Gender");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "10");
            dic.Add("sColumn", "MaritalStatus");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "20");
            dic.Add("sColumn", "Pay1PriorYear2");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "50");
            dic.Add("sColumn", "Benefit1DB");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "100");
            dic.Add("sColumn", "UnionCode");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "130");
            dic.Add("sColumn", "LYNewDistributionResult");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "150");
            dic.Add("sColumn", "LYTeilwertResult");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "166");
            dic.Add("sColumn", "LYInactiveBenefitCurrentYearPBOResult");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "176");
            dic.Add("sColumn", "EeAccountBalance1");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "186");
            dic.Add("sColumn", "LegacyIntAccountingABOAL");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "196");
            dic.Add("sColumn", "participantConsolidatedCodeId");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);



            //////////////set Service (HireDate1) = 0,50      
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (HireDate1)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////set Service (MembershipDate1) = 0,50   
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (MembershipDate1)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////   set Service (Pensionable ServiceDate)= 0,50   
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (PensionableServiceDate)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);



            ////////////// set Service (Pension Promise Date)= 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (PensionPromiseDate)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////  set Service(WaitingPeriodStart Date)= 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (WaitingPeriodStartDate)");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////  set LYAliveStatusResult= XY
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYAliveStatusResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "XY");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////// set EeContribRate1Custom= 1000,00
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "EeContribRate1Custom");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "1000,00");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=11 AND $emp.VOShortName=\"DECO01\"");
            dic.Add("iResultRow", "1");
            pFutureValuationOption._AddTestCase(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAllFromLibrary", "");
            dic.Add("iRowNum", "2");
            dic.Add("ParticipantGroup", "Group2");
            dic.Add("iColNum", "");
            dic.Add("VOShortName", "DECO01");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary(dic);


            ////////////////  set service(Hire Date 1) = 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (HireDate1)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  set Service (MembershipDate1)= 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (MembershipDate1)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  set Service (PensionableServiceDate)= 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (PensionableServiceDate)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////  set Service(Pension Promise Date)= 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (PensionPromiseDate)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////  set Service (SVSocSecEndDate)= 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (SVSocSecEndDate)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////////////////////////  set Service(WaitingPeriodStart Date)= 0,50
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Service (WaitingPeriodStartDate)");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,50");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////////  set EeContribRate1Custom= 1000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "EeContribRate1Custom");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1000,00");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            //////////  next code just as reference
            //////////_gLib._MsgBox("", "Please manually check if Service(WaitingPeriodStartDate) equal 14.67 for 2 rows and Service(SVSocSecEndDate) equal 0.50 foe 2 rows.");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("UsingRates_P", "click");
            dic.Add("UsingRates_T", "");
            dic.Add("UsingRates_txt", "3,0");
            dic.Add("UsingRates_cbo", "");
            pFutureValuationOption._NewEntrants_UsingRates(dic);


            pFutureValuationOption._SelectTab("Projection years");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EveryYearForTheFirst", "");
            dic.Add("AndEvery", "");
            dic.Add("UpToincludingProjectionYear", "");
            dic.Add("ProjectionYears", "");
            dic.Add("NumberOfRuns", "3");
            dic.Add("RandomNumDismissed", "2");
            pFutureValuationOption._ProjectionYears(dic);


            pFutureValuationOption._SelectTab("Future assumptions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AlignRatesWithCurrent", "");
            dic.Add("AlignRatesWithEach", "true");
            pFutureValuationOption._FutureAssumptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "click");
            pFutureValuationOption._PopVerify_OK(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "True");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_ProjectedPay");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "True");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Liab");


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Reconciliation to Prior Year", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Detailed Results", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Status Reconciliation", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Member Statistics", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Member Statistics", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub3_DECO01", "Sub3_PENS01", "Sub1_SF01", "Sub2_SF01" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Individual Checking Template", "RollForward", true, true, 0, new string[5] { "CashBal01", "DECO01", "PENS01", "PENS02", "SF01" });
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Liability Scenario", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Valuation Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Valuation Summary for Excel Export", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Individual Output", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Parameter Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Payout Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "FAS Expected Benefit Pmts", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "FAS Expected Benefit Pmts", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                ////////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Liability Set for Globe Export", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });

                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Payout Projection", "RollForward", true, true, dic);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Future Valuation Population Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Future Valuation Parameter Print", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Future Valuation Liabilities by Group", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Future Valuation Liabilities by Year", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });

            }


            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Reconciliation to Prior Year", "RollForward", false, true);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Reconciliation to Prior Year by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Detailed Results", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Detailed Results by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Status Reconciliation", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Member Statistics", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Member Statistics", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub3_DECO01", "Sub3_PENS01", "Sub1_SF01", "Sub2_SF01" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Individual Checking Template", "RollForward", false, true, 0, new string[5] { "CashBal01", "DECO01", "PENS01", "PENS02", "SF01" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Valuation Summary", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Valuation Summary", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub3_DECO01", "Sub3_PENS01", "Sub1_SF01", "Sub2_SF01" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Valuation Summary for Excel Export", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Individual Output", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Payout Projection", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "FAS Expected Benefit Pmts", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "FAS Expected Benefit Pmts", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                ////////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Liability Set for Globe Export", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });

                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Payout Projection", "RollForward", false, true, dic);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Future Valuation Population Projection", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Future Valuation Summary", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Future Valuation Liabilities by Group", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Future Valuation Liabilities by Year", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                //////////////pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2012_Baseline, "RollForward", false, true);
            }


            thrd_Pension_Valuation2012_Baseline.Start();


            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Valuation Summary", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub3_DECO01", "Sub3_PENS01", "Sub1_SF01", "Sub2_SF01" });
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Test Cases", "RollForward", true, true);
            pOutputManager._ExportReport_Others(sOutputPension_Valuation2012_Baseline, "IOE", "RollForward", false, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Future Valuation Summary", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
            pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2012_Baseline, "RollForward", true, true);


            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_Baseline, "IFRS", "RollForward", true, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Direct Promise", "RollForward", true, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_Baseline, "Support Fund", "RollForward", true, true);


            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            pMain._SelectTab("Valuation 2012");
            pMain._Home_ToolbarClick_Top(true);

            #endregion

            #region Pension RF - Valuation 2012 - MethodScreenChange


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "MethodScreenChange");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "true");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Methods");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("CostMethod", "Projected Unit Credit Service Prorate");
            dic.Add("MembershipDate", "");
            dic.Add("AnnualIncreaseRate", "");
            dic.Add("EarliestEntryAgeMethod", "");
            dic.Add("EarliestEntryAge_txt", "");
            dic.Add("AllowNegativeNormal", "");
            pMethods_DE._Table_TradeLiability(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CostMethod", "Projected Unit Credit No Prorate");
            dic.Add("CompareToAccrued", "");
            dic.Add("AllowNegativeNormal", "");
            pMethods_DE._Table_InternationalAccounting(dic);

            for (int i = 1; i <= 6; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("AddRow", "");
                dic.Add("iRow", i.ToString());
                dic.Add("VOShortName", "");
                dic.Add("BenefitDefinition", "");
                dic.Add("Trade", "True");
                dic.Add("IntAcctng", "");
                dic.Add("PUCOverride", "");
                dic.Add("TUCOverride", "");
                pMethods_DE._MethodOverrieds_Table(dic);
            }

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Report Breaks");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BreakFields", "");
            dic.Add("TextSubstitution", "");
            dic.Add("Remove", "Click");
            dic.Add("OK", "");
            pReportBreaks._PopVerify_ReportBreaks(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BreakFields", "");
            dic.Add("TextSubstitution", "");
            dic.Add("Remove", "Click");
            dic.Add("OK", "Click");
            pReportBreaks._PopVerify_ReportBreaks(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_ProjectedPay");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "false");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "true");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true);

            pMain._Home_ToolbarClick_Top(true);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Actuarial Report");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pActuarialReport._SelectTab("Tax and Trade");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DirectPromise", "true");
            dic.Add("SupportFund", "true");
            dic.Add("NameOfSupportFund", "");
            dic.Add("NumberOfReports", "1");
            pActuarialReport._TaxAndTrade(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field1 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support Fund Report Set 1");
            dic.Add("iCol", "1");
            dic.Add("sData", "SF");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Support Fund Report Set 2");
            dic.Add("iCol", "1");
            dic.Add("sData", "SFAccounting");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show allowed assets");
            dic.Add("iCol", "1");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show allowed allocations");
            dic.Add("iCol", "1");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show trade liabilities");
            dic.Add("iCol", "1");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            pActuarialReport._SelectTab("IntAcc");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DirectPromise", "");
            dic.Add("SupportFund", "");
            dic.Add("NameOfSupportFund", "");
            dic.Add("NumberOfReports", "1");
            pActuarialReport._TaxAndTrade(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field1 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Actuarial report");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "True");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_ProjectedPay");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "true");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Liab");


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Valuation Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Valuation Summary for Excel Export", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Individual Output", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Parameter Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Payout Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "FAS Expected Benefit Pmts", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "FAS Expected Benefit Pmts", "RollForward", true, true, 0, new string[1] { "All" });
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Reconciliation to Baseline", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Liabilities Detailed Results", "RollForward", true, true);
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Payout Projection", "RollForward", true, true, dic);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Population Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Individual Output", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Parameter Print", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Liabilities by Group", "RollForward", true, true, 0, new string[1] { "All" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Liabilities by Year", "RollForward", true, true, 0, new string[1] { "All" });
            }


            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_Others(sOutputPension_Valuation2012_MethodScreenChange, "IOE", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Valuation Summary", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Valuation Summary", "RollForward", false, true, 0, new string[1] { "All" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Valuation Summary for Excel Export", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Test Cases", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Individual Output", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Payout Projection", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "FAS Expected Benefit Pmts", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "FAS Expected Benefit Pmts", "RollForward", false, true, 0, new string[1] { "All" });
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Reconciliation to Baseline", "RollForward", false, true);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Reconciliation to Baseline by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Liabilities Detailed Results", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Liabilities Detailed Results by Plan Def", "RollForward", false, true);

                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Payout Projection", "RollForward", false, true, dic);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Population Projection", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Summary", "RollForward", false, true, 0, new string[1] { "All" });
                //////////////////pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Summary for Excel Export", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Liabilities by Group", "RollForward", false, true, 0, new string[1] { "All" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Liabilities by Year", "RollForward", false, true, 0, new string[1] { "All" });
                ////////////pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "RollForward", false, true);
            }

            thrd_Pension_Valuation2012_MethodScreenChange.Start();

            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Valuation Summary", "RollForward", true, true, 0, new string[1] { "All" });
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Future Valuation Summary", "RollForward", true, true, 0, new string[1] { "All" });
            pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "RollForward", true, true);


            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "IFRS", "RollForward", true, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Direct Promise", "RollForward", true, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_MethodScreenChange, "Support Fund", "RollForward", true, true);



            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");
            pMain._Home_ToolbarClick_Top(true);

            #endregion

            #region  Pension RF - Valuation 2012 - SecondMethodScreenChance

            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "SecondMethodScreenChance");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("CostMethod", "Entry Age Normal");
            dic.Add("MembershipDate", "MembershipDate1");
            dic.Add("AnnualIncreaseRate", "#1#");
            dic.Add("EarliestEntryAgeMethod", "According to Tax Law");
            dic.Add("EarliestEntryAge_txt", "");
            dic.Add("AllowNegativeNormal", "");
            pMethods_DE._Table_TradeLiability(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CostMethod", "Traditional Unit Credit");
            dic.Add("CompareToAccrued", "");
            dic.Add("AllowNegativeNormal", "True");
            pMethods_DE._Table_InternationalAccounting(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_ProjectedPay");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "true");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);

            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "Val Liab");


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Actuarial Report");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pActuarialReport._SelectTab("General");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ShowLYLiabilitiesInLastYear", "true");
            dic.Add("MecerLocation", "");
            dic.Add("NameToBePrintedOnReportLeft", "");
            dic.Add("AcademicTitleOfPersonLeft", "");
            dic.Add("NameToBePrintedOnReportRight", "");
            dic.Add("AcademicTitleOfPersonRight", "");
            dic.Add("ExtensionOfUndersigningPersonRight", "");
            dic.Add("LocationOfUndersigningPersonRight", "");
            dic.Add("DoNotAttachTermsAndConditions", "");
            pActuarialReport._General(dic);


            pActuarialReport._SelectTab("Tax and Trade");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Benefit Type Name");
            dic.Add("iCol", "3");
            dic.Add("sData", "Deputate");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._TaxAndTrade_TBL(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Actuarial Report");
            pMain._FlowTreeRightSelect(dic);

            Thread.Sleep(1000 * 20);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "True");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_ProjectedPay");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "true");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Liab");


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Individual Checking Template", "RollForward", true, true, 0, new string[5] { "CashBal01", "DECO01", "PENS01", "PENS02", "SF01" });
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Liability Scenario", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Valuation Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Valuation Summary for Excel Export", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Individual Output", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Parameter Summary", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Payout Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "FAS Expected Benefit Pmts", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "FAS Expected Benefit Pmts", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Reconciliation to Baseline", "RollForward", true, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Liabilities Detailed Results", "RollForward", true, true);
                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Payout Projection", "RollForward", true, true, dic);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Population Projection", "RollForward", true, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Parameter Print", "RollForward", true, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Liabilities by Group", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Liabilities by Year", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });

            }

            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_Others(sOutputPension_Valuation2012_SecondMethodScreenChance, "IOE", "RollForward", false, true);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Liability Scenario", "RollForward", false, true);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Liability Scenario by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Valuation Summary", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Valuation Summary", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Valuation Summary for Excel Export", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Test Cases", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Individual Output", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Payout Projection", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "FAS Expected Benefit Pmts", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "FAS Expected Benefit Pmts", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Reconciliation to Baseline", "RollForward", false, true);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Reconciliation to Baseline by Plan Def", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Liabilities Detailed Results", "RollForward", false, true);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Liabilities Detailed Results by Plan Def", "RollForward", false, true);
                //////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Liability Set for Globe Export", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });

                dic.Clear();
                dic.Add("Group_ReportBreak", "True");
                pOutputManager._ExportReport_Custom(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Payout Projection", "RollForward", false, true, dic);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Population Projection", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Summary", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                //pOutputManager._ExportReport_Common(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Summary for Excel Export", "RollForward", false, true);
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Liabilities by Group", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Liabilities by Year", "RollForward", false, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
                ////////////////pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "RollForward", false, true);

            }

            thrd_Pension_Valuation2012_SecondMethodScreenChance.Start();


            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Valuation Summary", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Future Valuation Summary", "RollForward", true, true, 0, new string[11] { "Sub1_CashBal01", "Sub1_DECO01", "Sub1_PENS01", "Sub1_PENS02", "Sub1_SF01", "Sub2_CashBal01", "Sub2_DECO01", "Sub2_PENS01", "Sub2_SF01", "Sub3_DECO01", "Sub3_PENS01" });
            pOutputManager._ExportReport_FVPayouts(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "RollForward", true, true);


            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "IFRS", "RollForward", false, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Direct Promise", "RollForward", false, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_SecondMethodScreenChance, "Support Fund", "RollForward", false, true);

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion

            #region  Pension RF - Valuation 2012 - V6.7 Enhancements

            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "V6.7 Enhancements");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Methods");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SameBeneficMethod", "false");
            dic.Add("iRow", "1");
            dic.Add("BenficiaryMethod", "");
            dic.Add("DataFieldIndicating", "#1#");
            dic.Add("UseCollectivePremium", "");
            pMethods_DE._BenficiaryMethod_VO_Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("BenficiaryMethod", "Data field");
            dic.Add("DataFieldIndicating", "");
            dic.Add("UseCollectivePremium", "true");
            pMethods_DE._BenficiaryMethod_VO_Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("BenficiaryMethod", "Data field");
            dic.Add("DataFieldIndicating", "");
            dic.Add("UseCollectivePremium", "");
            pMethods_DE._BenficiaryMethod_VO_Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("BenficiaryMethod", "");
            dic.Add("DataFieldIndicating", "#1#");
            dic.Add("UseCollectivePremium", "");
            pMethods_DE._BenficiaryMethod_VO_Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "5");
            dic.Add("BenficiaryMethod", "Data field");
            dic.Add("DataFieldIndicating", "");
            dic.Add("UseCollectivePremium", "");
            pMethods_DE._BenficiaryMethod_VO_Table(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Provisions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Provisions");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Contractual Retirement Age");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "ID25");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Contractual Retirement Age");
            dic.Add("Level_5", "ID25");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "");
            dic.Add("CustomCode", "");
            dic.Add("FixedAge_V", "");
            dic.Add("FixedAge_C", "Click");
            dic.Add("FixedAge_cbo", "");
            dic.Add("FixedAge_txt", "70");
            dic.Add("Regelaltersgrenze", "");
            pContractualRetirementAge._PopVerify_ContractualRetirementAge(dic);


            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.EmployeeIDNumber=25");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "PENS01");
            pAssumptions._Collapse(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Contractual Retirement Age");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "ID1012110");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "SF01");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Contractual Retirement Age");
            dic.Add("Level_5", "ID1012110");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "");
            dic.Add("CustomCode", "");
            dic.Add("FixedAge_V", "");
            dic.Add("FixedAge_C", "Click");
            dic.Add("FixedAge_cbo", "");
            dic.Add("FixedAge_txt", "68");
            dic.Add("Regelaltersgrenze", "");
            pContractualRetirementAge._PopVerify_ContractualRetirementAge(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.EmployeeIDNumber=2012110");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Benefit Elections");
            dic.Add("MenuItem", "Add Benefit Elections");
            pAssumptions._TreeViewRightSelect(dic, "AsBE50");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Benefit Elections");
            dic.Add("Level_3", "AsBE50");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Button_V", "");
            dic.Add("Button_Percent", "");
            dic.Add("Button_T", "");
            dic.Add("ElectionPercentage_cbo", "");
            dic.Add("ElectionPercentage_txt", "50,0");
            dic.Add("ElectionTable_cbo", "");
            pBenefitElections._PopVerify_BenefitElections(dic);



            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Benefit Elections");
            dic.Add("Level_3", "AsBE50");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Button_V", "");
            dic.Add("Button_Percent", "");
            dic.Add("Button_T", "");
            dic.Add("ElectionPercentage_cbo", "");
            dic.Add("ElectionPercentage_txt", "50,0");
            dic.Add("ElectionTable_cbo", "");
            pBenefitElections._PopVerify_BenefitElections(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Benefit Elections");
            dic.Add("Level_3", "AsBE50");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Button_V", "");
            dic.Add("Button_Percent", "");
            dic.Add("Button_T", "");
            dic.Add("ElectionPercentage_cbo", "");
            dic.Add("ElectionPercentage_txt", "50,0");
            dic.Add("ElectionTable_cbo", "");
            pBenefitElections._PopVerify_BenefitElections(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Provisions");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FinalBenefit");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$CB_CashBalance/100");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Actuarial Equivalence");
            dic.Add("MenuItem", "Add Actuarial Equivalence");
            pAssumptions._TreeViewRightSelect(dic, "AE_Enh67");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Actuarial Equivalence");
            dic.Add("Level_5", "AE_Enh67");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValuationInterest", "");
            dic.Add("ValuationMortality", "True");
            dic.Add("ValuationCOLA", "");
            dic.Add("ValuationSpouseAgeDiff", "false");
            dic.Add("ValuationPercentMarried", "false");
            pActuarialEquivalence._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InterestRate_P_txt", "6,0");
            dic.Add("CostOfLivingIncrease_P_txt", "1,0");
            dic.Add("PercentMarried_T_cbo", "PercentMarried_HB05UnisexHX");
            dic.Add("DifferenceInSpousesAge_T_cbo", "PercentMarried_HB05UnisexHX");
            pActuarialEquivalence._SameStructureForAllPeriods_WithValuationMortality(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Conversion Factors");
            dic.Add("MenuItem", "Add Conversion Factors");
            pAssumptions._TreeViewRightSelect(dic, "CF_StraightLifeEnh67");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Conversion Factors");
            dic.Add("Level_5", "CF_StraightLifeEnh67");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "");
            dic.Add("PresentValueFactor", "True");
            dic.Add("TabularOrConstantFactor", "");
            dic.Add("CustomCode", "");
            pConversionFactors._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType_From", "");
            dic.Add("FormOfPaymentType_To", "");
            dic.Add("MortalityInDeferralPeriod_From", "");
            dic.Add("MortalityInDeferralPeriod_To", "");
            dic.Add("ActuarialEquivalence_From", "AE_Enh67");
            dic.Add("ActuarialEquivalence_To", "");
            dic.Add("ApplySpouseAgeDifference_From", "");
            dic.Add("ApplySpouseAgeDifference_To", "");
            pConversionFactors._PopVerify_Standard(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Conversion Factors");
            dic.Add("MenuItem", "Add Conversion Factors");
            pAssumptions._TreeViewRightSelect(dic, "CF_RevEnh67");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Conversion Factors");
            dic.Add("Level_5", "CF_RevEnh67");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "");
            dic.Add("PresentValueFactor", "True");
            dic.Add("TabularOrConstantFactor", "");
            dic.Add("CustomCode", "");
            pConversionFactors._PopVerify_Main(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType_From", "Reversionary");
            dic.Add("FormOfPaymentType_To", "");
            dic.Add("MortalityInDeferralPeriod_From", "");
            dic.Add("ActuarialEquivalence_From", "AE_Enh67");
            pConversionFactors._PopVerify_Standard(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SurvivorPercentage_C", "click");
            dic.Add("SurvivorPercentage_txt", "60,0");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("ApplyPercentMarriedAndSpouseAgeDifference", "true");
            pConversionFactors._PopVerify_PresentValueFactor(dic);


            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Conversion Factors");
            dic.Add("MenuItem", "Add Conversion Factors");
            pAssumptions._TreeViewRightSelect(dic, "CF_SpouseEnh67");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Conversion Factors");
            dic.Add("Level_5", "CF_SpouseEnh67");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "");
            dic.Add("PresentValueFactor", "True");
            dic.Add("TabularOrConstantFactor", "");
            dic.Add("CustomCode", "");
            pConversionFactors._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FormOfPaymentType_From", "Spouse's");
            dic.Add("FormOfPaymentType_To", "");
            dic.Add("MortalityInDeferralPeriod_From", "");
            dic.Add("MortalityInDeferralPeriod_To", "");
            dic.Add("ActuarialEquivalence_From", "AE_Enh67");
            dic.Add("ActuarialEquivalence_To", "");
            dic.Add("ApplySpouseAgeDifference_From", "");
            dic.Add("ApplySpouseAgeDifference_To", "");
            pConversionFactors._PopVerify_Standard(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SurvivorPercentage_C", "click");
            dic.Add("SurvivorPercentage_txt", "60,0");
            dic.Add("ApplyDifferentStartAgeforPostCommencement", "true");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("StartAgeforPostCommencement_C", "click");
            dic.Add("StartAgeforPostCommencement_txt", "65");
            dic.Add("ApplyPercentMarriedAndSpouseAgeDifference", "");
            pConversionFactors._PopVerify_PresentValueFactor(dic);




            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Conversion Factors");
            dic.Add("MenuItem", "Add Conversion Factors");
            pAssumptions._TreeViewRightSelect(dic, "CF_Sum");

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Conversion Factors");
            dic.Add("Level_5", "CF_Sum");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$CF_StraightLifeEnh67+$CF_RevEnh67+$CF_SpouseEnh67");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);

            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "false");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "EL_WaitingPeriod");
            dic.Add("VestedRatio", "$_mntelvector");
            dic.Add("CostOfLivingAdjustment", "");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "FOP_StraightLife");
            dic.Add("BenefitElectionPercentage", "AsBE50");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("MenuItem", "Copy");
            pAssumptions._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgePension");
            dic.Add("MenuItem", "Paste");
            pAssumptions._TreeViewRightSelect(dic, "OldAgeLump");

            for (int i = 1; i <= 6; i++)
            {
                dic.Clear();
                dic.Add("Level_1", "Pension");
                dic.Add("Level_2", "CashBal01");
                dic.Add("Level_3", "Benefit Definition");
                dic.Add("Level_4", "Plan Definition");
                dic.Add("Level_5", "OldAgeLump");
                dic.Add("MenuItem", "Move Up");
                pAssumptions._TreeViewRightSelect(dic);
            }


            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgeLump");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SingleFormulaOrBenefit", "");
            dic.Add("FunctionOfOtherFormular", "");
            dic.Add("IncludeThisBenefitInPresentValueCalc", "");
            dic.Add("UseAsWithdrawalBenefit", "");
            dic.Add("UseAsFutureValPension", "");
            dic.Add("ApplyVersorgungsausgleich", "true");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "CF_Sum");
            dic.Add("FormOfPayment", "FOP_LumpSum");
            dic.Add("BenefitElectionPercentage", "");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);



            dic.Clear();
            dic.Add("Level_1", "Pension");
            dic.Add("Level_2", "CashBal01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "OldAgeRev");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Function", "");
            dic.Add("Validate", "");
            dic.Add("BenefitCommencementAge_V", "");
            dic.Add("BenefitCommencementAge_C", "");
            dic.Add("BenefitStopAge_V", "");
            dic.Add("BenefitStopAge_C", "");
            dic.Add("FirstStartAge_V", "");
            dic.Add("FirstStartAge_C", "");
            dic.Add("LastStartAge_V", "");
            dic.Add("LastStartAge_C", "");
            dic.Add("NumberOfPayments_V", "");
            dic.Add("NumberOfPayments_C", "");
            dic.Add("MaximumNumberOfPayments_V", "");
            dic.Add("MaximumNumberOfPayments_C", "");
            dic.Add("BenefitCommencementAge_cbo", "");
            dic.Add("BenefitCommencementAge_txt", "");
            dic.Add("BenefitStopAge_cbo", "");
            dic.Add("BenefitStopAge_txt", "");
            dic.Add("FirstStartAge_cbo", "");
            dic.Add("FirstStartAge_txt", "");
            dic.Add("LastStartAge_cbo", "");
            dic.Add("LastStartAge_txt", "");
            dic.Add("NumberOfPayments_cbo", "");
            dic.Add("NumberOfPayments_txt", "");
            dic.Add("MaximumNumberOfPayments_cbo", "");
            dic.Add("MaximumNumberOfPayments_txt", "");
            dic.Add("Eligibility", "");
            dic.Add("VestedRatio", "");
            dic.Add("CostOfLivingAdjustment", "");
            dic.Add("EarlyRetirement", "");
            dic.Add("LateRetirement", "");
            dic.Add("Adjustment", "");
            dic.Add("Conversion", "");
            dic.Add("FormOfPayment", "");
            dic.Add("BenefitElectionPercentage", "AsBE50");
            dic.Add("ExcludePercentMarried", "");
            dic.Add("Decrement", "");
            dic.Add("VestingDefinition", "");
            dic.Add("Other", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE_Pension(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_ProjectedPay");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "True");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("AltTradeProjInt", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._CancelRun();


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_ProjectedPay");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "True");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("AltTradeProjInt", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true);


            //////////pMain._SelectTab("Valuation 2012");

            //////////dic.Clear();
            //////////dic.Add("iMaxRowNum", "");
            //////////dic.Add("iMaxColNum", "");
            //////////dic.Add("iSelectRowNum", "");
            //////////dic.Add("iSelectColNum", "");
            //////////dic.Add("iPosX", "425");
            //////////dic.Add("iPosY", "140");
            //////////dic.Add("MenuItem_1", "View Output");
            //////////pMain._FlowTreeRightSelect(dic);

            //////////_gLib._MsgBox("", " Please manually  compared Parameter Print report to make sure the setting are matched as expected. "
            //////////    + "then go on testing.");



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Actuarial Report");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pActuarialReport._SelectTab("Tax and Trade");

            for (int i = 1; i <= 6; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Date when BilMoG is first applied");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "01.01.2010");
                dic.Add("sFieldType", "DATE");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 6; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                //////////////dic.Add("InformationByBreak", "Interest rate BilMoG as of previous year");
                dic.Add("InformationByBreak", "Interest Rate Trade as of previous Year");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "5,12%");
                dic.Add("sFieldType", "txt");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Immediate recognition of transition obligation under BilMoG");
            dic.Add("iCol", "3");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            for (int i = 2; i <= 3; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Show complete reconcilation of pension expense for Trade");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////dic.Add("InformationByBreak", "Liabilities applying BilMoG as of previous year");
            dic.Add("InformationByBreak", "LY Liabilities applying § 253 Abs.2 HGB (BilMoG)");
            dic.Add("iCol", "1");
            dic.Add("sData", "68000000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////dic.Add("InformationByBreak", "Liabilities applying BilMoG as of previous year");
            dic.Add("InformationByBreak", "LY Liabilities applying § 253 Abs.2 HGB (BilMoG)");
            dic.Add("iCol", "2");
            dic.Add("sData", "4000000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////dic.Add("InformationByBreak", "Liabilities applying BilMoG as of previous year");
            dic.Add("InformationByBreak", "LY Liabilities applying § 253 Abs.2 HGB (BilMoG)");
            dic.Add("iCol", "3");
            dic.Add("sData", "144000000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////dic.Add("InformationByBreak", "Liabilities applying BilMoG as of previous year");
            dic.Add("InformationByBreak", "LY Liabilities applying § 253 Abs.2 HGB (BilMoG)");
            dic.Add("iCol", "4");
            dic.Add("sData", "1600000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////dic.Add("InformationByBreak", "LY Book Reserve Trade");
            dic.Add("InformationByBreak", "LY Book Reserve Trade applying § 253 Abs.2 HGB (BilMoG)");
            dic.Add("iCol", "1");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest cost current year");
            dic.Add("iCol", "1");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest cost current year");
            dic.Add("iCol", "1");
            dic.Add("sData", "150000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest cost current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "15000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest cost following year");
            dic.Add("iCol", "1");
            dic.Add("sData", "160000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Interest cost following year");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transition amount liabilities when BilMoG was first applied");
            dic.Add("iCol", "1");
            dic.Add("sData", "15000000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transition amount liabilities when BilMoG was first applied");
            dic.Add("iCol", "2");
            dic.Add("sData", "150000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transition amount liabilities when BilMoG was first applied");
            dic.Add("iCol", "4");
            dic.Add("sData", "15000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Number of years from BilMoG transition date");
            dic.Add("iCol", "1");
            dic.Add("sData", "3");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Number of years from BilMoG transition date");
            dic.Add("iCol", "2");
            dic.Add("sData", "3");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Number of years from BilMoG transition date");
            dic.Add("iCol", "4");
            dic.Add("sData", "3");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Amortisation amount or period for BilMoG transition");
            dic.Add("iCol", "1");
            dic.Add("sData", "15");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Amortisation amount or period for BilMoG transition");
            dic.Add("iCol", "2");
            dic.Add("sData", "15");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Amortisation amount or period for BilMoG transition");
            dic.Add("iCol", "4");
            dic.Add("sData", "15");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Pensions paid this year (incl. from assets)");
            dic.Add("iCol", "1");
            dic.Add("sData", "100000,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Pensions paid this year (incl. from assets)");
            dic.Add("iCol", "2");
            dic.Add("sData", "1000,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers from liabilities (Tax)");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers to liabilities (Tax)");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers from liabilities (Trade)");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers to liabilities (Trade)");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Effect of change in interest rate");
            dic.Add("iCol", "1");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Effect of change in interest rate");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Assets applying BilMoG as of previous year");
            dic.Add("iCol", "1");
            dic.Add("sData", "10000000,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Assets applying BilMoG as of previous year");
            dic.Add("iCol", "2");
            dic.Add("sData", "0,00");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transition amount assets when BilMoG was first applied");
            dic.Add("iCol", "1");
            dic.Add("sData", "1500000");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transition amount assets when BilMoG was first applied");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Assets applying BilMoG current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Positive part of net trade book reserve");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Payments from assets in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Contributions to assets in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers from assets in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Transfers to assets in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Asset return in current year");
            dic.Add("iCol", "2");
            dic.Add("sData", "0");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Service cost under alternate projection rate");
            dic.Add("iCol", "6");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Next year´s expected benefit under alternate COLA rate");
            dic.Add("iCol", "6");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Actuarial Report");
            pMain._FlowTreeRightSelect(dic);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            pOutputManager._ExportReport_Others(sOutputPension_Valuation2012_V67Enhancements, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputPension_Valuation2012_V67Enhancements, "Direct Promise", "RollForward", true, true);


            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            pMain._SelectTab("Valuation 2012");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion


            #region Jubilee RF - Valuation 2012 - Baseline

            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "JubileeValuations");
            pMain._HomeTreeViewSelect(0, dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ConversionService", "false");
            dic.Add("Name", "Valuation 2012");
            dic.Add("Parent", "Valuation 2011");
            dic.Add("ParentFinalValuationSet", "");
            dic.Add("PlanYearBeginningIn", "");
            dic.Add("FiscalYearEndingIn_Accounting", "");
            dic.Add("FirstYearPlanUnderPPA", "");
            dic.Add("PlanYearEndingIn_DE", "2012");
            dic.Add("RSC", "true");
            dic.Add("LocalMarket", "");
            dic.Add("Shared", "");
            dic.Add("SelectAllVO", "click");
            dic.Add("DeselectAll", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_ServicePropeties(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation 2012");
            dic.Add("CheckPopup", "False");
            pMain._PopVerify_Home_RightPane(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "1");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Roll Forward");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "");
            dic.Add("LiabilityValuationDate", "31.12.2012");
            dic.Add("Data_AddNew", "True");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("FundingInformation_AddNew", "");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Data");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("DataEffectiveDate", "31.12.2012");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "Click");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "2012 Jubilee Snapshot");
            dic.Add("OK", "Click");
            dic.Add("RetainThePreviousUnload", "");
            //////dic.Add("SpecifyANewSnapshotRetainingPrevious", "true");
            dic.Add("SpecifyANewSnapshotRevertingAllFields", "");
            dic.Add("SpecifyANewUnload", "");
            dic.Add("SelectSnapshotOption_OK", "click");
            pParticipantDataSet._PopVerify_SelectSnapshotDefinition(dic);

            _gLib._MsgBox("", "please chcek on import and all pay fields but prior year2");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DataEffectiveDate", "");
            dic.Add("Snapshot", "");
            dic.Add("GRSUnload", "");
            dic.Add("GotoDataSystem", "");
            dic.Add("AddField", "");
            dic.Add("GRSInformation", "");
            dic.Add("ImportDataandApplyMapping", "Click");
            pParticipantDataSet._PopVerify_ParticipantDataSet(dic);

            pMain._SelectTab("Participant DataSet");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Provisions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Provisions");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("MenuItem", "Copy VO From");
            pAssumptions._TreeViewRightSelect(dic, "");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Client", Config.sClientName);
            dic.Add("Plan", Config.sPlanName);
            dic.Add("ServiceInstance", "");
            dic.Add("ValuationNode", "");
            dic.Add("VOShortName", "JUBI01");
            dic.Add("OK", "click");
            pMain._PopVerify_CopyProvisionSet_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Contractual Retirement Age");
            dic.Add("Level_5", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "");
            dic.Add("CustomCode", "");
            dic.Add("FixedAge_V", "");
            dic.Add("FixedAge_C", "");
            dic.Add("FixedAge_cbo", "");
            dic.Add("FixedAge_txt", "");
            dic.Add("Regelaltersgrenze", "true");
            pContractualRetirementAge._PopVerify_ContractualRetirementAge(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "SVC_ServiceForProration");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Participant Info");
            dic.Add("Level_4", "Service");
            dic.Add("Level_5", "SVC_ServiceForProration");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceAtValuationDate", "");
            dic.Add("RulesBasedService", "");
            dic.Add("ServiceAsAFunction", "");
            dic.Add("CustomCode", "");
            dic.Add("UseServiceCa", "");
            dic.Add("ForInternationalAccounting_DE", "True");
            dic.Add("ForTrade_DE", "true");
            dic.Add("CalculateExactServiceAtReitermentAge_UK", "");
            pService._PopVerify_Main(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("IRUK", "");
            dic.Add("ServiceStarts_V", "");
            dic.Add("ServiceStarts_C", "click");
            dic.Add("ServiceStarts_cbo", "");
            dic.Add("ServiceStarts_txt", "20");
            dic.Add("ServiceStarts_FixedDate", "01.01.2000");
            dic.Add("ServiceStarts_Date", "HireDate1");
            dic.Add("ServiceEnds_V", "");
            dic.Add("ServiceEnds_C", "");
            dic.Add("ServiceEnds_cbo", "");
            dic.Add("ServiceEnds_txt", "");
            dic.Add("ServiceEnds_FixedDate", "");
            dic.Add("ServiceEnds_Date", "");
            dic.Add("CalculationMethod", "Fixed date");
            dic.Add("RoundingPeriod", "Days");
            dic.Add("RoundingMethod", "Commenced");
            dic.Add("RoundingRule", "");
            dic.Add("ServiceIncreasement_V", "");
            dic.Add("ServiceIncreasement_C", "");
            dic.Add("ServiceIncreasement_cbo", "");
            dic.Add("ServiceIncreasement_txt", "");
            pService._PopVerify_RulesBasedService_UseServiceCap_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OtherDate", "true");
            dic.Add("Month", "June");
            dic.Add("Day", "30");
            dic.Add("Alignment", "Following the valuation date");
            pService._PopVerify_RulesBasedService_CalculationRules(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Participant Info");
            pAssumptions._Collapse(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "User Defined Projection A");
            dic.Add("MenuItem", "Add User Defined Projection A");
            pAssumptions._TreeViewRightSelect(dic, "UDPA_Projection1");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "User Defined Projection A");
            dic.Add("Level_6", "UDPA_Projection1");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "True");
            dic.Add("CustomCode", "");
            dic.Add("Amount_V", "click");
            dic.Add("Amount_C", "");
            dic.Add("Amount_cbo", "JubiSalaryCurrentYear");
            dic.Add("Amount_txt", "");
            dic.Add("Rate_V", "");
            dic.Add("Rate_P", "");
            dic.Add("Rate_cbo", "");
            dic.Add("Rate_txt", "2,0");
            dic.Add("ProjectValuesForPastAges", "");
            pUserDefinedProjectionA._PopVerify_Standard(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("MenuItem", "Add Custom Formula B");
            pAssumptions._TreeViewRightSelect(dic, "CFB_FormulaB");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Custom Formula B");
            dic.Add("Level_6", "CFB_FormulaB");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "$UDPA_Projection1[$ValAge+1]");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("MenuItem", "Add Jubilee Benefit");
            pAssumptions._TreeViewRightSelect(dic, "JB_FixAmount2");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("Level_6", "JB_FixAmount2");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FixedAmount", "");
            dic.Add("SalaryBased", "");
            dic.Add("JubileeAmount_V", "");
            dic.Add("JubileeAmount_C", "click");
            dic.Add("JubileeAmount_cbo", "");
            dic.Add("JubileeAmount_txt", "135,79");
            dic.Add("NetAmtUsingTotal", "click");
            dic.Add("NetAmtUsingSystem", "");
            dic.Add("YearSalary", "");
            dic.Add("TaxClass", "");
            dic.Add("GrossAmount", "");
            dic.Add("FinalAmount", "");
            pJubileeBenefit._PopVerify_FixedAmount(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("MenuItem", "Add Jubilee Benefit");
            pAssumptions._TreeViewRightSelect(dic, "JBFixAmount3");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("Level_6", "JBFixAmount3");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FixedAmount", "");
            dic.Add("SalaryBased", "");
            dic.Add("JubileeAmount_V", "click");
            dic.Add("JubileeAmount_C", "");
            dic.Add("JubileeAmount_cbo", "PSVBenefitsOther");
            dic.Add("JubileeAmount_txt", "");
            dic.Add("NetAmtUsingTotal", "");
            dic.Add("NetAmtUsingSystem", "click");
            dic.Add("YearSalary", "SVSalaryCurrentYear");
            dic.Add("TaxClass", "1");
            dic.Add("GrossAmount", "");
            dic.Add("FinalAmount", "");
            pJubileeBenefit._PopVerify_FixedAmount(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("MenuItem", "Add Jubilee Benefit");
            pAssumptions._TreeViewRightSelect(dic, "JB_FixAmount4");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("Level_6", "JB_FixAmount4");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FixedAmount", "");
            dic.Add("SalaryBased", "");
            dic.Add("JubileeAmount_V", "");
            dic.Add("JubileeAmount_C", "click");
            dic.Add("JubileeAmount_cbo", "");
            dic.Add("JubileeAmount_txt", "246,80");
            dic.Add("NetAmtUsingTotal", "");
            dic.Add("NetAmtUsingSystem", "");
            dic.Add("YearSalary", "");
            dic.Add("TaxClass", "");
            dic.Add("GrossAmount", "click");
            dic.Add("FinalAmount", "");
            pJubileeBenefit._PopVerify_FixedAmount(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Social Security");
            dic.Add("MenuItem", "Add Social Security");
            pAssumptions._TreeViewRightSelect(dic, "SS_SocialSec");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Social Security");
            dic.Add("Level_6", "SS_SocialSec");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SaveThisBenefit", "");
            dic.Add("Method_Salary", "PP_JubileeSalary");
            dic.Add("SSCC_Increase", "AsPI_PayIncreaseRate");
            dic.Add("AktuellerRentenwert_Increase", "CostOfLivingIncreaseAssumption");
            dic.Add("VorlDurchs_Increase", "CostOfLivingIncreaseAssumption");
            pSocialSecurity._SocialSecurity(dic);

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi20");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("JubileeBenefit", "");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "5");
            dic.Add("GraceFactor", "0,90000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("JubileeBenefit", "recurring holiday");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "5");
            dic.Add("GraceFactor", "0,90000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("JubileeBenefit", "JB_Salary");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "");
            dic.Add("Jubilee", "true");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "5");
            dic.Add("GraceFactor", "0,90000");
            pPlanDefinition_DE._Table(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("JubileeBenefit", "JB_FixAmount");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "5");
            dic.Add("GraceFactor", "0,90000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "5");
            dic.Add("JubileeBenefit", "JB_FixAmount2");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "5");
            dic.Add("GraceFactor", "0,90000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "6");
            dic.Add("JubileeBenefit", "JBFixAmount3");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "5");
            dic.Add("GraceFactor", "0,90000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "7");
            dic.Add("JubileeBenefit", "JB_FixAmount4");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "5");
            dic.Add("GraceFactor", "0,90000");
            pPlanDefinition_DE._Table(dic);




            pMain._Home_ToolbarClick_Top(true);

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi30");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("JubileeBenefit", "");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,00000");
            dic.Add("Jubilee", "");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "");
            dic.Add("GraceFactor", "0,95000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("JubileeBenefit", "recurring holiday");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,00000");
            dic.Add("Jubilee", "");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "");
            dic.Add("GraceFactor", "0,95000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("JubileeBenefit", "JB_Salary");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,00000");
            dic.Add("Jubilee", "");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "10");
            dic.Add("GraceFactor", "0,95000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("JubileeBenefit", "JB_FixAmount");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "10");
            dic.Add("GraceFactor", "0,95000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "5");
            dic.Add("JubileeBenefit", "JB_FixAmount2");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "");
            dic.Add("GraceFactor", "0,95000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "6");
            dic.Add("JubileeBenefit", "JBFixAmount3");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "");
            dic.Add("GraceFactor", "0,95000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "7");
            dic.Add("JubileeBenefit", "holiday");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "");
            dic.Add("GraceFactor", "0,95000");
            pPlanDefinition_DE._Table(dic);



            pMain._Home_ToolbarClick_Top(true);

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi40");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("JubileeBenefit", "");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,33300");
            dic.Add("Jubilee", "");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "10");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("JubileeBenefit", "recurring holiday");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,33300");
            dic.Add("Jubilee", "");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "10");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("JubileeBenefit", "JB_Salary");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,33300");
            dic.Add("Jubilee", "");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "10");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("JubileeBenefit", "JB_FixAmount");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,33300");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "10");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "5");
            dic.Add("JubileeBenefit", "JB_FixAmount2");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,33300");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "10");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "6");
            dic.Add("JubileeBenefit", "JBFixAmount3");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,33300");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "10");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "7");
            dic.Add("JubileeBenefit", "JB_FixAmount4");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,33300");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "10");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi30");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "LowService");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi30");
            dic.Add("Level_6", "LowService");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("YearsOfServiceForJubi", "30");
            dic.Add("BasedOn", "");
            dic.Add("YearlySalary", "PP_JubileeSalary");
            dic.Add("ApplyPercentMarried", "");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("JubileeBenefit", "JB_FixAmount");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("JubileeBenefit", "JB_FixAmount2");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("JubileeBenefit", "JBFixAmount3");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("JubileeBenefit", "JB_FixAmount4");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "0");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$SVC_ServiceForProration<10");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("MenuItem", "Add Override Definition");
            pAssumptions._TreeViewRightSelect(dic, "JubOverride");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubOverride");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic, "");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "IntAccounting");
            dic.Add("IntlAccountingABO", "True");
            dic.Add("IntlAccountingPBO", "True");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubOverride");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic, "");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "Trade");
            dic.Add("IntlAccountingABO", "");
            dic.Add("IntlAccountingPBO", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "True");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubOverride");
            dic.Add("Level_6", "IntAccounting");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_ABO_AL");
            dic.Add("Expression", "$_ABO_AL+1000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_ABO_NC");
            dic.Add("Expression", "$_ABO_NC+100");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PBO_AL");
            dic.Add("Expression", "$_PBO_AL+2000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PBO_NC");
            dic.Add("Expression", "$_PBO_NC+200");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubOverride");
            dic.Add("Level_6", "IntAccounting");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "Females");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubOverride");
            dic.Add("Level_6", "IntAccounting");
            dic.Add("Level_7", "Females");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_ABO_AL");
            dic.Add("Expression", "$_ABO_AL+500");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_ABO_NC");
            dic.Add("Expression", "$_ABO_NC+50");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PBO_AL");
            dic.Add("Expression", "$_PBO_AL+1500");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PBO_NC");
            dic.Add("Expression", "$_PBO_NC+150");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.Gender=\"F\"");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubOverride");
            dic.Add("Level_6", "Trade");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Trade_AL");
            dic.Add("Expression", "$_Trade_AL+3000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Trade_NC");
            dic.Add("Expression", "$_Trade_NC+300");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubOverride");
            dic.Add("Level_6", "AllOthers");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_NC");
            dic.Add("Expression", "$_NC+400");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Teilwert_1992");
            dic.Add("Expression", "$_Teilwert_1992+4000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_NC_1992");
            dic.Add("Expression", "$_NC_1992+400");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Teilwert_ValAge");
            dic.Add("Expression", "$_Teilwert_ValAge+4000");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("MenuItem", "Add Override Definition");
            pAssumptions._TreeViewRightSelect(dic, "JubBKRESOverride");


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubBKRESOverride");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "IntAccounting");
            dic.Add("IntlAccountingABO", "True");
            dic.Add("IntlAccountingPBO", "True");
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubBKRESOverride");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "Trade");
            dic.Add("IntlAccountingABO", "");
            dic.Add("IntlAccountingPBO", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "True");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubBKRESOverride");
            dic.Add("Level_6", "AllOthers");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_BookReserve");
            dic.Add("Expression", "($_Teilwert_ValAge-$_Teilwert_1992)+4000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_TeilwertNY");
            dic.Add("Expression", "Round($_BookReserve*1.6666,0)");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "");
            dic.Add("Name", "");
            dic.Add("Expression", "");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pMain._Home_ToolbarClick_Top(true);

            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Methods");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CostMethod", "Entry Age Normal (modified)");
            dic.Add("AnnualIncreaseRate", "AsPI_PayIncreaseRate");
            pMethods_DE._Table_TradeLiability_Jubilee(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("AddRow", "click");
            dic.Add("VOShortName", "JUBI01");
            dic.Add("BenefitDefinition", "Jubi20");
            dic.Add("PSVCoverage", "True");    //////// here should be "Tax" for jubi
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("IntAcctng", "");
            pMethods_DE._Table_BenefitsToExclude(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("AddRow", "click");
            dic.Add("VOShortName", "JUBI02");
            dic.Add("BenefitDefinition", "Jubi20");
            dic.Add("PSVCoverage", "True");    //////// here should be Tax for jubi
            dic.Add("Tax", "");
            dic.Add("Trade", "");
            dic.Add("IntAcctng", "");
            pMethods_DE._Table_BenefitsToExclude(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");


            pMain._SelectTab("Provisions");


            dic.Clear();
            dic.Add("Level_1", "Global Provisions");
            dic.Add("Level_2", "Service");
            dic.Add("MenuItem", "Add Service");
            pAssumptions._TreeViewRightSelect(dic, "GS_ProrationOverride");

            dic.Clear();
            dic.Add("Level_1", "Global Provisions");
            dic.Add("Level_2", "Service");
            dic.Add("Level_3", "GS_ProrationOverride");
            dic.Add("Level_4", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceAtValuationDate", "");
            dic.Add("RulesBasedService", "");
            dic.Add("ServiceAsAFunction", "");
            dic.Add("CustomCode", "");
            dic.Add("UseServiceCa", "True");
            dic.Add("ForInternationalAccounting_DE", "");
            dic.Add("ForTrade_DE", "");
            dic.Add("CalculateExactServiceAtReitermentAge_UK", "");
            pService._PopVerify_Main(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ServiceStarts_Age_V", "");
            dic.Add("ServiceStarts_Age_C", "click");
            dic.Add("ServiceStarts_Age_cbo", "");
            dic.Add("ServiceStarts_Age_txt", "25");
            dic.Add("ServiceStarts_FixedDate", "");
            dic.Add("Date", "");
            dic.Add("RoundingRule", "");
            dic.Add("ServiceIncreasement_V", "");
            dic.Add("ServiceIncreasement_C", "");
            dic.Add("ServiceIncreasement_cbo", "");
            dic.Add("ServiceIncreasement_txt", "");
            pService._PopVerify_RulesBasedService(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("IRUK", "");
            dic.Add("ServiceStarts_V", "");
            dic.Add("ServiceStarts_C", "click");
            dic.Add("ServiceStarts_cbo", "");
            dic.Add("ServiceStarts_txt", "25");
            dic.Add("MaximumService_UseServiceCap", "30");
            dic.Add("ServiceStarts_FixedDate", "01.01.2000");
            dic.Add("ServiceStarts_Date", "");
            dic.Add("ServiceEnds_V", "");
            dic.Add("ServiceEnds_C", "click");
            dic.Add("ServiceEnds_cbo", "");
            dic.Add("ServiceEnds_txt", "50");
            dic.Add("ServiceEnds_FixedDate", "31.12.2020");
            dic.Add("ServiceEnds_Date", "");
            dic.Add("CalculationMethod", "");
            dic.Add("RoundingPeriod", "");
            dic.Add("RoundingMethod", "");
            dic.Add("RoundingRule", "");
            dic.Add("ServiceIncreasement_V", "");
            dic.Add("ServiceIncreasement_C", "");
            dic.Add("ServiceIncreasement_cbo", "");
            dic.Add("ServiceIncreasement_txt", "");
            pService._PopVerify_RulesBasedService_UseServiceCap_DE(dic);


            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Methods");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "click");
            dic.Add("iRow", "1");
            dic.Add("VOShortName", "JUBI01");
            dic.Add("BenefitDefinition", "Jubi30");
            dic.Add("isDisableTrade", "true");
            dic.Add("Trade", "");
            dic.Add("IntAcctng", "True");
            dic.Add("PUCOverride", "Projected Unit Credit Service Prorate");
            dic.Add("TUCOverride", "Service Prorate");
            dic.Add("ServiceForProrate", "GS_ProrationOverride");
            pMethods_DE._MethodOverrieds_Table(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "click");
            dic.Add("iRow", "2");
            dic.Add("VOShortName", "JUBI02");
            dic.Add("BenefitDefinition", "Jubi30");
            dic.Add("isDisableTrade", "true");
            dic.Add("Trade", "");
            dic.Add("IntAcctng", "True");
            dic.Add("PUCOverride", "Projected Unit Credit Service Prorate");
            dic.Add("TUCOverride", "Service Prorate");
            pMethods_DE._MethodOverrieds_Table(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("Description", "JubileeSalaryPRoj");
            dic.Add("VOShortName", "JUBI02");
            dic.Add("Variable", "UDPA_Projection1");
            dic.Add("Age_cbo", "$SSNRA");
            pMethods_DE._AdditionalValuesToOutput(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CostMethod", "");
            dic.Add("ServiceForServiceProrate", "");
            dic.Add("CompareToAccrue", "");
            dic.Add("AllowNegativeNormalCost", "");
            dic.Add("ProjectedpayToUse", "");
            dic.Add("ProjectedpayToUse_CA", "");
            dic.Add("AccumulationToUse", "");
            dic.Add("IncludeExitYearValue", "");
            dic.Add("CalculatePresentValueOfFuture", "");
            dic.Add("CalculatePresentValueOfFuture_txt", "");
            dic.Add("VestingToUseForAgeFirstVested", "");
            dic.Add("AverageWorkingLifeTime", "true");
            dic.Add("AverageLifeTime", "true");
            dic.Add("AverageWorkingLifeTimeToVesting", "");
            dic.Add("AverageWorkingLifeTimeForBenefitingEE", "");
            pMethods._PopVerify_Methods_Accounting(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Assumptions");

            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Assumed Retirement Age");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Calculate", "True");
            dic.Add("FromData", "");
            dic.Add("CustomCode", "");
            pAssumedRetirementAge._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Fruhestmogliches", "");
            dic.Add("Regelaltersgrenze", "");
            dic.Add("ContractualRetureentAge", "true");
            dic.Add("OverwriteWithIndividual_V", "");
            dic.Add("OverwriteWithIndividual_cbo", "");
            dic.Add("OverwriteWithIndividual_C", "");
            dic.Add("OverwriteWithIndividual_txt", "");
            pAssumedRetirementAge._PopVerify_Calculate(dic);



            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "");
            dic.Add("Rate", "");
            dic.Add("AsOfDate", "31.12.2012");
            pInterestRate._PopVerify_PrescribedRates(dic);



            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "");
            dic.Add("AdjustFactorrFromNextToGross", "1,88");
            dic.Add("TaxTariff", "2014");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "One Year Projection");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Actives_txt", "2,222");
            dic.Add("Pensions_txt", "3,333");
            dic.Add("Deferred_txt", "4,444");
            pOneYearProjection._OneYearProjection(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Report Breaks");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BreakFields", "SubsidiaryCode");
            dic.Add("TextSubstitution", "");
            dic.Add("Remove", "");
            dic.Add("OK", "");
            pReportBreaks._PopVerify_ReportBreaks(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("BreakFields", "Gender");
            dic.Add("TextSubstitution", "");
            dic.Add("Remove", "");
            dic.Add("OK", "click");
            pReportBreaks._PopVerify_ReportBreaks(dic);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Test Case");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("SelectionCriteria", "$emp.BirthDate=\"09.01.1975\" and $emp.VOShortName=\"JUBI01\" and $emp.EmployeeIDNumber=1");
            dic.Add("iResultRow", "1");
            pTestCaseLibrary._AddTestCase(dic);

            pMain._Home_ToolbarClick_Top(true);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "JubiSalaryCurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Actuarial Report");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pActuarialReport._SelectTab("General");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ShowLYLiabilitiesInLastYear", "");
            dic.Add("MecerLocation", "Stuttgart");
            dic.Add("NameToBePrintedOnReportLeft", "Martin Holzwarth");
            dic.Add("AcademicTitleOfPersonLeft", "Sheriff");
            dic.Add("NameToBePrintedOnReportRight", "Stefan Heinzmann");
            dic.Add("AcademicTitleOfPersonRight", "Sheriff's Deputy");
            dic.Add("ExtensionOfUndersigningPersonRight", "+49 711 23716 0");
            dic.Add("LocationOfUndersigningPersonRight", "Stuttgart");
            dic.Add("IndividualTermsAndConditions", "Individual text");
            pActuarialReport._General(dic);


            pActuarialReport._SelectTab("Subsidiary Information");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ClientLongName", "");
            dic.Add("ClientLongName_txt", "");
            dic.Add("ClientShortName", "");
            dic.Add("ClientShortName_txt", "");
            dic.Add("ClientCode", "");
            dic.Add("AddressLine1", "true");
            dic.Add("AddressLine1_txt", "Address Line 1");
            dic.Add("City", "true");
            dic.Add("City_txt", "City");
            dic.Add("PostalCode", "true");
            dic.Add("PostalCode_txt", "11111");
            dic.Add("Country", "true");
            dic.Add("Country_txt", "Germany");
            dic.Add("AddressLine2", "true");
            dic.Add("AddressLine2_txt", "Address Line 2");
            pActuarialReport._SubsidiaryInformation(dic);



            pActuarialReport._SelectTab("Report Contents");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iListing", "1");
            pActuarialReport._TemplateandIndividualListing_AddColumn(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("ReportSetName", "JubTaxTrade");
            dic.Add("ReportType", "Jubilee");
            dic.Add("ReportTemplate", "2015_DEJubilee");
            dic.Add("Listing1", "JubiNew");
            dic.Add("Listing2", "Jubilee default");
            pActuarialReport._ReportContents_DefineReportSets(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("ReportSetName", "IFRS");
            dic.Add("ReportType", "Jubilee IFRS");
            dic.Add("ReportTemplate", "2015_DEJubileeIFRS");
            dic.Add("Listing1", "IFRS default");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("ReportSetName", "IFRSEng");
            dic.Add("ReportType", "Jubilee IFRS");
            dic.Add("ReportTemplate", "2015_DEJubileeIFRSEnglish");
            dic.Add("Listing1", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("ReportSetName", "Accounting");
            dic.Add("ReportType", "Jubilee");
            dic.Add("ReportTemplate", "2015_DEJubileeAccountingBasis");
            dic.Add("Listing1", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("VOShortName", "JUBI01");
            dic.Add("VOZusammenfassung", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Jubilee\Anhang 1.docx");
            dic.Add("VOSummary", "");
            pActuarialReport._ReportContents_VOSummaries(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("VOShortName", "JUBI02");
            dic.Add("VOZusammenfassung", "");
            dic.Add("VOSummary", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Jubilee\Anhang 2.docx");
            pActuarialReport._ReportContents_VOSummaries(dic);



            pActuarialReport._SelectTab("Tax and Trade");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DirectPromise", "");
            dic.Add("SupportFund", "");
            dic.Add("NameOfSupportFund", "");
            dic.Add("NumberOfReports", "2");
            pActuarialReport._TaxAndTrade(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field 1 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "Sub1");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field 1 value");
            dic.Add("iCol", "2");
            dic.Add("sData", "Sub3");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field 2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "M");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field 2 value");
            dic.Add("iCol", "2");
            dic.Add("sData", "F");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Subtitle (first page and header)");
            dic.Add("iCol", "1");
            dic.Add("sData", "Subsidiary1");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Subtitle (first page and header)");
            dic.Add("iCol", "2");
            dic.Add("sData", "Subsidiary2");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Jubilee Report Set 1");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "JubTaxTrade");
                dic.Add("sFieldType", "LIST");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Jubilee Report Set 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "Accounting");
                dic.Add("sFieldType", "LIST");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Jubilee Special Aspects German");
            dic.Add("iCol", "1");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Jubilee\Anhang 2.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Jubilee Special Aspects German");
            dic.Add("iCol", "2");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Jubilee\Anhang 1.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Jubilee Special Aspects English");
            dic.Add("iCol", "1");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Jubilee\Anhang 1.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Jubilee Special Aspects English");
            dic.Add("iCol", "2");
            dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Jubilee\Anhang 2.docx");
            dic.Add("sFieldType", "Browse");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Run date");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "01.12.2012");
                dic.Add("sFieldType", "date");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Run date of last year's report");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "30.11.2011");
                dic.Add("sFieldType", "date");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Inventory date");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "01.11.2012");
                dic.Add("sFieldType", "date");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Date when BilMoG is first applied");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "01.01.2010");
                dic.Add("sFieldType", "date");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                //////////////dic.Add("InformationByBreak", "Interest rate BilMoG as of previous year");
                dic.Add("InformationByBreak", "Interest Rate Trade as of previous Year");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "1,12%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Turnover rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "1,23%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "1,34%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "BBG increase rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "1,45%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Tax is part of report");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Trade is part of report");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Show complete reconcilation of pension expense for Trade");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "IntAcc is part of report");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "IFRS is part of report");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "US is part of report");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing withdrawal treatment");
            dic.Add("iCol", "2");
            dic.Add("sData", "Heubeck");
            dic.Add("sFieldType", "list");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing chosen assumed retirement age (trade)");
            dic.Add("iCol", "2");
            dic.Add("sData", "Regel-PA-RV-AAG07 minus 2 years");
            dic.Add("sFieldType", "list");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing chosen assumed retirement age (tax)");
            dic.Add("iCol", "2");
            dic.Add("sData", "65");
            dic.Add("sFieldType", "list");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                //////////////dic.Add("InformationByBreak", "Show alternate interest rate result");
                dic.Add("InformationByBreak", "Show alternate interest rate IntAcc result");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                //////////////dic.Add("InformationByBreak", "Alternate interest rate");
                dic.Add("InformationByBreak", "Alternate Interest Rate IntAcc");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "2,34%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Show alternate projection rate result");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Alternate projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "2,45%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                //////////dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate interest rate");
                dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate interest rate IntAcc");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "123546,00");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                ////////////dic.Add("InformationByBreak", "Current service cost under alternate interest rate");
                dic.Add("InformationByBreak", "Current service cost under alternate interest rate IntAcc");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "123,00");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "234567,00");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Current service cost under alternate projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "234,00");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Individual Tax");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Tax rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "5,00%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Factor (related to monthly income) for holiday");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "12");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Factor (related to yearly income) for holiday");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "3");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Liabilities applying BilMoG as of previous year");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "55555");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "LY Book Reserve Trade");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "55500");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Interest cost current year");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "1111");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Show interest cost following year");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Interest cost following year");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "2222");
                dic.Add("sFieldType", "txt");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Transition amount liabilities when BilMoG was first applied");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "6666");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Number of years from BilMoG transition date");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "3");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Jubilee awards (incl. contributions and holidays) paid this year");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "10000");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Transfers from liabilities (Tax)");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "888");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Transfers to liabilities (Tax)");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "999");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Transfers from liabilities (Trade)");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "777");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Transfers to liabilities (Trade)");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "666");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Effect of change in interest rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "555");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Date when BilMoG interest rate has been determined");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "01.10.2012");
                dic.Add("sFieldType", "text");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                //////////////dic.Add("InformationByBreak", "Turnover rates are independent from gender?");
                dic.Add("InformationByBreak", "Jubilee Break Parameter 2 (obsolete)");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "yes");
                dic.Add("sFieldType", "text");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Additional report information");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "yes");
                dic.Add("sFieldType", "text");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Data comes from Pension Admin?");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "yes");
                dic.Add("sFieldType", "text");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Additional projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "0.01234");
                dic.Add("sFieldType", "text");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Turnover rate table is in attachment A 1 ?");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "yes");
                dic.Add("sFieldType", "text");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Method to limit tax book reserve by trade book reserve (EStÄR 2012)");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "yes");
                dic.Add("sFieldType", "text");
                pActuarialReport._TaxAndTrade_TBL(dic, true);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            //////////////dic.Add("InformationByBreak", "Show alternate interest rate result");
            dic.Add("InformationByBreak", "Show alternate interest rate IntAcc result");
            dic.Add("iCol", "2");
            dic.Add("sData", "false");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show alternate projection rate result");
            dic.Add("iCol", "2");
            dic.Add("sData", "false");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Individual Tax");
            dic.Add("iCol", "2");
            dic.Add("sData", "false");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show interest cost following year");
            dic.Add("iCol", "2");
            dic.Add("sData", "false");
            dic.Add("sFieldType", "chx");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            pMain._Home_ToolbarClick_Top(true);



            pActuarialReport._SelectTab("IntAcc");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DirectPromise", "");
            dic.Add("SupportFund", "");
            dic.Add("NameOfSupportFund", "");
            dic.Add("NumberOfReports", "2");
            pActuarialReport._TaxAndTrade(dic);



            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Break field1 value");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "Sub2");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._IntAcc_TBL(dic);
            }

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "M");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "2");
            dic.Add("sData", "F");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._IntAcc_TBL(dic, true);

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Subtitle (first page and header)");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "Subsidiary2");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Jubilee IFRS Report Set 1");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "IFRS");
                dic.Add("sFieldType", "LIST");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Jubilee IFRS Report Set 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "IFRSEng");
                dic.Add("sFieldType", "LIST");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Special Aspects German");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Jubilee\Anhang 1.docx");
                dic.Add("sFieldType", "Browse");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Special Aspects English");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AR Jubilee\Anhang 2.docx");
                dic.Add("sFieldType", "Browse");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Run date");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "01.01.2013");
                dic.Add("sFieldType", "date");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            //_gLib._MsgBox("", "need check with stefan");
            ////////////////for (int i = 1; i <= 2; i++)
            ////////////////{
            ////////////////    dic.Clear();
            ////////////////    dic.Add("PopVerify", "Pop");
            ////////////////    dic.Add("InformationByBreak", "Interest Rate");
            ////////////////    dic.Add("iCol", i.ToString());
            ////////////////    dic.Add("sData", "5,00%");
            ////////////////    dic.Add("sFieldType", "text");
            ////////////////    pActuarialReport._IntAcc_TBL(dic, true);
            ////////////////}


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Turnover rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "1,23%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "2,34%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "BBG increase rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "3,45%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Plan assets");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "4,56");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._IntAcc_TBL(dic, true);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing withdrawal treatment");
            dic.Add("iCol", "1");
            dic.Add("sData", "Client Specific");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing withdrawal treatment");
            dic.Add("iCol", "2");
            dic.Add("sData", "Percentage");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Option for describing chosen assumed retirement age (obsolete)");
            dic.Add("iCol", "2");
            dic.Add("sData", "65");
            dic.Add("sFieldType", "LIST");
            pActuarialReport._IntAcc_TBL(dic, true);

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Show alternate interest rate result");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Alternate interest rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "4,44%");
                dic.Add("sFieldType", "TEXT");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Show alternate projection rate result");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "true");
                dic.Add("sFieldType", "chx");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Alternate projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "3,33%");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate interest rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "123456,00");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Current service cost under alternate interest rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "123,00");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "234567,00");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Current service cost under alternate projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "234,00");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Individual Tax");
            dic.Add("iCol", "1");
            dic.Add("sData", "true");
            dic.Add("sFieldType", "chx");
            pActuarialReport._IntAcc_TBL(dic, true);

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Tax rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "3,33%");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show alternate interest rate result");
            dic.Add("iCol", "2");
            dic.Add("sData", "false");
            dic.Add("sFieldType", "chx");
            pActuarialReport._IntAcc_TBL(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Show alternate projection rate result");
            dic.Add("iCol", "2");
            dic.Add("sData", "false");
            dic.Add("sFieldType", "chx");
            pActuarialReport._IntAcc_TBL(dic, true);

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Factor (related to monthly income) for holiday");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "10");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Factor (related to yearly income) for holiday");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", ",55");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Does “revised 2011” apply for 2012?");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "yes");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Turnover rate German");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "0.0123");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Assumed retirement age German");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "65");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Turnover rate English");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", ".0234");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Assumed retirement age English");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "66");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Description why Mercer does not fully agree on the chosen assumptions");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "some records are missing");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Alternate projection rate 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "0.022");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate projection rate 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "56789");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Service cost under alternate projection rate 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "789");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Alternate interest rate 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", ".066");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Current IFRS liabilities (DBO) under alternate interest rate 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "98765");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Service cost under alternate interest rate 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "987");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Additional report information");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "no");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Disclosure Information?");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "no");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Additional projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "0.077");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Data comes from Pension Admin?");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "no");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Significant events (German)");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "event1");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Significant events (English)");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "event2");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Duration");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "66.666");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Duration under alternate interest rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "66.333");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Duration under alternate interest rate 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "66.999");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }


            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Duration under alternate projection rate");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "67.000");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            for (int i = 1; i <= 2; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("InformationByBreak", "Duration under alternate projection rate 2");
                dic.Add("iCol", i.ToString());
                dic.Add("sData", "66.000");
                dic.Add("sFieldType", "text");
                pActuarialReport._IntAcc_TBL(dic, true);
            }

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Actuarial Report");
            pMain._FlowTreeRightSelect(dic);

            Thread.Sleep(1000 * 20);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "Valuation Summary", "RollForward", true, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "Individual Output", "RollForward", true, true);
                ////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "Liability Set for Globe Export", "RollForward", true, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });
            }

            if (Config.bDownloadReports_EXCEL)
            {
                //////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "Valuation Summary", "RollForward", false, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "Individual Output", "RollForward", false, true);
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "Test Cases", "RollForward", false, true);
                pOutputManager._DE010_Jubilee2012_Baseline_ICT(sOutputJubilee_Valuation2012_Baseline);
                ////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "Liability Set for Globe Export", "RollForward", false, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });
            }

            thrd_Jubilee_Valuation2012_Baseline.Start();


            pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "Parameter Print", "RollForward", true, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "IFRS", "RollForward", true, false, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_Baseline, "Jubilee", "RollForward", true, false, true);


            pMain._Home_ToolbarClick_Top(true);


            #endregion



            #region Jubilee RF - Valuation 2012 - Trade EAN


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "Trade EAN");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Methods");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CostMethod", "Entry Age Normal");
            dic.Add("AnnualIncreaseRate", "#1#");
            pMethods_DE._Table_TradeLiability_Jubilee(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Test Case");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Test Case Library");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveSelectedfromLibrary", "Click");
            pTestCaseLibrary._PopVerify_RemoveSelectedfromLibrary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pTestCaseLibrary._PopVerify_RecodeDelection(dic);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "JubiSalaryCurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);



            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Actuarial report");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "True");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_JubileeSalary");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreaksBasedOnData", "Original");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "click");
            pMain._PopVerify_RunOptions(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);

            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "Parameter Print", "RollForward", true, false);
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "Test Cases", "RollForward", false, false);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "Future Valuation Summary", "RollForward", true, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "IFRS", "RollForward", true, false, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "Jubilee", "RollForward", true, false, true);


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "Individual Output", "RollForward", true, false);
                ////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "Liability Set for Globe Export", "RollForward", true, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });
            }


            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "Individual Output", "RollForward", false, false);
                ////////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "Liability Set for Globe Export", "RollForward", false, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_TradeEAN, "Future Valuation Summary", "RollForward", false, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });

            }

            thrd_Jubilee_Valuation2012_TradeEAN.Start();


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            pMain._SelectTab("Valuation 2012");
            pMain._Home_ToolbarClick_Top(true);


            #endregion

            #region  Jubilee RF - Valuation 2012 - Trade PUC

            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "Trade PUC");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Methods");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("CostMethod", "Projected Unit Credit Service Prorate");
            dic.Add("MembershipDate", "");
            dic.Add("AnnualIncreaseRate", "");
            dic.Add("EarliestEntryAgeMethod", "");
            dic.Add("EarliestEntryAge_txt", "");
            dic.Add("AllowNegativeNormal", "");
            pMethods_DE._Table_TradeLiability(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "");
            dic.Add("iRow", "1");
            dic.Add("VOShortName", "");
            dic.Add("BenefitDefinition", "");
            dic.Add("Trade", "True");
            dic.Add("IntAcctng", "");
            dic.Add("PUCOverride", "");
            dic.Add("TUCOverride", "");
            pMethods_DE._MethodOverrieds_Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "");
            dic.Add("iRow", "2");
            dic.Add("VOShortName", "");
            dic.Add("BenefitDefinition", "");
            dic.Add("Trade", "True");
            dic.Add("IntAcctng", "");
            dic.Add("PUCOverride", "");
            dic.Add("TUCOverride", "");
            pMethods_DE._MethodOverrieds_Table(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Test Case");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Test Case Library");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveSelectedfromLibrary", "Click");
            pTestCaseLibrary._PopVerify_RemoveSelectedfromLibrary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pTestCaseLibrary._PopVerify_RecodeDelection(dic);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Report Breaks");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BreakFields", "");
            dic.Add("Remove", "Click");
            dic.Add("TextSubstitution", "");
            dic.Add("OK", "");
            pReportBreaks._PopVerify_ReportBreaks(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BreakFields", "");
            dic.Add("Remove", "Click");
            dic.Add("TextSubstitution", "");
            dic.Add("OK", "Click");
            pReportBreaks._PopVerify_ReportBreaks(dic);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "JubiSalaryCurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);


            pMain._SelectTab("Valuation 2012");

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Actuarial report");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);



            pActuarialReport._SelectTab("Tax and Trade");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DirectPromise", "");
            dic.Add("SupportFund", "");
            dic.Add("NameOfSupportFund", "");
            dic.Add("NumberOfReports", "1");
            pActuarialReport._TaxAndTrade(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field1 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            pActuarialReport._SelectTab("IntAcc");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DirectPromise", "");
            dic.Add("SupportFund", "");
            dic.Add("NameOfSupportFund", "");
            dic.Add("NumberOfReports", "1");
            pActuarialReport._TaxAndTrade(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field1 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._IntAcc_TBL(dic, false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "TEXT");
            pActuarialReport._IntAcc_TBL(dic, true);


            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Actuarial Report");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Future Valuation Options");
            pMain._FlowTreeRightSelect(dic);


            pFutureValuationOption._SelectTab("Participant grouping");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("GroupingByStatusCodes", "");
            dic.Add("CustomGroupingByBreakField", "");
            dic.Add("CustomGroupingByBreakField_Cbo", "");
            dic.Add("CustomGroupingBySelectionCriteria", "true");
            dic.Add("AddRow", "click");
            dic.Add("iRowNum", "1");
            dic.Add("Group", "Sub1");
            dic.Add("SelectionCriteria", "$emp.SubsidiaryCode=\"Sub1\"");
            dic.Add("Remove", "");
            dic.Add("Validate", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            pFutureValuationOption._ParticipantGrouping(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("GroupingByStatusCodes", "");
            dic.Add("CustomGroupingByBreakField", "");
            dic.Add("CustomGroupingByBreakField_Cbo", "");
            dic.Add("CustomGroupingBySelectionCriteria", "");
            dic.Add("AddRow", "click");
            dic.Add("iRowNum", "2");
            dic.Add("Group", "Sub2");
            dic.Add("SelectionCriteria", "$emp.SubsidiaryCode=\"Sub2\"");
            dic.Add("Remove", "");
            dic.Add("Validate", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            pFutureValuationOption._ParticipantGrouping(dic);


            pFutureValuationOption._SelectTab("Population size");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ModelPopulationSizePerParticipantGroup", "true");
            dic.Add("iRowNum", "1");
            dic.Add("ParticipantGroup", "");
            dic.Add("PopulationSizeOption", "Growth rate %");
            dic.Add("iColName", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._PropulationSize(dic);


            for (int i = 2012; i <= 2031; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("ModelPopulationSizePerParticipantGroup", "");
                dic.Add("iRowNum", "1");
                dic.Add("ParticipantGroup", "");
                dic.Add("PopulationSizeOption", "");
                dic.Add("iColName", (i - 2012 + 2).ToString());
                dic.Add("iColValue", "0,00");
                pFutureValuationOption._PropulationSize(dic);
            }



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ModelPopulationSizePerParticipantGroup", "true");
            dic.Add("iRowNum", "2");
            dic.Add("ParticipantGroup", "");
            dic.Add("PopulationSizeOption", "Growth rate %");
            dic.Add("iColName", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._PropulationSize(dic);

            for (int i = 2012; i <= 2031; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("ModelPopulationSizePerParticipantGroup", "");
                dic.Add("iRowNum", "2");
                dic.Add("ParticipantGroup", "");
                dic.Add("PopulationSizeOption", "");
                dic.Add("iColName", (i - 2012 + 2).ToString());
                dic.Add("iColValue", "5,00");
                pFutureValuationOption._PropulationSize(dic);
            }



            pFutureValuationOption._SelectTab("New entrants");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=127 AND $emp.VOShortName=\"JUBI02\"");
            dic.Add("iResultRow", "1");
            pFutureValuationOption._AddTestCase(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=118 AND $emp.VOShortName=\"JUBI02\"");
            dic.Add("iResultRow", "1");
            pFutureValuationOption._AddTestCase(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=118 AND $emp.VOShortName=\"JUBI01\"");
            dic.Add("iResultRow", "1");
            pFutureValuationOption._AddTestCase(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectionCriteria", "$emp.EmployeeIDNumber=14 AND $emp.VOShortName=\"JUBI01\"");
            dic.Add("iResultRow", "1");
            pFutureValuationOption._AddTestCase(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAllFromLibrary", "");
            dic.Add("iRowNum", "1");
            dic.Add("ParticipantGroup", "Sub2");
            dic.Add("iColNum", "");
            dic.Add("VOShortName", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAllFromLibrary", "");
            dic.Add("iRowNum", "3");
            dic.Add("ParticipantGroup", "Sub2");
            dic.Add("iColNum", "");
            dic.Add("VOShortName", "");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "195");
            dic.Add("iColumn", "");
            dic.Add("sColumn", "");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "2");
            dic.Add("sColumn", "NewEntrantID");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "5");
            dic.Add("sColumn", "Gender");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "10");
            dic.Add("sColumn", "MaritalStatus");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "20");
            dic.Add("sColumn", "Pay1PriorYear2");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "50");
            dic.Add("sColumn", "Benefit1DB");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "80");
            dic.Add("sColumn", "Service (SVSocSecEndDate)");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "100");
            dic.Add("sColumn", "UnionFlag");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "120");
            dic.Add("sColumn", "LYBookReserve");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "140");
            dic.Add("sColumn", "LYTeilwertTrade");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "160");
            dic.Add("sColumn", "LYPensionBenRetAgeTrade");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "190");
            dic.Add("sColumn", "gainLossParticipantReconciliationSubCodeDesc");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("iCount", "");
            dic.Add("iColumn", "195");
            dic.Add("sColumn", "participantConsolidatedCodeId");
            pFutureValuationOption._NewEntrants_VerifyColnum(dic);


            //////////   set  Gender = F
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Gender");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "F");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "Gender");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "F");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////   set  PSVLiabilityOther = 0,000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "PSVLiabilityOther");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "PSVLiabilityOther");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////  set  SubsidiaryCode = Sub2
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "SubsidiaryCode");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "Sub2");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "SubsidiaryCode");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "Sub2");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////  set  WhatIsTested = Blank          
            for (int i = 1; i <= 3; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("sColName", "WhatIsTested");
                dic.Add("iRowNum", i.ToString());
                dic.Add("iColValue", "");
                pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);
            }


            //////////  set  LYOverwriteResults = 1,0,0,0
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYOverwriteResults");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "1");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYOverwriteResults");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYOverwriteResults");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYOverwriteResults");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "0");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////  set  LYAliveStatusResult = XY
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYAliveStatusResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "XY");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYAliveStatusResult");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYAliveStatusResult");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////  set  LYHealthStatusResult = H
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYHealthStatusResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "H");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYHealthStatusResult");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYHealthStatusResult");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////  set  LYParticipantStatusResult = AC
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYParticipantStatusResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "AC");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYParticipantStatusResult");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYParticipantStatusResult");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////  set  LYPayStatusResult = DEF
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPayStatusResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "DEF");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPayStatusResult");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPayStatusResult");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////  set  LYPremiumTaxResult= 371,0000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPremiumTaxResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "371,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPremiumTaxResult");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYPremiumTaxResult");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////  set  LYTeilwertNYTradeResult= 2730,060
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTeilwertNYTradeResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "2730,060");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTeilwertNYTradeResult");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTeilwertNYTradeResult");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            //////////  LYTeilwertNYResult= 391,657
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTeilwertNYResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "391,657");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LYTradeALResult= 2272,000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTradeALResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "2272,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTradeALResult");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTradeALResult");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LYTradeNCResult= 325,000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTradeNCResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "325,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTradeNCResult");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYTradeNCResult");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LYUSCResult= 10
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYUSCResult");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "10");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYUSCResult");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LYUSCResult");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "0");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  EeAccountBalance1= 5000,00
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "EeAccountBalance1");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "0,00");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "EeAccountBalance1");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0,00");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LegacyTaxNC= 385,910
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTaxNC");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "385,910");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTaxNC");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTaxNC");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LegacyTradeAL= 1877,000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTradeAL");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "1877,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTradeAL");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTradeAL");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LegacyTradeNC= 313,000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTradeNC");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "313,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTradeNC");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyTradeNC");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LegacyIntAccountingPBOAL= 1930,000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingPBOAL");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "1930,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingPBOAL");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingPBOAL");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LegacyIntAccountingPBONC= 321,000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingPBONC");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "321,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingPBONC");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingPBONC");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LegacyIntAccountingABOAL= 1094,000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingABOAL");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "1094,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingABOAL");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingABOAL");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  LegacyIntAccountingABONC= 182,000
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingABONC");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "182,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingABONC");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "LegacyIntAccountingABONC");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "0,000");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  participantReconciliationcodeDesc= Continuing Actives
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "participantReconciliationcodeDesc");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "Continuing Actives");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "participantReconciliationcodeDesc");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "New Entrant");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "participantReconciliationcodeDesc");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "New Entrant");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            ////////////  set  participantReconciliationCodeId= 2,1,1,1
            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "participantReconciliationCodeId");
            dic.Add("iRowNum", "1");
            dic.Add("iColValue", "2");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "participantReconciliationCodeId");
            dic.Add("iRowNum", "2");
            dic.Add("iColValue", "1");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "participantReconciliationCodeId");
            dic.Add("iRowNum", "3");
            dic.Add("iColValue", "1");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("sColName", "participantReconciliationCodeId");
            dic.Add("iRowNum", "4");
            dic.Add("iColValue", "1");
            pFutureValuationOption._NewEntrants_TestCaseLibrary_ComboSelection(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("UsingRates_P", "click");
            dic.Add("UsingRates_T", "");
            dic.Add("UsingRates_txt", "3,0");
            dic.Add("UsingRates_cbo", "");
            pFutureValuationOption._NewEntrants_UsingRates(dic);



            pFutureValuationOption._SelectTab("Annuity benefit grouping");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AllBenfitDefinitionsInOneGroup", "");
            dic.Add("ByDecrement", "true");
            dic.Add("CustomGroupingByBenefitDefinitions", "");
            dic.Add("AddRow", "");
            dic.Add("GroupName", "");
            dic.Add("Includes_DeathLiab", "");
            dic.Add("Includes_DisabilitLiab", "");
            dic.Add("Includes_InactiveLiab", "");
            dic.Add("Includes_RetirementLiab", "");
            dic.Add("Includes_WithDrawalLiab", "");
            dic.Add("OK", "");
            pFutureValuationOption._AnnuityBen_And_LumpSum(dic);


            pFutureValuationOption._SelectTab("Lump sum benefit grouping");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AllBenfitDefinitionsInOneGroup", "");
            dic.Add("ByDecrement", "true");
            dic.Add("CustomGroupingByBenefitDefinitions", "");
            dic.Add("AddRow", "");
            dic.Add("GroupName", "");
            dic.Add("Includes_DeathLiab", "");
            dic.Add("Includes_DisabilitLiab", "");
            dic.Add("Includes_InactiveLiab", "");
            dic.Add("Includes_RetirementLiab", "");
            dic.Add("Includes_WithDrawalLiab", "");
            dic.Add("OK", "");
            pFutureValuationOption._AnnuityBen_And_LumpSum(dic);



            pFutureValuationOption._SelectTab("Projection years");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("EveryYearForTheFirst", "");
            dic.Add("AndEvery", "");
            dic.Add("UpToincludingProjectionYear", "");
            dic.Add("ProjectionYears", "");
            dic.Add("NumberOfRuns", "3");
            dic.Add("RandomNumDismissed", "5");
            pFutureValuationOption._ProjectionYears(dic);


            pFutureValuationOption._SelectTab("Future assumptions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AlignRatesWithCurrent", "");
            dic.Add("AlignRatesWithEach", "true");
            pFutureValuationOption._FutureAssumptions(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "click");
            pFutureValuationOption._PopVerify_OK(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Population Projection");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Successfully Complete", true, "FV Proj");



            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Future Valuation Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "True");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "PP_JubileeSalary");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreaksBasedOnData", "Original");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "2");
            dic.Add("iSelectRowNum", "3");
            dic.Add("iSelectColNum", "2");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);

            pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "Parameter Print", "RollForward", true, false);
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "Test Cases", "RollForward", false, false);
            pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "Future Valuation Summary", "RollForward", true, false, 0, new string[1] { "ALL" });
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "IFRS", "RollForward", true, false, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "Jubilee", "RollForward", true, false, true);


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "Individual Output", "RollForward", true, false);
                //////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "Liability Set for Globe Export", "RollForward", true, false, 0, new string[1] { "ALL" });
            }


            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "Individual Output", "RollForward", false, false);
                ////////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "Liability Set for Globe Export", "RollForward", false, false, 0, new string[1] { "ALL" });
                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_TradePUC, "Future Valuation Summary", "RollForward", false, false, 0, new string[1] { "ALL" });
            }


            thrd_Jubilee_Valuation2012_TradePUC.Start();


            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            pMain._SelectTab("Valuation 2012");
            pMain._Home_ToolbarClick_Top(true);

            #endregion

            #region  Jubilee RF - Valuation 2012 - V6.7 Enhancements


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "2");
            dic.Add("iSelectColNum", "1");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "V6.7 Enhancements");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "");
            dic.Add("AdjustFactorrFromNextToGross", "");
            dic.Add("TaxTariff", "2015");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);



            pAssumptions._TreeView_SelectTab("Trade");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "");
            dic.Add("AdjustFactorrFromNextToGross", "");
            dic.Add("TaxTariff", "2016");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);


            pAssumptions._TreeView_SelectTab("IntAccounting");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "");
            dic.Add("AdjustFactorrFromNextToGross", "");
            dic.Add("TaxTariff", "2016");
            dic.Add("SoliTaxRate", "");
            dic.Add("ChurchTaxRate", "");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "True");
            dic.Add("ApplyWithdrawalAdjustment", "");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "True");
            dic.Add("GenerateTestCaseOutput", "True");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "JubiSalaryCurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "True");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "True");
            dic.Add("SelectVOs_VO1", "false");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectVOs_VO6", "");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iMaxRowNum", "");
            dic.Add("iMaxColNum", "");
            dic.Add("iSelectRowNum", "");
            dic.Add("iSelectColNum", "");
            dic.Add("iPosX", "425");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);

            pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_V67Enhancements, "Parameter Print", "RollForward", true, false);
            pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_V67Enhancements, "Test Cases", "RollForward", false, false);
            pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2012_V67Enhancements, "Liabilities Detailed Results", "RollForward", true, false);
            ////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_V67Enhancements, "Liability Set for Globe Export", "RollForward", true, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });


            if (Config.bDownloadReports_PDF)
            {
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_V67Enhancements, "Individual Output", "RollForward", true, false);
            }


            if (Config.bDownloadReports_EXCEL)
            {
                pOutputManager._ExportReport_Others(Config.eCountry, sOutputJubilee_Valuation2012_V67Enhancements, "Individual Output", "RollForward", false, false);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2012_V67Enhancements, "Liabilities Detailed Results", "RollForward", false, false);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2012_V67Enhancements, "Liabilities Detailed Results by Plan Def", "RollForward", false, false);
                ////////////pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputJubilee_Valuation2012_V67Enhancements, "Liability Set for Globe Export", "RollForward", false, false, 0, new string[6] { "Sub1_F", "Sub1_M", "Sub2_F", "Sub2_M", "Sub3_F", "Sub3_M" });

            }


            thrd_Jubilee_Valuation2012_V67Enhancements.Start();

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");
            pMain._Home_ToolbarClick_Top(true);

            #endregion

            #region  Jubilee RF - Valuation 2012 - V6.9 Enhancements


            pMain._SelectTab("Valuation 2012");

            _gLib._MsgBox("", "pls set screen as maxinum");


            dic.Clear();
            //////////////////dic.Add("iSelectRowNum", "2");
            //////////////////dic.Add("iSelectColNum", "1");
            dic.Add("iPosX", "240");
            dic.Add("iPosY", "95");
            dic.Add("MenuItem_1", "Add Valuation Node");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ValNodeName", "V6.9 Enhancements");
            dic.Add("LiabilityValuationDate", "");
            dic.Add("Data_AddNew", "");
            dic.Add("Data_Name", "");
            dic.Add("Data_Edit", "");
            dic.Add("Assumptions_AddNew", "True");
            dic.Add("Assumptions_Name", "");
            dic.Add("Assumptions_Edit", "");
            dic.Add("MethodsLiabilities_AddNew", "True");
            dic.Add("MethodsLiabilities_Name", "");
            dic.Add("MethodsLiabilities_Edit", "");
            dic.Add("Provisions_AddNew", "True");
            dic.Add("Provisions_Name", "");
            dic.Add("Provisions_Edit", "");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "false");
            dic.Add("OK", "");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Need_ActuarialReport", "true");
            dic.Add("FundingInformation_AddNew", "true");
            dic.Add("FundingInformation_Name", "");
            dic.Add("FundingInformation_Edit", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_ValuationNodeProperties(dic);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iPosX", "470");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Assumptions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pAssumptions._TreeView_SelectTab("Tax");

            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Assumed Retirement Age");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Calculate", "True");
            dic.Add("FromData", "");
            dic.Add("CustomCode", "");
            pAssumedRetirementAge._PopVerify_Main(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Fruhestmogliches", "");
            dic.Add("Regelaltersgrenze", "true");
            dic.Add("ContractualRetureentAge", "");
            dic.Add("OverwriteWithIndividualRetirementAge_chx", "");
            dic.Add("OverwriteWithIndividual_Age_V", "");
            dic.Add("OverwriteWithIndividual_Age_cbo", "");
            dic.Add("OverwriteWithIndividual_Age_C", "");
            dic.Add("OverwriteWithIndividual_Age_txt", "");
            pAssumedRetirementAge._PopVerify_Calculate(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Ceilings");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("West", "");
            dic.Add("East", "");
            dic.Add("WestEast_FromData", "true");
            pSocialSecurityContributionCeilings._SocialSecurityContributionRates(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("HealthInsuranceWest_T", "click");
            dic.Add("HealthInsuranceWest_T_cbox", "SocSecHealthInsWestFinal");
            dic.Add("RVWest_T", "click");
            dic.Add("RVWest_T_cbo", "SocSecRVWestFinal");
            dic.Add("HealthEnsuranceEast_T", "click");
            dic.Add("HealthEnsuranceEast_T_cbo", "SocSecHealthInsEastFinal");
            dic.Add("RVEast_T", "click");
            dic.Add("RVEast_T_cbo", "SocSecRVEastFinal");
            pSocialSecurityContributionCeilings._FromData_ContributionCeilings(dic);



            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Social Security Contribution Rates");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "True");
            dic.Add("Other", "");
            dic.Add("AsOfDate", "31.12.2012");
            dic.Add("PriscribedRates_AccidentInsuranceContributionRate", "1,23");
            pSocialSecurityContributionRates._PopVerify_SocialSecurityContributionRates(dic);



            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Other Economic Assumptions");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WorkingDaysPerYear", "252,00");
            dic.Add("AdjustFactorrFromNextToGross", "1,35");
            dic.Add("TaxTariff", "2016");
            dic.Add("SoliTaxRate", "5,500");
            dic.Add("ChurchTaxRate", "8,000");
            pOtherEconomicAssumption._PopVerify_OtherEconomicAssumption_DE(dic);


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "One Year Projection");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Actives_txt", "1,23");
            dic.Add("Pensions_txt", "1,34");
            dic.Add("Deferred_txt", "1,45");
            pOneYearProjection._OneYearProjection(dic);



            pAssumptions._TreeView_SelectTab("Trade");


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("NonPrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "true");
            dic.Add("TimeBased", "");
            dic.Add("VIcon", "");
            dic.Add("PercentIcon", "");
            dic.Add("TIcon", "click");
            dic.Add("txtRate", "");
            dic.Add("cboRate", "GermanyTradeInterestRate10yrs");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);



            pAssumptions._TreeView_SelectTab("IntAccounting");


            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Interest Rate");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PrescribedRates", "");
            dic.Add("NonPrescribedRates", "");
            dic.Add("SameStructureForAllPeriods", "");
            dic.Add("TimeBased", "true");
            dic.Add("VIcon", "");
            dic.Add("PercentIcon", "");
            pInterestRate._PopVerify_SameStructureForAllPeriods(dic);


            for (int i = 0; i < 4; i++)
            {
                dic.Clear();
                dic.Add("PopVerify", "Pop");
                dic.Add("AsOfDate", "");
                dic.Add("ForActuarialEquivalence", "");
                dic.Add("ForwardRate", "");
                dic.Add("SpotRate", "true");
                dic.Add("AddRow", "click");
                pInterestRate._PopVerify_TimeBased(dic);
            }

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("NumberOfYears", "10");
            dic.Add("Rate", "4,44000000");
            pInterestRate._TimeBased_Table_DE(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("NumberOfYears", "20");
            dic.Add("Rate", "3,33000000");
            pInterestRate._TimeBased_Table_DE(dic);

            dic.Clear();
            dic.Add("iRow", "3");
            dic.Add("NumberOfYears", "30");
            dic.Add("Rate", "2,22000000");
            pInterestRate._TimeBased_Table_DE(dic);

            dic.Clear();
            dic.Add("iRow", "4");
            dic.Add("NumberOfYears", "99");
            dic.Add("Rate", "1,11000000");
            pInterestRate._TimeBased_Table_DE(dic);



            dic.Clear();
            dic.Add("Level_1", "Assumptions");
            dic.Add("Level_2", "Mortality Decrement");
            dic.Add("Level_3", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Rate", "Heubeck 2005 G Unisex");
            dic.Add("AsOfDate", "");
            dic.Add("PercentEligible", "");
            pMortalityDecrement._PopVerify_PrescribedRates(dic);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);




            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "470");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Liability Methods");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);

            pMain._SelectTab("Methods");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("TradeLiability_SameMethodforAllVOs", "false");
            dic.Add("IntAccLiability_SameMethodforAllVOs", "false");
            pMethods_DE._Methods_Pension_DE006(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("CostMethod", "Entry Age Normal (modified)");
            dic.Add("AnnualIncreaseRate", "AsPI_PayIncreaseRate");
            pMethods_DE._Table_TradeLiability_Jubilee(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("CostMethod", "Entry Age Normal");
            dic.Add("AnnualIncreaseRate", "Null");
            pMethods_DE._Table_TradeLiability_Jubilee(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("CostMethod", "Projected Unit Credit Service Prorate");
            dic.Add("CompareToAccrued", "");
            dic.Add("AllowNegativeNormal", "True");
            pMethods_DE._Table_InternationalAccounting(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("CostMethod", "Projected Unit Credit No Prorate");
            dic.Add("CompareToAccrued", "");
            dic.Add("AllowNegativeNormal", "True");
            pMethods_DE._Table_InternationalAccounting(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("AddRow", "");
            dic.Add("DeleteRow", "click");
            dic.Add("VOShortName", "JUBI01");
            dic.Add("BenefitDefinition", "Jubi20");
            dic.Add("Tax", "True");
            dic.Add("Trade", "");
            dic.Add("IntAcctng", "");
            pMethods_DE._Table_BenefitsToExclude_Jubilee(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddRow", "");
            dic.Add("DeleteRow", "click");
            dic.Add("iRow", "1");
            dic.Add("isDisableTrade", "true");
            dic.Add("VOShortName", "JUBI02");
            dic.Add("BenefitDefinition", "Jubi20");
            dic.Add("Trade", "");
            dic.Add("IntAcctng", "True");
            dic.Add("PUCOverride", "Projected Unit Credit Service Prorate");
            dic.Add("TUCOverride", "No Override");
            dic.Add("ServiceForProrate", "GS_ProrationOverride");
            pMethods_DE._MethodOverrieds_Table(dic);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "470");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Provisions");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pMain._SelectTab("Provisions");


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "User Defined Projection A");
            dic.Add("MenuItem", "Add User Defined Projection A");
            pAssumptions._TreeViewRightSelect(dic, "UDPA_FixAmount1");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "User Defined Projection A");
            dic.Add("Level_6", "UDPA_FixAmount1");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "True");
            dic.Add("CustomCode", "");
            dic.Add("Amount_V", "click");
            dic.Add("Amount_C", "");
            dic.Add("Amount_cbo", "ContribsWOInterest1");
            dic.Add("Amount_txt", "");
            dic.Add("Rate_V", "");
            dic.Add("Rate_P", "click");
            dic.Add("Rate_cbo", "");
            dic.Add("Rate_txt", "3,0");
            dic.Add("ProjectValuesForPastAges", "true");
            pUserDefinedProjectionA._PopVerify_Standard(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "User Defined Projection A");
            dic.Add("MenuItem", "Add User Defined Projection A");
            pAssumptions._TreeViewRightSelect(dic, "UDPA_FixAmount2");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "User Defined Projection A");
            dic.Add("Level_6", "UDPA_FixAmount2");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Standard", "");
            dic.Add("CustomCode", "True");
            pUserDefinedProjectionA._PopVerify_Standard(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "");
            dic.Add("Name", "");
            dic.Add("Expression", "Max($UDPA_FixAmount1,1000*(1+$AsPI_PayIncreaseRate)^($Age-$ValAge))");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("MenuItem", "Add Jubilee Benefit");
            pAssumptions._TreeViewRightSelect(dic, "JB_FixAmount3");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            dic.Add("Level_4", "Formulae");
            dic.Add("Level_5", "Jubilee Benefit");
            dic.Add("Level_6", "JB_FixAmount3");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FixedAmount", "true");
            dic.Add("SalaryBased", "");
            dic.Add("JubileeAmount_V", "click");
            dic.Add("JubileeAmount_C", "");
            dic.Add("JubileeAmount_cbo", "UDPA_FixAmount2");
            dic.Add("JubileeAmount_txt", "");
            dic.Add("NetAmtUsingTotal", "true");
            dic.Add("NetAmtUsingSystem", "");
            dic.Add("YearSalary", "");
            dic.Add("TaxClass", "");
            dic.Add("GrossAmount", "");
            dic.Add("FinalAmount", "");
            pJubileeBenefit._PopVerify_FixedAmount(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Provisions");
            pAssumptions._Collapse(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "Jubi25");


            for (int i = 0; i < 2; i++)
            {
                dic.Clear();
                dic.Add("Level_1", "Jubilee");
                dic.Add("Level_2", "JUBI01");
                dic.Add("Level_3", "Benefit Definition");
                dic.Add("Level_4", "Plan Definition");
                dic.Add("Level_5", "Jubi25");
                dic.Add("MenuItem", "Move Up");
                pAssumptions._TreeViewRightSelect(dic);
            }

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi25");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("YearsOfServiceForJubi", "25");
            dic.Add("BasedOn", "HireDate1");
            dic.Add("YearlySalary", "PP_JubileeSalary");
            dic.Add("ApplyPercentMarried", "false");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("JubileeBenefit", "JB_FixAmount3");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "2,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "True");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "5");
            dic.Add("GraceFactor", "0,50000");
            pPlanDefinition_DE._Table(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("MenuItem", "Add Override Definition");
            pAssumptions._TreeViewRightSelect(dic, "CrossLiabOverride");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "CrossLiabOverride");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PBO_AL");
            dic.Add("Expression", "$_PBO_AL+1000");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PBO_NC");
            dic.Add("Expression", "$_PBO_NC+100");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_ABO_AL");
            dic.Add("Expression", "$_ABO_AL+$_PBO_AL");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_ABO_NC");
            dic.Add("Expression", "$_ABO_NC+$_PBO_NC");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "5");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Trade_AL");
            dic.Add("Expression", "$_Trade_AL+$_ABO_AL");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "6");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Trade_NC");
            dic.Add("Expression", "$_Trade_NC+$_ABO_NC");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "7");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_BookReserve");
            dic.Add("Expression", "$_BookReserve+$_Trade_AL");
            dic.Add("Validate", "");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "8");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_NC");
            dic.Add("Expression", "$_NC+$_Trade_NC");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI01");
            pAssumptions._Collapse(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("MenuItem", "Add Plan Definition");
            pAssumptions._TreeViewRightSelect(dic, "Jubi10");

            for (int i = 0; i < 3; i++)
            {
                dic.Clear();
                dic.Add("Level_1", "Jubilee");
                dic.Add("Level_2", "JUBI02");
                dic.Add("Level_3", "Benefit Definition");
                dic.Add("Level_4", "Plan Definition");
                dic.Add("Level_5", "Jubi10");
                dic.Add("MenuItem", "Move Up");
                pAssumptions._TreeViewRightSelect(dic);
            }

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Benefit Definition");
            dic.Add("Level_4", "Plan Definition");
            dic.Add("Level_5", "Jubi10");
            dic.Add("Level_6", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("YearsOfServiceForJubi", "10");
            dic.Add("BasedOn", "HireDate1");
            dic.Add("YearlySalary", "PP_JubileeSalary");
            dic.Add("ApplyPercentMarried", "true");
            pPlanDefinition_DE._PopVerify_PlanDefinition_DE(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("JubileeBenefit", "JB_Salary");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("JubileeBenefit", "holiday");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "True");
            dic.Add("Retirement", "");
            dic.Add("Disability", "");
            dic.Add("Death", "");
            dic.Add("GraceYears", "");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("JubileeBenefit", "JB_FixAmount");
            dic.Add("Eligibility", "");
            dic.Add("Factor", "1,00000");
            dic.Add("Jubilee", "");
            dic.Add("Retirement", "");
            dic.Add("Disability", "True");
            dic.Add("Death", "True");
            dic.Add("GraceYears", "");
            dic.Add("GraceFactor", "1,00000");
            pPlanDefinition_DE._Table(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubOverride");
            dic.Add("MenuItem", "Delete");
            pAssumptions._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "JubBKRESOverride");
            dic.Add("MenuItem", "Delete");
            pAssumptions._TreeViewRightSelect(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("MenuItem", "Add Override Definition");
            pAssumptions._TreeViewRightSelect(dic, "CrossLiabOverrideLiabTypeFolder");


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "CrossLiabOverrideLiabTypeFolder");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "Trade");
            dic.Add("IntlAccountingABO", "");
            dic.Add("IntlAccountingPBO", "");
            dic.Add("Tax", "");
            dic.Add("Trade", "True");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "CrossLiabOverrideLiabTypeFolder");
            dic.Add("MenuItem", "Add New Liability Type Folder");
            pAssumptions._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FolderName", "Tax");
            dic.Add("IntlAccountingABO", "");
            dic.Add("IntlAccountingPBO", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "");
            dic.Add("OK", "Click");
            pAssumptions._PopVerify_NewLiabilityTypeFolder(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "CrossLiabOverrideLiabTypeFolder");
            dic.Add("Level_6", "Trade");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_Trade_AL");
            dic.Add("Expression", "$_Trade_AL+$_Trade_OneYearProjectedAccruedLiability");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);


            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "CrossLiabOverrideLiabTypeFolder");
            dic.Add("Level_6", "Tax");
            dic.Add("MenuItem", "Add Condition");
            pAssumptions._TreeViewRightSelect(dic, "Female");

            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "CrossLiabOverrideLiabTypeFolder");
            dic.Add("Level_6", "Tax");
            dic.Add("Level_7", "Female");
            pAssumptions._TreeViewSelect(dic);

            pAssumptions._SelectTab("Conditions");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PreDefinedEligibility", "");
            dic.Add("cboPreDefinedEligibility", "");
            dic.Add("LocalEligibility", "");
            dic.Add("txtLocalEligibility", "");
            dic.Add("AddToEligibilities", "");
            dic.Add("EligibilityCondition", "$emp.Gender=\"F\"");
            dic.Add("Validate", "Click");
            pAssumptions._PopVerify_Assmp_Decrement_Conditions(dic);


            pAssumptions._SelectTab("Parameters");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_BookReserve");
            dic.Add("Expression", "Max($_Teilwert_ValAge-$_Teilwert_1992,$_Trade_AL)");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "CrossLiabOverrideLiabTypeFolder");
            dic.Add("Level_6", "Tax");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_BookReserve");
            dic.Add("Expression", "Min($_Teilwert_ValAge-$_Teilwert_1992,$_Trade_AL)");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);



            dic.Clear();
            dic.Add("Level_1", "Jubilee");
            dic.Add("Level_2", "JUBI02");
            dic.Add("Level_3", "Post Benefit Override Definition");
            dic.Add("Level_4", "Override Definition");
            dic.Add("Level_5", "CrossLiabOverrideLiabTypeFolder");
            dic.Add("Level_6", "AllOthers");
            dic.Add("Level_7", "Default");
            pAssumptions._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("isInputName", "true");
            dic.Add("Name", "_PBO_AL");
            dic.Add("Expression", "$_ABO_AL");
            dic.Add("Validate", "click");
            pAssumptions._PopVerify_Provision_CustomCode(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "470");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Report Breaks");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("BreakFields", "");
            dic.Add("TextSubstitution", "");
            dic.Add("Remove", "click");
            dic.Add("OK", "");
            pReportBreaks._PopVerify_ReportBreaks(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BreakFields", "");
            dic.Add("TextSubstitution", "click");
            dic.Add("Remove", "");
            dic.Add("OK", "");
            pReportBreaks._PopVerify_ReportBreaks(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("Reomve", "");
            pReportBreaks._BreakFieldTextSubstitution_SelectBreakFields(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("BreakFieldValue", "Sub1");
            dic.Add("SubstitutionText", "Sub1Text");
            dic.Add("Remove", "");
            dic.Add("OK", "");
            pReportBreaks._BreakFieldTextSubstitution_TextSubstitution(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("BreakFieldValue", "Sub2");
            dic.Add("SubstitutionText", "Sub2Text");
            dic.Add("Remove", "");
            dic.Add("OK", "click");
            pReportBreaks._BreakFieldTextSubstitution_TextSubstitution(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("BreakFields", "");
            dic.Add("Remove", "");
            dic.Add("OK", "click");
            pReportBreaks._PopVerify_ReportBreaks(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "470");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Sensitivity");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Interest_IncreaseBy", "0,50");
            dic.Add("Interest_DecreseBy", "0,50");
            dic.Add("Pay_IncreaseBy", "0,50");
            dic.Add("Pay_DecreseBy", "0,50");
            dic.Add("Pension_IncreaseBy", "");
            dic.Add("Pension_DecreseBy", "");
            dic.Add("Mortality_IncreaseFactor", "1,135");
            dic.Add("Mortality_DecreseFactor", "0,885");
            dic.Add("Mortality_IncreaseSetBack", "");
            dic.Add("Mortality_DecreseSetBack", "");
            dic.Add("AddSensitivityNodes", "");
            pMain._PopVerify_AddSensitivityValuationNode(dic);


            dic.Clear();
            dic.Add("sTableType", "Interest");
            dic.Add("AssumptionDefinition", "Interest");
            dic.Add("sIntAcc", "True");
            dic.Add("sTrade", "True");
            dic.Add("sTax", "");
            pMain._TBL_Sensitivity(dic);

            dic.Clear();
            dic.Add("sTableType", "Pay");
            dic.Add("AssumptionDefinition", "AsPI_PayIncreaseRate");
            dic.Add("sIntAcc", "True");
            dic.Add("sTrade", "True");
            dic.Add("sTax", "");
            pMain._TBL_Sensitivity(dic);


            dic.Clear();
            dic.Add("sTableType", "Mortality");
            dic.Add("AssumptionDefinition", "Death");
            dic.Add("sIntAcc", "True");
            dic.Add("sTrade", "True");
            dic.Add("sTax", "");
            pMain._TBL_Sensitivity(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Interest_IncreaseBy", "");
            dic.Add("Interest_DecreseBy", "");
            dic.Add("Pay_IncreaseBy", "");
            dic.Add("Pay_DecreseBy", "");
            dic.Add("Pension_IncreaseBy", "");
            dic.Add("Pension_DecreseBy", "");
            dic.Add("Mortality_IncreaseFactor", "");
            dic.Add("Mortality_DecreseFactor", "");
            dic.Add("Mortality_IncreaseSetBack", "");
            dic.Add("Mortality_DecreseSetBack", "");
            dic.Add("AddSensitivityNodes", "Click");
            pMain._PopVerify_AddSensitivityValuationNode(dic);

            dic.Clear();
            dic.Add("OK", "click");
            pMain._SensitivityWaringHandle(dic);


            pMain._SelectTab("Valuation 2012");

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("iPosX", "687");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Batch Liabilities");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("OK", "click");
            pMain._HandleRemoved(dic);

            _gLib._MsgBox("", "update liability order to ABO -> PBO -> Trade -> Tax");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("PayoutProjection", "true");
            dic.Add("ApplyWithdrawalAdjustment", "true");
            dic.Add("IncludeIOE", "");
            dic.Add("GenerateParameterPrint", "true");
            dic.Add("GenerateTestCaseOutput", "true");
            dic.Add("SaveResultsforAuditReport", "");
            dic.Add("ApplyOverrides", "");
            dic.Add("RunLocally", "");
            dic.Add("Pay", "JubiSalaryCurrentYear");
            dic.Add("CurrentYear", "True");
            dic.Add("PriorYear", "");
            dic.Add("BreakByFundingVehicle", "");
            dic.Add("UseReportBreaks", "true");
            dic.Add("AllLiabilityTypes", "");
            dic.Add("Tax", "True");
            dic.Add("Trade", "True");
            dic.Add("AltTradeProjInt", "");
            dic.Add("InternationalAccountingABO", "True");
            dic.Add("InternationalAccountingPBO", "True");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "");
            dic.Add("SelectVOs_VO2", "");
            dic.Add("SelectVOs_VO3", "");
            dic.Add("SelectVOs_VO4", "");
            dic.Add("SelectVOs_VO5", "");
            dic.Add("SelectNodes", "click");
            dic.Add("RunValuation", "");
            pMain._PopVerify_RunOptions(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iX", "73");
            dic.Add("iY", "206");
            dic.Add("OK", "");
            pMain._PopVerify_MultipleNodeSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iX", "204");
            dic.Add("iY", "206");
            dic.Add("OK", "");
            pMain._PopVerify_MultipleNodeSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iX", "336");
            dic.Add("iY", "206");
            dic.Add("OK", "");
            pMain._PopVerify_MultipleNodeSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iX", "477");
            dic.Add("iY", "206");
            dic.Add("OK", "");
            pMain._PopVerify_MultipleNodeSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iX", "602");
            dic.Add("iY", "206");
            dic.Add("OK", "");
            pMain._PopVerify_MultipleNodeSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iX", "732");
            dic.Add("iY", "206");
            dic.Add("OK", "click");
            pMain._PopVerify_MultipleNodeSelection(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SelectVOs_AllVOs", "");
            dic.Add("SelectVOs_VO1", "JUBI01");
            dic.Add("SelectVOs_VO2", "JUBI02");
            dic.Add("RunValuation", "Click");
            pMain._PopVerify_RunOptions(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pMain._PopVerify_EnterpriseRunSubmitted(dic);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "80");
            dic.Add("iPosY", "209");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "204");
            dic.Add("iPosY", "209");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "342");
            dic.Add("iPosY", "209");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "475");
            dic.Add("iPosY", "209");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "607");
            dic.Add("iPosY", "209");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "729");
            dic.Add("iPosY", "205");
            dic.Add("MenuItem_1", "View Run Status");
            pMain._FlowTreeRightSelect(dic);

            pMain._EnterpriseRun("Group Job Completed With Errors", true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iPosX", "687");
            dic.Add("iPosY", "151");
            dic.Add("MenuItem_1", "Actuarial Report");
            dic.Add("MenuItem_2", "Edit Parameters");
            pMain._FlowTreeRightSelect(dic);


            pActuarialReport._SelectTab("Report Contents");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            //////////////dic.Add("ReportSetName", "JubiTaxTrade");
            //////////////dic.Add("ReportType", "Jubilee");
            dic.Add("ReportTemplate", "2016_DEJubilee");
            ////////////dic.Add("Listing1", "JubiNew");
            //////////////dic.Add("Listing2", "Jubilee default");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            //////////////dic.Add("ReportSetName", "IFRS");
            //////////////dic.Add("ReportType", "Jubilee IFRS");
            dic.Add("ReportTemplate", "2016_DEJubileeIFRS");
            //////////////dic.Add("Listing1", "IFRS default");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            //////////////dic.Add("ReportSetName", "IFRSEng");
            //////////////dic.Add("ReportType", "Jubilee IFRS");
            dic.Add("ReportTemplate", "2016_DEJubileeIFRSEnglish");
            dic.Add("Listing1", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            //////////////dic.Add("ReportSetName", "Accounting");
            //////////////dic.Add("ReportType", "Jubilee");
            dic.Add("ReportTemplate", "2016_DEJubileeAccountingBasis");
            dic.Add("Listing1", "");
            pActuarialReport._ReportContents_DefineReportSets(dic);



            pActuarialReport._SelectTab("Tax and Trade");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field 1 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "Sub1");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field 1 value");
            dic.Add("iCol", "2");
            dic.Add("sData", "Sub2");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field 2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field 2 value");
            dic.Add("iCol", "2");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Trade Interest rate determination method");
            dic.Add("iCol", "1");
            dic.Add("sData", "x");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "LY Book Reserve Tax");
            dic.Add("iCol", "1");
            dic.Add("sData", "123456");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "LY Book Reserve Tax");
            dic.Add("iCol", "2");
            dic.Add("sData", "98765");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Trade liability method");
            dic.Add("iCol", "1");
            dic.Add("sData", "MODTW");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Trade liability method");
            dic.Add("iCol", "2");
            dic.Add("sData", "ALTTW");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Tax Method");
            dic.Add("iCol", "1");
            dic.Add("sData", "Pausch");
            dic.Add("sFieldType", "list");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Tax Method");
            dic.Add("iCol", "2");
            dic.Add("sData", "Dummy (cf manual)");
            dic.Add("sFieldType", "list");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Biometric assumptions Tax");
            dic.Add("iCol", "1");
            dic.Add("sData", "x");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Biometric assumptions Tax");
            dic.Add("iCol", "2");
            dic.Add("sData", "2015");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Biometric assumptions Trade");
            dic.Add("iCol", "2");
            dic.Add("sData", "2010");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Biometric assumptions IntAcc");
            dic.Add("iCol", "2");
            dic.Add("sData", "x");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Effect of change in salary increase");
            dic.Add("iCol", "1");
            dic.Add("sData", "5432");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Effect of change in withdrawal");
            dic.Add("iCol", "1");
            dic.Add("sData", "4321");
            dic.Add("sFieldType", "txt");
            pActuarialReport._TaxAndTrade_TBL(dic, true);



            pActuarialReport._SelectTab("IntAcc");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field1 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "Sub1");
            dic.Add("sFieldType", "txt");
            pActuarialReport._IntAcc_TBL(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field1 value");
            dic.Add("iCol", "2");
            dic.Add("sData", "Sub2");
            dic.Add("sFieldType", "txt");
            pActuarialReport._IntAcc_TBL(dic, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "1");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "txt");
            pActuarialReport._IntAcc_TBL(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("InformationByBreak", "Break field2 value");
            dic.Add("iCol", "2");
            dic.Add("sData", "#BLANK");
            dic.Add("sFieldType", "txt");
            pActuarialReport._IntAcc_TBL(dic, true);



            pActuarialReport._SelectTab("Sensitivity Results");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("ValuationNode", "InterestSensitivity Null +0.5%");
            dic.Add("Rate", "");
            pActuarialReport._SensitivityResults(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "2");
            dic.Add("ValuationNode", "InterestSensitivity Null -0.5%");
            pActuarialReport._SensitivityResults(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "3");
            dic.Add("ValuationNode", "Using IntAcc Tab Value");
            pActuarialReport._SensitivityResults(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "4");
            dic.Add("ValuationNode", "Using IntAcc Tab Value");
            pActuarialReport._SensitivityResults(dic);


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "687");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "Run");
            dic.Add("MenuItem_2", "Actuarial Report");
            pMain._FlowTreeRightSelect(dic);

            _gLib._Wait(10);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "687");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);

            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, "IFRS", "RollForward", true, false, true);
            pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, "Jubilee", "RollForward", true, false, true);

            pMain._SelectTab("Output Manager");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Doer", "");
            dic.Add("Checker", "");
            dic.Add("Reviewer", "");
            dic.Add("Setup", "click");
            pOutputManager._PopVerify_OutputManager(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "click");
            dic.Add("AddAll", "");
            dic.Add("Node", "");
            dic.Add("Add", "");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "V6.9 Enhancements");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null +0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null -0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 3.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 2.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "SubsidiaryCode");
            dic.Add("OK", "click");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #region collaspe all setup setting about all sub node


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "80");
            dic.Add("iPosY", "206");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Doer", "");
            dic.Add("Checker", "");
            dic.Add("Reviewer", "");
            dic.Add("Setup", "click");
            pOutputManager._PopVerify_OutputManager(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "click");
            dic.Add("AddAll", "");
            dic.Add("Node", "");
            dic.Add("Add", "");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "V6.9 Enhancements");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null +0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null -0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 3.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 2.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "SubsidiaryCode");
            dic.Add("OK", "click");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");


            dic.Clear();
            dic.Add("iPosX", "204");
            dic.Add("iPosY", "206");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Doer", "");
            dic.Add("Checker", "");
            dic.Add("Reviewer", "");
            dic.Add("Setup", "click");
            pOutputManager._PopVerify_OutputManager(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "click");
            dic.Add("AddAll", "");
            dic.Add("Node", "");
            dic.Add("Add", "");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "V6.9 Enhancements");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null +0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null -0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 3.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 2.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "SubsidiaryCode");
            dic.Add("OK", "click");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "342");
            dic.Add("iPosY", "206");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Doer", "");
            dic.Add("Checker", "");
            dic.Add("Reviewer", "");
            dic.Add("Setup", "click");
            pOutputManager._PopVerify_OutputManager(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "click");
            dic.Add("AddAll", "");
            dic.Add("Node", "");
            dic.Add("Add", "");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "V6.9 Enhancements");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null +0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null -0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 3.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 2.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "SubsidiaryCode");
            dic.Add("OK", "click");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "475");
            dic.Add("iPosY", "206");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Doer", "");
            dic.Add("Checker", "");
            dic.Add("Reviewer", "");
            dic.Add("Setup", "click");
            pOutputManager._PopVerify_OutputManager(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "click");
            dic.Add("AddAll", "");
            dic.Add("Node", "");
            dic.Add("Add", "");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "V6.9 Enhancements");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null +0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null -0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 3.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 2.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "SubsidiaryCode");
            dic.Add("OK", "click");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "607");
            dic.Add("iPosY", "206");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Doer", "");
            dic.Add("Checker", "");
            dic.Add("Reviewer", "");
            dic.Add("Setup", "click");
            pOutputManager._PopVerify_OutputManager(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "click");
            dic.Add("AddAll", "");
            dic.Add("Node", "");
            dic.Add("Add", "");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "V6.9 Enhancements");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null +0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null -0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 3.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 2.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "SubsidiaryCode");
            dic.Add("OK", "click");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "734");
            dic.Add("iPosY", "206");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Doer", "");
            dic.Add("Checker", "");
            dic.Add("Reviewer", "");
            dic.Add("Setup", "click");
            pOutputManager._PopVerify_OutputManager(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "click");
            dic.Add("AddAll", "");
            dic.Add("Node", "");
            dic.Add("Add", "");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "V6.9 Enhancements");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null +0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "InterestSensitivity Null -0.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 3.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "");
            dic.Add("OK", "");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RemoveAll", "");
            dic.Add("AddAll", "");
            dic.Add("Node", "PaySensitivity 2.5%");
            dic.Add("Add", "click");
            dic.Add("ShowSubtotalBreaks", "SubsidiaryCode");
            dic.Add("OK", "click");
            pOutputManager._PopVerify_OutputManagerSetup(dic);

            pMain._SelectTab("Output Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion


            pMain._SelectTab("Valuation 2012");

            dic.Clear();
            dic.Add("iPosX", "687");
            dic.Add("iPosY", "140");
            dic.Add("MenuItem_1", "View Output");
            pMain._FlowTreeRightSelect(dic);


            if (Config.bDownloadReports_EXCEL)
            {

                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, "Liability Scenario with Breaks", "RollForward", false, false);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, "Liability Scenario by Plan Def with Breaks", "RollForward", false, false);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, "Reconciliation to Baseline with Breaks", "RollForward", false, false);
                pOutputManager._ExportReport_SubReports(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, "Reconciliation to Baseline by Plan Def with Breaks", "RollForward", false, false);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, "Liabilities Detailed Results with Breaks", "RollForward", false, false);
                pOutputManager._ExportReport_Common(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, "Liabilities Detailed Results by Plan Def with Breaks", "RollForward", false, false);

                pOutputManager._ExportReport_DrillDown(Config.eCountry, sOutputPension_Valuation2011_Baseline, "Liability Set for Globe Export", "RollForward", false, false, 0, new string[3] { "Sub1Text", "Sub2Text","Sub3" });


                dic.Clear();
                dic.Add("Include", "true;true");
                dic.Add("DataRequestGroup", "FormerEastGermary;FormerWastGermary");
                dic.Add("Layout", "Data request layout default;Data request layout default");
                dic.Add("SelectionCriteria", "$emp.OstWestKZ=1;$emp.OstWestKZ<>1");
                dic.Add("UseReportBreak", "true");
                dic.Add("Process", "click");
                pOutputManager._Jubilee_DataRequest(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, dic);


                dic.Clear();
                dic.Add("Description", "test" + Environment.NewLine + "6" + Environment.NewLine + "sensi" + Environment.NewLine + "Nodes");
                dic.Add("ResultToBeIncluded_ResultType", "End of Year assumptions;Custom Demographic assumptions 1 +;"
                    + "Custom Demographic assumptions 1 -;Custom Financial assumptions 1 +;Custom Financial assumptions 1 -;"
                    + "Salary increase rate +;Salary increase rate -;");
                dic.Add("ResultToBeIncluded_ValuationNode", "V6.9 Enhancements;Mortality *1,135 ;Mortality *0,885 ;"
                    + "InterestSensitivity Null +0.5%;InterestSensitivity Null -0.5%;PaySensitivity 3.5%;PaySensitivity 2.5%");
                dic.Add("ExportToExcel", "click");
                dic.Add("ExportToGlobe", "click");
                pOutputManager._Jubilee_GlobeExportWithBreaksAndMultipleNodes(Config.eCountry, sOutputJubilee_Valuation2012_V69Enhancements, dic);

            }

            thrd_Jubilee_Valuation2012_V69Enhancements.Start();


            _gLib._MsgBox("", "wait and check");


            pMain._SelectTab("OutPut Manager");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            pMain._SelectTab("Valuation 2012");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            #endregion


            #region Data -  Valuation2013

            pMain._SelectTab("Home");

            dic.Clear();
            dic.Add("Country", Config.eCountry.ToString());
            dic.Add("Level_1", Config.sClientName);
            dic.Add("Level_2", Config.sPlanName);
            dic.Add("Level_3", "ParticipantData");
            pMain._HomeTreeViewSelect(0, dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "Click");
            dic.Add("ServiceToOpen", "");
            pMain._PopVerify_Home_RightPane(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "Valuation2013");
            dic.Add("EffectiveDate", "31.12.2013");
            dic.Add("Parent", "Valuation2012");
            dic.Add("RSC", "");
            dic.Add("Shared", "true");
            dic.Add("GeneralUse", "true");
            dic.Add("Conversion", "");
            dic.Add("CopyDataService", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_Home_DataServicePropeties(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation2013");
            dic.Add("CheckPopup", "False");
            pMain._PopVerify_Home_RightPane(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "New 2012 data PENS01");
            dic.Add("Level_4", "PENS02");
            dic.Add("MenuItem", "Remove file");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "New 2012 data PENS01");
            dic.Add("MenuItem", "Remove file");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "new CashBal plan 2012");
            dic.Add("MenuItem", "Remove file");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "new SupportFund");
            dic.Add("MenuItem", "Remove file");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Upload Data");
            pData._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\ImportAdminFields2013.xlsx");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Current View");
            pData._TreeViewSelect(dic);


            pData._CV_Initialize("Personal Information", "Administration", 1, 0, "StatusHST");

            pData._CV_ClickEdit("StatusHST", false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("R1C1", "2");
            dic.Add("R1C2", "10");
            dic.Add("R2C1", "7");
            dic.Add("R2C2", "20");
            dic.Add("R3C1", "13");
            dic.Add("R3C2", "54");
            dic.Add("R4C1", "14");
            dic.Add("R4C2", "50");
            dic.Add("R5C1", "18");
            dic.Add("R5C2", "70");
            dic.Add("R6C1", "19");
            dic.Add("R6C2", "80");
            dic.Add("R7C1", "20");
            dic.Add("R7C2", "91");
            dic.Add("OK", "Click");
            pData._PopVerify_CV_StatusUSCTable(dic);

            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "Admin fields Import 2013");
            dic.Add("FileType", "");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "ImportAdminFields2013.xlsx");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileType", "");
            dic.Add("Browse", "");
            dic.Add("Preview", "Click");
            pData._PopVerify_IP_SelectFile(dic);


            pData._SelectTab("Mapping");

            pData._IP_Mapping_Initialize("Personal Information", "Administration", 1, 0, 1, "StatusHST");


            pData._IP_Mapping_ClickEdit("StatusHST", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("R1C1", "Date1");
            dic.Add("R1C2", "Status1");
            dic.Add("R2C1", "Date2");
            dic.Add("R2C2", "Status2");
            dic.Add("R3C1", "Date3");
            dic.Add("R3C2", "Status3");
            dic.Add("R4C1", "Date4");
            dic.Add("R4C2", "Status4");
            dic.Add("OK", "click");
            pData._PopVerify_IP_Status_2Column(dic);


            pData._IP_Mapping_ClickEdit("EarnHST", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("R1C1", "Date1");
            dic.Add("R1C2", "Pay1");
            dic.Add("R1C3", "Pay1");
            dic.Add("R2C1", "Date2");
            dic.Add("R2C2", "Pay2");
            dic.Add("R2C3", "Pay2");
            dic.Add("R3C1", "Date3");
            dic.Add("R3C2", "Pay3");
            dic.Add("R3C3", "Pay3");
            dic.Add("R4C1", "Date4");
            dic.Add("R4C2", "Pay4");
            dic.Add("R4C3", "Pay4");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_Status_3Column(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CopyMappings", "");
            dic.Add("ClearMappings", "");
            dic.Add("Preview", "Click");
            pData._PopVerify_IP_Mapping(dic);

            pMain._Home_ToolbarClick_Top(true);


            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            dic.Add("WarehouseFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("RunCurrentStage", "click");
            dic.Add("RunAllStages", "");
            dic.Add("AcceptAllRecordsAs_What", "");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunCurrentStage_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Current stage run complete. All Unique Matches from this stage have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_UniqueMatch_Num", "0");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "74");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Matched_Num", "57");
            dic.Add("New_Num", "");
            dic.Add("Ignored_Num", "0");
            dic.Add("Gone_Num", "0");
            dic.Add("Leaver_Num", "0");
            dic.Add("Unmatched_Num", "0");
            dic.Add("Unmerged_Num", "0");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Matched_Num", "57");
            dic.Add("New_Num", "");
            dic.Add("Ignored_Num", "0");
            dic.Add("Gone_Num", "0");
            dic.Add("Leaver_Num", "0");
            dic.Add("Unmatched_Num", "74");
            dic.Add("Unmerged_Num", "0");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Upload Data");
            pData._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\AdminFieldscorrectionImport.xlsx");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "AdminFieldscorrectionImport");
            dic.Add("FileType", "");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "AdminFieldscorrectionImport.xlsx");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "");
            dic.Add("FileType", "");
            dic.Add("Browse", "");
            dic.Add("Preview", "Click");
            pData._PopVerify_IP_SelectFile(dic);


            pData._SelectTab("Mapping");

            pData._IP_Mapping_Initialize("Personal Information", "Administration", 1, 0, 1, "StatusHST");

            pData._IP_Mapping_ClickEdit("StatusHST", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("R1C1", "Date3");
            dic.Add("R1C2", "Status3");
            dic.Add("R2C1", "Date4");
            dic.Add("R2C2", "Status4");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_Status_2Column(dic);


            pData._IP_Mapping_ClickEdit("EarnHST", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("R1C1", "Date3");
            dic.Add("R1C2", "Pay3");
            dic.Add("R1C3", "Pay3");
            dic.Add("R2C1", "Date4");
            dic.Add("R2C2", "Pay4");
            dic.Add("R2C3", "Pay4");
            dic.Add("OK", "click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_Status_3Column(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("CopyMappings", "");
            dic.Add("ClearMappings", "");
            dic.Add("Preview", "Click");
            pData._PopVerify_IP_Mapping(dic);


            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("CorrectionImportForAdmin", "true");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);


            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ImportFilter", "");
            dic.Add("WarehouseFilter", "=EmployeeIDNumber<300");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "2");
            dic.Add("Unique_UniqueMatch_Num", "55");
            dic.Add("Unique_MultipleMatches_Num", "");
            dic.Add("Duplicate_NoMatch_Num", "");
            dic.Add("Duplicate_UniqueMatch_Num", "");
            dic.Add("Duplicate_MultipleMatches_Num", "");
            dic.Add("Warehouse_NoMatch_Num", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "Click");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "Matched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "All 'UniqueUniqueMatch' records have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("MatchManually", "Click");
            dic.Add("FindMatches", "");
            pData._PopVerify_IP_Matching(dic);

            dic.Clear();
            dic.Add("sDataFileRecords", "2012003");
            dic.Add("sWarehouseRecords", "");
            dic.Add("bExactMatch", "");
            dic.Add("iMaxSeachNum", "");
            dic.Add("AcceptSelectedDataFile_AsIgnore", "click");
            dic.Add("Close", "");
            pData._IP_MatchManually(dic);

            dic.Clear();
            dic.Add("sDataFileRecords", "2012004");
            dic.Add("sWarehouseRecords", "");
            dic.Add("bExactMatch", "");
            dic.Add("iMaxSeachNum", "");
            dic.Add("AcceptSelectedDataFile_AsNew", "");
            dic.Add("AcceptSelectedDataFile_AsIgnore", "click");
            dic.Add("Close", "click");
            pData._IP_MatchManually(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Upload Data");
            pData._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\Importfile2013TabStopp.txt");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);




            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "Text file Tab Stopp Import");
            dic.Add("FileType", "Text file - Delimited");
            dic.Add("Browse", "");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);

            _gLib._MsgBox("", "Please Select <Tab> under Delimiter");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "Importfile2013TabStopp.txt");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Browse", "");
            dic.Add("Preview", "Click");
            pData._PopVerify_IP_SelectFile(dic);


            pData._SelectTab("Mapping");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Plug", "");
            dic.Add("Correction", "");
            dic.Add("NoFlag", "");
            dic.Add("Preview", "Click");
            dic.Add("Process", "");
            pData._PopVerify_SimpleImport(dic);


            pData._IP_Mapping_Initialize("Personal Information", "DB Information", 1, 0, 1, "MembershipDate1");
            pData._IP_Mapping_ClickEdit("Benefit1DB", true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Lookup", "");
            dic.Add("Standard", "True");
            dic.Add("OK", "");
            pData._PopVerify_IP_Mapping_Transformation(dic);

            pData._IP_Mapping_Transformation(2, 2, "Separator");
            pData._IP_Mapping_Transformation(3, 2, ",");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Lookup", "");
            dic.Add("Standard", "");
            dic.Add("OK", "click");
            pData._PopVerify_IP_Mapping_Transformation(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Plug", "");
            dic.Add("Correction", "");
            dic.Add("NoFlag", "");
            dic.Add("Preview", "Click");
            dic.Add("Process", "");
            pData._PopVerify_SimpleImport(dic);



            pData._SelectTab("Validate & Load");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Status", "");
            dic.Add("LoadBlankData", "");
            dic.Add("MatchingIsCaseSensitive", "");
            dic.Add("IgnoreGoneRecordsForMatching", "");
            dic.Add("ValidateData", "");
            dic.Add("LoadData", "");
            dic.Add("ValidateAndLoadData", "Click");
            pData._PopVerify_IP_ValidateAndLoad(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Data validate & load SUCCESS.");
            dic.Add("OK", "");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Message", "");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_ValidateAndLoad_Popup(dic);


            pData._SelectTab("Pre Matching Derivations");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "BBGKZ");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Classification Codes");
            dic.Add("Level_3", "SubsidiaryCode");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(SubsidiaryCode=\"Sub3\",1,0)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Batch Update");
            dic.Add("MenuItem", "Add new batch update");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("BatchUpdateName", "PreImportUSCUpdate");
            dic.Add("SelectFieldstoDisplay", "Click");
            dic.Add("StandardorCustomFilter_rd", "");
            dic.Add("StandardorCustomFilter_cbo", "");
            dic.Add("CustomExpression_rd", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("CustomExpression_Accept", "");
            dic.Add("Apply", "");
            dic.Add("Plug", "");
            dic.Add("Correction", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_BatchUpdate(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "USC");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardorCustomFilter_rd", "");
            dic.Add("StandardorCustomFilter_cbo", "");
            dic.Add("CustomExpression_rd", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("CustomExpression_Accept", "");
            dic.Add("Apply", "click");
            dic.Add("Plug", "");
            dic.Add("Correction", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_BatchUpdate(dic);


            pData._BU_FPGrid("14", 3, "20", 4, "Vested");
            pData._BU_FPGrid("15", 3, "20", 4, "Vested");


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardorCustomFilter_rd", "");
            dic.Add("StandardorCustomFilter_cbo", "");
            dic.Add("CustomExpression_rd", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("CustomExpression_Accept", "");
            dic.Add("Apply", "");
            dic.Add("Plug", "");
            dic.Add("Correction", "click");
            dic.Add("SaveToWarehouse", "click");
            pData._PopVerify_BatchUpdate(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Imports");
            dic.Add("Level_3", "Text file Tab Stopp Import");
            pData._TreeViewSelect(dic);


            pData._SelectTab("Matching");

            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WarehouseFilter", "=USC_P=10");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "35");
            dic.Add("Unique_UniqueMatch_Num", "44");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "Click");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "Matched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Matched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "All 'UniqueUniqueMatch' records have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);




            dic.Clear();
            dic.Add("Field", "EmployeeIDNumber");
            dic.Add("Include", "True");
            dic.Add("ImportFormulaOverride", "");
            dic.Add("WarehouseFormulaOverride", "");
            pData._IP_Matching_FPSpread(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("WarehouseFilter", "=USC_P>10");
            dic.Add("MatchManually", "");
            dic.Add("FindMatches", "Click");
            pData._PopVerify_IP_Matching(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Unique_NoMatch_Num", "");
            dic.Add("Unique_UniqueMatch_Num", "35");
            dic.Add("Unique_MultipleMatches_Num", "0");
            dic.Add("Duplicate_NoMatch_Num", "0");
            dic.Add("Duplicate_UniqueMatch_Num", "0");
            dic.Add("Duplicate_MultipleMatches_Num", "0");
            dic.Add("Warehouse_NoMatch_Num", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "Click");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "");
            dic.Add("AcceptAllRecordsAs_What", "Matched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Matched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "All 'UniqueUniqueMatch' records have been accepted");
            dic.Add("OK", "");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Unique_NoMatch", "");
            dic.Add("Unique_UniqueMatch", "");
            dic.Add("Unique_MultipleMatches", "");
            dic.Add("Duplicate_NoMatch", "");
            dic.Add("Duplicate_UniqueMatch", "");
            dic.Add("Duplicate_MultipleMatches", "");
            dic.Add("Warehouse_NoMatch", "Click");
            dic.Add("AcceptAllRecordsAs_What", "Unmatched");
            dic.Add("AcceptSelectedRecordsAs_What", "");
            pData._PopVerify_IP_Matching_MatchingResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Are you sure that you want to accept all records with a status of Unmatched");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ConfirmAcceptRecods_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_RunResults_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("RefreshResults", "");
            dic.Add("UnacceptAllRecords", "");
            dic.Add("UnacceptSelectedRecords", "");
            dic.Add("SaveToWarehouse", "Click");
            dic.Add("MergeDuplicates", "");
            pData._PopVerify_IP_Matching_AcceptedResultsSummary(dic);

            dic.Clear();
            dic.Add("PopVerify", "Verify");
            dic.Add("Message", "Once the matching results have been processed, all the Import parameters for this file will become read-only. Do you wish to proceed?");
            dic.Add("Yes", "");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            dic.Add("No", "");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsConfirm_Popup(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_IP_Matching_ProcessMatchingResultsComplete_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Upload Data");
            pData._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "Click");
            dic.Add("Upload", "");
            pData._PopVerify_UploadData(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", @"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\SimpleImport_SVSocSecEndDate_ä_ö_ü_ß.xlsx");
            dic.Add("Open", "Click");
            dic.Add("Cancel", "");
            pMain._PopVerify_FileOpen(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("LocalFile", "");
            dic.Add("GRSUnloadFile", "");
            dic.Add("SharepointFile", "");
            dic.Add("Browse", "");
            dic.Add("Upload", "Click");
            pData._PopVerify_UploadData(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Simple Imports");
            dic.Add("MenuItem", "Add new file");
            pData._TreeViewRightSelect(dic);


            pData._SelectTab("Select File");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileDefinitionName", "SpecialCharacterImportFileName");
            dic.Add("Browse", "Click");
            dic.Add("Preview", "");
            pData._PopVerify_IP_SelectFile(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("FileName", "SimpleImport_SVSocSecEndDate_ä_ö_ü_ß.xlsx");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._PopVerify_IP_SelectFile_FileSelection(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Plug", "");
            dic.Add("Correction", "");
            dic.Add("NoFlag", "");
            dic.Add("Preview", "Click");
            dic.Add("Process", "Click");
            pData._PopVerify_SimpleImport(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("Level_3", "VO DECO01");
            dic.Add("MenuItem", "Remove Derivation Group");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("Level_3", "VO JUBI02");
            dic.Add("MenuItem", "Remove Derivation Group");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Yes", "Click");
            pData._PopVerify_BU_DeleteBatchUpdate_Popup(dic);

            pMain._Home_ToolbarClick_Top(true);


            pMain._SelectTab("Valuation2013");


            string sWTH_GRS_Low_Male = "";
            _gLib._KillProcessByName("EXCEL");
            MyExcel _excelRead = new MyExcel(@"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\DataTabel_Factor1.xlsx", false);
            _excelRead.OpenExcelFile(1);
            for (int i = 2; i <= 107; i++)
                sWTH_GRS_Low_Male = sWTH_GRS_Low_Male + _excelRead.getOneCellValue(i, 2) + Environment.NewLine;
            _excelRead.SaveExcel();
            _excelRead.CloseExcelApplication();

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "DataTableFactor1");
            dic.Add("Type", "General");
            dic.Add("Description", "");
            dic.Add("Ultimate", "Click");
            dic.Add("SelectAndUltimate", "");
            dic.Add("SelectPeriods", "");
            dic.Add("Generational", "");
            dic.Add("TwoDimensional", "");
            dic.Add("Index1_Index", "Age");
            dic.Add("Index1_From", "15");
            dic.Add("Index1_To", "120");
            dic.Add("Index2", "");
            dic.Add("From2", "");
            dic.Add("To2", "");
            dic.Add("Extend", "true");
            dic.Add("Zero", "");
            dic.Add("SameRatesUsed", "false");
            dic.Add("DecimalPlaces", "6");
            dic.Add("OK", "Click");
            dic.Add("sUnisexRates", "");
            dic.Add("sMaleRates", sWTH_GRS_Low_Male);
            dic.Add("sFemaleRates", sWTH_GRS_Low_Male);
            pMain._ts_AddTable(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._SelectTab("Valuation2013");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation2013");
            pMain._PopVerify_Home_RightPane(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Current View");
            pData._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Category", "Custom Fields");
            dic.Add("Label", "Factor1");
            dic.Add("DisplayName", "");
            dic.Add("VariesbyVO", "true");
            dic.Add("HistoryLabels", "");
            dic.Add("Monthly", "");
            dic.Add("Yearly", "");
            dic.Add("WarehouseFieldType", "Decimal");
            dic.Add("FieldLength", "13");
            dic.Add("DecimalPlaces", "8");
            dic.Add("FromDate", "");
            dic.Add("OK", "Click");
            dic.Add("Cancel", "");
            pData._CV_AddSingleLabel(dic, false);


            pMain._SelectTab("Valuation2013");

            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("MenuItem", "Add new derivation group");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "Table imports");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "click");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            pData._CV_AddMultipleLabels(@"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\DG_WorkFields.xlsx", false);


            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "AgeWorkfield");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "BirthDate");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=2013-YEAR(BirthDate_C)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Factor1_DECO01");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Gender");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Work Fields");
            dic.Add("Level_3", "AgeWorkfield");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("iCol", "5");
            dic.Add("sData", "");
            dic.Add("sFormula", "=Table(");
            dic.Add("sRange", "");
            dic.Add("bTable", "true");
            pData._DG_DerivationDefinition_Grid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ActuarialTable", "DataTableFactor1");
            dic.Add("Index1_V", "click");
            dic.Add("Index1_C", "");
            dic.Add("Index2_V", "");
            dic.Add("Index2_C", "");
            dic.Add("Index1_cbo", "AgeWorkfield_C");
            dic.Add("Index1_txt", "");
            dic.Add("Index2_cbo", "");
            dic.Add("Index2_txt", "");
            dic.Add("Gender", "Gender_C");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_ActuarialTableFunctionDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("CustomExpression_Accept", "click");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "3");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Factor1_CashBal01");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "BirthDate");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Gender");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Work Fields");
            dic.Add("Level_3", "AgeWorkfield");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("iCol", "5");
            dic.Add("sData", "");
            dic.Add("sFormula", "=Table(");
            dic.Add("sRange", "");
            dic.Add("bTable", "true");
            pData._DG_DerivationDefinition_Grid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ActuarialTable", "DisabledDeath_HB05QIX");
            dic.Add("Index1_V", "click");
            dic.Add("Index1_C", "");
            dic.Add("Index2_V", "click");
            dic.Add("Index2_C", "");
            dic.Add("Index1_cbo", "AgeWorkfield_C");
            dic.Add("Index1_txt", "");
            dic.Add("Index2_cbo", "BirthDate_C");
            dic.Add("Index2_txt", "");
            dic.Add("Gender", "Gender_C");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_ActuarialTableFunctionDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Previous", "");
            dic.Add("CustomExpression_Accept", "click");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);


            pMain._SelectTab("Valuation2013");

            string DataTableFactor2_Table = "";
            _gLib._KillProcessByName("EXCEL");
            MyExcel DataTableFactor2_E = new MyExcel(@"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\DataTabel_Factor2.xlsx", false);
            DataTableFactor2_E.OpenExcelFile(1);
            for (int i = 2; i <= 22; i++)
                DataTableFactor2_Table = DataTableFactor2_Table + DataTableFactor2_E.getOneCellValue(i, 1) + "\t" + DataTableFactor2_E.getOneCellValue(i, 2) + Environment.NewLine;
            DataTableFactor2_E.SaveExcel();
            DataTableFactor2_E.CloseExcelApplication();

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "DataTableFactor2");
            dic.Add("Type", "General");
            dic.Add("Description", "");
            dic.Add("Ultimate", "true");
            dic.Add("SelectAndUltimate", "");
            dic.Add("SelectPeriods", "");
            dic.Add("Generational", "");
            dic.Add("TwoDimensional", "");
            dic.Add("Index1_Index", "Pay Range");
            dic.Add("Index1_From", "");
            dic.Add("Index1_To", "20");
            dic.Add("Index2", "");
            dic.Add("From2", "");
            dic.Add("To2", "");
            dic.Add("Extend", "true");
            dic.Add("Zero", "");
            dic.Add("SameRatesUsed", "true");
            dic.Add("DecimalPlaces", "6");
            dic.Add("OK", "Click");
            dic.Add("sUnisexRates", DataTableFactor2_Table);
            dic.Add("sMaleRates", "");
            dic.Add("sFemaleRates", "");
            pMain._ts_AddTable(dic);

            pMain._Home_ToolbarClick_Top(true);

            pMain._SelectTab("Valuation2013");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation2013");
            pMain._PopVerify_Home_RightPane(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("Level_3", "Table imports");
            pData._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "4");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Factor1_SF01");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1PriorYear1");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1PriorYear2");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("iCol", "5");
            dic.Add("sData", "");
            dic.Add("sFormula", "=Table(");
            dic.Add("sRange", "");
            dic.Add("bTable", "true");
            pData._DG_DerivationDefinition_Grid(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ActuarialTable", "DataTableFactor2");
            dic.Add("Index1_V", "click");
            dic.Add("Index1_C", "");
            dic.Add("Index2_V", "");
            dic.Add("Index2_C", "");
            dic.Add("Index1_cbo", "Pay1CurrentYear_P");
            dic.Add("Index1_txt", "");
            dic.Add("Index2_cbo", "");
            dic.Add("Index2_txt", "");
            dic.Add("Gender", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_ActuarialTableFunctionDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("CustomExpression_Accept", "click");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);


            pMain._SelectTab("Valuation2013");

            dic.Clear();
            dic.Add("MenuItem_1", "File");
            dic.Add("MenuItem_2", "Table Manager");
            pMain._MenuSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "DataTableFactor3_Copy");
            dic.Add("Type", "General");
            dic.Add("Description", "");
            dic.Add("Ultimate", "");
            dic.Add("SelectAndUltimate", "");
            dic.Add("SelectPeriods", "");
            dic.Add("Generational", "");
            dic.Add("TwoDimensional", "true");
            dic.Add("Index1", "");
            dic.Add("From1", "15");
            dic.Add("To1", "120");
            dic.Add("Index2", "Pay Range");
            dic.Add("From2", "");
            dic.Add("To2", "20");
            dic.Add("Extend", "");
            dic.Add("Zero", "");
            dic.Add("SameRatesUsed", "false");
            dic.Add("Format", "");
            dic.Add("DecimalPlaces", "6");
            dic.Add("Use1000Separator", "");
            pTableManager._ts_AddTable(dic);


            _gLib._KillProcessByName("EXCEL");
            MyExcel DataTableFactor3_E = new MyExcel(@"\\mercer.com\US_Data\Shared\Dfl\Data1\RSS\SQA\RETIRE_STUDIO_BENCHMARK_CLIENTS_2\QTP_MasterExecution\QDrive\AUTs\RetirementStudio\DataFile\DE010\DataTabel_Factor3.xlsx ", false);
            DataTableFactor3_E.OpenExcelFile(1);

            int iTotalRow = DataTableFactor3_E.getTotalRowCount();
            int iTotalCol = DataTableFactor3_E.getTotalColumnCount();
            string sContents = "";
            for (int i = 2; i <= iTotalRow; i++)
            {
                string sRow = "";
                for (int j = 3; j <= iTotalCol; j++)
                    sRow = sRow + DataTableFactor3_E.getOneCellValue(i, j - 1) + "\t";
                sContents = sContents + sRow + DataTableFactor3_E.getOneCellValue(i, iTotalCol) + Environment.NewLine;
            }
            DataTableFactor3_E.SaveExcel();
            DataTableFactor3_E.CloseExcelApplication();

            pTableManager._SelectTab("Male Rates");
            pTableManager._ts_PasteValue(sContents);

            pTableManager._SelectTab("Female Rates");
            pTableManager._ts_PasteValue(sContents);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            pMain._SelectTab("Valuation2013");
            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation2013");
            pMain._PopVerify_Home_RightPane(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("Level_3", "(6)Table imports");
            pData._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "5");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Factor1_SF01");
            dic.Add("DerivedField_SearchFromIndex", "");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "BirthDate");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Gender");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Work Fields");
            dic.Add("Level_3", "AgeWorkfield");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Custom Fields");
            dic.Add("Level_3", "Factor1_VOParent");
            dic.Add("Level_4", "Factor1_SF01");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("iRow", "1");
            dic.Add("iCol", "5");
            dic.Add("sData", "");
            dic.Add("sFormula", "=Factor1_SF01_C+Table(");
            dic.Add("sRange", "");
            dic.Add("bTable", "true");
            pData._DG_DerivationDefinition_Grid(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("ActuarialTable", "DataTableFactor3");
            dic.Add("Index1_V", "click");
            dic.Add("Index1_C", "");
            dic.Add("Index2_V", "click");
            dic.Add("Index2_C", "");
            dic.Add("Index1_cbo", "AgeWorkfield_C");
            dic.Add("Index1_txt", "");
            dic.Add("Index2_cbo", "Pay1CurrentYear_P");
            dic.Add("Index2_txt", "");
            dic.Add("Gender", "Gender_C");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_ActuarialTableFunctionDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Previous", "");
            dic.Add("CustomExpression_Accept", "click");
            dic.Add("Next", "");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);


            pMain._SelectTab("Valuation2013");


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("MenuItem", "Add new derivation group");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "Salary and Status setting");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Pay1CurrentYear");
            dic.Add("Type", "Extract");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "Active Member");
            dic.Add("Filter_TrueFalse", "true");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("ClientFieldValue", "0.0");
            dic.Add("AdminField", "EarnHST");
            dic.Add("Value", "AMT");
            dic.Add("Date_V", "");
            dic.Add("Date_D", "click");
            dic.Add("Date_cbo_V", "");
            dic.Add("Date_txt_D", "30.06.2013");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition_Extract(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "USC");
            dic.Add("Type", "Extract");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("ClientFieldValue", "70");
            dic.Add("AdminField", "StatusHST");
            dic.Add("Value", "USC");
            dic.Add("Date_V", "click");
            dic.Add("Date_D", "");
            dic.Add("Date_cbo_V", "EffectiveDate");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition_Extract(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "3");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "USC");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "USC");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "USC");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(ISBLANK(USC_C),USC_P, USC_C)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "4");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Pay1CurrentYear");
            dic.Add("Type", "Extract");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "Deferred Member");
            dic.Add("Filter_TrueFalse", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("ClientFieldValue", "0.0");
            dic.Add("AdminField", "EarnHST");
            dic.Add("Value", "AMT");
            dic.Add("Date_V", "");
            dic.Add("Date_D", "click");
            dic.Add("Date_cbo_V", "");
            dic.Add("Date_txt_D", "31.12.2012");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition_Extract(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "5");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "SVSalaryCurrentYear");
            dic.Add("Type", "Extract");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("ClientFieldValue", "0.0");
            dic.Add("AdminField", "EarnHST");
            dic.Add("Value", "AMT");
            dic.Add("Date_V", "click");
            dic.Add("Date_D", "");
            dic.Add("Date_cbo_V", "EffectiveDate");
            dic.Add("Date_txt_D", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition_Extract(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "6");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Pay1CurrentYear");
            dic.Add("Type", "Extract");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "Active Member");
            dic.Add("Filter_TrueFalse", "true");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("ClientFieldValue", "0.0");
            dic.Add("AdminField", "EarnHST");
            dic.Add("Value", "AMT");
            dic.Add("Date_V", "");
            dic.Add("Date_D", "click");
            dic.Add("Date_cbo_V", "");
            dic.Add("Date_txt_D", "08.12.2014");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition_Extract(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "7");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "JubiSalaryCurrentYear");
            dic.Add("Type", "Extract");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "Active and Deferred Members");
            dic.Add("Filter_TrueFalse", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("ClientFieldValue", "0.0");
            dic.Add("AdminField", "EarnHST");
            dic.Add("Value", "AMT");
            dic.Add("Date_V", "");
            dic.Add("Date_D", "click");
            dic.Add("Date_cbo_V", "");
            dic.Add("Date_txt_D", "01.10.2013");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "click");
            pData._PopVerify_DG_DerivationDefinition_Extract(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Derivation Groups");
            dic.Add("MenuItem", "Add new derivation group");
            pData._TreeViewRightSelect(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "Calculations");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "1");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "YearsCertain1");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "BirthDate");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=ROUND(DATEDIF(BirthDate_C,DATE(2013,12,31),\"m\")/12,0)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "2");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "Pay1CurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1CurrentYear");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1PriorYear1");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "Pay1");
            dic.Add("Level_5", "Pay1PriorYear1");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(Pay1CurrentYear_C=0, Pay1CurrentYear_P,Pay1CurrentYear_C)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "3");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "JubiSalaryCurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "JubiSalary");
            dic.Add("Level_5", "JubiSalaryCurrentYear");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "JubiSalary");
            dic.Add("Level_5", "JubiSalaryCurrentYear");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "JubiSalary");
            dic.Add("Level_5", "JubiSalaryPriorYear1");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "JubiSalary");
            dic.Add("Level_5", "JubiSalaryPriorYear2");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(JubiSalaryCurrentYear_C=0, JubiSalaryCurrentYear_P,JubiSalaryCurrentYear_C)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "Click");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("CalculateAndPreview", "");
            dic.Add("SaveToWarehouse", "");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("iRow", "4");
            dic.Add("Apply", "");
            dic.Add("DerivedField", "SVSalaryCurrentYear");
            dic.Add("DerivedField_SearchFromIndex", "1");
            dic.Add("Type", "");
            dic.Add("Edit", "Click");
            pData._DG_DerivationGrid(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "SVSalary");
            dic.Add("Level_5", "SVSalaryCurrentYear");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "SVSalary");
            dic.Add("Level_5", "SVSalaryCurrentYear");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "SVSalary");
            dic.Add("Level_5", "SVSalaryPriorYear1");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, false);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Personal Information");
            dic.Add("Level_3", "Pay");
            dic.Add("Level_4", "SVSalary");
            dic.Add("Level_5", "SVSalaryPriorYear2");
            pData._TreeViewSelect_SelectInputFields_PriorView(dic, true, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=IF(SVSalaryCurrentYear_C=0, SVSalaryCurrentYear_P,SVSalaryCurrentYear_C)");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("DerivationGroupName", "");
            dic.Add("Filter", "");
            dic.Add("MoveUp", "");
            dic.Add("MoveDown", "");
            dic.Add("Add", "");
            dic.Add("Insert", "");
            dic.Add("Delete", "");
            dic.Add("AddWorkFields", "");
            dic.Add("SelectFieldsForPreview", "");
            dic.Add("CalculateAndPreview", "Click");
            dic.Add("SaveToWarehouse", "Click");
            pData._PopVerify_DerivationGroups(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_SaveDerivedValuesToWarehouse_Popup(dic);



            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Checks");
            pData._TreeViewSelect(dic);


            dic.Clear();
            dic.Add("CheckName", "Custom Checks");
            dic.Add("iSearchDownNum", "");
            dic.Add("Include", "true");
            dic.Add("ViewCheck", "");
            dic.Add("Filter", "");
            dic.Add("EditFilter", "");
            dic.Add("#Failed", "");
            dic.Add("#Passed", "");
            dic.Add("#Error", "");
            dic.Add("#NA", "");
            dic.Add("LabelsToDisplay", "");
            dic.Add("QueryInstructions", "");
            dic.Add("CorrectFields", "");
            pData._CK_CheckGrip(dic, true, false, false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardInputs", "");
            dic.Add("AddCustomGroup", "");
            dic.Add("AddCheck", "Click");
            dic.Add("ApplyChecks", "");
            dic.Add("ClearAllResults", "");
            dic.Add("AllQuery", "");
            dic.Add("AllPlug", "");
            dic.Add("AllOK", "");
            dic.Add("Notes", "");
            pData._PopVerify_Checks(dic);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "Factor1Check");
            dic.Add("SelectInputFields", "Click");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("OK", "");
            pData._PopVerify_DG_DerivationDefinition(dic);


            dic.Clear();
            dic.Add("Level_1", "Include all");
            dic.Add("Level_2", "Custom Fields");
            dic.Add("Level_3", "Factor1_VOParent");
            dic.Add("Level_4", "Factor1_CashBal01");
            pData._TreeViewSelect_SelectInputFields_CurrentView(dic, true, true);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=Factor1_CashBal01_C>0.05");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);



            dic.Clear();
            dic.Add("CheckName", "Factor1Check");
            dic.Add("iSearchDownNum", "");
            dic.Add("Include", "");
            dic.Add("ViewCheck", "click");
            dic.Add("Filter", "");
            dic.Add("EditFilter", "");
            dic.Add("#Failed", "");
            dic.Add("#Passed", "");
            dic.Add("#Error", "");
            dic.Add("#NA", "");
            dic.Add("LabelsToDisplay", "");
            dic.Add("QueryInstructions", "");
            dic.Add("CorrectFields", "");
            pData._CK_CheckGrip(dic, true, false, false);

            _gLib._MsgBox("", "pls click <ViewCheck> behind <Factor1Check>");

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Name", "");
            dic.Add("SelectInputFields", "");
            dic.Add("StandardorCustomFilter", "");
            dic.Add("Filter", "");
            dic.Add("CustomExpression", "");
            dic.Add("CustomExpression_Formula", "");
            dic.Add("Formula", "=Factor1_CashBal01_C>0.04");
            dic.Add("Previous", "");
            dic.Add("Next", "");
            dic.Add("OK", "Click");
            pData._PopVerify_DG_DerivationDefinition(dic);

            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);




            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("AddServiceInstance", "");
            dic.Add("ServiceToOpen", "Valuation2013");
            pMain._PopVerify_Home_RightPane(dic);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Checks");
            pData._TreeViewSelect(dic);

            dic.Clear();
            dic.Add("CheckName", "Factor1Check");
            dic.Add("iSearchDownNum", "");
            dic.Add("Include", "");
            dic.Add("ViewCheck", "");
            dic.Add("Filter", "");
            dic.Add("EditFilter", "");
            dic.Add("#Failed", "");
            dic.Add("#Passed", "");
            dic.Add("#Error", "");
            dic.Add("#NA", "");
            dic.Add("LabelsToDisplay", "");
            dic.Add("QueryInstructions", "");
            dic.Add("CorrectFields", "");
            pData._CK_CheckGrip(dic, true, false, false);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("StandardInputs", "");
            dic.Add("AddCustomGroup", "");
            dic.Add("AddCheck", "");
            dic.Add("ApplyChecks", "Click");
            dic.Add("ClearAllResults", "");
            dic.Add("AllQuery", "");
            dic.Add("AllPlug", "");
            dic.Add("AllOK", "");
            dic.Add("Notes", "");
            pData._PopVerify_Checks(dic);



            dic.Clear();
            dic.Add("CheckName", "Factor1Check");
            dic.Add("iSearchDownNum", "");
            dic.Add("Include", "");
            dic.Add("ViewCheck", "");
            dic.Add("Filter", "");
            dic.Add("EditFilter", "");
            dic.Add("#Failed", "");
            dic.Add("#Passed", "128");
            dic.Add("#Error", "");
            dic.Add("#NA", "");
            dic.Add("LabelsToDisplay", "");
            dic.Add("QueryInstructions", "");
            dic.Add("CorrectFields", "");
            pData._CK_CheckGrip(dic, true, false, false);

            _gLib._MsgBox("", "check if #Passed number is 126,  and #Failed number is 5");

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Snapshots");
            dic.Add("Level_3", "2012 Snapshot");
            dic.Add("MenuItem", "Remove snapshot");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Snapshots");
            dic.Add("Level_3", "2012 Jubilee Snapshot");
            dic.Add("MenuItem", "Remove snapshot");
            pData._TreeViewRightSelect(dic);

            pMain._Home_ToolbarClick_Top(true);


            dic.Clear();
            dic.Add("Level_1", "Valuation2013");
            dic.Add("Level_2", "Snapshots");
            dic.Add("MenuItem", "Add new snapshot");
            pData._TreeViewRightSelect(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("SnapshotName", "2013 Snapshot all fields");
            dic.Add("UseLatestDate", "true");
            dic.Add("Preview", "");
            dic.Add("PublishSnapshot", "");
            dic.Add("CreateExtract", "");
            pData._PopVerify_Snapshots(dic);

            dic.Clear();
            dic.Add("Level_1", "Include all");
            pData._TreeViewSelect_Snapshots(dic, true);


            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Preview", "click");
            dic.Add("PublishSnapshot", "click");
            dic.Add("CreateExtract", "");
            pData._PopVerify_Snapshots(dic);

            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("OK", "click");
            pData._PopVerify_SP_Snapshots_Popup(dic);



            dic.Clear();
            dic.Add("PopVerify", "Pop");
            dic.Add("Preview", "");
            dic.Add("PublishSnapshot", "");
            dic.Add("CreateExtract", "click");
            pData._PopVerify_Snapshots(dic);

            pData._ts_SP_CreateExtract(sOutput_Data2013 + "2013 Snapshot all fields.xlsx");

            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutput_Data2013, sOutput_Data2013_Prod);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sData2013");
                _compareReportsLib.CompareExcel_Exact("2013 Snapshot all fields.xlsx", 10, 0, 0, 0, true);
            }


            pMain._Home_ToolbarClick_Top(true);
            pMain._Home_ToolbarClick_Top(false);



            #endregion


            _gLib._MsgBox("!", "DE010 is done ! Please manually compare Actuarial Report");

        }




        #region compare report function

        void t_CompareRpt_Pension_Conversion2010(string sOutputPension_Conversion2010)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputPension_Conversion2010_Prod, sOutputPension_Conversion2010);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sConversion2010");
                _compareReportsLib.CompareExcel_Exact("LiabilitySummary.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ConversionDiagnostic.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResults.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResultsbyPlanDef.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_ALL.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Pension_Valuation2011_Baseline(string sOutputPension_Valuation2011_Baseline)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputPension_Valuation2011_Baseline_Prod, sOutputPension_Valuation2011_Baseline);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sPension_Valuation2011_Baseline");
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResults.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResultsbyPlanDef.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("StatusReconciliation.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_MovementAndRollforward_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_OutlierSummary_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_CheckingGroupStatistics_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_MovementAndRollforward_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_OutlierSummary_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_CheckingGroupStatistics_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_MovementAndRollforward_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_OutlierSummary_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_CheckingGroupStatistics_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_ALL.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPayouts_2011.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPopulationProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_ALL.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Pension_Valuation2011_ConstantNumberOfPlanMembers(string sOutputPension_Valuation2011_ConstantNumberOfPlanMembers)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputPension_Valuation2011_ConstantNumberOfPlanMembers_Prod, sOutputPension_Valuation2011_ConstantNumberOfPlanMembers);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputPension_Valuation2011_ConstantNumberOfPlanMembers_FVonly");
                //////////_compareReportsLib.CompareExcel_Exact("ValuationSummary_ALL.xlsx", 11, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_ALL.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Tax.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Trade.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                ////////////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_ALL.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResults.xlsx", 11, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResultsByPlanDef.xlsx", 11, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilityScenario_Tax.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilityScenario_Trade.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilityScenario_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilityScenario_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                //////////_compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPayouts_2011.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_ALL.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }

        }

        void t_CompareRpt_Pension_Valuation2011_IndividualBeneficiaryMethod(string sOutputPension_Valuation2011_IndividualBeneficiaryMethod)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputPension_Valuation2011_IndividualBeneficiaryMethod_Prod, sOutputPension_Valuation2011_IndividualBeneficiaryMethod);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sPension_Valuation2011_IndividualBeneficiaryMethod");
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_ALL.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResults.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResultsByPlanDef.xlsx", 11, 0, 0, 0);
                //////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPayouts_2011.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_ALL.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Pension_Valuation2011_MultiplePasses(string sOutputPension_Valuation2011_MultiplePasses)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputPension_Valuation2011_MultiplePasses_Prod, sOutputPension_Valuation2011_MultiplePasses);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputPension_Valuation2011_MultiplePasses");
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPayouts_2011.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_ALL.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }



        void t_CompareRpt_Pension_Valuation2012_Baseline(string sOutputPension_Valuation2012_Baseline)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputPension_Valuation2012_Baseline_Prod, sOutputPension_Valuation2012_Baseline);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputPension_Valuation2012_Baseline");
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResults.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResultsByPlanDef.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("StatusReconciliation.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub1_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub2_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_MovementAndRollForward_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_OutlierSummary_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_CheckingGroupStatistics_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_MovementAndRollForward_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_OutlierSummary_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_CheckingGroupStatistics_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_MovementAndRollForward_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_OutlierSummary_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_CheckingGroupStatistics_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_MovementAndRollForward_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_OutlierSummary_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_CheckingGroupStatistics_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_MovementAndRollForward_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_OutlierSummary_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_CheckingGroupStatistics_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub2_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub2_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_SF01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_SF01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPayouts_2012.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub1_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub2_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub1_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub2_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Pension_Valuation2012_MethodScreenChange(string sOutputPension_Valuation2012_MethodScreenChange)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputPension_Valuation2012_MethodScreenChange_Prod, sOutputPension_Valuation2012_MethodScreenChange);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputPension_Valuation2012_MethodScreenChange");
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_ALL.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResults.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResultsByPlanDef.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPayouts_2012.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_ALL.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Pension_Valuation2012_SecondMethodScreenChance(string sOutputPension_Valuation2012_SecondMethodScreenChance)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputPension_Valuation2012_SecondMethodScreenChance_Prod, sOutputPension_Valuation2012_SecondMethodScreenChance);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputPension_Valuation2012_SecondMethodScreenChance");
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub1_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub2_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub1_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub2_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FASExpectedBenefitPmts_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResults.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResultsByPlanDef.xlsx", 11, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_SF01.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_SF01.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                ////////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenario_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenario_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenario_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenario_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_PENS02.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_CashBal01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_SF01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub3_DECO01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub3_PENS01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPayouts_2012.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }



        void t_CompareRpt_Jubilee_Conversion2010(string sOutputJubilee_Conversion2010)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputJubilee_Conversion2010_Prod, sOutputJubilee_Conversion2010);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sJubilee_Conversion2010");
                _compareReportsLib.CompareExcel_Exact("LiabilitySummary.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ConversionDiagnostic.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResults.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResultsbyPlanDef.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_ALL.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Jubilee_Valuation2011_Baseline(string sOutputJubilee_Valuation2011_Baseline)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputJubilee_Valuation2011_Baseline_Prod, sOutputJubilee_Valuation2011_Baseline);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputJubilee_Valuation2011_Baseline");
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYear_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToPriorYearByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResults.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("DetailedResultsByPlanDef.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("StatusReconciliation.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("MemberStatistics_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_CheckingGroupStatistics_JUBI01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_MovementAndRollforward_JUBI01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_OutlierSummary_JUBI01.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_ALL.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPayouts_2011.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_ALL.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Jubilee_Valuation2011_ConstantNumberOfPlanMembers(string sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers_Prod, sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputJubilee_Valuation2011_ConstantNumberOfPlanMembers");
                _compareReportsLib.CompareExcel_Exact("ValuationSummary_ALL.xlsx", 11, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("PayoutProjection_ReportBreak.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaseline_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResults.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResultsByPlanDef.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenario_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenario_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenario_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenario_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenariobyPlanDef_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenariobyPlanDef_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenariobyPlanDef_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenariobyPlanDef_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationPayouts_2011.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyGroup_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationLiabilitiesbyYear_ALL.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }



        void t_CompareRpt_Jubilee_Valuation2012_Baseline(string sOutputJubilee_Valuation2012_Baseline)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputJubilee_Valuation2012_Baseline_Prod, sOutputJubilee_Valuation2012_Baseline);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputJubilee_Valuation2012_Baseline");
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_Group1.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_JUBI02_IntAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualCheckingTemplate_JUBI02_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_F.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_M.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_F.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_M.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_F.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_M.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Jubilee_Valuation2012_TradeEAN(string sOutputJubilee_Valuation2012_TradeEAN)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputJubilee_Valuation2012_TradeEAN_Prod, sOutputJubilee_Valuation2012_TradeEAN);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputJubilee_Valuation2012_TradeEAN");
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_F.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_M.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_F.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_M.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_F.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_M.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_F.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub1_M.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_F.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub2_M.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub3_F.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_Sub3_M.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Jubilee_Valuation2012_TradePUC(string sOutputJubilee_Valuation2012_TradePUC)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputJubilee_Valuation2012_TradePUC_Prod, sOutputJubilee_Valuation2012_TradePUC);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sOutputJubilee_Valuation2012_TradePUC");
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                ////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_ALL.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("FutureValuationSummary_ALL.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Jubilee_Valuation2012_V67Enhancements(string sOutputJubilee_Valuation2012_V67Enhancements)
        {
            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputJubilee_Valuation2012_V67Enhancements_Prod, sOutputJubilee_Valuation2012_V67Enhancements);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sJubileeValuation201_V67Enhancements");
                _compareReportsLib.CompareExcel_Exact("IndividualOutput.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResults.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResultsByPlanDef.xlsx", 4, 0, 0, 0);
                //////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_F.xlsx", 4, 0, 0, 0);
                //////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1_M.xlsx", 4, 0, 0, 0);
                //////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_F.xlsx", 4, 0, 0, 0);
                //////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2_M.xlsx", 4, 0, 0, 0);
                //////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_F.xlsx", 4, 0, 0, 0);
                //////////////////////_compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3_M.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        void t_CompareRpt_Jubilee_Valuation2012_V69Enhancements(string sOutputJubilee_Valuation2012_V69Enhancements)
        {

            if (Config.bCompareReports)
            {
                CompareReportsLib _compareReportsLib = new CompareReportsLib("DE010CN", sOutputJubilee_Valuation2012_V69Enhancements_Prod, sOutputJubilee_Valuation2012_V69Enhancements);
                _compareReportsLib._Report(_PassFailStep.Description, "", "sJubileeValuation2012_V69Enhancements");

                _compareReportsLib.CompareExcel_Exact("LiabilityScenariowithBreaks_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenariowithBreaks_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenariowithBreaks_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenariowithBreaks_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDefwithBreaks_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDefwithBreaks_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDefwithBreaks_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilityScenarioByPlanDefwithBreaks_IntlAccountingABO.xlsx", 4, 0, 0, 0);

                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselinewithBreaks_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselinewithBreaks_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselinewithBreaks_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselinewithBreaks_IntlAccountingABO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDefwithBreaks_Tax.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDefwithBreaks_Trade.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDefwithBreaks_IntlAccountingPBO.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("ReconciliationToBaselineByPlanDefwithBreaks_IntlAccountingABO.xlsx", 4, 0, 0, 0);

                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResultswithBreaks.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitiesDetailedResultsByPlanDefwithBreaks.xlsx", 4, 0, 0, 0);

                _compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub1Text.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub2Text.xlsx", 4, 0, 0, 0);
                _compareReportsLib.CompareExcel_Exact("LiabilitySetforGlobeExport_Sub3.xlsx", 4, 0, 0, 0);

                _compareReportsLib.CompareExcel_Exact("GlobeExportwithBreaksandMultipleNodesToExcel.xlsx", 4, 0, 0, 0);
                Config.bThreadFinsihed = true;
            }
        }

        #endregion


        #region Additional test attributes

        // You can use the following additional attributes as you write your tests:

        ////Use TestInitialize to run code before running each test 
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{        
        //    // To generate code for this test, select "Generate Code for Coded UI Test" from the shortcut menu and select one of the menu items.
        //    // For more information on generated code, see http://go.microsoft.com/fwlink/?LinkId=179463
        //}

        ////Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{        
        //    // To generate code for this test, select "Generate Code for Coded UI Test" from the shortcut menu and select one of the menu items.
        //    // For more information on generated code, see http://go.microsoft.com/fwlink/?LinkId=179463
        //}

        #endregion


        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        private TestContext testContextInstance;
    }
}